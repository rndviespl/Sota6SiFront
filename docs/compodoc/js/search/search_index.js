var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,1.794,1,2.312]],["body/components/AboutComponent.html",[0,1.81,1,2.693,2,1.84,3,0.079,4,0.066,5,1.417,6,1.417,7,1.417,8,1.417,9,0.066,10,1.417,11,1.417,12,2.315,13,3.387,14,2.99,15,2.99,16,2.043,17,3.295,18,3.733,19,3.457,20,3.457,21,3.457,22,3.457,23,3.457,24,2.934,25,3.457,26,3.457,27,3.457,28,2.934,29,3.457,30,2.043,31,1.67,32,2.043,33,2.727,34,0.079,35,0.108,36,1.705,37,3.896,38,2.59,39,2.259,40,3.457,41,2.456,42,0.842,43,2.727,44,3.99,45,3.99,46,0.792,47,1.67,48,4.005,49,1.507,50,2.727,51,0.842,52,0.025,53,1.158,54,0.129,55,0.27,56,2.727,57,0.943,58,1.67,59,1.417,60,1.067,61,2.671,62,1.67,63,1.67,64,1.089,65,1.089,66,2.315,67,1.67,68,2.727,69,1.67,70,1.156,71,3.457,72,2.315,73,1.67,74,0.697,75,1.417,76,1.417,77,1.417,78,1.67,79,2.315,80,0.402,81,1.127,82,2.59,83,3.504,84,1.127,85,1.417,86,1.277,87,1.127,88,1.417,89,1.417,90,1.417,91,1.67,92,1.67,93,1.67,94,1.67,95,1.67,96,1.67,97,1.127,98,1.67,99,2.727,100,2.315,101,1.417,102,0.079,103,0.428,104,1.67,105,1.67,106,1.67,107,4.408,108,4.005,109,4.719,110,5.193,111,4.719,112,4.719,113,2.727,114,0.221,115,2.15,116,3.99,117,2.315,118,2.727,119,2.727,120,2.727,121,2.727,122,2.315,123,2.727,124,1.158,125,0.842,126,2.727,127,2.315,128,2.727,129,2.727,130,2.727,131,2.043,132,2.727,133,2.315,134,2.727,135,2.315,136,2.315,137,2.315,138,2.315,139,2.727,140,2.727,141,2.727,142,1.67,143,2.59,144,3.457,145,3.99,146,1.67,147,1.67,148,1.67,149,1.67,150,6.179,151,5.193,152,5.963,153,1.67,154,3.457,155,4.398,156,2.727,157,5.062,158,5.526,159,3.457,160,1.67,161,3.457,162,1.67,163,5.658,164,1.67,165,1.67,166,4.398,167,4.979,168,5.373,169,2.188,170,5.373,171,4.398,172,1.67,173,2.727,174,3.457,175,1.67,176,1.67,177,3.457,178,0.945,179,1.67,180,2.727,181,3.457,182,3.99,183,2.727,184,1.67,185,4.398,186,1.67,187,2.727,188,3.457,189,4.398,190,2.456,191,3.99,192,2.727,193,2.727,194,2.727,195,1.67,196,1.67,197,1.67,198,3.457,199,4.979,200,3.99,201,3.99,202,3.99,203,1.67,204,1.67,205,1.67,206,2.727,207,1.67,208,1.67,209,3.99,210,3.295,211,1.67,212,1.67,213,2.727,214,1.417,215,1.67,216,2.727,217,3.457,218,0.181,219,4.398,220,1.67,221,3.733,222,2.727,223,1.67,224,1.67,225,2.727,226,2.727,227,1.67,228,1.67,229,1.67,230,1.67,231,1.67,232,3.99,233,1.942,234,1.67,235,1.67,236,1.67,237,1.67,238,1.67,239,1.67,240,2.727,241,2.727,242,1.67,243,1.67,244,1.67,245,1.67,246,3.387,247,3.99,248,1.67,249,1.67,250,1.67,251,1.67,252,1.67,253,1.67,254,1.67,255,1.67,256,1.67,257,1.67,258,1.67,259,1.67,260,1.67,261,1.417,262,1.84,263,2.315,264,1.417,265,1.417,266,1.417,267,1.127,268,1.417,269,1.251,270,1.417,271,0.009,272,0.009]],["title/injectables/AchievementsService.html",[273,0.339,274,2.567]],["body/injectables/AchievementsService.html",[3,0.118,4,0.098,9,0.098,34,0.118,35,0.147,36,1.298,42,1.152,46,0.723,49,1.729,51,1.725,52,0.025,53,1.621,54,0.264,55,0.552,57,1.355,60,1.944,61,2.111,64,0.679,65,0.679,74,0.539,80,0.6,86,0.723,102,0.118,103,0.638,114,0.36,115,1.389,124,1.083,125,1.534,169,2.08,178,3.61,218,0.606,271,0.013,272,0.013,273,0.369,274,2.795,275,0.723,276,2.113,277,0.402,278,2.795,279,5.955,280,1.956,281,6.378,282,1.835,283,2.218,284,3.61,285,5.414,286,2.218,287,2.534,288,1.469,289,3.73,290,3.73,291,3.73,292,4.967,293,3.73,294,3.73,295,0.818,296,3.73,297,3.73,298,3.189,299,2.49,300,3.73,301,3.73,302,4.462,303,2.172,304,3.73,305,0.515,306,2.49,307,3.73,308,3.73,309,2.49,310,3.73,311,2.49,312,3.73,313,3.166,314,3.73,315,2.49,316,3.73,317,2.111,318,4.473,319,3.73,320,2.49,321,3.73,322,1.389,323,3.73,324,0.818,325,2.113,326,0.769,327,0.769,328,0.769,329,0.871,330,1.643,331,0.927,332,1.835,333,1.056,334,1.056,335,1.056,336,1.056,337,2.49,338,2.49,339,2.49]],["title/injectables/AuthProjService.html",[273,0.339,340,2.567]],["body/injectables/AuthProjService.html",[3,0.12,4,0.1,9,0.1,34,0.12,35,0.149,36,1.631,42,1.166,46,0.734,49,1.775,51,1.546,52,0.025,53,1.453,54,0.237,55,0.495,57,1.633,60,1.798,61,3.18,64,1.232,65,1.232,70,1.601,74,0.581,80,0.609,86,0.734,102,0.12,103,0.649,114,0.331,124,1.096,125,1.546,233,2.911,271,0.013,272,0.013,273,0.373,275,0.734,277,0.36,280,1.645,282,1.966,283,2.229,288,1.483,295,0.831,303,2.009,305,0.483,317,3.835,324,0.831,326,0.781,327,0.781,328,0.781,329,0.884,330,1.166,332,1.483,340,2.828,341,5.285,342,2.147,343,3.204,344,3.774,345,2.622,346,5.007,347,4.528,348,5.079,349,5.007,350,4.038,351,4.038,352,5.191,353,4.038,354,5.007,355,4.483,356,5.983,357,5.007,358,3.833,359,4.546,360,3.833,361,5.007,362,4.25,363,2.828,364,3.204,365,3.774,366,2.529,367,3.774,368,3.203,369,2.529,370,4.25,371,2.529,372,3.774,373,3.774,374,2.529,375,3.204,376,3.379,377,2.529,378,3.774,379,2.529,380,3.204,381,3.204,382,2.529,383,2.147,384,1.895,385,2.147,386,2.147,387,2.529,388,0.628,389,3.204,390,3.774,391,3.774,392,2.147,393,3.204,394,3.204,395,4.25,396,3.774,397,3.774,398,3.774,399,3.204,400,2.147,401,2.147,402,2.529,403,2.529,404,2.529,405,2.147,406,2.529,407,2.147]],["title/injectables/AuthService.html",[97,2.312,273,0.339]],["body/injectables/AuthService.html",[3,0.119,4,0.099,9,0.099,34,0.119,35,0.149,36,1.628,42,1.161,46,0.731,49,1.734,51,1.542,52,0.025,53,1.45,54,0.236,55,0.494,57,1.363,60,1.732,61,2.827,64,1.229,65,1.229,70,1.595,74,0.58,80,0.606,86,0.731,97,2.538,102,0.119,103,0.645,114,0.33,124,1.092,125,1.542,233,3.345,271,0.013,272,0.013,273,0.372,275,0.731,277,0.36,280,1.641,282,1.963,283,2.225,284,2.129,288,1.479,295,0.827,303,2.007,305,0.453,317,2.129,324,0.827,326,0.777,327,0.777,328,0.777,329,0.88,330,1.161,332,1.479,343,3.192,345,2.615,347,4.197,348,5.623,350,4.032,351,4.032,352,4.239,353,3.371,359,4.537,360,3.822,362,4.239,363,2.818,364,3.192,375,3.192,376,3.371,380,3.192,381,3.192,383,2.137,384,1.886,385,2.137,388,0.523,389,3.192,392,2.137,393,3.192,394,3.192,395,4.239,399,3.192,400,2.137,401,2.137,405,2.137,407,2.137,408,2.137,409,3.761,410,4.995,411,4.197,412,6.219,413,6.625,414,4.995,415,4.476,416,5.071,417,5.071,418,3.742,419,4.995,420,4.995,421,4.995,422,4.995,423,3.761,424,3.761,425,3.457,426,2.517,427,2.517,428,3.761,429,3.761,430,2.517,431,2.517,432,3.761,433,2.517,434,2.517,435,2.137,436,3.761,437,3.761,438,3.761,439,3.761,440,3.761]],["title/interfaces/CartItem.html",[441,0.059,442,2.567]],["body/interfaces/CartItem.html",[0,1.882,3,0.112,4,0.094,9,0.094,12,2.012,13,2.012,14,1.776,15,1.776,16,1.776,17,2.693,18,3.051,24,3.051,28,3.051,30,1.776,32,1.776,34,0.17,35,0.142,36,1.703,37,3.699,38,1.776,39,2.457,41,2.212,46,0.688,48,3.685,52,0.025,54,0.112,61,3.4,65,0.981,66,2.012,72,2.012,74,0.706,75,2.012,76,3.051,77,3.051,79,3.051,80,0.866,81,1.599,82,2.693,83,2.93,84,1.599,87,1.599,88,2.012,89,2.012,90,2.012,100,2.012,101,2.012,102,0.112,103,0.608,131,1.776,143,3.253,169,1.94,218,0.471,221,2.012,271,0.012,272,0.012,278,1.776,305,0.42,322,2.542,330,1.759,353,2.93,358,2.012,388,0.836,441,0.041,442,4.875,443,0.502,444,2.012,445,2.012,446,2.012,447,3.594,448,2.672,449,3.902,450,4.845,451,3.594,452,3.594,453,3.594,454,3.594,455,2.012,456,2.37,457,3.594,458,3.594,459,3.594,460,2.012,461,1.776,462,2.37,463,2.012,464,2.37,465,2.212,466,2.012,467,3.594,468,2.212,469,2.012,470,3.594,471,2.37,472,2.425,473,3.594,474,3.594,475,2.37,476,2.37,477,2.457,478,2.37,479,2.37,480,2.37,481,2.37,482,6.125,483,2.37,484,2.37,485,2.37,486,1.776,487,2.37,488,1.776,489,3.685,490,2.771,491,2.012,492,2.37,493,5.099,494,2.37,495,2.37,496,2.37,497,2.37,498,2.37,499,2.37,500,2.37,501,2.37,502,2.37,503,2.37,504,2.37,505,2.37,506,2.37,507,4.845,508,2.37,509,2.37,510,5.695,511,2.37,512,4.113,513,2.37,514,6.125,515,6.31,516,5.7,517,3.685,518,6.31,519,5.356,520,2.37,521,2.37,522,2.37,523,2.37,524,2.37,525,2.37,526,2.37,527,5.695,528,5.208,529,3.594,530,2.37,531,2.37,532,4.342,533,2.93,534,3.685,535,6.224,536,5.283,537,3.051,538,2.37,539,1.749,540,5.482,541,1.339,542,5.482,543,2.37,544,4.845,545,4.845,546,2.012,547,2.672,548,1.776,549,2.37,550,2.37,551,3.051,552,2.37,553,3.594,554,2.012,555,2.37,556,2.37,557,2.37,558,2.37,559,2.012,560,2.37,561,2.37,562,3.685,563,1.599,564,4.342,565,2.37,566,2.37,567,2.012,568,2.37,569,2.37,570,3.051,571,2.37,572,4.342,573,3.051,574,2.37,575,2.37]],["title/injectables/ConfigService.html",[39,1.939,273,0.339]],["body/injectables/ConfigService.html",[3,0.104,4,0.087,9,0.087,34,0.104,35,0.134,37,3.967,39,1.921,49,1.203,52,0.025,54,0.196,64,1.131,65,1.131,74,0.238,80,0.53,102,0.104,103,0.564,114,0.317,115,1.736,117,2.881,122,2.881,124,1.353,135,2.881,136,2.881,137,2.881,138,2.881,218,0.368,271,0.011,272,0.011,273,0.336,275,0.638,277,0.158,280,1.115,317,1.921,326,0.679,327,0.679,328,0.679,345,1.777,363,2.543,388,0.648,533,2.29,547,2.089,548,2.543,576,1.866,577,3.394,578,2.881,579,4.66,580,4.144,581,4.144,582,4.144,583,4.144,584,3.394,585,3.394,586,0.926,587,3.394,588,1.54,589,3.394,590,3.394,591,3.394,592,1.777,593,3.394,594,3.394,595,3.394,596,3.394,597,3.394,598,3.394,599,2.881,600,3.394,601,3.394,602,2.881,603,3.394,604,3.394,605,3.394,606,3.394,607,3.394,608,2.543,609,3.394,610,2.881,611,3.394,612,2.881,613,3.394,614,3.394,615,3.394,616,3.394,617,3.394,618,3.394,619,2.543,620,3.394,621,3.394,622,3.394,623,3.394,624,3.394,625,3.394,626,3.394,627,3.394,628,3.394,629,2.881,630,3.394,631,3.394,632,3.394,633,3.394,634,3.394,635,3.394,636,3.394,637,3.394,638,3.394,639,3.394,640,3.394,641,3.394,642,3.394,643,3.394,644,3.394,645,2.881,646,3.394,647,3.394,648,3.394,649,3.394,650,3.394,651,3.394,652,3.394,653,3.394,654,3.394,655,3.394,656,3.394,657,3.394,658,3.394,659,3.394,660,3.394,661,3.394,662,3.394,663,2.29,664,3.394,665,3.394,666,3.394,667,3.394,668,3.394,669,3.394,670,3.394,671,3.394,672,3.394,673,3.394,674,3.394,675,3.394,676,2.199,677,2.881,678,3.394,679,3.394,680,2.543,681,3.394,682,3.394,683,3.394,684,2.881,685,2.881,686,3.394,687,3.394,688,3.394,689,3.394,690,3.394,691,2.881,692,3.394,693,3.394,694,3.394,695,3.394,696,5.322,697,2.881,698,3.394,699,3.394,700,3.394,701,3.394,702,3.394,703,3.394,704,3.394,705,3.394,706,3.394,707,3.394,708,3.394,709,3.394,710,3.394,711,3.394,712,2.199,713,3.394,714,3.394,715,3.394,716,3.394,717,3.394,718,3.394,719,3.394,720,3.394,721,3.394,722,3.394,723,3.394,724,3.394,725,3.394,726,3.394,727,3.394,728,3.394,729,3.394,730,3.394,731,3.394,732,3.394,733,3.394,734,3.394,735,3.394,736,3.394,737,2.199,738,3.394,739,3.394]],["title/components/DocsComponent.html",[0,1.794,267,2.312]],["body/components/DocsComponent.html",[0,3.445,1,3.3,2,3.981,3,0.231,4,0.193,5,4.151,6,4.151,7,4.151,8,4.151,9,0.193,11,4.151,14,4.929,15,4.929,16,4.42,17,4.747,30,4.42,32,4.42,52,0.025,53,1.713,59,4.151,74,0.687,80,1.178,81,3.3,87,3.3,102,0.279,103,1.254,131,4.42,157,5.584,261,4.151,262,3.981,263,5.008,264,4.151,265,4.151,266,4.151,267,4.544,268,5.378,269,3.664,270,4.151,271,0.02,272,0.02,388,0.68,477,3.339,740,4.151,741,6.335,742,6.335,743,5.9,744,6.335]],["title/injectables/DpCategoriesService.html",[273,0.339,745,2.567]],["body/injectables/DpCategoriesService.html",[3,0.118,4,0.099,9,0.099,34,0.118,35,0.148,36,1.302,42,1.155,46,0.726,49,1.683,51,1.646,52,0.025,53,1.547,54,0.252,55,0.527,60,1.917,64,0.682,65,0.682,74,0.54,80,0.602,86,0.726,102,0.118,103,0.641,114,0.353,115,1.394,124,1.086,125,1.537,169,2.221,218,0.647,271,0.013,272,0.013,273,0.37,275,0.726,277,0.384,280,1.959,282,1.635,283,2.221,286,1.977,287,2.258,288,1.473,295,0.821,303,2.174,305,0.515,322,1.854,324,0.821,326,0.772,327,0.772,328,0.772,329,0.874,330,1.646,331,0.931,332,1.751,333,1.06,334,1.06,335,1.06,336,1.06,345,3.251,745,2.803,746,2.368,747,2.122,748,5.962,749,4.978,750,3.741,751,6.383,752,4.978,753,4.072,754,4.465,755,6.617,756,4.978,757,4.978,758,4.978,759,4.978,760,3.741,761,3.741,762,4.978,763,3.741,764,3.741,765,3.741,766,3.741,767,3.451,768,2.5,769,5.061,770,3.741,771,2.5,772,2.5,773,3.741,774,2.5,775,3.741,776,2.5,777,3.741,778,2.5]],["title/injectables/DpImagesService.html",[273,0.339,779,2.567]],["body/injectables/DpImagesService.html",[3,0.108,4,0.09,9,0.267,34,0.108,35,0.138,36,1.228,42,1.075,46,0.66,49,1.723,51,1.733,52,0.025,53,1.629,54,0.266,55,0.555,60,1.975,64,0.62,65,0.62,70,2.287,74,0.585,80,0.547,86,0.66,102,0.108,103,0.583,114,0.354,124,1.011,125,1.464,246,4.025,271,0.012,272,0.012,273,0.344,275,0.66,277,0.404,280,1.902,282,1.144,286,1.382,288,1.39,295,0.747,303,2.214,305,0.539,324,0.747,326,0.702,327,0.702,328,0.702,329,0.795,330,1.733,331,0.847,332,1.844,333,0.964,334,0.964,335,0.964,336,0.964,345,1.823,388,0.869,539,1.694,563,3.639,592,3.172,691,4.915,746,2.406,779,2.608,780,1.929,781,3.481,782,3.481,783,4.742,784,3.481,785,3.481,786,3.481,787,3.481,788,3.481,789,3.481,790,3.45,791,2.273,792,4.742,793,4.742,794,6.601,795,2.712,796,3.936,797,4.742,798,3.481,799,5.392,800,5.392,801,5.392,802,3.481,803,3.481,804,4.338,805,4.915,806,3.481,807,3.481,808,3.481,809,3.481,810,2.273,811,3.481,812,4.025,813,2.273,814,3.481,815,4.742,816,3.481,817,3.481,818,2.273,819,4.742,820,3.481,821,3.481,822,2.273,823,3.591,824,3.481,825,3.481,826,2.955,827,2.955,828,3.481,829,2.273,830,3.481,831,3.481,832,3.481,833,3.45,834,2.273,835,3.481,836,3.481,837,3.481,838,3.481,839,1.399,840,2.273,841,2.273,842,2.273,843,2.273,844,2.273,845,1.929,846,3.481,847,3.481,848,4.231]],["title/injectables/DpOrderCompositionsService.html",[273,0.339,849,2.567]],["body/injectables/DpOrderCompositionsService.html",[3,0.101,4,0.084,9,0.084,34,0.101,35,0.131,36,1.179,42,1.022,46,0.618,49,1.592,51,1.532,52,0.025,53,1.44,54,0.235,55,0.491,60,1.838,64,0.581,65,0.581,74,0.497,80,0.513,86,0.618,102,0.101,103,0.546,114,0.34,115,1.233,124,0.961,125,1.415,218,0.698,271,0.011,272,0.011,273,0.327,275,0.618,277,0.357,280,1.862,282,1.505,283,2.111,286,1.819,287,2.078,288,1.334,295,0.7,303,2.113,305,0.497,322,1.706,324,0.7,326,0.658,327,0.658,328,0.658,329,0.745,330,1.532,331,0.793,332,1.63,333,0.903,334,0.903,335,0.903,336,0.903,345,3.116,490,3.217,586,1.755,588,2.572,592,2.968,746,2.251,795,2.803,849,2.48,850,3.116,851,1.808,852,4.581,853,5.669,854,4.581,855,3.311,856,6.156,857,4.581,858,3.888,859,4.068,860,5.543,861,4.892,862,5.46,863,4.581,864,4.581,865,4.581,866,4.581,867,4.581,868,3.311,869,3.311,870,4.581,871,3.311,872,3.311,873,3.311,874,3.311,875,3.929,876,2.13,877,5.669,878,3.311,879,2.13,880,2.13,881,3.311,882,2.13,883,3.311,884,2.13,885,3.311,886,2.13]],["title/injectables/DpOrdersService.html",[273,0.339,887,2.567]],["body/injectables/DpOrdersService.html",[3,0.13,4,0.109,9,0.109,34,0.13,35,0.159,36,1.377,42,1.24,46,0.798,49,1.736,51,1.712,52,0.025,53,1.61,54,0.262,55,0.548,60,1.961,64,0.751,65,0.751,70,2.211,74,0.566,80,0.662,86,0.798,102,0.13,103,0.705,114,0.351,115,1.495,124,1.166,125,1.61,169,1.942,218,0.706,271,0.014,272,0.014,273,0.397,275,0.798,277,0.399,280,1.902,282,1.319,283,1.942,286,1.595,287,1.822,288,1.558,295,0.904,303,2.207,305,0.525,322,1.495,324,0.904,326,0.849,327,0.849,328,0.849,329,0.962,330,1.712,331,1.024,332,1.822,333,1.166,334,1.166,335,1.166,336,1.166,746,2.434,850,2.103,859,4.079,861,4.592,887,3.008,888,2.335,889,5.214,890,4.015,891,4.015,892,5.214,893,4.015,894,4.015,895,4.015,896,4.015,897,3.538,898,2.75,899,5.214,900,4.079,901,6.627,902,5.214,903,5.214,904,5.214,905,6.627,906,4.015,907,5.214,908,4.015,909,4.015,910,4.015,911,2.75,912,5.79,913,4.015,914,2.75,915,4.015,916,4.015,917,4.015,918,2.75,919,4.015,920,4.015,921,2.75,922,4.015,923,4.015,924,2.75]],["title/injectables/DpProductAttributesService.html",[273,0.339,925,2.567]],["body/injectables/DpProductAttributesService.html",[3,0.128,4,0.107,9,0.107,34,0.128,35,0.157,36,1.366,42,1.228,46,0.788,49,1.728,51,1.703,52,0.025,53,1.601,54,0.261,55,0.545,60,1.955,64,0.74,65,0.74,74,0.562,80,0.654,86,0.788,102,0.128,103,0.696,114,0.35,115,1.481,124,1.154,125,1.6,169,1.93,218,0.704,271,0.013,272,0.013,273,0.393,275,0.788,277,0.397,280,1.893,282,1.306,283,1.93,286,1.579,287,1.804,288,1.546,295,0.892,303,2.203,305,0.524,322,1.481,324,0.892,326,0.838,327,0.838,328,0.838,329,0.949,330,1.703,331,1.011,332,1.812,333,1.151,334,1.151,335,1.151,336,1.151,746,2.425,795,2.753,925,2.979,926,3.584,927,2.303,928,3.976,929,3.976,930,3.976,931,5.181,932,3.976,933,3.976,934,3.976,935,3.976,936,3.262,937,2.714,938,5.181,939,3.996,940,4.864,941,4.397,942,6.106,943,5.181,944,3.976,945,3.976,946,4.397,947,6.106,948,3.976,949,2.714,950,5.763,951,3.976,952,2.714,953,3.976,954,3.976,955,3.976,956,3.976,957,2.714,958,3.976,959,3.976,960,2.714,961,5.181,962,5.181,963,3.976,964,3.976,965,2.714]],["title/injectables/DpSizesService.html",[273,0.339,966,2.567]],["body/injectables/DpSizesService.html",[3,0.137,4,0.115,9,0.115,34,0.137,35,0.165,36,1.42,42,1.289,46,0.843,49,1.765,51,1.749,52,0.025,53,1.645,54,0.268,55,0.56,60,1.986,64,0.792,65,0.792,74,0.58,80,0.699,86,0.843,102,0.137,103,0.745,114,0.356,115,1.555,124,1.212,125,1.651,169,1.992,190,4.168,218,0.58,271,0.014,272,0.014,273,0.413,275,0.843,277,0.408,280,1.938,282,1.372,283,1.992,286,1.658,287,1.895,288,1.607,295,0.954,303,2.225,305,0.531,322,1.555,324,0.954,326,0.897,327,0.897,328,0.897,329,1.015,330,1.749,331,1.081,332,1.861,333,1.231,334,1.231,335,1.231,336,1.231,541,2.491,746,2.47,940,4.66,966,3.129,967,2.464,968,5.347,969,4.176,970,4.176,971,5.347,972,4.176,973,4.176,974,4.176,975,4.176,976,3.586,977,2.903,978,5.347,979,5.347,980,4.176,981,4.176,982,4.176,983,4.176,984,2.903,985,5.899,986,4.176,987,2.903,988,4.176,989,4.176,990,4.176,991,2.903,992,4.176,993,4.176,994,2.903,995,5.347,996,4.176,997,4.176,998,2.903]],["title/injectables/DpUserProjsService.html",[273,0.339,999,2.567]],["body/injectables/DpUserProjsService.html",[3,0.133,4,0.111,9,0.111,34,0.133,35,0.161,36,1.391,42,1.256,46,0.813,49,1.745,51,1.725,52,0.025,53,1.622,54,0.264,55,0.553,60,1.97,64,0.764,65,0.764,74,0.57,80,0.675,86,0.813,102,0.133,103,0.718,114,0.353,115,1.515,124,1.181,125,1.624,169,1.959,218,0.57,233,3.104,271,0.014,272,0.014,273,0.402,275,0.813,277,0.402,280,1.914,282,1.337,283,1.959,286,1.616,287,1.846,288,1.574,295,0.92,303,2.213,305,0.527,322,1.515,324,0.92,326,0.865,327,0.865,328,0.865,329,0.979,330,1.725,331,1.043,332,1.835,333,1.188,334,1.188,335,1.188,336,1.188,355,3.048,368,3.288,386,2.377,411,4.409,746,2.446,999,3.048,1000,2.377,1001,4.069,1002,4.069,1003,4.069,1004,5.259,1005,4.069,1006,4.069,1007,4.069,1008,4.069,1009,2.801,1010,5.259,1011,4.021,1012,4.069,1013,3.454,1014,5.229,1015,4.069,1016,2.801,1017,5.827,1018,4.069,1019,2.801,1020,4.069,1021,3.454,1022,3.454,1023,4.069,1024,2.801,1025,4.069,1026,4.069,1027,2.801,1028,4.069,1029,4.069]],["title/injectables/DpUsersService.html",[273,0.339,1030,2.567]],["body/injectables/DpUsersService.html",[3,0.136,4,0.114,9,0.114,34,0.136,35,0.164,36,1.415,42,1.284,46,0.838,49,1.761,51,1.745,52,0.025,53,1.641,54,0.267,55,0.559,60,1.983,64,0.787,65,0.787,74,0.578,80,0.695,86,0.838,102,0.136,103,0.74,114,0.355,115,1.548,124,1.207,125,1.646,169,1.986,218,0.578,233,2.023,271,0.014,272,0.014,273,0.411,275,0.838,277,0.407,280,1.934,282,1.366,283,1.986,286,1.651,287,1.886,288,1.601,295,0.948,303,2.223,305,0.53,322,1.548,324,0.948,326,0.891,327,0.891,328,0.891,329,1.009,330,1.745,331,1.075,332,1.857,333,1.223,334,1.223,335,1.223,336,1.223,355,3.114,411,4.434,425,3.58,435,2.449,746,2.466,900,4.044,1013,3.528,1021,4.526,1022,3.528,1030,3.114,1031,2.449,1032,4.157,1033,4.157,1034,5.332,1035,4.157,1036,4.157,1037,4.157,1038,4.157,1039,2.885,1040,5.332,1041,4.157,1042,5.271,1043,4.157,1044,2.885,1045,5.887,1046,4.157,1047,2.885,1048,4.157,1049,4.157,1050,2.885,1051,4.157,1052,4.157,1053,2.885,1054,4.157,1055,4.157]],["title/interfaces/IAchievement.html",[298,1.794,441,0.059]],["body/interfaces/IAchievement.html",[3,0.214,4,0.178,9,0.178,34,0.214,35,0.222,52,0.025,54,0.303,55,0.633,57,1.877,74,0.49,102,0.214,114,0.311,178,3.852,218,0.694,271,0.019,272,0.019,277,0.325,284,3.852,285,5.776,298,3.351,302,4.795,305,0.516,368,3.514,388,0.782,441,0.078,443,0.957,1011,3.458,1056,3.833,1057,6.805,1058,2.384]],["title/interfaces/IAddToCartRequest.html",[441,0.059,1059,2.109]],["body/interfaces/IAddToCartRequest.html",[3,0.244,4,0.204,9,0.204,34,0.244,35,0.241,52,0.024,54,0.307,55,0.603,102,0.244,114,0.285,218,0.56,271,0.021,272,0.021,277,0.371,305,0.572,388,0.718,441,0.089,443,1.094,490,3.324,539,3.324,541,2.544,586,1.408,592,2.702,1059,3.989,1060,4.38,1061,3.176]],["title/interfaces/ICartItem.html",[441,0.059,448,2.109]],["body/interfaces/ICartItem.html",[3,0.238,4,0.199,9,0.199,34,0.238,35,0.237,52,0.024,54,0.321,55,0.594,57,1.75,102,0.238,114,0.278,218,0.546,271,0.02,272,0.02,277,0.362,305,0.577,388,0.7,441,0.087,443,1.067,448,3.947,488,5.084,489,5.76,490,3.302,512,4.271,539,3.302,541,2.527,586,1.373,588,2.283,1062,4.271,1063,4.271]],["title/interfaces/ICartViewModel.html",[441,0.059,465,2.109]],["body/interfaces/ICartViewModel.html",[3,0.235,4,0.196,9,0.196,34,0.235,35,0.235,52,0.025,54,0.281,74,0.645,102,0.235,114,0.329,271,0.02,272,0.02,277,0.357,388,0.827,441,0.086,443,1.051,448,4.223,465,4.067,472,4.014,486,5.198,1058,2.215,1064,4.208,1065,5.198,1066,3.339]],["title/interfaces/ICreateDpImageRequest.html",[441,0.059,790,2.312]],["body/interfaces/ICreateDpImageRequest.html",[3,0.246,4,0.205,9,0.28,34,0.246,35,0.242,52,0.024,54,0.307,57,1.773,102,0.246,114,0.287,218,0.563,271,0.021,272,0.021,277,0.374,305,0.524,388,0.722,441,0.09,443,1.1,790,4.384,795,2.901,796,4.211,1061,3.194,1067,4.405]],["title/interfaces/IDpCategory.html",[441,0.059,767,1.939]],["body/interfaces/IDpCategory.html",[3,0.219,4,0.183,9,0.183,34,0.219,35,0.226,52,0.025,54,0.314,55,0.564,57,1.762,74,0.619,102,0.219,114,0.316,190,4.211,218,0.619,271,0.019,272,0.019,277,0.333,305,0.558,388,0.794,441,0.08,443,0.981,541,2.548,586,1.557,753,4.211,754,4.617,767,3.654,976,3.822,1058,2.47,1066,3.286,1068,3.93,1069,5.706,1070,6.63]],["title/interfaces/IDpImage.html",[441,0.059,839,2.109]],["body/interfaces/IDpImage.html",[3,0.221,4,0.184,9,0.184,34,0.221,35,0.227,52,0.025,54,0.314,55,0.567,57,1.766,74,0.506,102,0.221,114,0.317,218,0.622,271,0.019,272,0.019,277,0.336,305,0.558,388,0.797,441,0.081,443,0.989,586,1.564,795,2.906,796,4.217,804,5.134,805,5.64,839,3.984,1058,2.475,1066,3.292,1071,3.96,1072,5.733,1073,5.817,1074,6.473]],["title/interfaces/IDpOrder.html",[441,0.059,897,1.939]],["body/interfaces/IDpOrder.html",[3,0.211,4,0.176,9,0.176,34,0.211,35,0.22,52,0.025,54,0.31,55,0.551,57,1.737,70,2.361,74,0.483,102,0.211,114,0.308,218,0.604,271,0.019,272,0.019,277,0.32,305,0.553,388,0.774,415,4.171,425,3.784,441,0.077,443,0.943,449,5.009,586,1.737,850,3.334,859,4.175,897,3.603,900,4.258,1042,5.758,1058,2.441,1075,3.777,1076,6.783,1077,6.783,1078,5.567,1079,3.757]],["title/interfaces/IDpOrderComposition.html",[441,0.059,875,2.312]],["body/interfaces/IDpOrderComposition.html",[3,0.202,4,0.169,9,0.169,34,0.202,35,0.215,52,0.025,54,0.313,74,0.589,102,0.202,114,0.3,218,0.718,271,0.018,272,0.018,277,0.308,305,0.573,388,0.755,441,0.074,443,0.907,586,1.806,588,2.464,795,2.303,850,2.844,858,4.609,859,4.228,860,5.708,861,5.038,875,4.235,897,3.747,900,3.342,936,3.466,939,4.228,1058,2.465,1080,3.631,1081,5.43,1082,6.725,1083,6.725,1084,3.665]],["title/interfaces/IDpOrderDetail.html",[441,0.059,1085,2.312]],["body/interfaces/IDpOrderDetail.html",[3,0.233,4,0.194,9,0.194,34,0.233,35,0.234,52,0.024,54,0.324,55,0.652,57,1.869,102,0.233,114,0.272,271,0.02,272,0.02,277,0.354,305,0.575,388,0.684,441,0.085,443,1.042,488,5.052,490,3.281,491,5.724,541,2.512,586,1.342,588,2.231,663,3.318,850,2.575,1084,3.318,1085,4.285,1086,4.174,1087,5.919,1088,6.743,1089,6.743,1090,4.917]],["title/interfaces/IDpProduct.html",[441,0.059,1066,1.667]],["body/interfaces/IDpProduct.html",[3,0.177,4,0.148,9,0.148,34,0.177,35,0.197,52,0.025,54,0.32,55,0.679,57,1.805,74,0.606,102,0.177,114,0.275,218,0.734,271,0.017,272,0.017,277,0.269,305,0.572,388,0.692,441,0.065,443,0.792,533,3.357,586,1.627,592,2.605,753,4.122,754,3.357,767,3.612,769,5.529,795,2.892,796,3.062,804,3.728,839,3.928,926,3.374,936,3.342,939,3.062,1058,2.52,1063,4.223,1066,2.901,1084,3.357,1091,3.174,1092,5.529,1093,6.514,1094,6.514,1095,6.514,1096,6.514,1097,6.514,1098,5.529,1099,4.223]],["title/interfaces/IDpProductAttribute.html",[441,0.059,936,1.794]],["body/interfaces/IDpProductAttribute.html",[3,0.202,4,0.169,9,0.169,34,0.202,35,0.214,52,0.025,54,0.313,55,0.62,74,0.588,102,0.202,114,0.3,190,3.337,218,0.588,271,0.018,272,0.018,277,0.307,305,0.573,388,0.754,441,0.074,443,0.905,533,3.659,541,2.02,586,1.711,588,2.845,663,3.659,795,2.912,926,3.069,936,3.284,939,4.136,940,5.036,946,4.602,976,3.744,1058,2.464,1066,3.219,1073,5.705,1084,3.659,1092,4.602,1099,5.705,1100,3.622,1101,5.422,1102,6.721]],["title/interfaces/IDpSize.html",[441,0.059,976,1.939]],["body/interfaces/IDpSize.html",[3,0.21,4,0.176,9,0.176,34,0.21,35,0.22,52,0.025,54,0.301,55,0.629,57,1.736,74,0.603,102,0.21,114,0.308,190,4.311,218,0.69,271,0.019,272,0.019,277,0.32,305,0.513,388,0.774,441,0.077,443,0.942,541,2.526,586,1.518,663,4.098,753,3.424,754,3.754,767,3.783,936,3.5,939,3.424,941,3.772,976,3.602,1058,2.37,1098,5.756,1103,3.772,1104,6.782]],["title/interfaces/IDpUser.html",[425,1.939,441,0.059]],["body/interfaces/IDpUser.html",[3,0.195,4,0.163,9,0.163,34,0.195,35,0.209,52,0.025,54,0.32,55,0.668,57,1.95,70,2.248,74,0.447,102,0.195,114,0.293,218,0.711,233,3.011,262,2.779,271,0.018,272,0.018,277,0.296,305,0.499,388,0.737,415,4.995,416,5.659,417,5.659,425,3.502,441,0.071,443,0.873,449,4.91,859,3.262,897,3.71,900,4.199,1058,2.516,1079,3.577,1105,3.496,1106,5.3,1107,6.667,1108,6.667,1109,5.3,1110,6.667,1111,6.554,1112,3.496,1113,3.496]],["title/interfaces/IDpUserProj.html",[368,1.794,441,0.059]],["body/interfaces/IDpUserProj.html",[3,0.211,4,0.176,9,0.176,34,0.211,35,0.22,52,0.025,54,0.31,55,0.63,57,1.922,74,0.484,102,0.211,114,0.308,178,3.156,218,0.691,233,2.713,262,3.01,271,0.019,272,0.019,277,0.321,278,5.085,284,3.156,298,3.503,305,0.514,317,3.842,347,4.58,368,3.337,370,4.732,388,0.776,441,0.077,443,0.945,1011,4.177,1058,2.443,1079,3.763,1112,5.761,1113,3.786,1114,3.786,1115,4.732,1116,5.575]],["title/interfaces/IRemoveFromCartRequest.html",[441,0.059,1117,2.312]],["body/interfaces/IRemoveFromCartRequest.html",[3,0.248,4,0.207,9,0.207,34,0.248,35,0.243,52,0.024,54,0.291,55,0.608,102,0.248,114,0.29,271,0.021,272,0.021,277,0.377,305,0.561,388,0.728,441,0.091,443,1.109,539,3.337,541,2.554,586,1.428,592,2.741,1061,3.221,1117,4.4,1118,4.443]],["title/interfaces/IUpdateCartRequest.html",[441,0.059,468,2.109]],["body/interfaces/IUpdateCartRequest.html",[3,0.243,4,0.203,9,0.203,34,0.243,35,0.24,52,0.025,54,0.306,55,0.602,102,0.243,114,0.285,218,0.558,271,0.021,272,0.021,277,0.37,305,0.572,388,0.716,441,0.089,443,1.091,468,3.984,490,3.322,539,3.322,541,2.543,588,2.335,592,2.695,1061,3.167,1119,4.368]],["title/interfaces/IUpdateDpImageRequest.html",[441,0.059,833,2.312]],["body/interfaces/IUpdateDpImageRequest.html",[3,0.244,4,0.204,9,0.28,34,0.244,35,0.241,52,0.025,54,0.306,55,0.602,57,1.768,102,0.244,114,0.285,218,0.559,271,0.021,272,0.021,277,0.371,305,0.523,388,0.717,441,0.089,443,1.092,795,2.896,796,4.203,833,4.371,1061,3.171,1120,4.374,1121,5.153]],["title/interfaces/IUserHasAchievement.html",[441,0.059,1122,2.312]],["body/interfaces/IUserHasAchievement.html",[3,0.196,4,0.164,9,0.164,34,0.196,35,0.21,52,0.025,54,0.303,55,0.613,74,0.577,102,0.196,114,0.294,178,3.009,218,0.672,271,0.018,272,0.018,277,0.298,284,3.865,298,3.576,302,5,305,0.545,317,3.009,347,3.587,368,3.576,376,4.183,388,0.739,441,0.072,443,0.877,477,3.009,586,1.691,1011,4.203,1014,5.665,1058,2.388,1079,3.587,1122,4.183,1123,3.512,1124,5.316,1125,5.316,1126,5.665,1127,5.316]],["title/injectables/ProductsService.html",[273,0.339,1128,2.567]],["body/injectables/ProductsService.html",[3,0.117,4,0.098,9,0.098,34,0.117,35,0.147,36,1.292,42,1.145,46,0.717,49,1.725,51,1.719,52,0.025,53,1.616,54,0.263,55,0.551,60,1.966,64,0.674,65,0.674,74,0.575,80,0.595,86,0.717,102,0.117,103,0.633,114,0.352,115,1.381,124,1.076,125,1.528,169,1.843,218,0.644,271,0.013,272,0.013,273,0.367,275,0.717,277,0.401,280,1.829,282,1.625,283,2.074,286,1.472,287,1.682,288,1.462,295,0.811,303,2.208,305,0.514,322,1.381,324,0.811,326,0.763,327,0.763,328,0.763,329,0.864,330,1.719,331,0.92,332,1.829,333,1.047,334,1.047,335,1.047,336,1.047,350,2.502,351,2.502,418,2.778,472,2.502,477,2.098,490,2.407,539,2.407,541,1.843,547,2.282,563,3.004,586,1.737,588,2.244,680,2.778,684,4.199,685,3.147,746,2.413,753,3.656,795,2.7,926,3.604,1059,3.263,1065,3.707,1066,2.957,1128,2.778,1129,2.096,1130,3.707,1131,4.947,1132,3.707,1133,3.707,1134,3.707,1135,3.147,1136,2.469,1137,3.707,1138,3.707,1139,3.147,1140,3.707,1141,2.469,1142,6.367,1143,4.947,1144,3.707,1145,3.707,1146,3.707,1147,3.707,1148,2.469,1149,5.568,1150,3.707,1151,2.469,1152,3.707,1153,3.707,1154,3.707,1155,2.469,1156,3.707,1157,3.707,1158,2.469,1159,3.707,1160,3.707,1161,2.469,1162,2.096,1163,2.096]],["title/injectables/ShopCartService.html",[273,0.339,1164,2.567]],["body/injectables/ShopCartService.html",[3,0.106,4,0.089,9,0.089,34,0.106,35,0.136,36,1.217,42,1.063,46,0.65,49,1.716,51,1.724,52,0.025,53,1.621,54,0.264,55,0.552,60,1.969,64,0.611,65,0.611,74,0.625,80,0.54,86,0.65,102,0.106,103,0.575,114,0.353,124,1,125,1.453,218,0.729,271,0.012,272,0.012,273,0.341,275,0.65,277,0.402,282,1.762,283,1.997,288,1.378,295,0.736,303,2.209,305,0.524,322,1.283,324,0.736,326,0.692,327,0.692,328,0.692,329,0.784,330,1.724,331,0.835,332,1.835,345,1.803,350,3.176,351,3.176,388,0.479,418,3.526,465,1.379,466,1.902,468,3.126,469,1.902,472,4.143,477,2.664,486,2.58,490,3.159,539,3.241,541,2.505,547,2.897,548,2.58,559,3.995,563,3.989,573,2.923,586,1.835,588,2.615,680,2.58,697,2.923,746,2.397,823,1.902,826,2.923,827,2.923,845,1.902,850,1.803,926,1.949,1059,3.126,1065,2.58,1085,1.512,1117,3.428,1135,2.923,1139,2.923,1162,1.902,1163,1.902,1164,2.58,1165,5.288,1166,1.902,1167,5.362,1168,3.443,1169,4.706,1170,3.443,1171,3.443,1172,3.443,1173,2.241,1174,3.443,1175,3.443,1176,3.443,1177,2.241,1178,3.443,1179,3.443,1180,3.443,1181,3.443,1182,3.443,1183,2.241,1184,3.443,1185,2.241,1186,3.443,1187,3.443,1188,3.443,1189,3.443,1190,2.241,1191,3.443,1192,3.443,1193,3.443,1194,3.443,1195,3.443,1196,3.443,1197,2.241,1198,3.443,1199,3.443,1200,2.241,1201,3.443,1202,3.443,1203,3.443,1204,2.241,1205,2.241,1206,2.241,1207,2.241,1208,2.241,1209,2.241,1210,2.241]],["title/injectables/UserAchievementsService.html",[41,2.109,273,0.339]],["body/injectables/UserAchievementsService.html",[3,0.188,4,0.066,9,0.066,34,0.079,35,0.107,36,1.752,37,3.619,38,2.581,39,2.812,41,1.672,42,0.839,46,0.788,49,1.729,51,1.656,52,0.025,53,1.557,54,0.267,55,0.53,57,1.505,60,1.956,61,0.94,64,0.741,65,1.197,70,1.996,74,0.539,80,0.4,82,2.981,83,1.121,84,1.121,86,0.482,102,0.079,103,0.426,108,2.305,114,0.35,115,0.619,124,0.788,125,1.228,169,1.85,178,1.537,210,2.981,218,0.295,271,0.009,272,0.009,273,0.269,275,0.482,277,0.386,280,1.547,282,0.892,284,3.795,286,1.079,288,1.132,295,0.546,298,0.87,303,2.109,305,0.56,313,2.305,322,1.998,324,0.546,325,1.41,326,0.513,327,0.513,328,0.513,330,2.05,331,0.619,332,1.957,353,4.165,376,3.619,384,2.981,388,0.553,411,1.833,477,2.665,493,2.305,516,4.795,517,3.377,519,4.217,534,2.305,536,1.41,537,1.41,546,1.41,547,1.672,551,1.41,554,1.41,562,1.41,567,1.41,570,1.41,578,1.41,608,2.035,677,1.41,812,1.41,862,2.924,1011,2.897,1122,1.121,1126,3.996,1211,5.123,1212,1.41,1213,3.445,1214,3.445,1215,2.716,1216,2.716,1217,3.978,1218,3.978,1219,2.716,1220,2.716,1221,2.716,1222,3.445,1223,2.716,1224,3.978,1225,2.716,1226,2.716,1227,2.716,1228,1.662,1229,2.716,1230,2.716,1231,2.716,1232,3.445,1233,2.716,1234,2.716,1235,1.662,1236,2.716,1237,2.716,1238,3.978,1239,3.978,1240,1.662,1241,3.978,1242,2.716,1243,1.662,1244,2.716,1245,1.662,1246,2.716,1247,2.716,1248,2.716,1249,1.662,1250,2.716,1251,2.716,1252,2.716,1253,2.716,1254,1.662,1255,2.716,1256,2.716,1257,3.978,1258,1.662,1259,2.716,1260,2.716,1261,1.662,1262,2.716,1263,1.662,1264,2.716,1265,1.662,1266,2.716,1267,2.716,1268,2.716,1269,2.716,1270,1.662,1271,1.662,1272,1.662,1273,4.968,1274,1.662,1275,1.662,1276,1.662,1277,1.662,1278,1.662,1279,4.708,1280,1.662,1281,3.445,1282,1.662,1283,1.662,1284,1.662,1285,1.662,1286,3.445,1287,1.662,1288,1.662,1289,1.662,1290,2.716,1291,3.445,1292,4.708,1293,3.996,1294,4.708,1295,3.445,1296,4.386,1297,2.716,1298,1.662,1299,2.716,1300,1.662,1301,2.716,1302,2.716,1303,1.662,1304,1.662,1305,1.662,1306,1.662,1307,1.662,1308,1.662,1309,1.662,1310,1.662,1311,1.662,1312,1.662,1313,1.662,1314,1.662,1315,1.662,1316,1.662,1317,1.662,1318,1.662,1319,1.662,1320,1.662,1321,1.662,1322,1.662,1323,1.662,1324,1.662,1325,1.662,1326,1.662,1327,1.662,1328,1.662,1329,1.662,1330,1.662,1331,1.662,1332,1.662,1333,1.662,1334,4.708,1335,1.662,1336,1.662,1337,1.662,1338,1.662,1339,1.662,1340,1.662,1341,1.662,1342,1.662,1343,1.662,1344,1.662,1345,1.662,1346,1.662,1347,1.662]],["title/coverage.html",[1348,3.981]],["body/coverage.html",[0,2.761,1,2.758,9,0.161,10,3.468,39,2.313,41,2.515,52,0.025,54,0.193,70,1.733,97,2.758,169,1.964,233,1.988,267,2.758,271,0.018,272,0.018,273,0.697,274,3.061,276,3.468,298,2.14,340,3.061,341,3.468,342,3.468,368,2.14,408,3.468,425,2.313,441,0.124,442,3.061,444,3.468,445,3.468,446,3.468,448,2.515,461,3.061,465,2.515,468,2.515,576,3.468,599,3.468,602,4.476,608,4.375,612,5.551,619,3.951,629,5.237,645,4.476,740,3.468,745,3.061,746,2.729,747,3.468,767,2.313,779,3.061,780,3.468,790,2.758,833,2.758,839,2.515,849,3.061,850,2.14,851,3.468,875,2.758,887,3.061,888,3.468,897,2.313,925,3.061,926,2.313,927,3.468,936,2.14,966,3.061,967,3.468,976,2.313,999,3.061,1000,3.468,1030,3.061,1031,3.468,1056,3.468,1059,2.515,1060,3.468,1062,3.468,1064,3.468,1066,1.988,1067,3.468,1068,3.468,1071,3.468,1075,3.468,1080,3.468,1085,2.758,1086,3.468,1091,3.468,1100,3.468,1103,3.468,1105,3.468,1114,3.468,1117,2.758,1118,3.468,1119,3.468,1120,3.468,1122,2.758,1123,3.468,1128,3.061,1129,3.468,1164,3.061,1165,3.468,1166,3.468,1211,3.468,1212,3.468,1348,3.468,1349,4.086,1350,4.086,1351,4.086,1352,5.273,1353,4.086,1354,4.086,1355,5.273,1356,6.17,1357,6.54,1358,5.273,1359,5.839,1360,4.086,1361,5.273,1362,5.273,1363,4.086,1364,4.086,1365,4.086,1366,4.086,1367,4.086,1368,4.086,1369,6.655,1370,6.655,1371,5.273,1372,5.273,1373,4.086,1374,4.086,1375,4.086]],["title/dependencies.html",[1376,2.422,1377,3.501]],["body/dependencies.html",[52,0.025,80,1.192,81,3.341,83,4.777,84,3.341,85,4.202,86,1.437,87,3.341,271,0.02,272,0.02,455,4.202,460,5.044,461,3.709,463,4.202,1377,4.202,1378,4.95,1379,5.943,1380,6.936,1381,4.95,1382,4.95,1383,5.943,1384,5.044,1385,4.95,1386,4.95,1387,4.95,1388,4.95,1389,4.95,1390,6.369,1391,5.943,1392,6.369,1393,4.95,1394,4.95,1395,4.95,1396,5.943,1397,4.95,1398,4.95,1399,4.95,1400,4.95,1401,4.95,1402,4.95,1403,4.95,1404,4.95,1405,4.95,1406,4.95,1407,4.95,1408,4.95,1409,4.95]],["title/index.html",[34,0.135,1410,2.854,1411,2.854]],["body/index.html",[0,3.25,2,3.149,4,0.184,52,0.019,64,1.564,70,1.979,107,5.495,114,0.374,127,5.64,133,3.96,143,3.496,210,3.496,214,3.96,269,3.496,271,0.019,272,0.019,1115,5.268,1293,3.96,1384,3.96,1412,4.666,1413,4.666,1414,5.733,1415,3.96,1416,4.666,1417,5.733,1418,6.206,1419,4.666,1420,6.645,1421,6.764,1422,4.666,1423,5.733,1424,4.666,1425,4.666,1426,5.733,1427,4.666,1428,4.666,1429,4.666,1430,4.666,1431,4.666,1432,5.733,1433,5.733,1434,4.666,1435,4.666,1436,4.666,1437,6.206,1438,4.666,1439,4.666,1440,4.666,1441,4.666,1442,4.666,1443,4.666,1444,4.666,1445,6.206,1446,4.666,1447,4.666,1448,4.666,1449,4.666,1450,4.666,1451,4.666,1452,4.666,1453,4.666,1454,4.666,1455,4.666,1456,5.733,1457,6.206,1458,4.666,1459,4.666,1460,4.666,1461,4.666,1462,4.666,1463,4.666,1464,6.206,1465,4.666,1466,6.764,1467,4.666,1468,5.733,1469,4.666,1470,4.666,1471,4.666,1472,4.666,1473,4.666,1474,4.666,1475,4.666,1476,4.666,1477,4.666,1478,4.666,1479,4.666,1480,4.666,1481,4.666,1482,4.666,1483,3.496,1484,4.666]],["title/modules.html",[1485,3.981]],["body/modules.html",[52,0.022,271,0.022,272,0.022,1485,4.801]],["title/overview.html",[1483,3.514]],["body/overview.html",[2,3.782,52,0.022,271,0.022,272,0.022,275,1.627,443,1.188,586,1.529,610,4.757,619,4.198,1483,4.198]],["title/properties.html",[35,0.163,1376,2.422]],["body/properties.html",[35,0.222,52,0.023,271,0.022,272,0.022,1415,4.779,1486,5.63]]],"invertedIndex":[["",{"_index":52,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":169,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1486,"title":{},"body":{"properties.html":{}}}],["0.125rem",{"_index":220,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.15.0",{"_index":1409,"title":{},"body":{"dependencies.html":{}}}],["0.25rem",{"_index":170,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.2s",{"_index":240,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.5rem",{"_index":163,"title":{},"body":{"components/AboutComponent.html":{}}}],["0/1",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1353,"title":{},"body":{"coverage.html":{}}}],["0000000000",{"_index":439,"title":{},"body":{"injectables/AuthService.html":{}}}],["01",{"_index":160,"title":{},"body":{"components/AboutComponent.html":{}}}],["02",{"_index":248,"title":{},"body":{"components/AboutComponent.html":{}}}],["03",{"_index":229,"title":{},"body":{"components/AboutComponent.html":{}}}],["06",{"_index":903,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["1",{"_index":218,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["1.125rem",{"_index":206,"title":{},"body":{"components/AboutComponent.html":{}}}],["1.5",{"_index":195,"title":{},"body":{"components/AboutComponent.html":{}}}],["1.5rem",{"_index":217,"title":{},"body":{"components/AboutComponent.html":{}}}],["1/11",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1358,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1356,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1357,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1359,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1352,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":533,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["100",{"_index":1367,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":1063,"title":{},"body":{"interfaces/ICartItem.html":{},"interfaces/IDpProduct.html":{}}}],["11",{"_index":602,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["11/15",{"_index":1374,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":604,"title":{},"body":{"injectables/ConfigService.html":{}}}],["123",{"_index":1127,"title":{},"body":{"interfaces/IUserHasAchievement.html":{}}}],["123456",{"_index":1106,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["13",{"_index":606,"title":{},"body":{"injectables/ConfigService.html":{}}}],["14",{"_index":608,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["14).subscribe",{"_index":1268,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["14).subscribe(ach",{"_index":1238,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["14).subscribe(exists",{"_index":1231,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["15",{"_index":610,"title":{},"body":{"injectables/ConfigService.html":{},"overview.html":{}}}],["1500",{"_index":1084,"title":{},"body":{"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["16",{"_index":612,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["16px",{"_index":151,"title":{},"body":{"components/AboutComponent.html":{}}}],["17",{"_index":614,"title":{},"body":{"injectables/ConfigService.html":{}}}],["18",{"_index":616,"title":{},"body":{"injectables/ConfigService.html":{}}}],["18px",{"_index":208,"title":{},"body":{"components/AboutComponent.html":{}}}],["19",{"_index":117,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["19.1.2",{"_index":1404,"title":{},"body":{"dependencies.html":{}}}],["19.2.0",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["19.2.10",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["19.2.8",{"_index":1416,"title":{},"body":{"index.html":{}}}],["1px",{"_index":227,"title":{},"body":{"components/AboutComponent.html":{}}}],["1rem",{"_index":150,"title":{},"body":{"components/AboutComponent.html":{}}}],["2",{"_index":586,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"overview.html":{}}}],["2).subscribe(q",{"_index":1193,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["2.3.0",{"_index":1407,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":619,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"overview.html":{}}}],["200",{"_index":135,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["201",{"_index":716,"title":{},"body":{"injectables/ConfigService.html":{}}}],["2025",{"_index":902,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["204",{"_index":718,"title":{},"body":{"injectables/ConfigService.html":{}}}],["21",{"_index":621,"title":{},"body":{"injectables/ConfigService.html":{}}}],["22",{"_index":623,"title":{},"body":{"injectables/ConfigService.html":{}}}],["22t12:00:00",{"_index":904,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["23",{"_index":625,"title":{},"body":{"injectables/ConfigService.html":{}}}],["24",{"_index":627,"title":{},"body":{"injectables/ConfigService.html":{}}}],["25",{"_index":629,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["26",{"_index":631,"title":{},"body":{"injectables/ConfigService.html":{}}}],["27",{"_index":633,"title":{},"body":{"injectables/ConfigService.html":{}}}],["28",{"_index":635,"title":{},"body":{"injectables/ConfigService.html":{}}}],["29",{"_index":637,"title":{},"body":{"injectables/ConfigService.html":{}}}],["2px",{"_index":237,"title":{},"body":{"components/AboutComponent.html":{}}}],["2rem",{"_index":225,"title":{},"body":{"components/AboutComponent.html":{}}}],["2xx",{"_index":714,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3",{"_index":588,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["30",{"_index":639,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3000",{"_index":1090,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["301",{"_index":721,"title":{},"body":{"injectables/ConfigService.html":{}}}],["302",{"_index":723,"title":{},"body":{"injectables/ConfigService.html":{}}}],["31",{"_index":641,"title":{},"body":{"injectables/ConfigService.html":{}}}],["32",{"_index":643,"title":{},"body":{"injectables/ConfigService.html":{}}}],["33",{"_index":645,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["34",{"_index":647,"title":{},"body":{"injectables/ConfigService.html":{}}}],["35",{"_index":649,"title":{},"body":{"injectables/ConfigService.html":{}}}],["36",{"_index":651,"title":{},"body":{"injectables/ConfigService.html":{}}}],["37",{"_index":653,"title":{},"body":{"injectables/ConfigService.html":{}}}],["38",{"_index":655,"title":{},"body":{"injectables/ConfigService.html":{}}}],["39",{"_index":657,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3xx",{"_index":719,"title":{},"body":{"injectables/ConfigService.html":{}}}],["4",{"_index":590,"title":{},"body":{"injectables/ConfigService.html":{}}}],["4.0.2",{"_index":1395,"title":{},"body":{"dependencies.html":{}}}],["4.34.0",{"_index":1392,"title":{},"body":{"dependencies.html":{}}}],["4.35.0",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["4.36.0",{"_index":1391,"title":{},"body":{"dependencies.html":{}}}],["4.37.0",{"_index":1398,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1368,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":659,"title":{},"body":{"injectables/ConfigService.html":{}}}],["400",{"_index":726,"title":{},"body":{"injectables/ConfigService.html":{}}}],["401",{"_index":136,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["403",{"_index":729,"title":{},"body":{"injectables/ConfigService.html":{}}}],["404",{"_index":137,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["409",{"_index":732,"title":{},"body":{"injectables/ConfigService.html":{}}}],["41",{"_index":661,"title":{},"body":{"injectables/ConfigService.html":{}}}],["42",{"_index":663,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{}}}],["43",{"_index":665,"title":{},"body":{"injectables/ConfigService.html":{}}}],["44",{"_index":667,"title":{},"body":{"injectables/ConfigService.html":{}}}],["45",{"_index":669,"title":{},"body":{"injectables/ConfigService.html":{}}}],["46",{"_index":671,"title":{},"body":{"injectables/ConfigService.html":{}}}],["47",{"_index":673,"title":{},"body":{"injectables/ConfigService.html":{}}}],["47.9375rem",{"_index":174,"title":{},"body":{"components/AboutComponent.html":{}}}],["48",{"_index":675,"title":{},"body":{"injectables/ConfigService.html":{}}}],["4px",{"_index":171,"title":{},"body":{"components/AboutComponent.html":{}}}],["4xx",{"_index":724,"title":{},"body":{"injectables/ConfigService.html":{}}}],["5",{"_index":592,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/IDpProduct.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{}}}],["50",{"_index":112,"title":{},"body":{"components/AboutComponent.html":{}}}],["500",{"_index":138,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["503",{"_index":736,"title":{},"body":{"injectables/ConfigService.html":{}}}],["5xx",{"_index":733,"title":{},"body":{"injectables/ConfigService.html":{}}}],["6",{"_index":594,"title":{},"body":{"injectables/ConfigService.html":{}}}],["6.7.2",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":1370,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":596,"title":{},"body":{"injectables/ConfigService.html":{}}}],["7.8.0",{"_index":1405,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["700",{"_index":204,"title":{},"body":{"components/AboutComponent.html":{}}}],["73",{"_index":1373,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1369,"title":{},"body":{"coverage.html":{}}}],["767px",{"_index":176,"title":{},"body":{"components/AboutComponent.html":{}}}],["77",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["79990001122",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{}}}],["79991234567",{"_index":1109,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["8",{"_index":122,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["8/10",{"_index":1372,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1371,"title":{},"body":{"coverage.html":{}}}],["800px",{"_index":149,"title":{},"body":{"components/AboutComponent.html":{}}}],["8px",{"_index":166,"title":{},"body":{"components/AboutComponent.html":{}}}],["9",{"_index":599,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["90",{"_index":146,"title":{},"body":{"components/AboutComponent.html":{}}}],["90vw",{"_index":148,"title":{},"body":{"components/AboutComponent.html":{}}}],["a.quantity",{"_index":497,"title":{},"body":{"interfaces/CartItem.html":{}}}],["about'},{'name",{"_index":266,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["about.component.css",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.css,../../../styles/root.css",{"_index":31,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{}}}],["aboutcomponent",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{},"coverage.html":{}}}],["accordion",{"_index":196,"title":{},"body":{"components/AboutComponent.html":{}}}],["ach",{"_index":1239,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievement",{"_index":302,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IUserHasAchievement.html":{}}}],["achievementid",{"_index":284,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["achievementid).pipe",{"_index":1299,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievementids",{"_index":580,"title":{},"body":{"injectables/ConfigService.html":{}}}],["achievements",{"_index":278,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"interfaces/IDpUserProj.html":{}}}],["achievements.service",{"_index":90,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["achievements.service.ts",{"_index":1212,"title":{},"body":{"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["achievements.service.ts:117",{"_index":1265,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:135",{"_index":1245,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:154",{"_index":1228,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:179",{"_index":1258,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:19",{"_index":1270,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:20",{"_index":1226,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:288",{"_index":1249,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:34",{"_index":1261,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:44",{"_index":1243,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:48",{"_index":1263,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:62",{"_index":1240,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:80",{"_index":1254,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:98",{"_index":1235,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievementsservice",{"_index":274,"title":{"injectables/AchievementsService.html":{}},"body":{"injectables/AchievementsService.html":{},"coverage.html":{}}}],["achievementtitle",{"_index":318,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["actions",{"_index":221,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["actual_component",{"_index":270,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["addcategory",{"_index":692,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addcategoryfailed",{"_index":646,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addcategorysuccess",{"_index":598,"title":{},"body":{"injectables/ConfigService.html":{}}}],["added",{"_index":1139,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addimage",{"_index":689,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addimagefailed",{"_index":644,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addimagesuccess",{"_index":597,"title":{},"body":{"injectables/ConfigService.html":{}}}],["additional",{"_index":1475,"title":{},"body":{"index.html":{}}}],["addtocart",{"_index":680,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addtocart(request",{"_index":1135,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addtocartfailed",{"_index":634,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addtocartsuccess",{"_index":587,"title":{},"body":{"injectables/ConfigService.html":{}}}],["alertservice",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["align",{"_index":185,"title":{},"body":{"components/AboutComponent.html":{}}}],["always_fail_key",{"_index":1214,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["alwaysfailmode",{"_index":1269,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["angular",{"_index":107,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["angular/cdk",{"_index":1378,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":324,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["angular/compiler",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":455,"title":{},"body":{"interfaces/CartItem.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1383,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":87,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{},"dependencies.html":{}}}],["api",{"_index":115,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["api/achievements",{"_index":279,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["api/achievements/1",{"_index":281,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["api/auth",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/auth/login",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/auth/logout",{"_index":710,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/auth/register",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/authproj",{"_index":344,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/authproj/login",{"_index":346,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/authproj/register",{"_index":354,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/cart/add",{"_index":681,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/cart/remove",{"_index":698,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/cart/update",{"_index":700,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/categories/add",{"_index":693,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/checkout",{"_index":682,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/dpcategories",{"_index":748,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["api/dpcategories/1",{"_index":751,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["api/dpimages",{"_index":792,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/10",{"_index":819,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/10/image",{"_index":824,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/byproduct/5",{"_index":830,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpordercompositions",{"_index":853,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["api/dpordercompositions/1",{"_index":856,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["api/dporders",{"_index":899,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["api/dporders/1",{"_index":912,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["api/dpproductattributes",{"_index":938,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["api/dpproductattributes/1",{"_index":950,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["api/dpsizes",{"_index":978,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["api/dpsizes/1",{"_index":985,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["api/dpuserprojs",{"_index":1010,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["api/dpuserprojs/1",{"_index":1017,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["api/dpusers",{"_index":1040,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["api/dpusers/1",{"_index":1045,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["api/login",{"_index":678,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products",{"_index":684,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ProductsService.html":{}}}],["api/products/1",{"_index":1149,"title":{},"body":{"injectables/ProductsService.html":{}}}],["api/products/add",{"_index":690,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/addtocart",{"_index":1137,"title":{},"body":{"injectables/ProductsService.html":{}}}],["api/products/all",{"_index":702,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/create",{"_index":686,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/info",{"_index":704,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/profile/update",{"_index":688,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/register",{"_index":679,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/reset",{"_index":708,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/switch",{"_index":695,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/toggle",{"_index":706,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/shopcart",{"_index":1186,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/addtocart",{"_index":1174,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/checkout",{"_index":1178,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/quantity?productid=1&sizeid=2",{"_index":1191,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/updatecart",{"_index":1201,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/userachievements",{"_index":1241,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/1/14",{"_index":1255,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/completed/vasya",{"_index":1246,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/create/1/14",{"_index":1236,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/exists/1/14",{"_index":1229,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/unlock/1/14",{"_index":1266,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["apiendpoints",{"_index":581,"title":{},"body":{"injectables/ConfigService.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{}}}],["appearance",{"_index":519,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["application",{"_index":1426,"title":{},"body":{"index.html":{}}}],["aria",{"_index":139,"title":{},"body":{"components/AboutComponent.html":{}}}],["artifacts",{"_index":1449,"title":{},"body":{"index.html":{}}}],["asp.net",{"_index":109,"title":{},"body":{"components/AboutComponent.html":{}}}],["asyncpipe",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["attr",{"_index":946,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpProductAttribute.html":{}}}],["attribute",{"_index":1101,"title":{},"body":{"interfaces/IDpProductAttribute.html":{}}}],["attributes",{"_index":928,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts",{"_index":927,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"coverage.html":{}}}],["attributes.service.ts:103",{"_index":960,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:118",{"_index":949,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:16",{"_index":934,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:31",{"_index":952,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:46",{"_index":957,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:74",{"_index":937,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attrs",{"_index":954,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["authprojservice",{"_index":340,"title":{"injectables/AuthProjService.html":{}},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["authservice",{"_index":97,"title":{"injectables/AuthService.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["auto",{"_index":153,"title":{},"body":{"components/AboutComponent.html":{}}}],["automatically",{"_index":1427,"title":{},"body":{"index.html":{}}}],["available",{"_index":1440,"title":{},"body":{"index.html":{}}}],["avatar",{"_index":232,"title":{},"body":{"components/AboutComponent.html":{}}}],["avatar:hover",{"_index":242,"title":{},"body":{"components/AboutComponent.html":{}}}],["b",{"_index":495,"title":{},"body":{"interfaces/CartItem.html":{}}}],["b.price",{"_index":498,"title":{},"body":{"interfaces/CartItem.html":{}}}],["b.quantity",{"_index":499,"title":{},"body":{"interfaces/CartItem.html":{}}}],["backbuttoncomponent",{"_index":26,"title":{},"body":{"components/AboutComponent.html":{}}}],["backend",{"_index":343,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["background",{"_index":156,"title":{},"body":{"components/AboutComponent.html":{}}}],["badrequest",{"_index":725,"title":{},"body":{"injectables/ConfigService.html":{}}}],["base",{"_index":159,"title":{},"body":{"components/AboutComponent.html":{}}}],["baseurl",{"_index":288,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["behaviorsubject",{"_index":383,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":381,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["binary",{"_index":797,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["blob",{"_index":823,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["blue",{"_index":962,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["blur",{"_index":485,"title":{},"body":{"interfaces/CartItem.html":{}}}],["body",{"_index":283,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["boolean",{"_index":376,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["border",{"_index":161,"title":{},"body":{"components/AboutComponent.html":{}}}],["bottom",{"_index":188,"title":{},"body":{"components/AboutComponent.html":{}}}],["box",{"_index":167,"title":{},"body":{"components/AboutComponent.html":{}}}],["browser",{"_index":1384,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["build",{"_index":1445,"title":{},"body":{"index.html":{}}}],["buildthis",{"_index":1446,"title":{},"body":{"index.html":{}}}],["button",{"_index":231,"title":{},"body":{"components/AboutComponent.html":{}}}],["button.component",{"_index":93,"title":{},"body":{"components/AboutComponent.html":{}}}],["button/back",{"_index":92,"title":{},"body":{"components/AboutComponent.html":{}}}],["buttonnotworking",{"_index":654,"title":{},"body":{"injectables/ConfigService.html":{}}}],["buttons.css",{"_index":252,"title":{},"body":{"components/AboutComponent.html":{}}}],["cards.css",{"_index":253,"title":{},"body":{"components/AboutComponent.html":{}}}],["carousel.css",{"_index":256,"title":{},"body":{"components/AboutComponent.html":{}}}],["cart",{"_index":472,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["cart.component.css",{"_index":479,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cart.component.html",{"_index":478,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cart.component.ts",{"_index":446,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["cart.service.ts",{"_index":1166,"title":{},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["cart.service.ts:101",{"_index":1190,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:124",{"_index":1177,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:136",{"_index":1197,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:151",{"_index":1183,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:20",{"_index":1172,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:35",{"_index":1185,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:60",{"_index":1200,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:85",{"_index":1173,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart/page",{"_index":445,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["cartitem",{"_index":442,"title":{"interfaces/CartItem.html":{}},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["cartitem.productid",{"_index":544,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartitem.sizeid",{"_index":545,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartitem[k",{"_index":569,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartitems",{"_index":486,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"injectables/ShopCartService.html":{}}}],["cartservice",{"_index":500,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartviewmodel",{"_index":508,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartviewmodel.cartitems.map(item",{"_index":511,"title":{},"body":{"interfaces/CartItem.html":{}}}],["case",{"_index":338,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["cat",{"_index":1069,"title":{},"body":{"interfaces/IDpCategory.html":{}}}],["catcherror",{"_index":1271,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["catcherror(err",{"_index":1306,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["catcherror(error",{"_index":1286,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["categories.service.ts",{"_index":747,"title":{},"body":{"injectables/DpCategoriesService.html":{},"coverage.html":{}}}],["categories.service.ts:105",{"_index":768,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:129",{"_index":776,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:142",{"_index":771,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:57",{"_index":765,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:69",{"_index":772,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:82",{"_index":774,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["cdr",{"_index":501,"title":{},"body":{"interfaces/CartItem.html":{}}}],["center",{"_index":201,"title":{},"body":{"components/AboutComponent.html":{}}}],["changedetection",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["changedetectionstrategy",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["changedetectionstrategy.onpush",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["changedetectorref",{"_index":467,"title":{},"body":{"interfaces/CartItem.html":{}}}],["checkauthstatus",{"_index":361,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["checkout",{"_index":548,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/ShopCartService.html":{}}}],["checkout(cart",{"_index":1176,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["checkoutemptycart",{"_index":674,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkoutfailed",{"_index":636,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkoutsuccess",{"_index":589,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkuserachievementexists",{"_index":1215,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["checkuserachievementexists(userprojid",{"_index":1227,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["choose",{"_index":1471,"title":{},"body":{"index.html":{}}}],["class",{"_index":103,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["cli",{"_index":127,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["code",{"_index":1432,"title":{},"body":{"index.html":{}}}],["color",{"_index":182,"title":{},"body":{"components/AboutComponent.html":{}}}],["column",{"_index":245,"title":{},"body":{"components/AboutComponent.html":{}}}],["columns",{"_index":487,"title":{},"body":{"interfaces/CartItem.html":{}}}],["come",{"_index":1470,"title":{},"body":{"index.html":{}}}],["command",{"_index":1464,"title":{},"body":{"index.html":{}}}],["commerce",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["commonmodule",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{}}}],["compile",{"_index":1447,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1439,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":265,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{},"index.html":{},"overview.html":{}}}],["components/back",{"_index":91,"title":{},"body":{"components/AboutComponent.html":{}}}],["components/theme",{"_index":94,"title":{},"body":{"components/AboutComponent.html":{}}}],["composition",{"_index":858,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["compositions",{"_index":852,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts",{"_index":851,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"coverage.html":{}}}],["compositions.service.ts:102",{"_index":882,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:131",{"_index":876,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:161",{"_index":884,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:176",{"_index":879,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:73",{"_index":873,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:87",{"_index":880,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["config.service",{"_index":1275,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["configservice",{"_index":39,"title":{"injectables/ConfigService.html":{}},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["confirmation",{"_index":557,"title":{},"body":{"interfaces/CartItem.html":{}}}],["conflict",{"_index":731,"title":{},"body":{"injectables/ConfigService.html":{}}}],["console.error",{"_index":517,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log",{"_index":812,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log(`test",{"_index":337,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["console.log(attrs",{"_index":955,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["console.log(cart",{"_index":1188,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["console.log(cartviewmodel",{"_index":509,"title":{},"body":{"interfaces/CartItem.html":{}}}],["console.log(categories",{"_index":750,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["console.log(compositions",{"_index":855,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["console.log(image",{"_index":808,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["console.log(images",{"_index":816,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["console.log(list",{"_index":313,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log(orders",{"_index":916,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["console.log(products",{"_index":1153,"title":{},"body":{"injectables/ProductsService.html":{}}}],["console.log(sizes",{"_index":989,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["console.log(users",{"_index":1022,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["console.warn",{"_index":1289,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["const",{"_index":388,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpImagesService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["constructor",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["constructor(http",{"_index":295,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["constructor(private",{"_index":329,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["constructor(router",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{}}}],["content",{"_index":216,"title":{},"body":{"components/AboutComponent.html":{}}}],["cookie",{"_index":1402,"title":{},"body":{"dependencies.html":{}}}],["core",{"_index":110,"title":{},"body":{"components/AboutComponent.html":{}}}],["coverage",{"_index":1348,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createachievement",{"_index":289,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["createachievement(achievement",{"_index":297,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["created",{"_index":715,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createdpcategory",{"_index":760,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["createdpcategory(dpcategory",{"_index":766,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["createdpimage",{"_index":781,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["createdpimage(request",{"_index":789,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["createdporder",{"_index":890,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["createdporder(dporder",{"_index":896,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["createdpordercomposition",{"_index":868,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["createdpordercomposition(dpordercomposition",{"_index":874,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["createdpproductattribute",{"_index":929,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["createdpproductattribute(dpproductattribute",{"_index":935,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["createdpsize",{"_index":969,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["createdpsize(dpsize",{"_index":975,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["createdpuser",{"_index":1032,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["createdpuser(dpuser",{"_index":1038,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["createdpuserproj",{"_index":1002,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["createdpuserproj(dpuserproj",{"_index":1008,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["createproduct",{"_index":685,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ProductsService.html":{}}}],["createproduct(product",{"_index":1140,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductfailed",{"_index":640,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createproductsuccess",{"_index":593,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createuserachievement",{"_index":1216,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["createuserachievement(userprojid",{"_index":1234,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["css",{"_index":121,"title":{},"body":{"components/AboutComponent.html":{}}}],["currencypipe",{"_index":451,"title":{},"body":{"interfaces/CartItem.html":{}}}],["current",{"_index":572,"title":{},"body":{"interfaces/CartItem.html":{}}}],["currentquantity",{"_index":1195,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cursor",{"_index":235,"title":{},"body":{"components/AboutComponent.html":{}}}],["custom_elements_schema",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["dark",{"_index":250,"title":{},"body":{"components/AboutComponent.html":{}}}],["data",{"_index":246,"title":{},"body":{"components/AboutComponent.html":{},"injectables/DpImagesService.html":{}}}],["date",{"_index":449,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{}}}],["date().toisostring",{"_index":907,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["decreasequantity(item",{"_index":530,"title":{},"body":{"interfaces/CartItem.html":{}}}],["default",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["defined",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["delete",{"_index":287,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["deleteachievement",{"_index":290,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["deleteachievement(id",{"_index":304,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["deletedpcategory",{"_index":761,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["deletedpcategory(id",{"_index":770,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["deletedpimage",{"_index":782,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["deletedpimage(id",{"_index":809,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["deletedporder",{"_index":891,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["deletedporder(id",{"_index":910,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["deletedpordercomposition",{"_index":869,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["deletedpordercomposition(id",{"_index":878,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["deletedpproductattribute",{"_index":930,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["deletedpproductattribute(id",{"_index":948,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["deletedpsize",{"_index":970,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["deletedpsize(id",{"_index":983,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["deletedpuser",{"_index":1033,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["deletedpuser(id",{"_index":1043,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["deletedpuserproj",{"_index":1003,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["deletedpuserproj(id",{"_index":1015,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["deleteproduct",{"_index":1130,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproduct(id",{"_index":1147,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dependencies",{"_index":1377,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":277,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["detail",{"_index":1087,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["detailed",{"_index":1480,"title":{},"body":{"index.html":{}}}],["development",{"_index":1417,"title":{},"body":{"index.html":{}}}],["direction",{"_index":222,"title":{},"body":{"components/AboutComponent.html":{}}}],["directive",{"_index":264,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["directives",{"_index":269,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{},"index.html":{}}}],["directory",{"_index":1451,"title":{},"body":{"index.html":{}}}],["display",{"_index":198,"title":{},"body":{"components/AboutComponent.html":{}}}],["dist",{"_index":1450,"title":{},"body":{"index.html":{}}}],["docs",{"_index":268,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["docs.component.css",{"_index":742,"title":{},"body":{"components/DocsComponent.html":{}}}],["docs.component.html",{"_index":743,"title":{},"body":{"components/DocsComponent.html":{}}}],["docscomponent",{"_index":267,"title":{"components/DocsComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{},"coverage.html":{}}}],["documentation",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["dpattributes",{"_index":860,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["dpattributesid",{"_index":939,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{}}}],["dpcategories",{"_index":1104,"title":{},"body":{"interfaces/IDpSize.html":{}}}],["dpcategoriesservice",{"_index":745,"title":{"injectables/DpCategoriesService.html":{}},"body":{"injectables/DpCategoriesService.html":{},"coverage.html":{}}}],["dpcategory",{"_index":769,"title":{},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpProduct.html":{}}}],["dpcategorydescription",{"_index":755,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["dpcategoryid",{"_index":753,"title":{},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"injectables/ProductsService.html":{}}}],["dpcategorytitle",{"_index":754,"title":{},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{}}}],["dpcolor",{"_index":942,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["dpcost",{"_index":1083,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["dpcount",{"_index":1099,"title":{},"body":{"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpdatetimeorder",{"_index":1076,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["dpdescription",{"_index":1096,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpdiscountpercent",{"_index":1095,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpemail",{"_index":1111,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpfullname",{"_index":1108,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpimages",{"_index":1097,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpimagesid",{"_index":804,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{}}}],["dpimagesservice",{"_index":779,"title":{"injectables/DpImagesService.html":{}},"body":{"injectables/DpImagesService.html":{},"coverage.html":{}}}],["dpimagetitle",{"_index":796,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"interfaces/IUpdateDpImageRequest.html":{}}}],["dporder",{"_index":861,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["dpordercomposition",{"_index":877,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["dpordercompositionsservice",{"_index":849,"title":{"injectables/DpOrderCompositionsService.html":{}},"body":{"injectables/DpOrderCompositionsService.html":{},"coverage.html":{}}}],["dporderid",{"_index":859,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpUser.html":{}}}],["dporders",{"_index":1110,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpordersservice",{"_index":887,"title":{"injectables/DpOrdersService.html":{}},"body":{"injectables/DpOrdersService.html":{},"coverage.html":{}}}],["dppassword",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpUser.html":{}}}],["dpphonenumber",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpUser.html":{}}}],["dpprice",{"_index":1092,"title":{},"body":{"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpproduct",{"_index":1073,"title":{},"body":{"interfaces/IDpImage.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpproductattribute",{"_index":947,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["dpproductattributes",{"_index":1098,"title":{},"body":{"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{}}}],["dpproductattributesservice",{"_index":925,"title":{"injectables/DpProductAttributesService.html":{}},"body":{"injectables/DpProductAttributesService.html":{},"coverage.html":{}}}],["dpproductdescription",{"_index":1143,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dpproductid",{"_index":795,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpProductAttributesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IUpdateDpImageRequest.html":{},"injectables/ProductsService.html":{}}}],["dpproducts",{"_index":1070,"title":{},"body":{"interfaces/IDpCategory.html":{}}}],["dpproducttitle",{"_index":1142,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dppurchaseprice",{"_index":1094,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpquantity",{"_index":1082,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["dpregistrationdate",{"_index":1107,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpsize",{"_index":940,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpsizenavigation",{"_index":1102,"title":{},"body":{"interfaces/IDpProductAttribute.html":{}}}],["dpsizesservice",{"_index":966,"title":{"injectables/DpSizesService.html":{}},"body":{"injectables/DpSizesService.html":{},"coverage.html":{}}}],["dptitle",{"_index":1093,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dptypeorder",{"_index":1077,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["dpuser",{"_index":1042,"title":{},"body":{"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{}}}],["dpuserid",{"_index":900,"title":{},"body":{"injectables/DpOrdersService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpUser.html":{}}}],["dpusername",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{}}}],["dpuserproj",{"_index":1014,"title":{},"body":{"injectables/DpUserProjsService.html":{},"interfaces/IUserHasAchievement.html":{}}}],["dpuserprojid",{"_index":1011,"title":{},"body":{"injectables/DpUserProjsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["dpuserprojs",{"_index":1057,"title":{},"body":{"interfaces/IAchievement.html":{}}}],["dpuserprojsservice",{"_index":999,"title":{"injectables/DpUserProjsService.html":{}},"body":{"injectables/DpUserProjsService.html":{},"coverage.html":{}}}],["dpusersservice",{"_index":1030,"title":{"injectables/DpUsersService.html":{}},"body":{"injectables/DpUsersService.html":{},"coverage.html":{}}}],["dynamic",{"_index":1385,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1467,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":1469,"title":{},"body":{"index.html":{}}}],["e5e5e5",{"_index":230,"title":{},"body":{"components/AboutComponent.html":{}}}],["element",{"_index":263,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["email",{"_index":1112,"title":{},"body":{"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{}}}],["end",{"_index":1466,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":713,"title":{},"body":{"injectables/ConfigService.html":{}}}],["endpoints",{"_index":577,"title":{},"body":{"injectables/ConfigService.html":{}}}],["entity",{"_index":132,"title":{},"body":{"components/AboutComponent.html":{}}}],["err",{"_index":1307,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["error",{"_index":516,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["error.status",{"_index":1287,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["eslint",{"_index":129,"title":{},"body":{"components/AboutComponent.html":{}}}],["example",{"_index":114,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["excel",{"_index":1167,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["execute",{"_index":1458,"title":{},"body":{"index.html":{}}}],["exists",{"_index":1232,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["export",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["exporttoexcel",{"_index":1168,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["exporttoexcel(orderid",{"_index":1182,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["extends",{"_index":447,"title":{},"body":{"interfaces/CartItem.html":{}}}],["failedachievementid",{"_index":1296,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedachievementid).pipe",{"_index":1305,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedid",{"_index":1250,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedtoload",{"_index":652,"title":{},"body":{"injectables/ConfigService.html":{}}}],["false",{"_index":493,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["feature",{"_index":209,"title":{},"body":{"components/AboutComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["files",{"_index":1431,"title":{},"body":{"index.html":{}}}],["flex",{"_index":199,"title":{},"body":{"components/AboutComponent.html":{}}}],["following",{"_index":1463,"title":{},"body":{"index.html":{}}}],["font",{"_index":189,"title":{},"body":{"components/AboutComponent.html":{}}}],["fontawesome",{"_index":1397,"title":{},"body":{"dependencies.html":{}}}],["forbidden",{"_index":728,"title":{},"body":{"injectables/ConfigService.html":{}}}],["formdata",{"_index":794,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata).subscribe",{"_index":837,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata).subscribe(image",{"_index":803,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('dpimagetitle",{"_index":800,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('dpproductid",{"_index":799,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('file",{"_index":801,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["forms",{"_index":120,"title":{},"body":{"components/AboutComponent.html":{}}}],["formsmodule",{"_index":454,"title":{},"body":{"interfaces/CartItem.html":{}}}],["fortawesome/fontawesome",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["found",{"_index":722,"title":{},"body":{"injectables/ConfigService.html":{}}}],["framework",{"_index":133,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["free",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["gap",{"_index":202,"title":{},"body":{"components/AboutComponent.html":{}}}],["generate",{"_index":1437,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1413,"title":{},"body":{"index.html":{}}}],["get(`${this.baseurl}/completed/${username",{"_index":1284,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getachievementbyid",{"_index":291,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getachievementbyid(id",{"_index":308,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getallachievements",{"_index":292,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getalldpcategories",{"_index":762,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getalldpimages",{"_index":783,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getalldpordercompositions",{"_index":870,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getalldporders",{"_index":892,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getalldpproductattributes",{"_index":931,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getalldpsizes",{"_index":971,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getalldpuserprojs",{"_index":1004,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getalldpusers",{"_index":1034,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getallproducts",{"_index":1131,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getalluserachievements",{"_index":1217,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getalwaysfailmode",{"_index":1218,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getcart",{"_index":1169,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcartquantity",{"_index":1170,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcartquantity(productid",{"_index":1189,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcompletedachievementsbyusername",{"_index":1219,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getcompletedachievementsbyusername(username",{"_index":1244,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getdpcategorybyid",{"_index":763,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getdpcategorybyid(id",{"_index":773,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getdpimagebyid",{"_index":784,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagebyid(id",{"_index":817,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagedata",{"_index":785,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagedata(id",{"_index":821,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagesbyproductid",{"_index":786,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagesbyproductid(productid",{"_index":828,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdporderbyid",{"_index":893,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getdporderbyid(id",{"_index":917,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getdpordercompositionbyid",{"_index":871,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getdpordercompositionbyid(id",{"_index":881,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getdpproductattributebyid",{"_index":932,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getdpproductattributebyid(id",{"_index":956,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getdpsizebyid",{"_index":972,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getdpsizebyid(id",{"_index":990,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getdpuserbyid",{"_index":1035,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getdpuserbyid(id",{"_index":1049,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getdpuserprojbyid",{"_index":1005,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getdpuserprojbyid(id",{"_index":1023,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getfailedachievementid",{"_index":1220,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getfailedachievementid(successachievementid",{"_index":1248,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getproductbyid",{"_index":1132,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getproductbyid(id",{"_index":1154,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getting",{"_index":1410,"title":{"index.html":{}},"body":{}}],["gettotal",{"_index":521,"title":{},"body":{"interfaces/CartItem.html":{}}}],["gettotalamount",{"_index":522,"title":{},"body":{"interfaces/CartItem.html":{}}}],["getuserachievement",{"_index":1221,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getuserachievement(userprojid",{"_index":1253,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["handleachievement",{"_index":1222,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["handleachievement(userprojid",{"_index":536,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["header",{"_index":197,"title":{},"body":{"components/AboutComponent.html":{}}}],["header.css",{"_index":255,"title":{},"body":{"components/AboutComponent.html":{}}}],["height",{"_index":194,"title":{},"body":{"components/AboutComponent.html":{}}}],["helpbuilding",{"_index":1444,"title":{},"body":{"index.html":{}}}],["html",{"_index":262,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{}}}],["http",{"_index":124,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["http://localhost:4200",{"_index":1425,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":125,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["httpstatuscodes",{"_index":582,"title":{},"body":{"injectables/ConfigService.html":{}}}],["iachievement",{"_index":298,"title":{"interfaces/IAchievement.html":{}},"body":{"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["iaddtocartrequest",{"_index":1059,"title":{"interfaces/IAddToCartRequest.html":{}},"body":{"interfaces/IAddToCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["icartitem",{"_index":448,"title":{"interfaces/ICartItem.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"coverage.html":{}}}],["icartviewmodel",{"_index":465,"title":{"interfaces/ICartViewModel.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["icon",{"_index":179,"title":{},"body":{"components/AboutComponent.html":{}}}],["icons.css",{"_index":257,"title":{},"body":{"components/AboutComponent.html":{}}}],["icreatedpimagerequest",{"_index":790,"title":{"interfaces/ICreateDpImageRequest.html":{}},"body":{"injectables/DpImagesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"coverage.html":{}}}],["id",{"_index":280,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["identifier",{"_index":1350,"title":{},"body":{"coverage.html":{}}}],["idpcategory",{"_index":767,"title":{"interfaces/IDpCategory.html":{}},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpimage",{"_index":839,"title":{"interfaces/IDpImage.html":{}},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"coverage.html":{}}}],["idporder",{"_index":897,"title":{"interfaces/IDpOrder.html":{}},"body":{"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpUser.html":{},"coverage.html":{}}}],["idpordercomposition",{"_index":875,"title":{"interfaces/IDpOrderComposition.html":{}},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{},"coverage.html":{}}}],["idporderdetail",{"_index":1085,"title":{"interfaces/IDpOrderDetail.html":{}},"body":{"interfaces/IDpOrderDetail.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["idpproduct",{"_index":1066,"title":{"interfaces/IDpProduct.html":{}},"body":{"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["idpproductattribute",{"_index":936,"title":{"interfaces/IDpProductAttribute.html":{}},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpsize",{"_index":976,"title":{"interfaces/IDpSize.html":{}},"body":{"injectables/DpSizesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpuser",{"_index":425,"title":{"interfaces/IDpUser.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"coverage.html":{}}}],["idpuserproj",{"_index":368,"title":{"interfaces/IDpUserProj.html":{}},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"coverage.html":{}}}],["ignore",{"_index":476,"title":{},"body":{"interfaces/CartItem.html":{}}}],["image",{"_index":691,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpImagesService.html":{}}}],["images",{"_index":815,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts",{"_index":780,"title":{},"body":{"injectables/DpImagesService.html":{},"coverage.html":{}}}],["images.service.ts:110",{"_index":791,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:140",{"_index":834,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:159",{"_index":810,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:18",{"_index":788,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:33",{"_index":813,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:48",{"_index":829,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:63",{"_index":818,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:79",{"_index":822,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["imagesdata",{"_index":805,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{}}}],["img",{"_index":1072,"title":{},"body":{"interfaces/IDpImage.html":{}}}],["implements",{"_index":481,"title":{},"body":{"interfaces/CartItem.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{}}}],["includes",{"_index":1434,"title":{},"body":{"index.html":{}}}],["including",{"_index":1479,"title":{},"body":{"index.html":{}}}],["increasequantity(item",{"_index":526,"title":{},"body":{"interfaces/CartItem.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["information",{"_index":1478,"title":{},"body":{"index.html":{}}}],["inject",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["inject(configservice",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{}}}],["inject(tuialertservice",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["inject(userachievementsservice",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["injectable",{"_index":273,"title":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["injectables",{"_index":275,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"overview.html":{}}}],["input[type=\"file",{"_index":798,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface",{"_index":441,"title":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"coverage.html":{}}}],["interface/iachievement",{"_index":325,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/UserAchievementsService.html":{}}}],["interface/iaddtocartrequest",{"_index":1162,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["interface/icartitem",{"_index":464,"title":{},"body":{"interfaces/CartItem.html":{}}}],["interface/icartviewmodel",{"_index":466,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["interface/icreatedpimagerequest",{"_index":841,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface/idpcategory",{"_index":778,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["interface/idpimage",{"_index":840,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface/idporder",{"_index":924,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["interface/idpordercomposition",{"_index":886,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["interface/idporderdetail",{"_index":1204,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["interface/idpproduct",{"_index":1161,"title":{},"body":{"injectables/ProductsService.html":{}}}],["interface/idpproductattribute",{"_index":965,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["interface/idpsize",{"_index":998,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["interface/idpuser",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DpUsersService.html":{}}}],["interface/idpuserproj",{"_index":386,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{}}}],["interface/iremovefromcartrequest",{"_index":1205,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["interface/iupdatecartrequest",{"_index":469,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["interface/iupdatedpimagerequest",{"_index":842,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface/iuserhasachievement",{"_index":1274,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["interfaces",{"_index":443,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"overview.html":{}}}],["iremovefromcartrequest",{"_index":1117,"title":{"interfaces/IRemoveFromCartRequest.html":{}},"body":{"interfaces/IRemoveFromCartRequest.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["isauthenticated",{"_index":359,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["isauthenticatedsubject",{"_index":360,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["isloading",{"_index":492,"title":{},"body":{"interfaces/CartItem.html":{}}}],["isobtained",{"_index":1126,"title":{},"body":{"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["item",{"_index":512,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{}}}],["item.productid",{"_index":540,"title":{},"body":{"interfaces/CartItem.html":{}}}],["item.quantity",{"_index":528,"title":{},"body":{"interfaces/CartItem.html":{}}}],["item.sizeid",{"_index":542,"title":{},"body":{"interfaces/CartItem.html":{}}}],["items",{"_index":200,"title":{},"body":{"components/AboutComponent.html":{}}}],["iupdatecartrequest",{"_index":468,"title":{"interfaces/IUpdateCartRequest.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["iupdatedpimagerequest",{"_index":833,"title":{"interfaces/IUpdateDpImageRequest.html":{}},"body":{"injectables/DpImagesService.html":{},"interfaces/IUpdateDpImageRequest.html":{},"coverage.html":{}}}],["iuserhasachievement",{"_index":1122,"title":{"interfaces/IUserHasAchievement.html":{}},"body":{"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["jsdoc",{"_index":113,"title":{},"body":{"components/AboutComponent.html":{}}}],["justify",{"_index":224,"title":{},"body":{"components/AboutComponent.html":{}}}],["jwt",{"_index":126,"title":{},"body":{"components/AboutComponent.html":{}}}],["k",{"_index":571,"title":{},"body":{"interfaces/CartItem.html":{}}}],["karma",{"_index":1459,"title":{},"body":{"index.html":{}}}],["key",{"_index":570,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["l",{"_index":961,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["layout.css",{"_index":258,"title":{},"body":{"components/AboutComponent.html":{}}}],["left",{"_index":180,"title":{},"body":{"components/AboutComponent.html":{}}}],["legend",{"_index":261,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["li",{"_index":213,"title":{},"body":{"components/AboutComponent.html":{}}}],["li::before",{"_index":215,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":193,"title":{},"body":{"components/AboutComponent.html":{}}}],["list",{"_index":210,"title":{},"body":{"components/AboutComponent.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["loadcartitems",{"_index":505,"title":{},"body":{"interfaces/CartItem.html":{}}}],["loadproductinfo",{"_index":703,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductinfofailed",{"_index":662,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductinfosuccess",{"_index":609,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproducts",{"_index":701,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductsfailed",{"_index":660,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductssuccess",{"_index":607,"title":{},"body":{"injectables/ConfigService.html":{}}}],["local",{"_index":1419,"title":{},"body":{"index.html":{}}}],["localstorage.getitem('projtoken",{"_index":402,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.getitem(userachievementsservice.always_fail_key",{"_index":1277,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["localstorage.removeitem('projtoken",{"_index":404,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.removeitem('token",{"_index":405,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["localstorage.removeitem('userprojid",{"_index":406,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem('projtoken",{"_index":396,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem('token",{"_index":440,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('userprojid",{"_index":397,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem(userachievementsservice.always_fail_key",{"_index":1276,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["login",{"_index":317,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["login(user",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(userproj",{"_index":367,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["loginfailed",{"_index":630,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loginsuccess",{"_index":584,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logout",{"_index":362,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["logoutproj",{"_index":709,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logoutprojfailed",{"_index":666,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logoutprojsuccess",{"_index":622,"title":{},"body":{"injectables/ConfigService.html":{}}}],["m",{"_index":941,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpSize.html":{}}}],["margin",{"_index":152,"title":{},"body":{"components/AboutComponent.html":{}}}],["matching",{"_index":272,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max",{"_index":144,"title":{},"body":{"components/AboutComponent.html":{}}}],["media",{"_index":173,"title":{},"body":{"components/AboutComponent.html":{}}}],["message",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["methods",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["middle",{"_index":186,"title":{},"body":{"components/AboutComponent.html":{}}}],["min(50rem",{"_index":147,"title":{},"body":{"components/AboutComponent.html":{}}}],["modify",{"_index":1430,"title":{},"body":{"index.html":{}}}],["modules",{"_index":1485,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":1477,"title":{},"body":{"index.html":{}}}],["movedpermanently",{"_index":720,"title":{},"body":{"injectables/ConfigService.html":{}}}],["mssql",{"_index":111,"title":{},"body":{"components/AboutComponent.html":{}}}],["multipart/form",{"_index":793,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["name",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["namefor",{"_index":1438,"title":{},"body":{"index.html":{}}}],["navigate",{"_index":1424,"title":{},"body":{"index.html":{}}}],["navigateto",{"_index":43,"title":{},"body":{"components/AboutComponent.html":{}}}],["navigateto(path",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{}}}],["navigatetohome",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{}}}],["navigatetoproductfailed",{"_index":664,"title":{},"body":{"injectables/ConfigService.html":{}}}],["navigatetoproductsuccess",{"_index":611,"title":{},"body":{"injectables/ConfigService.html":{}}}],["navigation.css",{"_index":254,"title":{},"body":{"components/AboutComponent.html":{}}}],["needs",{"_index":1474,"title":{},"body":{"index.html":{}}}],["new",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"index.html":{}}}],["newcomp",{"_index":865,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["neworder",{"_index":909,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["newpass",{"_index":356,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["newproduct",{"_index":1146,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newquantity",{"_index":527,"title":{},"body":{"interfaces/CartItem.html":{}}}],["newsize",{"_index":982,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["newuser",{"_index":355,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["next",{"_index":507,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ng",{"_index":1421,"title":{},"body":{"index.html":{}}}],["ngforof",{"_index":452,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ngif",{"_index":453,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ngondestroy",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{}}}],["ngoninit",{"_index":503,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ngx",{"_index":1401,"title":{},"body":{"dependencies.html":{}}}],["nocontent",{"_index":717,"title":{},"body":{"injectables/ConfigService.html":{}}}],["none",{"_index":212,"title":{},"body":{"components/AboutComponent.html":{}}}],["notfound",{"_index":730,"title":{},"body":{"injectables/ConfigService.html":{}}}],["null",{"_index":862,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/UserAchievementsService.html":{}}}],["number",{"_index":305,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["object",{"_index":583,"title":{},"body":{"injectables/ConfigService.html":{}}}],["observable",{"_index":303,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["of(false",{"_index":1290,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["of(void",{"_index":1294,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["ondestroy",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{}}}],["one",{"_index":1472,"title":{},"body":{"index.html":{}}}],["oninit",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["onsortchange(event",{"_index":575,"title":{},"body":{"interfaces/CartItem.html":{}}}],["onvaluechange",{"_index":568,"title":{},"body":{"interfaces/CartItem.html":{}}}],["open",{"_index":1293,"title":{},"body":{"injectables/UserAchievementsService.html":{},"index.html":{}}}],["opencategorydialogsuccess",{"_index":618,"title":{},"body":{"injectables/ConfigService.html":{}}}],["openimagedialogsuccess",{"_index":620,"title":{},"body":{"injectables/ConfigService.html":{}}}],["openproductdialogsuccess",{"_index":617,"title":{},"body":{"injectables/ConfigService.html":{}}}],["optimizes",{"_index":1453,"title":{},"body":{"index.html":{}}}],["optional",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["options",{"_index":483,"title":{},"body":{"interfaces/CartItem.html":{}}}],["order",{"_index":850,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["ordercomp",{"_index":1081,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["orderdate",{"_index":901,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orderdetails",{"_index":1181,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["orderid",{"_index":559,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["orders",{"_index":889,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts",{"_index":888,"title":{},"body":{"injectables/DpOrdersService.html":{},"coverage.html":{}}}],["orders.service.ts:101",{"_index":921,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:116",{"_index":911,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:16",{"_index":895,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:31",{"_index":914,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:46",{"_index":918,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:73",{"_index":898,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orderstatus",{"_index":905,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["overview",{"_index":1483,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":1376,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":155,"title":{},"body":{"components/AboutComponent.html":{}}}],["page",{"_index":143,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"index.html":{}}}],["pagecartcomponent",{"_index":480,"title":{},"body":{"interfaces/CartItem.html":{}}}],["param",{"_index":332,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["parameters",{"_index":51,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["parseint(localstorage.getitem('userprojid",{"_index":532,"title":{},"body":{"interfaces/CartItem.html":{}}}],["pass",{"_index":348,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["password",{"_index":347,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["path",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["payload",{"_index":389,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["payload).pipe",{"_index":393,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["performance",{"_index":1454,"title":{},"body":{"index.html":{}}}],["phonenumber",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipes",{"_index":1443,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1394,"title":{},"body":{"dependencies.html":{}}}],["pointer",{"_index":236,"title":{},"body":{"components/AboutComponent.html":{}}}],["post",{"_index":282,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["post(`${this.baseurl}/create/${userprojid}/${achievementid",{"_index":1282,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["powerful",{"_index":1435,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":130,"title":{},"body":{"components/AboutComponent.html":{}}}],["price",{"_index":489,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{}}}],["primary",{"_index":183,"title":{},"body":{"components/AboutComponent.html":{}}}],["private",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["product",{"_index":926,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["productid",{"_index":539,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpImagesService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["production",{"_index":1452,"title":{},"body":{"index.html":{}}}],["products",{"_index":1065,"title":{},"body":{"interfaces/ICartViewModel.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["products.service.ts",{"_index":1129,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["products.service.ts:102",{"_index":1158,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:117",{"_index":1148,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:142",{"_index":1136,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:17",{"_index":1134,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:32",{"_index":1151,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:47",{"_index":1155,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:75",{"_index":1141,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsservice",{"_index":1128,"title":{"injectables/ProductsService.html":{}},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["producttitle",{"_index":488,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderDetail.html":{}}}],["proj",{"_index":711,"title":{},"body":{"injectables/ConfigService.html":{}}}],["proj.service.ts",{"_index":342,"title":{},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["proj.service.ts:101",{"_index":374,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:122",{"_index":377,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:129",{"_index":366,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:140",{"_index":371,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:41",{"_index":379,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:42",{"_index":382,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:47",{"_index":365,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:69",{"_index":369,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["project",{"_index":1115,"title":{},"body":{"interfaces/IDpUserProj.html":{},"index.html":{}}}],["projs.service.ts",{"_index":1000,"title":{},"body":{"injectables/DpUserProjsService.html":{},"coverage.html":{}}}],["projs.service.ts:110",{"_index":1016,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:16",{"_index":1007,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:31",{"_index":1019,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:46",{"_index":1024,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:70",{"_index":1009,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:95",{"_index":1027,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["properties",{"_index":35,"title":{"properties.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"properties.html":{}}}],["property",{"_index":1058,"title":{},"body":{"interfaces/IAchievement.html":{},"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["protected",{"_index":482,"title":{},"body":{"interfaces/CartItem.html":{}}}],["providedin",{"_index":327,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["public",{"_index":358,"title":{},"body":{"injectables/AuthProjService.html":{},"interfaces/CartItem.html":{}}}],["put",{"_index":286,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["put(`${this.baseurl}/unlock/${userprojid}/${achievementid",{"_index":1283,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["q",{"_index":1194,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["quantity",{"_index":490,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["qwerty",{"_index":1116,"title":{},"body":{"interfaces/IDpUserProj.html":{}}}],["radius",{"_index":162,"title":{},"body":{"components/AboutComponent.html":{}}}],["radius('l",{"_index":165,"title":{},"body":{"components/AboutComponent.html":{}}}],["reactive",{"_index":119,"title":{},"body":{"components/AboutComponent.html":{}}}],["readonly",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{}}}],["red",{"_index":943,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["reference",{"_index":1484,"title":{},"body":{"index.html":{}}}],["references",{"_index":1481,"title":{},"body":{"index.html":{}}}],["register",{"_index":363,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{}}}],["register(user",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(userproj",{"_index":373,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["registered",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerfailed",{"_index":632,"title":{},"body":{"injectables/ConfigService.html":{}}}],["registersuccess",{"_index":585,"title":{},"body":{"injectables/ConfigService.html":{}}}],["reload",{"_index":1428,"title":{},"body":{"index.html":{}}}],["remarks",{"_index":326,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["removefromcart",{"_index":697,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ShopCartService.html":{}}}],["removefromcart(item",{"_index":531,"title":{},"body":{"interfaces/CartItem.html":{}}}],["removefromcart(request",{"_index":1196,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["removefromcartfailed",{"_index":656,"title":{},"body":{"injectables/ConfigService.html":{}}}],["removefromcartsuccess",{"_index":603,"title":{},"body":{"injectables/ConfigService.html":{}}}],["repositories/shop",{"_index":471,"title":{},"body":{"interfaces/CartItem.html":{}}}],["repositories/user",{"_index":475,"title":{},"body":{"interfaces/CartItem.html":{}}}],["repository.service",{"_index":473,"title":{},"body":{"interfaces/CartItem.html":{}}}],["req",{"_index":1061,"title":{},"body":{"interfaces/IAddToCartRequest.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{}}}],["request",{"_index":563,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpImagesService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["request.dpimagetitle",{"_index":847,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["request.dpproductid.tostring",{"_index":846,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["request.file",{"_index":848,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["res",{"_index":351,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["resettheme",{"_index":707,"title":{},"body":{"injectables/ConfigService.html":{}}}],["resetthemesuccess",{"_index":615,"title":{},"body":{"injectables/ConfigService.html":{}}}],["resources",{"_index":1476,"title":{},"body":{"index.html":{}}}],["response",{"_index":553,"title":{},"body":{"interfaces/CartItem.html":{}}}],["response.orderid",{"_index":560,"title":{},"body":{"interfaces/CartItem.html":{}}}],["response.status",{"_index":738,"title":{},"body":{"injectables/ConfigService.html":{}}}],["response.success",{"_index":566,"title":{},"body":{"interfaces/CartItem.html":{}}}],["response.token",{"_index":395,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["response.userprojid.tostring",{"_index":398,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["responsetype",{"_index":845,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["rest",{"_index":134,"title":{},"body":{"components/AboutComponent.html":{}}}],["restful",{"_index":123,"title":{},"body":{"components/AboutComponent.html":{}}}],["result",{"_index":1291,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["results",{"_index":271,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":330,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["returns",{"_index":60,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["rgba(0,0,0,0.08",{"_index":238,"title":{},"body":{"components/AboutComponent.html":{}}}],["rgba(0,0,0,0.16",{"_index":243,"title":{},"body":{"components/AboutComponent.html":{}}}],["right",{"_index":234,"title":{},"body":{"components/AboutComponent.html":{}}}],["root",{"_index":328,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["router",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["routerlink",{"_index":22,"title":{},"body":{"components/AboutComponent.html":{}}}],["routermodule",{"_index":741,"title":{},"body":{"components/DocsComponent.html":{}}}],["routes",{"_index":744,"title":{},"body":{"components/DocsComponent.html":{}}}],["row",{"_index":223,"title":{},"body":{"components/AboutComponent.html":{}}}],["run",{"_index":1420,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1461,"title":{},"body":{"index.html":{}}}],["running",{"_index":1423,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":385,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["scaffolding",{"_index":1433,"title":{},"body":{"index.html":{}}}],["scale(1.05",{"_index":244,"title":{},"body":{"components/AboutComponent.html":{}}}],["schemas",{"_index":101,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["schematics",{"_index":1441,"title":{},"body":{"index.html":{}}}],["section",{"_index":187,"title":{},"body":{"components/AboutComponent.html":{}}}],["selectedfile",{"_index":1121,"title":{},"body":{"interfaces/IUpdateDpImageRequest.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{}}}],["selenium",{"_index":116,"title":{},"body":{"components/AboutComponent.html":{}}}],["serveonce",{"_index":1422,"title":{},"body":{"index.html":{}}}],["server",{"_index":1418,"title":{},"body":{"index.html":{}}}],["servererror",{"_index":734,"title":{},"body":{"injectables/ConfigService.html":{}}}],["service",{"_index":1403,"title":{},"body":{"dependencies.html":{}}}],["services/auth.service",{"_index":98,"title":{},"body":{"components/AboutComponent.html":{}}}],["services/config.service",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["services/user",{"_index":89,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["serviceunavailable",{"_index":735,"title":{},"body":{"injectables/ConfigService.html":{}}}],["setalwaysfailmode",{"_index":1223,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["setalwaysfailmode(value",{"_index":1260,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["setauthenticated",{"_index":364,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["setauthenticated(isauthenticated",{"_index":375,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["shadow",{"_index":168,"title":{},"body":{"components/AboutComponent.html":{}}}],["shop",{"_index":1165,"title":{},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["shopcartrepositoryservice",{"_index":470,"title":{},"body":{"interfaces/CartItem.html":{}}}],["shopcartservice",{"_index":1164,"title":{"injectables/ShopCartService.html":{}},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["simulateserverfailure",{"_index":1224,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["size",{"_index":190,"title":{},"body":{"components/AboutComponent.html":{},"injectables/DpSizesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{}}}],["size('l",{"_index":207,"title":{},"body":{"components/AboutComponent.html":{}}}],["size('m",{"_index":192,"title":{},"body":{"components/AboutComponent.html":{}}}],["sizeid",{"_index":541,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpSizesService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["sizename",{"_index":1088,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["sizes",{"_index":968,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts",{"_index":967,"title":{},"body":{"injectables/DpSizesService.html":{},"coverage.html":{}}}],["sizes.service.ts:108",{"_index":984,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:16",{"_index":974,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:31",{"_index":987,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:46",{"_index":991,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:69",{"_index":977,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:93",{"_index":994,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizing",{"_index":172,"title":{},"body":{"components/AboutComponent.html":{}}}],["solid",{"_index":228,"title":{},"body":{"components/AboutComponent.html":{}}}],["sota6sifront",{"_index":1412,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DocsComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["speed",{"_index":1455,"title":{},"body":{"index.html":{}}}],["src/app/data/page/about/about.component.ts",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/data/page/about/about.component.ts:39",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:40",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:41",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:42",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:48",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:52",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:58",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/page",{"_index":444,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["src/app/docs/docs.component.ts",{"_index":740,"title":{},"body":{"components/DocsComponent.html":{},"coverage.html":{}}}],["src/app/interface/iachievement.ts",{"_index":1056,"title":{},"body":{"interfaces/IAchievement.html":{},"coverage.html":{}}}],["src/app/interface/iaddtocartrequest.ts",{"_index":1060,"title":{},"body":{"interfaces/IAddToCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/icartitem.ts",{"_index":1062,"title":{},"body":{"interfaces/ICartItem.html":{},"coverage.html":{}}}],["src/app/interface/icartviewmodel.ts",{"_index":1064,"title":{},"body":{"interfaces/ICartViewModel.html":{},"coverage.html":{}}}],["src/app/interface/icreatedpimagerequest.ts",{"_index":1067,"title":{},"body":{"interfaces/ICreateDpImageRequest.html":{},"coverage.html":{}}}],["src/app/interface/idpcategory.ts",{"_index":1068,"title":{},"body":{"interfaces/IDpCategory.html":{},"coverage.html":{}}}],["src/app/interface/idpimage.ts",{"_index":1071,"title":{},"body":{"interfaces/IDpImage.html":{},"coverage.html":{}}}],["src/app/interface/idporder.ts",{"_index":1075,"title":{},"body":{"interfaces/IDpOrder.html":{},"coverage.html":{}}}],["src/app/interface/idpordercomposition.ts",{"_index":1080,"title":{},"body":{"interfaces/IDpOrderComposition.html":{},"coverage.html":{}}}],["src/app/interface/idporderdetail.ts",{"_index":1086,"title":{},"body":{"interfaces/IDpOrderDetail.html":{},"coverage.html":{}}}],["src/app/interface/idpproduct.ts",{"_index":1091,"title":{},"body":{"interfaces/IDpProduct.html":{},"coverage.html":{}}}],["src/app/interface/idpproductattribute.ts",{"_index":1100,"title":{},"body":{"interfaces/IDpProductAttribute.html":{},"coverage.html":{}}}],["src/app/interface/idpsize.ts",{"_index":1103,"title":{},"body":{"interfaces/IDpSize.html":{},"coverage.html":{}}}],["src/app/interface/idpuser.ts",{"_index":1105,"title":{},"body":{"interfaces/IDpUser.html":{},"coverage.html":{}}}],["src/app/interface/idpuserproj.ts",{"_index":1114,"title":{},"body":{"interfaces/IDpUserProj.html":{},"coverage.html":{}}}],["src/app/interface/iremovefromcartrequest.ts",{"_index":1118,"title":{},"body":{"interfaces/IRemoveFromCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/iupdatecartrequest.ts",{"_index":1119,"title":{},"body":{"interfaces/IUpdateCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/iupdatedpimagerequest.ts",{"_index":1120,"title":{},"body":{"interfaces/IUpdateDpImageRequest.html":{},"coverage.html":{}}}],["src/app/interface/iuserhasachievement.ts",{"_index":1123,"title":{},"body":{"interfaces/IUserHasAchievement.html":{},"coverage.html":{}}}],["src/app/services/achievements.service.ts",{"_index":276,"title":{},"body":{"injectables/AchievementsService.html":{},"coverage.html":{}}}],["src/app/services/achievements.service.ts:116",{"_index":320,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:129",{"_index":306,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:140",{"_index":315,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:44",{"_index":296,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:56",{"_index":311,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:69",{"_index":309,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:92",{"_index":299,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/auth",{"_index":341,"title":{},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:127",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:149",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:51",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:52",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:57",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:66",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:91",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/config.service.ts",{"_index":576,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/app/services/config.service.ts:107",{"_index":737,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:23",{"_index":676,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:81",{"_index":712,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/dp",{"_index":746,"title":{},"body":{"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["src/app/services/user",{"_index":1211,"title":{},"body":{"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["standalone",{"_index":131,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{}}}],["start",{"_index":214,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["started",{"_index":1411,"title":{"index.html":{}},"body":{}}],["state",{"_index":558,"title":{},"body":{"interfaces/CartItem.html":{}}}],["statements",{"_index":1351,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1213,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["store",{"_index":1448,"title":{},"body":{"index.html":{}}}],["string",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/IAchievement.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUpdateDpImageRequest.html":{},"injectables/UserAchievementsService.html":{}}}],["style",{"_index":211,"title":{},"body":{"components/AboutComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["styles/root.css",{"_index":100,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["styles/variables.css",{"_index":142,"title":{},"body":{"components/AboutComponent.html":{}}}],["styleurls",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{}}}],["subscribe",{"_index":322,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["subscribe(attr",{"_index":945,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["subscribe(image",{"_index":807,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["subscribe(newach",{"_index":301,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["subscribe(newcategory",{"_index":757,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["subscribe(newcomp",{"_index":864,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["subscribe(neworder",{"_index":908,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["subscribe(newproduct",{"_index":1145,"title":{},"body":{"injectables/ProductsService.html":{}}}],["subscribe(newsize",{"_index":981,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["subscribe(newuser",{"_index":1013,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["subscribe(order",{"_index":1180,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["subscribe(res",{"_index":350,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["subscription",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{}}}],["subscriptions",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{}}}],["success",{"_index":547,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["successachievementid",{"_index":1252,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successfully",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["successmessage",{"_index":1257,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successmessage.replace",{"_index":1297,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successtofailedmap",{"_index":1308,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successtofailedmap[successachievementid",{"_index":1347,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["such",{"_index":1442,"title":{},"body":{"index.html":{}}}],["suits",{"_index":1473,"title":{},"body":{"index.html":{}}}],["sum",{"_index":524,"title":{},"body":{"interfaces/CartItem.html":{}}}],["switchmap",{"_index":1272,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchmap(exists",{"_index":1300,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchmap(result",{"_index":1302,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchtheme",{"_index":694,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtodarkthemefailed",{"_index":650,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtodarkthemesuccess",{"_index":601,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtolightthemefailed",{"_index":648,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtolightthemesuccess",{"_index":600,"title":{},"body":{"injectables/ConfigService.html":{}}}],["table",{"_index":461,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{},"dependencies.html":{}}}],["tables.css",{"_index":259,"title":{},"body":{"components/AboutComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1375,"title":{},"body":{"coverage.html":{}}}],["taiga",{"_index":83,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["tap",{"_index":384,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/UserAchievementsService.html":{}}}],["tap(response",{"_index":394,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["templateurl",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DocsComponent.html":{}}}],["test",{"_index":1460,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1468,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":1465,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1457,"title":{},"body":{"index.html":{}}}],["text",{"_index":249,"title":{},"body":{"components/AboutComponent.html":{}}}],["textachievement",{"_index":285,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{}}}],["theme",{"_index":696,"title":{},"body":{"injectables/ConfigService.html":{}}}],["theme=\"dark",{"_index":247,"title":{},"body":{"components/AboutComponent.html":{}}}],["themetogglecomponent",{"_index":25,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.achievementsservice.createachievement",{"_index":300,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.deleteachievement(1).subscribe",{"_index":307,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.getachievementbyid(1).subscribe(ach",{"_index":310,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.getallachievements().subscribe(list",{"_index":312,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.unlockachievement('first",{"_index":316,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.updateachievement(1",{"_index":321,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.alertservice",{"_index":1292,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.alertservice.open",{"_index":518,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.alertservice.open(successmessage",{"_index":1303,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.authprojservice.login",{"_index":349,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authprojservice.logout",{"_index":372,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authprojservice.register",{"_index":357,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authservice.login",{"_index":422,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.logout",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.register",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cartitems",{"_index":510,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.filter(cartitem",{"_index":543,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.length",{"_index":549,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.map((item",{"_index":574,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.map(cartitem",{"_index":564,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.reduce((sum",{"_index":523,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.checkout().subscribe",{"_index":552,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.clearcart",{"_index":555,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.getcart().subscribe",{"_index":506,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.removefromcart",{"_index":538,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.updatecart(request).subscribe",{"_index":565,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cdr.markforcheck",{"_index":515,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.checkauthstatus",{"_index":387,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.checkuserachievementexists(userprojid",{"_index":1298,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addcategoryfailed",{"_index":1322,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addcategorysuccess",{"_index":1321,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addimagefailed",{"_index":1320,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addimagesuccess",{"_index":1319,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addtocartfailed",{"_index":1312,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addtocartsuccess",{"_index":677,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.buttonnotworking",{"_index":1334,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.checkoutemptycart",{"_index":550,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.configservice.achievementids.checkoutfailed",{"_index":551,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.checkoutsuccess",{"_index":554,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.createproductfailed",{"_index":1316,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.createproductsuccess",{"_index":1315,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductinfofailed",{"_index":1330,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductinfosuccess",{"_index":1329,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductsfailed",{"_index":1328,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductssuccess",{"_index":1327,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loginfailed",{"_index":1309,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loginsuccess",{"_index":578,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.logoutprojfailed",{"_index":1340,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.logoutprojsuccess",{"_index":1339,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.navigatetoproductfailed",{"_index":1332,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.navigatetoproductsuccess",{"_index":1331,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.opencategorydialogsuccess",{"_index":1337,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.openimagedialogsuccess",{"_index":1338,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.openproductdialogsuccess",{"_index":1336,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.registerfailed",{"_index":1311,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.registersuccess",{"_index":1310,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.removefromcartfailed",{"_index":537,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.removefromcartsuccess",{"_index":546,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.resetthemesuccess",{"_index":1335,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtodarkthemefailed",{"_index":1326,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtodarkthemesuccess",{"_index":1325,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtolightthemefailed",{"_index":1324,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtolightthemesuccess",{"_index":1323,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.togglethemesuccess",{"_index":1333,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecartquantityfailed",{"_index":562,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecartquantitysuccess",{"_index":567,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecategoryfailed",{"_index":1342,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecategorysuccess",{"_index":1341,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateimagefailed",{"_index":1344,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateimagesuccess",{"_index":1343,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateproductfailed",{"_index":1346,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateproductsuccess",{"_index":1345,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateprofilefailed",{"_index":1318,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateprofilesuccess",{"_index":1317,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.viewproductfailed",{"_index":1314,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.viewproductsuccess",{"_index":1313,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.apiendpoints.login",{"_index":579,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.configservice.httpstatuscodes.notfound",{"_index":1288,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.httpstatuscodes.success",{"_index":739,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.createuserachievement(userprojid",{"_index":1301,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.dpcategoriesservice.createdpcategory",{"_index":756,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.deletedpcategory(1).subscribe",{"_index":759,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.getalldpcategories().subscribe(categories",{"_index":749,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.getdpcategorybyid(1).subscribe(category",{"_index":752,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.updatedpcategory(1",{"_index":758,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpimagesservice.createdpimage",{"_index":806,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.deletedpimage(10).subscribe",{"_index":811,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getalldpimages().subscribe(images",{"_index":814,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagebyid(10).subscribe(image",{"_index":820,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagedata(10).subscribe(blob",{"_index":825,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagesbyproductid(5).subscribe(images",{"_index":831,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpordercompositionsservice.createdpordercomposition",{"_index":863,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.deletedpordercomposition(1).subscribe",{"_index":867,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.getalldpordercompositions().subscribe(compositions",{"_index":854,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.getdpordercompositionbyid(1).subscribe(composition",{"_index":857,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.updatedpordercomposition(1",{"_index":866,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordersservice.createdporder",{"_index":906,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.deletedporder(1).subscribe",{"_index":913,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.getalldporders().subscribe(orders",{"_index":915,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.getdporderbyid(1).subscribe(order",{"_index":919,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.updatedporder(1",{"_index":922,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpproductattributesservice.createdpproductattribute",{"_index":944,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.deletedpproductattribute(1).subscribe",{"_index":951,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.getalldpproductattributes().subscribe(attrs",{"_index":953,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.getdpproductattributebyid(1).subscribe(attr",{"_index":958,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.updatedpproductattribute(1",{"_index":963,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpsizesservice.createdpsize",{"_index":980,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.deletedpsize(1).subscribe",{"_index":986,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.getalldpsizes().subscribe(sizes",{"_index":988,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.getdpsizebyid(1).subscribe(size",{"_index":992,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.updatedpsize(1",{"_index":996,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpuserprojsservice.createdpuserproj",{"_index":1012,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.deletedpuserproj(1).subscribe",{"_index":1018,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.getalldpuserprojs().subscribe(users",{"_index":1020,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.getdpuserprojbyid(1).subscribe(user",{"_index":1025,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.updatedpuserproj(1",{"_index":1028,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpusersservice.createdpuser",{"_index":1041,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.deletedpuser(1).subscribe",{"_index":1046,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.getalldpusers().subscribe(users",{"_index":1048,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.getdpuserbyid(1).subscribe(user",{"_index":1051,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.updatedpuser(1",{"_index":1054,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.getalwaysfailmode",{"_index":1278,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.getfailedachievementid(achievementid",{"_index":1304,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.gettotal(item",{"_index":525,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.http",{"_index":1281,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.delete(`${this.baseurl}/${id",{"_index":336,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.get(`${this.baseurl}/${id",{"_index":333,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.get(`${this.baseurl}/${id}/image",{"_index":844,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.get(`${this.baseurl}/${userprojid}/${achievementid",{"_index":1280,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.get(`${this.baseurl}/byproduct/${productid",{"_index":843,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.get(`${this.baseurl}/exists/${userprojid}/${achievementid}`).pipe",{"_index":1285,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.get(`${this.baseurl}/quantity?productid=${productid}&sizeid=${sizeid",{"_index":1207,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.get(this.baseurl",{"_index":331,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["this.http.post('/api/dpimages",{"_index":802,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.post(`${this.baseurl}/addtocart",{"_index":1163,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/checkout",{"_index":1208,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/export?orderid=${orderid",{"_index":1210,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/login",{"_index":392,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.http.post(`${this.baseurl}/register",{"_index":400,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.http.post(`${this.baseurl}/removefromcart",{"_index":1209,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/updatecart",{"_index":1206,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(this.baseurl",{"_index":334,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.put('/api/dpimages/10",{"_index":836,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.put(`${this.baseurl}/${id",{"_index":335,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.isauthenticatedsubject.asobservable",{"_index":380,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.isauthenticatedsubject.next(isauthenticated",{"_index":401,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.isloading",{"_index":514,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.loadcartitems",{"_index":504,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.navigateto",{"_index":106,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.productsservice.addtocart",{"_index":1138,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.createproduct",{"_index":1144,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.deleteproduct(1).subscribe",{"_index":1150,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.getallproducts().subscribe(products",{"_index":1152,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.getproductbyid(1).subscribe(product",{"_index":1156,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.updateproduct(1",{"_index":1159,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.router.navigate(['/order",{"_index":556,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.router.navigate([path",{"_index":105,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.setauthenticated(!!token",{"_index":403,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.setauthenticated(false",{"_index":407,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.setauthenticated(true",{"_index":399,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.shopcartservice.addtocart",{"_index":1175,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.checkout",{"_index":1179,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.exporttoexcel(123).subscribe(blob",{"_index":1184,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.getcart().subscribe(cart",{"_index":1187,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.getcartquantity(1",{"_index":1192,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.removefromcart",{"_index":1198,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.updatecart",{"_index":1202,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.simulateserverfailure",{"_index":1279,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.subscriptions.unsubscribe",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.unlockuserachievement(userprojid",{"_index":1295,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.updatecartitemquantity(item",{"_index":529,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.userachievementsrepository",{"_index":535,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.userachievementsservice.checkuserachievementexists(1",{"_index":1230,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.createuserachievement(1",{"_index":1237,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getalluserachievements().subscribe(list",{"_index":1242,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getalwaysfailmode",{"_index":534,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getcompletedachievementsbyusername('vasya').subscribe(list",{"_index":1247,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getfailedachievementid(14",{"_index":1251,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getuserachievement(1",{"_index":1256,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.handleachievement(1",{"_index":1259,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.setalwaysfailmode(true",{"_index":1262,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.unlockuserachievement(1",{"_index":1267,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["throwerror",{"_index":1273,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["title",{"_index":178,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["toggle.component",{"_index":96,"title":{},"body":{"components/AboutComponent.html":{}}}],["toggle/theme",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{}}}],["toggletheme",{"_index":705,"title":{},"body":{"injectables/ConfigService.html":{}}}],["togglethemesuccess",{"_index":613,"title":{},"body":{"injectables/ConfigService.html":{}}}],["token",{"_index":352,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["tools",{"_index":1436,"title":{},"body":{"index.html":{}}}],["top",{"_index":219,"title":{},"body":{"components/AboutComponent.html":{}}}],["totalprice",{"_index":491,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IDpOrderDetail.html":{}}}],["totalsorter",{"_index":494,"title":{},"body":{"interfaces/CartItem.html":{}}}],["trackbyindex(index",{"_index":520,"title":{},"body":{"interfaces/CartItem.html":{}}}],["transform",{"_index":241,"title":{},"body":{"components/AboutComponent.html":{}}}],["transition",{"_index":239,"title":{},"body":{"components/AboutComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["true",{"_index":477,"title":{},"body":{"interfaces/CartItem.html":{},"components/DocsComponent.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["true/false",{"_index":1233,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["tslib",{"_index":1406,"title":{},"body":{"dependencies.html":{}}}],["tui",{"_index":158,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.border",{"_index":164,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.breakpoint('sm",{"_index":175,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.font",{"_index":191,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(1",{"_index":181,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(2",{"_index":177,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(4",{"_index":154,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiaccordion",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiaccordionitem",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuialertservice",{"_index":82,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["tuiappearance",{"_index":456,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiautofocus",{"_index":140,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiavatar",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuibutton",{"_index":18,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["tuicomparator",{"_index":459,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiday",{"_index":450,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiday.currentlocal",{"_index":513,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuidefaultsort",{"_index":462,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuidefaultsort(a.price",{"_index":496,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiicon",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["tuiiconpipe",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuilink",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiscrollbar",{"_index":457,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuitable",{"_index":458,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuititle",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{}}}],["type",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["typescript",{"_index":118,"title":{},"body":{"components/AboutComponent.html":{}}}],["typography.css",{"_index":260,"title":{},"body":{"components/AboutComponent.html":{}}}],["ui",{"_index":108,"title":{},"body":{"components/AboutComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["ui/addon",{"_index":460,"title":{},"body":{"interfaces/CartItem.html":{},"dependencies.html":{}}}],["ui/cdk",{"_index":463,"title":{},"body":{"interfaces/CartItem.html":{},"dependencies.html":{}}}],["ui/core",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["ui/event",{"_index":1393,"title":{},"body":{"dependencies.html":{}}}],["ui/icons",{"_index":1396,"title":{},"body":{"dependencies.html":{}}}],["ui/kit",{"_index":85,"title":{},"body":{"components/AboutComponent.html":{},"dependencies.html":{}}}],["ui/layout",{"_index":1399,"title":{},"body":{"dependencies.html":{}}}],["ui/legacy",{"_index":1400,"title":{},"body":{"dependencies.html":{}}}],["uint8array",{"_index":1074,"title":{},"body":{"interfaces/IDpImage.html":{}}}],["unauthorized",{"_index":727,"title":{},"body":{"injectables/ConfigService.html":{}}}],["undefined",{"_index":835,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["unit",{"_index":1456,"title":{},"body":{"index.html":{}}}],["unitprice",{"_index":1089,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["unlockachievement",{"_index":293,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlockachievement(achievementtitle",{"_index":314,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlocked",{"_index":339,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlockuserachievement",{"_index":1225,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["unlockuserachievement(userprojid",{"_index":1264,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["updateachievement",{"_index":294,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["updateachievement(id",{"_index":319,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["updatecart",{"_index":1171,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["updatecart(request",{"_index":1199,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["updatecartitemquantity(item",{"_index":561,"title":{},"body":{"interfaces/CartItem.html":{}}}],["updatecartquantity",{"_index":699,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecartquantityfailed",{"_index":658,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecartquantitysuccess",{"_index":605,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecategoryfailed",{"_index":668,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecategorysuccess",{"_index":624,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updated",{"_index":573,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["updatedpcategory",{"_index":764,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["updatedpcategory(id",{"_index":775,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["updatedpimage",{"_index":787,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["updatedpimage(id",{"_index":832,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["updatedporder",{"_index":894,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["updatedporder(id",{"_index":920,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["updatedpordercomposition",{"_index":872,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["updatedpordercomposition(id",{"_index":883,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["updatedpproductattribute",{"_index":933,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["updatedpproductattribute(id",{"_index":959,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["updatedpsize",{"_index":973,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["updatedpsize(id",{"_index":993,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["updatedpuser",{"_index":1036,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["updatedpuser(id",{"_index":1052,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["updatedpuserproj",{"_index":1006,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["updatedpuserproj(id",{"_index":1026,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["updateimagefailed",{"_index":670,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateimagesuccess",{"_index":626,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateon",{"_index":484,"title":{},"body":{"interfaces/CartItem.html":{}}}],["updateproduct",{"_index":1133,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproduct(id",{"_index":1157,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductfailed",{"_index":672,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateproductsuccess",{"_index":628,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofile",{"_index":687,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofilefailed",{"_index":642,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofilesuccess",{"_index":595,"title":{},"body":{"injectables/ConfigService.html":{}}}],["url",{"_index":345,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/ShopCartService.html":{}}}],["url.createobjecturl(blob",{"_index":826,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["use",{"_index":1462,"title":{},"body":{"index.html":{}}}],["user",{"_index":233,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"coverage.html":{}}}],["user.dppassword",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dpphonenumber",{"_index":438,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dpusername",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["userachievement",{"_index":1125,"title":{},"body":{"interfaces/IUserHasAchievement.html":{}}}],["userachievementsrepository",{"_index":502,"title":{},"body":{"interfaces/CartItem.html":{}}}],["userachievementsrepositoryservice",{"_index":474,"title":{},"body":{"interfaces/CartItem.html":{}}}],["userachievementsservice",{"_index":41,"title":{"injectables/UserAchievementsService.html":{}},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["userhasachievement",{"_index":1124,"title":{},"body":{"interfaces/IUserHasAchievement.html":{}}}],["username",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/UserAchievementsService.html":{}}}],["userproj",{"_index":370,"title":{},"body":{"injectables/AuthProjService.html":{},"interfaces/IDpUserProj.html":{}}}],["userproj.login",{"_index":390,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["userproj.password",{"_index":391,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["userprojid",{"_index":353,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["userprojs",{"_index":1001,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["users",{"_index":1021,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["users.service.ts",{"_index":1031,"title":{},"body":{"injectables/DpUsersService.html":{},"coverage.html":{}}}],["users.service.ts:110",{"_index":1044,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:16",{"_index":1037,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:31",{"_index":1047,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:46",{"_index":1050,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:70",{"_index":1039,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:95",{"_index":1053,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["using",{"_index":1414,"title":{},"body":{"index.html":{}}}],["ux",{"_index":141,"title":{},"body":{"components/AboutComponent.html":{}}}],["value",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["var",{"_index":157,"title":{},"body":{"components/AboutComponent.html":{},"components/DocsComponent.html":{}}}],["variables.css",{"_index":251,"title":{},"body":{"components/AboutComponent.html":{}}}],["vasya",{"_index":1079,"title":{},"body":{"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["vasya@example.com",{"_index":1113,"title":{},"body":{"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{}}}],["version",{"_index":1415,"title":{},"body":{"index.html":{},"properties.html":{}}}],["vertical",{"_index":184,"title":{},"body":{"components/AboutComponent.html":{}}}],["viewproduct",{"_index":683,"title":{},"body":{"injectables/ConfigService.html":{}}}],["viewproductfailed",{"_index":638,"title":{},"body":{"injectables/ConfigService.html":{}}}],["viewproductsuccess",{"_index":591,"title":{},"body":{"injectables/ConfigService.html":{}}}],["visit",{"_index":1482,"title":{},"body":{"index.html":{}}}],["void",{"_index":61,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["webpack",{"_index":128,"title":{},"body":{"components/AboutComponent.html":{}}}],["website",{"_index":1078,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["weight",{"_index":203,"title":{},"body":{"components/AboutComponent.html":{}}}],["weight('bold",{"_index":205,"title":{},"body":{"components/AboutComponent.html":{}}}],["whenever",{"_index":1429,"title":{},"body":{"index.html":{}}}],["width",{"_index":145,"title":{},"body":{"components/AboutComponent.html":{}}}],["window.location.origin}/api/achievements",{"_index":323,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["window.location.origin}/api/auth",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.location.origin}/api/authproj",{"_index":378,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["window.location.origin}/api/dpcategories",{"_index":777,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["window.location.origin}/api/dpimages",{"_index":838,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["window.location.origin}/api/dpordercompositions",{"_index":885,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["window.location.origin}/api/dporders",{"_index":923,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["window.location.origin}/api/dpproductattributes",{"_index":964,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["window.location.origin}/api/dpsizes",{"_index":997,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["window.location.origin}/api/dpuserprojs",{"_index":1029,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["window.location.origin}/api/dpusers",{"_index":1055,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["window.location.origin}/api/products",{"_index":1160,"title":{},"body":{"injectables/ProductsService.html":{}}}],["window.location.origin}/api/shopcart",{"_index":1203,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["window.open(url",{"_index":827,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["wrap",{"_index":226,"title":{},"body":{"components/AboutComponent.html":{}}}],["xl",{"_index":979,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["xxl",{"_index":995,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["zone.js",{"_index":1408,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/about/about.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            TuiButton\n                            TuiTitle\n                            TuiAccordion\n                            TuiAccordionItem\n                            RouterLink\n                            CommonModule\n                            TuiLink\n                            TuiIcon\n                            TuiButton\n                            ThemeToggleComponent\n                            BackButtonComponent\n                            TuiAvatar\n                            AsyncPipe\n                            TuiIconPipe\n                \n            \n\n            \n                styleUrls\n                ./about.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                alertService\n                            \n                            \n                                    Private\n                                    Readonly\n                                configService\n                            \n                            \n                                    Private\n                                    Readonly\n                                subscriptions\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateTo\n                            \n                            \n                                navigateToHome\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/about/about.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateTo\n                        \n                    \n                \n            \n            \n                \nnavigateTo(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToHome\n                        \n                    \n                \n            \n            \n                \nnavigateToHome()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Переходит на главную страницу\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        alertService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiAlertService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ConfigService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ChangeDetectionStrategy, inject, OnInit, OnDestroy, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { TuiButton, TuiTitle, TuiAlertService, TuiIcon, TuiIconPipe, TuiLink } from '@taiga-ui/core';\nimport { TuiAccordion, TuiAccordionItem, TuiAvatar } from '@taiga-ui/kit';\nimport { Subscription } from 'rxjs';\nimport { Router, RouterLink } from '@angular/router';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\nimport { BackButtonComponent } from '../../components/back-button/back-button.component';\nimport { ThemeToggleComponent } from '../../components/theme-toggle/theme-toggle.component';\nimport { AuthService } from '../../../services/auth.service';\n\n\n@Component({\n  selector: 'app-about',\n imports: [\n    CommonModule,\n    TuiButton,\n    TuiTitle,\n    TuiAccordion,\n    TuiAccordionItem,\n    RouterLink,\n     CommonModule,\n    TuiLink,\n    TuiIcon,\n    TuiButton,\n    ThemeToggleComponent,\n    BackButtonComponent,\n    TuiAvatar,\n    AsyncPipe,\n    TuiIconPipe,\n  ],\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AboutComponent {\nprivate readonly userAchievementsService = inject(UserAchievementsService);\n  private readonly configService = inject(ConfigService);\n  private readonly alertService = inject(TuiAlertService);\n  private readonly subscriptions = new Subscription();\n \n  constructor(\n    private router: Router,\n  ) {}\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n navigateTo(path: string): void {\n    this.router.navigate([path]);\n  }\n  /**\n   * Переходит на главную страницу\n   */\n  navigateToHome(): void {\n    this.navigateTo('/');\n  }\n}\n    \n\n    \n        \n\n  \n    Этот интерактивный образовательный тренажер разработан для обучения разработчиков ПО, которые тестируют\n    веб-приложения. Он имитирует реальный интернет-магазин, позволяя практиковаться в разработке\n    фронтенда (Angular, Taiga UI) и взаимодействии с бэкендом (ASP.NET Core, MSSQL). Тренажер\n    включает тест-кейсы с 50% имитацией сбоев сервера для обучения обработке ошибок.\n  \n  \n    Документирование: Все сервисы и интерфейсы снабжены подробными JSDoc-комментариями с примерами\n    использования (см. example в сервисах). Это облегчает понимание структуры данных и работы с API.\n  \n  \n    Тестирование API: Для автоматизации проверки работы API можно использовать Selenium. Например, вы\n    можете реализовать тесты, которые выполняют те же действия, что и в example у сервисов: добавление\n    товара в корзину, оформление заказа, регистрацию пользователя и т.д. Selenium позволяет эмулировать действия\n    пользователя в браузере и проверять корректность работы фронтенда и взаимодействия с сервером.\n  \n\n\n\n  \n    \n      \n      Возможности тренажера\n    \n    \n      \n        \n          Каталог товаров: Просматривайте товары, переходите к детальной информации о продукте.\n        \n        \n          Корзина: Добавляйте товары, изменяйте количество, удаляйте позиции и оформляйте заказ.\n        \n        \n          Авторизация и регистрация: Практикуйтесь в реализации входа и создания учетной записи.\n        \n        \n          Система тест-кейсов: Выполняйте действия (вход, покупка, смена темы и т.д.) с 50% имитацией\n          сбоев сервера для обучения обработке ошибок.\n        \n        \n          Темы интерфейса: Переключайтесь между светлой и тёмной темой.\n        \n        \n          Управление контентом: Создавайте и редактируйте продукты, категории и изображения через\n          диалоговые окна.\n        \n        \n          Адаптивный дизайн: Тренажер оптимизирован для десктопов, планшетов и мобильных устройств.\n        \n      \n    \n  \n\n  \n    \n      \n      Технологии\n    \n    \n      \n        \n          Фронтенд: Angular 19, TypeScript, Taiga UI, RxJS, Angular Reactive Forms, CSS.\n        \n        \n          Бэкенд: ASP.NET Core 8, RESTful API, MSSQL, контроллеры.\n        \n        \n          Интеграция: HTTP-запросы через HttpClient, прокси для API, JWT-авторизация.\n        \n        \n          Инструменты: Angular CLI, Webpack, ESLint, Prettier.\n        \n      \n    \n  \n\n  \n    \n      \n      Архитектура\n    \n    \n      \n        Тренажер использует простую и понятную архитектуру, подходящую для образовательных целей:\n      \n      \n        \n          Фронтенд: Модульная структура с standalone-компонентами, сервисы для бизнес-логики, RxJS для\n          управления состоянием.\n        \n        \n          Бэкенд: ASP.NET Core контроллеры, прямое взаимодействие с MSSQL через Entity Framework Core.\n        \n        \n          Взаимодействие: REST API с обработкой HTTP-статусов (200, 401, 404, 500), централизованная\n          обработка ошибок.\n        \n        \n          Оптимизация: ChangeDetectionStrategy.OnPush, ленивая загрузка модулей, мемоизация.\n        \n      \n    \n  \n\n  \n    \n      \n      Особенности\n    \n    \n      \n        \n          Имитация сбоев: 50% вероятность серверных ошибок в тест-кейсах для обучения устойчивости\n          приложений.\n        \n        \n          Уведомления: TuiAlertService для информирования об успехах и ошибках.\n        \n        \n          Доступность: ARIA-атрибуты, управление фокусом через TuiAutoFocus.\n        \n        \n          UX: Плавные анимации, интуитивные диалоги, кастомизированные Taiga UI компоненты.\n        \n        \n          Обучение: Тренажер разработан для практики разработки, тестирования и отладки веб-приложений.\n        \n      \n    \n  \n\n\n\n  Перейти в каталог\n  На главную\n  \n\n    \n\n    \n                \n                    ./about.component.css\n                \n                @import '../../../styles/variables.css';\n\n.about-page {\n  max-width: 90%; /* Относительная ширина для гибкости */\n  width: min(50rem, 90vw); /* Ограничение ширины ≈ 800px при базовом 1rem = 16px */\n  margin: 1rem auto; /* tui.spacing(4) ≈ 16px → 1rem */\n  padding: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\n  background: var(--tui-base-01);\n  border-radius: 0.5rem; /* tui.border-radius('l') ≈ 8px → 0.5rem */\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow); /* 4px → 0.25rem, 16px → 1rem */\n  box-sizing: border-box;\n}\n\n@media (max-width: 47.9375rem) { /* tui.breakpoint('sm') ≈ 767px → 47.9375rem */\n  .about-page {\n    margin: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n    padding: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n  }\n}\n\n.title-icon {\n  margin-left: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  color: var(--tui-primary);\n  vertical-align: middle; /* Четкое выравнивание с заголовком */\n}\n\n.about-section {\n  margin-bottom: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\n  line-height: 1.5;\n}\n\n.accordion-header {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  font-weight: 700; /* tui.font-weight('bold') */\n  font-size: 1.125rem; /* tui.font-size('l') ≈ 18px → 1.125rem */\n}\n\n.feature-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.feature-list li {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  margin-bottom: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\n}\n\n.feature-list li::before {\n  content: '•';\n  color: var(--tui-primary);\n  font-size: 1.5rem;\n  line-height: 1;\n  margin-top: 0.125rem; /* Смещение для выравнивания с текстом */\n}\n\n.actions {\n    display: flex;\n    flex-direction: row;\n    gap: 1.5rem; /* увеличенный отступ между элементами */\n    justify-content: center;\n    align-items: center;\n    margin-top: 2rem; /* увеличенный отступ сверху от аккордеона */\n    margin-bottom: 1rem;\n    flex-wrap: wrap;\n    padding: 1rem 0 0 0;\n    border-top: 1px solid var(--tui-base-03, #e5e5e5); /* лёгкая линия для отделения */\n}\n\n.actions button,\n.actions tui-avatar,\n.actions .user-avatar {\n    margin: 0;\n}\n\n.user-avatar {\n    margin-left: 1.5rem;\n    margin-right: 0.5rem;\n    cursor: pointer;\n    box-shadow: 0 2px 8px var(--tui-shadow, rgba(0,0,0,0.08));\n    transition: box-shadow 0.2s, transform 0.2s;\n}\n.user-avatar:hover {\n    box-shadow: 0 4px 16px var(--tui-shadow, rgba(0,0,0,0.16));\n    transform: scale(1.05);\n}\n\n@media (max-width: 47.9375rem) {\n    .actions {\n        flex-direction: column;\n        gap: 1rem;\n        align-items: center;\n        margin-top: 2rem;\n        padding-top: 0.5rem;\n    }\n    .user-avatar {\n        margin: 0.5rem 0 0 0;\n    }\n}\n\n/* Замените их на [data-theme=\"dark\"] */\n[data-theme=\"dark\"] .about-page {\n  background: var(--tui-base-02); /* Используйте правильную переменную для фона */\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\n}\n\n[data-theme=\"dark\"] .about-section,\n[data-theme=\"dark\"] .feature-list li {\n  color: var(--text-color-dark); /* Светлый цвет текста */\n}\n\n\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Этот интерактивный образовательный тренажер разработан для обучения разработчиков ПО, которые тестируют    веб-приложения. Он имитирует реальный интернет-магазин, позволяя практиковаться в разработке    фронтенда (Angular, Taiga UI) и взаимодействии с бэкендом (ASP.NET Core, MSSQL). Тренажер    включает тест-кейсы с 50% имитацией сбоев сервера для обучения обработке ошибок.        Документирование: Все сервисы и интерфейсы снабжены подробными JSDoc-комментариями с примерами    использования (см. example в сервисах). Это облегчает понимание структуры данных и работы с API.        Тестирование API: Для автоматизации проверки работы API можно использовать Selenium. Например, вы    можете реализовать тесты, которые выполняют те же действия, что и в example у сервисов: добавление    товара в корзину, оформление заказа, регистрацию пользователя и т.д. Selenium позволяет эмулировать действия    пользователя в браузере и проверять корректность работы фронтенда и взаимодействия с сервером.                    Возможности тренажера                                Каталог товаров: Просматривайте товары, переходите к детальной информации о продукте.                          Корзина: Добавляйте товары, изменяйте количество, удаляйте позиции и оформляйте заказ.                          Авторизация и регистрация: Практикуйтесь в реализации входа и создания учетной записи.                          Система тест-кейсов: Выполняйте действия (вход, покупка, смена темы и т.д.) с 50% имитацией          сбоев сервера для обучения обработке ошибок.                          Темы интерфейса: Переключайтесь между светлой и тёмной темой.                          Управление контентом: Создавайте и редактируйте продукты, категории и изображения через          диалоговые окна.                          Адаптивный дизайн: Тренажер оптимизирован для десктопов, планшетов и мобильных устройств.                                      Технологии                                Фронтенд: Angular 19, TypeScript, Taiga UI, RxJS, Angular Reactive Forms, CSS.                          Бэкенд: ASP.NET Core 8, RESTful API, MSSQL, контроллеры.                          Интеграция: HTTP-запросы через HttpClient, прокси для API, JWT-авторизация.                          Инструменты: Angular CLI, Webpack, ESLint, Prettier.                                      Архитектура                      Тренажер использует простую и понятную архитектуру, подходящую для образовательных целей:                              Фронтенд: Модульная структура с standalone-компонентами, сервисы для бизнес-логики, RxJS для          управления состоянием.                          Бэкенд: ASP.NET Core контроллеры, прямое взаимодействие с MSSQL через Entity Framework Core.                          Взаимодействие: REST API с обработкой HTTP-статусов (200, 401, 404, 500), централизованная          обработка ошибок.                          Оптимизация: ChangeDetectionStrategy.OnPush, ленивая загрузка модулей, мемоизация.                                      Особенности                                Имитация сбоев: 50% вероятность серверных ошибок в тест-кейсах для обучения устойчивости          приложений.                          Уведомления: TuiAlertService для информирования об успехах и ошибках.                          Доступность: ARIA-атрибуты, управление фокусом через TuiAutoFocus.                          UX: Плавные анимации, интуитивные диалоги, кастомизированные Taiga UI компоненты.                          Обучение: Тренажер разработан для практики разработки, тестирования и отладки веб-приложений.                      Перейти в каталог  На главную  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'DocsComponent', 'selector': 'app-docs'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AchievementsService.html":{"url":"injectables/AchievementsService.html","title":"injectable - AchievementsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AchievementsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/achievements.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с тест-кейсами (Achievements).\nПозволяет получать, создавать, обновлять и удалять тест-кейсы через API.\nExample :// Получить все тест-кейсы (GET):\nGET /api/Achievements// Получить тест-кейс по id (GET):\nGET /api/Achievements/1\n// Создать тест-кейс (POST):\nPOST /api/Achievements\nBody:\n{\n  \"achievementId\": 0,\n  \"title\": \"Новое достижение\",\n  \"textAchievement\": \"Описание достижения\"\n}\n// Обновить тест-кейс (PUT):\nPUT /api/Achievements/1\nBody:\n{\n  \"achievementId\": 1,\n  \"title\": \"Обновлённое достижение\",\n  \"textAchievement\": \"Новое описание\"\n}\n// Удалить тест-кейс (DELETE):\nDELETE /api/Achievements/1\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createAchievement\n                            \n                            \n                                deleteAchievement\n                            \n                            \n                                getAchievementById\n                            \n                            \n                                getAllAchievements\n                            \n                            \n                                unlockAchievement\n                            \n                            \n                                updateAchievement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/achievements.service.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createAchievement\n                        \n                    \n                \n            \n            \n                \ncreateAchievement(achievement: IAchievement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Создаёт новый тест-кейс.\nExample :// POST /api/Achievements\n// Body:\n// {\n//   \"achievementId\": 0,\n//   \"title\": \"Новый тест-кейс\",\n//   \"textAchievement\": \"Описание тест-кейса\"\n// }\nthis.achievementsService.createAchievement({\n  achievementId: 0,\n  title: 'Новый тест-кейс',\n  textAchievement: 'Описание тест-кейса'\n}).subscribe(newAch => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                achievement\n                                            \n                                                            IAchievement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный тест-кейс.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAchievement\n                        \n                    \n                \n            \n            \n                \ndeleteAchievement(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Удаляет тест-кейс по идентификатору.\nExample :// DELETE /api/Achievements/1\nthis.achievementsService.deleteAchievement(1).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAchievementById\n                        \n                    \n                \n            \n            \n                \ngetAchievementById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Получает тест-кейс по его идентификатору.\nExample :// GET /api/Achievements/1\nthis.achievementsService.getAchievementById(1).subscribe(ach => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Тест-кейс.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllAchievements\n                        \n                    \n                \n            \n            \n                \ngetAllAchievements()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Получает список всех тест-кейсов.\nExample :// GET /api/Achievements\nthis.achievementsService.getAllAchievements().subscribe(list => console.log(list));\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список тест-кейсов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlockAchievement\n                        \n                    \n                \n            \n            \n                \nunlockAchievement(achievementTitle: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Разблокирует тест-кейс по названию.\nExample :this.achievementsService.unlockAchievement('First Login');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                achievementTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Название тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAchievement\n                        \n                    \n                \n            \n            \n                \nupdateAchievement(id: number, achievement: IAchievement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Обновляет существующее тест-кейс.\nExample :// PUT /api/Achievements/1\n// Body:\n// {\n//   \"achievementId\": 1,\n//   \"title\": \"Обновлённый тест-кейс\",\n//   \"textAchievement\": \"Новое описание\"\n// }\nthis.achievementsService.updateAchievement(1, {\n  achievementId: 1,\n  title: 'Обновлённый тест-кейс',\n  textAchievement: 'Новое описание'\n}).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                        \n                                                achievement\n                                            \n                                                            IAchievement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Achievements`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/achievements.service.ts:44\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IAchievement } from '../interface/IAchievement';\n\n/**\n * Сервис для работы с тест-кейсами (Achievements).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять тест-кейсы через API.\n *\n * @example\n * // Получить все тест-кейсы (GET):\n * GET /api/Achievements\n *\n * // Получить тест-кейс по id (GET):\n * GET /api/Achievements/1\n *\n * // Создать тест-кейс (POST):\n * POST /api/Achievements\n * Body:\n * {\n *   \"achievementId\": 0,\n *   \"title\": \"Новое достижение\",\n *   \"textAchievement\": \"Описание достижения\"\n * }\n *\n * // Обновить тест-кейс (PUT):\n * PUT /api/Achievements/1\n * Body:\n * {\n *   \"achievementId\": 1,\n *   \"title\": \"Обновлённое достижение\",\n *   \"textAchievement\": \"Новое описание\"\n * }\n *\n * // Удалить тест-кейс (DELETE):\n * DELETE /api/Achievements/1\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AchievementsService {\n  private baseUrl = `${window.location.origin}/api/Achievements`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех тест-кейсов.\n   *\n   * @returns {Observable} Список тест-кейсов.\n   * @example\n   * // GET /api/Achievements\n   * this.achievementsService.getAllAchievements().subscribe(list => console.log(list));\n   */\n  getAllAchievements(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает тест-кейс по его идентификатору.\n   *\n   * @param {number} id Идентификатор тест-кейса.\n   * @returns {Observable} Тест-кейс.\n   * @example\n   * // GET /api/Achievements/1\n   * this.achievementsService.getAchievementById(1).subscribe(ach => ...);\n   */\n  getAchievementById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый тест-кейс.\n   *\n   * @param {IAchievement} achievement Объект тест-кейса.\n   * @returns {Observable} Созданный тест-кейс.\n   * @example\n   * // POST /api/Achievements\n   * // Body:\n   * // {\n   * //   \"achievementId\": 0,\n   * //   \"title\": \"Новый тест-кейс\",\n   * //   \"textAchievement\": \"Описание тест-кейса\"\n   * // }\n   * this.achievementsService.createAchievement({\n   *   achievementId: 0,\n   *   title: 'Новый тест-кейс',\n   *   textAchievement: 'Описание тест-кейса'\n   * }).subscribe(newAch => ...);\n   */\n  createAchievement(achievement: IAchievement): Observable {\n    return this.http.post(this.baseUrl, achievement);\n  }\n\n  /**\n   * Обновляет существующее тест-кейс.\n   *\n   * @param {number} id Идентификатор тест-кейса.\n   * @param {IAchievement} achievement Обновлённый объект тест-кейса.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/Achievements/1\n   * // Body:\n   * // {\n   * //   \"achievementId\": 1,\n   * //   \"title\": \"Обновлённый тест-кейс\",\n   * //   \"textAchievement\": \"Новое описание\"\n   * // }\n   * this.achievementsService.updateAchievement(1, {\n   *   achievementId: 1,\n   *   title: 'Обновлённый тест-кейс',\n   *   textAchievement: 'Новое описание'\n   * }).subscribe(() => ...);\n   */\n  updateAchievement(id: number, achievement: IAchievement): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, achievement);\n  }\n\n  /**\n   * Удаляет тест-кейс по идентификатору.\n   *\n   * @param {number} id Идентификатор тест-кейса.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/Achievements/1\n   * this.achievementsService.deleteAchievement(1).subscribe(() => ...);\n   */\n  deleteAchievement(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Разблокирует тест-кейс по названию.\n   *\n   * @param {string} achievementTitle Название тест-кейса.\n   * @example\n   * this.achievementsService.unlockAchievement('First Login');\n   */\n  unlockAchievement(achievementTitle: string): void {\n    console.log(`test-case unlocked: ${achievementTitle}`);\n    // Здесь вы можете добавить логику для обновления состояния тест-кейса на сервере или локально\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthProjService.html":{"url":"injectables/AuthProjService.html","title":"injectable - AuthProjService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthProjService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth-proj.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для авторизации и регистрации пользователей проекта.\nПозволяет выполнять вход, регистрацию, выход и отслеживать статус авторизации пользователя.\nРаботает с backend-контроллером по адресу /api/AuthProj.\nExample :// Вход пользователя (POST):\n// URL: /api/AuthProj/login\n// Body:\n// {\n//   \"login\": \"user\",\n//   \"password\": \"pass\"\n// }\nthis.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});// Регистрация пользователя (POST):\n// URL: /api/AuthProj/register\n// Body:\n// {\n//   \"login\": \"newuser\",\n//   \"password\": \"newpass\"\n// }\nthis.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Public\n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                isAuthenticatedSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAuthStatus\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                register\n                            \n                            \n                                setAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth-proj.service.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAuthStatus\n                        \n                    \n                \n            \n            \n                \ncheckAuthStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Проверяет статус авторизации пользователя по наличию токена.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(userProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя.\nExample :// POST /api/AuthProj/login\n// Body:\n// {\n//   \"login\": \"user\",\n//   \"password\": \"pass\"\n// }\nthis.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя (логин и пароль).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном и ID пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Выполняет выход пользователя, очищая локальное хранилище.\nExample :this.authProjService.logout();\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(userProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\nExample :// POST /api/AuthProj/register\n// Body:\n// {\n//   \"login\": \"newuser\",\n//   \"password\": \"newpass\"\n// }\nthis.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя (логин и пароль).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном и ID пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAuthenticated\n                        \n                    \n                \n            \n            \n                \nsetAuthenticated(isAuthenticated: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Устанавливает статус авторизации пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isAuthenticated\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый статус авторизации.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/AuthProj`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.isAuthenticatedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:47\n                        \n                    \n\n            \n                \n                    Observable для отслеживания статуса авторизации пользователя.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isAuthenticatedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { IDpUserProj } from '../interface/IDpUserProj';\n\n/**\n * Сервис для авторизации и регистрации пользователей проекта.\n *\n * @remarks\n * Позволяет выполнять вход, регистрацию, выход и отслеживать статус авторизации пользователя.\n * Работает с backend-контроллером по адресу `/api/AuthProj`.\n *\n * @example\n * // Вход пользователя (POST):\n * // URL: /api/AuthProj/login\n * // Body:\n * // {\n * //   \"login\": \"user\",\n * //   \"password\": \"pass\"\n * // }\n * this.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n *\n * // Регистрация пользователя (POST):\n * // URL: /api/AuthProj/register\n * // Body:\n * // {\n * //   \"login\": \"newuser\",\n * //   \"password\": \"newpass\"\n * // }\n * this.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthProjService {\n  private baseUrl = `${window.location.origin}/api/AuthProj`;\n  private isAuthenticatedSubject = new BehaviorSubject(false);\n\n  /**\n   * Observable для отслеживания статуса авторизации пользователя.\n   */\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.checkAuthStatus();\n  }\n\n  /**\n   * Выполняет вход пользователя.\n   *\n   * @param {IDpUserProj} userProj Данные пользователя (логин и пароль).\n   * @returns {Observable} Ответ с токеном и ID пользователя.\n   * @example\n   * // POST /api/AuthProj/login\n   * // Body:\n   * // {\n   * //   \"login\": \"user\",\n   * //   \"password\": \"pass\"\n   * // }\n   * this.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n   *   // res: { token: string, userProjId: number }\n   * });\n   */\n  login(userProj: IDpUserProj): Observable {\n    const payload = {\n      login: userProj.login,\n      password: userProj.password,\n    };\n    return this.http.post(`${this.baseUrl}/login`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('projToken', response.token);\n          localStorage.setItem('userProjId', response.userProjId.toString());\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {IDpUserProj} userProj Данные пользователя (логин и пароль).\n   * @returns {Observable} Ответ с токеном и ID пользователя.\n   * @example\n   * // POST /api/AuthProj/register\n   * // Body:\n   * // {\n   * //   \"login\": \"newuser\",\n   * //   \"password\": \"newpass\"\n   * // }\n   * this.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n   *   // res: { token: string, userProjId: number }\n   * });\n   */\n  register(userProj: IDpUserProj): Observable {\n    const payload = {\n      login: userProj.login,\n      password: userProj.password\n    };\n    return this.http.post(`${this.baseUrl}/register`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('projToken', response.token);\n          localStorage.setItem('userProjId', response.userProjId.toString());\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Устанавливает статус авторизации пользователя.\n   *\n   * @param {boolean} isAuthenticated Новый статус авторизации.\n   */\n  setAuthenticated(isAuthenticated: boolean): void {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n\n  /**\n   * Проверяет статус авторизации пользователя по наличию токена.\n   */\n  checkAuthStatus(): void {\n    const token = localStorage.getItem('projToken');\n    this.setAuthenticated(!!token);\n  }\n\n  /**\n   * Выполняет выход пользователя, очищая локальное хранилище.\n   *\n   * @example\n   * this.authProjService.logout();\n   */\n  logout(): void {\n    localStorage.removeItem('projToken');\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProjId');\n    this.setAuthenticated(false);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для авторизации и регистрации пользователей.\nПозволяет выполнять регистрацию, вход, выход и отслеживать статус авторизации пользователя.\nРаботает с backend-контроллером по адресу /api/Auth.\nExample :// Регистрация пользователя (POST):\n// URL: /api/Auth/register\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.register({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { message: \"User registered successfully.\" }\n});// Вход пользователя (POST):\n// URL: /api/Auth/login\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.login({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                isAuthenticatedSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                register\n                            \n                            \n                                setAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя.\nExample :// POST /api/Auth/login\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.login({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { token: string, userProjId: number, achievementId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном, ID пользователя и достижением.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Выполняет выход пользователя, очищая локальное хранилище.\nExample :this.authService.logout();\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(user: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\nExample :// POST /api/Auth/register\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.register({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { message: \"User registered successfully.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном, ID пользователя и достижением.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAuthenticated\n                        \n                    \n                \n            \n            \n                \nsetAuthenticated(isAuthenticated: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Устанавливает статус авторизации пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isAuthenticated\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый статус авторизации.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Auth`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.isAuthenticatedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:57\n                        \n                    \n\n            \n                \n                    Observable для отслеживания статуса авторизации пользователя.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isAuthenticatedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:52\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { IDpUser } from '../interface/IDpUser';\n\n/**\n * Сервис для авторизации и регистрации пользователей.\n *\n * @remarks\n * Позволяет выполнять регистрацию, вход, выход и отслеживать статус авторизации пользователя.\n * Работает с backend-контроллером по адресу `/api/Auth`.\n *\n * @example\n * // Регистрация пользователя (POST):\n * // URL: /api/Auth/register\n * // Body:\n * // {\n * //   \"username\": \"user\",\n * //   \"password\": \"pass\",\n * //   \"phoneNumber\": \"79990001122\"\n * // }\n * this.authService.register({\n *   dpUsername: 'user',\n *   dpPassword: 'pass',\n *   dpPhoneNumber: '79990001122'\n * }).subscribe(res => {\n *   // res: { message: \"User registered successfully.\" }\n * });\n *\n * // Вход пользователя (POST):\n * // URL: /api/Auth/login\n * // Body:\n * // {\n * //   \"username\": \"user\",\n * //   \"password\": \"pass\",\n * //   \"phoneNumber\": \"79990001122\"\n * // }\n * this.authService.login({\n *   dpUsername: 'user',\n *   dpPassword: 'pass',\n *   dpPhoneNumber: '79990001122'\n * }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = `${window.location.origin}/api/Auth`;\n  private isAuthenticatedSubject = new BehaviorSubject(false);\n\n  /**\n   * Observable для отслеживания статуса авторизации пользователя.\n   */\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Устанавливает статус авторизации пользователя.\n   *\n   * @param {boolean} isAuthenticated Новый статус авторизации.\n   */\n  setAuthenticated(isAuthenticated: boolean): void {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {IDpUser} user Данные пользователя.\n   * @returns {Observable} Ответ с токеном, ID пользователя и достижением.\n   * @example\n   * // POST /api/Auth/register\n   * // Body:\n   * // {\n   * //   \"username\": \"user\",\n   * //   \"password\": \"pass\",\n   * //   \"phoneNumber\": \"79990001122\"\n   * // }\n   * this.authService.register({\n   *   dpUsername: 'user',\n   *   dpPassword: 'pass',\n   *   dpPhoneNumber: '79990001122'\n   * }).subscribe(res => {\n   *   // res: { message: \"User registered successfully.\" }\n   * });\n   */\n  register(user: IDpUser): Observable {\n    const payload = {\n      username: user.dpUsername,\n      password: user.dpPassword,\n      phoneNumber: user.dpPhoneNumber || '0000000000'\n    };\n    return this.http.post(`${this.baseUrl}/register`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n /**\n   * Выполняет вход пользователя.\n   *\n   * @param {IDpUser} user Данные пользователя.\n   * @returns {Observable} Ответ с токеном, ID пользователя и достижением.\n   * @example\n   * // POST /api/Auth/login\n   * // Body:\n   * // {\n   * //   \"username\": \"user\",\n   * //   \"password\": \"pass\",\n   * //   \"phoneNumber\": \"79990001122\"\n   * // }\n   * this.authService.login({\n   *   dpUsername: 'user',\n   *   dpPassword: 'pass',\n   *   dpPhoneNumber: '79990001122'\n   * }).subscribe(res => {\n   *   // res: { token: string, userProjId: number, achievementId: number }\n   * });\n   */\n  login(user: IDpUser): Observable {\n    const payload = {\n      username: user.dpUsername,\n      password: user.dpPassword,\n      phoneNumber: user.dpPhoneNumber || '0000000000'\n    };\n    return this.http.post(`${this.baseUrl}/login`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Выполняет выход пользователя, очищая локальное хранилище.\n   *\n   * @example\n   * this.authService.logout();\n   */\n  logout(): void {\n    localStorage.removeItem('token');\n    this.setAuthenticated(false);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CartItem.html":{"url":"interfaces/CartItem.html","title":"interface - CartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/data/page/page-cart/page-cart.component.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ICartItem\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     TuiDay\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TuiDay\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AsyncPipe, CommonModule, CurrencyPipe, NgForOf, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TuiButton, TuiAppearance, TuiAlertService, TuiScrollbar, TuiIcon } from '@taiga-ui/core';\nimport { TuiTable, TuiComparator } from '@taiga-ui/addon-table';\nimport { TuiDay, tuiDefaultSort } from '@taiga-ui/cdk';\nimport { ICartItem } from '../../../interface/ICartItem';\nimport { ICartViewModel } from '../../../interface/ICartViewModel';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IUpdateCartRequest } from '../../../interface/IUpdateCartRequest';\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\ninterface CartItem extends ICartItem {\n  readonly date: TuiDay;\n}\n\n/**\n * @ignore\n */\n@Component({\n  selector: 'app-page-cart',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    CurrencyPipe,\n    FormsModule,\n    NgForOf,\n    NgIf,\n    TuiButton,\n    TuiTable,\n    CommonModule,\n    TuiScrollbar,\n    TuiIcon\n  ],\n  templateUrl: './page-cart.component.html',\n  styleUrls: ['./page-cart.component.css', '../../../styles/root.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PageCartComponent implements OnInit {\n  protected readonly options = { updateOn: 'blur' } as const;\n  protected cartItems: CartItem[] = [];\n  protected readonly columns = ['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const;\n  protected isLoading = false;\n  private readonly userAchievementsService = inject(UserAchievementsService);\n  protected readonly totalSorter: TuiComparator = (a, b) =>\n    tuiDefaultSort(a.price * a.quantity, b.price * b.quantity);\n\n  constructor(\n    private cartService: ShopCartRepositoryService,\n    private cdr: ChangeDetectorRef,\n    public router: Router,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private configService: ConfigService,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadCartItems();\n  }\n\n  private loadCartItems(): void {\n    this.cartService.getCart().subscribe({\n      next: (cartViewModel: ICartViewModel) => {\n        console.log(cartViewModel);\n        this.cartItems = cartViewModel.cartItems.map(item => ({\n          ...item,\n          date: TuiDay.currentLocal(),\n        }));\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        console.error('Ошибка при загрузке корзины:', error);\n        this.alertService.open('Не удалось загрузить корзину. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected trackByIndex(index: number): number {\n    return index;\n  }\n\n  protected getTotal({ price, quantity }: CartItem): number {\n    return price * quantity;\n  }\n\n  protected getTotalAmount(): number {\n    return this.cartItems.reduce((sum, item) => sum + this.getTotal(item), 0);\n  }\n\n  increaseQuantity(item: CartItem): void {\n    const newQuantity = item.quantity + 1;\n    this.updateCartItemQuantity(item, newQuantity);\n  }\n\n  decreaseQuantity(item: CartItem): void {\n    if (item.quantity > 1) {\n      const newQuantity = item.quantity - 1;\n      this.updateCartItemQuantity(item, newQuantity);\n    }\n  }\n\n  removeFromCart(item: CartItem): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Тест-кейс: ошибка удаления товара из корзины!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось удалить товар (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.removeFromCart({ productId: item.productId, sizeId: item.sizeId }).subscribe({\n      next: () => {\n        this.cartItems = this.cartItems.filter(cartItem =>\n          !(cartItem.productId === item.productId && cartItem.sizeId === item.sizeId)\n        );\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartSuccess, 'Товар успешно удалён из корзины!')\n          .subscribe();\n        this.alertService.open('Товар удалён из корзины', { appearance: 'success' }).subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при удалении товара из корзины:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Ошибка удаления товара из корзины!')\n          .subscribe();\n        this.alertService.open('Не удалось удалить товар. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  checkout(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n\n    if (this.cartItems.length === 0) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutEmptyCart, 'Тест-кейс: Попытка оформления пустой корзины!')\n        .subscribe();\n      this.alertService.open('Корзина пуста, добавьте товары перед оформлением', { appearance: 'error' }).subscribe();\n      return;\n    }\n\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Тест-кейс: ошибка оформления заказа!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось оформить заказ (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.checkout().subscribe({\n      next: (response) => {\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutSuccess, 'Заказ успешно оформлен!')\n          .subscribe();\n        this.alertService.open('Заказ успешно оформлен!', { appearance: 'success' }).subscribe();\n        this.cartService.clearCart();\n        this.cartItems = [];\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.router.navigate(['/order-confirmation'], { state: { orderId: response.orderId } });\n      },\n      error: (error) => {\n        console.error('Ошибка при оформлении заказа:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Ошибка оформления заказа!')\n          .subscribe();\n        this.alertService.open('Не удалось оформить заказ. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  private updateCartItemQuantity(item: CartItem, newQuantity: number): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    \n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Тест-кейс: ошибка обновления количества товара!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось обновить количество (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    \n    const request: IUpdateCartRequest = {\n      productId: item.productId,\n      quantity: newQuantity,\n      sizeId: item.sizeId\n    };\n\n    this.cartItems = this.cartItems.map(cartItem =>\n      cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n        ? { ...cartItem, quantity: newQuantity }\n        : cartItem\n    );\n    this.cdr.markForCheck();\n\n    this.cartService.updateCart(request).subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantitySuccess, 'Количество товара успешно обновлено!')\n            .subscribe();\n          this.alertService.open('Количество товара успешно обновлено', { appearance: 'success' }).subscribe();\n        } else {\n          this.cartItems = this.cartItems.map(cartItem =>\n            cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n              ? { ...cartItem, quantity: item.quantity }\n              : cartItem\n          );\n          this.cdr.markForCheck();\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n            .subscribe();\n          this.alertService.open('Не удалось обновить количество. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        }\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        this.cartItems = this.cartItems.map(cartItem =>\n          cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n            ? { ...cartItem, quantity: item.quantity }\n            : cartItem\n        );\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n          .subscribe();\n        this.alertService.open('Ошибка при обновлении количества. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected onValueChange(\n    value: CartItem[K],\n    key: K,\n    current: CartItem\n  ): void {\n    const updated = { ...current, [key]: value };\n    this.cartItems = this.cartItems.map((item) => (item === current ? updated : item));\n    this.cdr.markForCheck();\n  }\n\n  protected onSortChange(event: any): void {\n    // Логика сортировки, если нужна\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для хранения глобальных констант и конфигураций приложения.\nСодержит идентификаторы достижений, API endpoints и коды HTTP-статусов, используемые во всём приложении.\nExample :const id = this.configService.achievementIds.loginSuccess;\nconst url = this.configService.apiEndpoints.login;\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                achievementIds\n                            \n                            \n                                    Readonly\n                                apiEndpoints\n                            \n                            \n                                    Readonly\n                                httpStatusCodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        achievementIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    loginSuccess: 1,             // Успешный вход\n    registerSuccess: 2,          // Успешная регистрация\n    addToCartSuccess: 3,         // Добавление в корзину\n    checkoutSuccess: 4,          // Оформление заказа\n    viewProductSuccess: 5,       // Просмотр продукта\n    createProductSuccess: 6,     // Создание продукта\n    updateProfileSuccess: 7,     // Обновление профиля\n    addImageSuccess: 8,          // Добавление изображения\n    addCategorySuccess: 9,       // Добавление категории\n    switchToLightThemeSuccess: 10, // Светлая тема\n    switchToDarkThemeSuccess: 11, // Тёмная тема\n    removeFromCartSuccess: 12,   // Удаление из корзины\n    updateCartQuantitySuccess: 13, // Обновление количества\n    loadProductsSuccess: 14,     // Загрузка продуктов\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\n    navigateToProductSuccess: 16, // Навигация к продукту\n    toggleThemeSuccess: 17,      // Переключение темы\n    resetThemeSuccess: 18,       // Сброс темы\n    openProductDialogSuccess: 19, // Открытие диалога продукта\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\n    logoutProjSuccess: 22,       // Выход из системы\n    updateCategorySuccess: 23,   // Обновление категории\n    updateImageSuccess: 24,      // Обновление изображения\n    updateProductSuccess: 25,    // Обновление продукта\n    // Отрицательные тест-кейсы\n    loginFailed: 26,             // Ошибка входа\n    registerFailed: 27,          // Ошибка регистрации\n    addToCartFailed: 28,         // Ошибка добавления в корзину\n    checkoutFailed: 29,          // Ошибка оформления заказа\n    viewProductFailed: 30,       // Ошибка просмотра продукта\n    createProductFailed: 31,     // Ошибка создания продукта\n    updateProfileFailed: 32,     // Ошибка обновления профиля\n    addImageFailed: 33,          // Ошибка добавления изображения\n    addCategoryFailed: 34,       // Ошибка добавления категории\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\n    failedToLoad: 37,            // Ошибка загрузки\n    buttonNotWorking: 38,        // Ошибка кнопки\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\n    logoutProjFailed: 44,        // Ошибка выхода\n    updateCategoryFailed: 45,    // Ошибка обновления категории\n    updateImageFailed: 46,       // Ошибка обновления изображения\n    updateProductFailed: 47,     // Ошибка обновления продукта\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:23\n                        \n                    \n\n            \n                \n                    Идентификаторы достижений (успешные и неуспешные сценарии).\nExample :this.configService.achievementIds.addToCartSuccess\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        apiEndpoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    login: '/api/login',\n    register: '/api/register',\n    addToCart: '/api/cart/add',\n    checkout: '/api/checkout',\n    viewProduct: '/api/products',\n    createProduct: '/api/products/create',\n    updateProfile: '/api/profile/update',\n    addImage: '/api/products/add-image',\n    addCategory: '/api/categories/add',\n    switchTheme: '/api/settings/switch-theme',\n    removeFromCart: '/api/cart/remove',\n    updateCartQuantity: '/api/cart/update',\n    loadProducts: '/api/products/all',\n    loadProductInfo: '/api/products/info',\n    toggleTheme: '/api/settings/toggle-theme',\n    resetTheme: '/api/settings/reset-theme',\n    logoutProj: '/api/auth/logout-proj'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:81\n                        \n                    \n\n            \n                \n                    Пути к API endpoint'ам.\nExample :this.configService.apiEndpoints.login\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        httpStatusCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    // 2xx: Успешные\n    success: 200,          // Успешный запрос\n    created: 201,          // Ресурс создан\n    noContent: 204,        // Успешно, но нет содержимого\n\n    // 3xx: Перенаправления\n    movedPermanently: 301, // Ресурс перемещён навсегда\n    found: 302,            // Ресурс временно перемещён\n\n    // 4xx: Ошибки клиента\n    badRequest: 400,       // Неверный запрос\n    unauthorized: 401,     // Неавторизован\n    forbidden: 403,        // Доступ запрещён\n    notFound: 404,         // Ресурс не найден\n    conflict: 409,         // Конфликт (например, дубликат)\n\n    // 5xx: Ошибки сервера\n    serverError: 500,      // Внутренняя ошибка сервера\n    serviceUnavailable: 503 // Сервис недоступен\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:107\n                        \n                    \n\n            \n                \n                    Коды HTTP-статусов для обработки ответов сервера.\nExample :if (response.status === this.configService.httpStatusCodes.success) { ... }\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Сервис для хранения глобальных констант и конфигураций приложения.\n *\n * @remarks\n * Содержит идентификаторы достижений, API endpoints и коды HTTP-статусов, используемые во всём приложении.\n *\n * @example\n * const id = this.configService.achievementIds.loginSuccess;\n * const url = this.configService.apiEndpoints.login;\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n  /**\n   * Идентификаторы достижений (успешные и неуспешные сценарии).\n   *\n   * @example\n   * this.configService.achievementIds.addToCartSuccess\n   */\n  readonly achievementIds = {\n    loginSuccess: 1,             // Успешный вход\n    registerSuccess: 2,          // Успешная регистрация\n    addToCartSuccess: 3,         // Добавление в корзину\n    checkoutSuccess: 4,          // Оформление заказа\n    viewProductSuccess: 5,       // Просмотр продукта\n    createProductSuccess: 6,     // Создание продукта\n    updateProfileSuccess: 7,     // Обновление профиля\n    addImageSuccess: 8,          // Добавление изображения\n    addCategorySuccess: 9,       // Добавление категории\n    switchToLightThemeSuccess: 10, // Светлая тема\n    switchToDarkThemeSuccess: 11, // Тёмная тема\n    removeFromCartSuccess: 12,   // Удаление из корзины\n    updateCartQuantitySuccess: 13, // Обновление количества\n    loadProductsSuccess: 14,     // Загрузка продуктов\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\n    navigateToProductSuccess: 16, // Навигация к продукту\n    toggleThemeSuccess: 17,      // Переключение темы\n    resetThemeSuccess: 18,       // Сброс темы\n    openProductDialogSuccess: 19, // Открытие диалога продукта\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\n    logoutProjSuccess: 22,       // Выход из системы\n    updateCategorySuccess: 23,   // Обновление категории\n    updateImageSuccess: 24,      // Обновление изображения\n    updateProductSuccess: 25,    // Обновление продукта\n    // Отрицательные тест-кейсы\n    loginFailed: 26,             // Ошибка входа\n    registerFailed: 27,          // Ошибка регистрации\n    addToCartFailed: 28,         // Ошибка добавления в корзину\n    checkoutFailed: 29,          // Ошибка оформления заказа\n    viewProductFailed: 30,       // Ошибка просмотра продукта\n    createProductFailed: 31,     // Ошибка создания продукта\n    updateProfileFailed: 32,     // Ошибка обновления профиля\n    addImageFailed: 33,          // Ошибка добавления изображения\n    addCategoryFailed: 34,       // Ошибка добавления категории\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\n    failedToLoad: 37,            // Ошибка загрузки\n    buttonNotWorking: 38,        // Ошибка кнопки\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\n    logoutProjFailed: 44,        // Ошибка выхода\n    updateCategoryFailed: 45,    // Ошибка обновления категории\n    updateImageFailed: 46,       // Ошибка обновления изображения\n    updateProductFailed: 47,     // Ошибка обновления продукта\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\n  };\n\n  /**\n   * Пути к API endpoint'ам.\n   *\n   * @example\n   * this.configService.apiEndpoints.login\n   */\n  readonly apiEndpoints = {\n    login: '/api/login',\n    register: '/api/register',\n    addToCart: '/api/cart/add',\n    checkout: '/api/checkout',\n    viewProduct: '/api/products',\n    createProduct: '/api/products/create',\n    updateProfile: '/api/profile/update',\n    addImage: '/api/products/add-image',\n    addCategory: '/api/categories/add',\n    switchTheme: '/api/settings/switch-theme',\n    removeFromCart: '/api/cart/remove',\n    updateCartQuantity: '/api/cart/update',\n    loadProducts: '/api/products/all',\n    loadProductInfo: '/api/products/info',\n    toggleTheme: '/api/settings/toggle-theme',\n    resetTheme: '/api/settings/reset-theme',\n    logoutProj: '/api/auth/logout-proj'\n  };\n\n  /**\n   * Коды HTTP-статусов для обработки ответов сервера.\n   *\n   * @example\n   * if (response.status === this.configService.httpStatusCodes.success) { ... }\n   */\n  readonly httpStatusCodes = {\n    // 2xx: Успешные\n    success: 200,          // Успешный запрос\n    created: 201,          // Ресурс создан\n    noContent: 204,        // Успешно, но нет содержимого\n\n    // 3xx: Перенаправления\n    movedPermanently: 301, // Ресурс перемещён навсегда\n    found: 302,            // Ресурс временно перемещён\n\n    // 4xx: Ошибки клиента\n    badRequest: 400,       // Неверный запрос\n    unauthorized: 401,     // Неавторизован\n    forbidden: 403,        // Доступ запрещён\n    notFound: 404,         // Ресурс не найден\n    conflict: 409,         // Конфликт (например, дубликат)\n\n    // 5xx: Ошибки сервера\n    serverError: 500,      // Внутренняя ошибка сервера\n    serviceUnavailable: 503 // Сервис недоступен\n  };\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DocsComponent.html":{"url":"components/DocsComponent.html","title":"component - DocsComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DocsComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/docs/docs.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-docs\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            RouterModule\n                \n            \n\n            \n                styleUrls\n                ./docs.component.css\n            \n\n\n\n            \n                templateUrl\n                ./docs.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\n@Component({\n  selector: 'app-docs',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './docs.component.html',\n  styleUrls: ['./docs.component.css']\n})\nexport class DocsComponent { }\n\nexport const routes: Routes = [{ path: '', component: DocsComponent }];\n\n    \n\n    \n        \n    \n\n    \n                \n                    ./docs.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'DocsComponent', 'selector': 'app-docs'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DocsComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpCategoriesService.html":{"url":"injectables/DpCategoriesService.html","title":"injectable - DpCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-categories.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с категориями товаров.\nПозволяет получать, создавать, обновлять и удалять категории товаров через API.\nExample :// Получить все категории (GET):\n// URL: /api/DpCategories\nthis.dpCategoriesService.getAllDpCategories().subscribe(categories => console.log(categories));// Получить категорию по id (GET):\n// URL: /api/DpCategories/1\nthis.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n// Создать категорию (POST):\n// URL: /api/DpCategories\n// Body:\n// {\n//   \"dpCategoryId\": 0,\n//   \"dpCategoryTitle\": \"Одежда\",\n//   \"dpCategoryDescription\": \"Вся одежда\"\n// }\nthis.dpCategoriesService.createDpCategory({\n  dpCategoryId: 0,\n  dpCategoryTitle: 'Одежда',\n  dpCategoryDescription: 'Вся одежда'\n}).subscribe(newCategory => ...);\n// Обновить категорию (PUT):\n// URL: /api/DpCategories/1\n// Body:\n// {\n//   \"dpCategoryId\": 1,\n//   \"dpCategoryTitle\": \"Обновлённая категория\",\n//   \"dpCategoryDescription\": \"Новое описание\"\n// }\nthis.dpCategoriesService.updateDpCategory(1, {\n  dpCategoryId: 1,\n  dpCategoryTitle: 'Обновлённая категория',\n  dpCategoryDescription: 'Новое описание'\n}).subscribe(() => ...);\n// Удалить категорию (DELETE):\n// URL: /api/DpCategories/1\nthis.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpCategory\n                            \n                            \n                                deleteDpCategory\n                            \n                            \n                                getAllDpCategories\n                            \n                            \n                                getDpCategoryById\n                            \n                            \n                                updateDpCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-categories.service.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpCategory\n                        \n                    \n                \n            \n            \n                \ncreateDpCategory(dpCategory: IDpCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Создаёт новую категорию.\nExample :// POST /api/DpCategories\n// Body:\n// {\n//   \"dpCategoryId\": 0,\n//   \"dpCategoryTitle\": \"Одежда\",\n//   \"dpCategoryDescription\": \"Вся одежда\"\n// }\nthis.dpCategoriesService.createDpCategory({\n  dpCategoryId: 0,\n  dpCategoryTitle: 'Одежда',\n  dpCategoryDescription: 'Вся одежда'\n}).subscribe(newCategory => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpCategory\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданная категория.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpCategory\n                        \n                    \n                \n            \n            \n                \ndeleteDpCategory(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Удаляет категорию по идентификатору.\nExample :// DELETE /api/DpCategories/1\nthis.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpCategories\n                        \n                    \n                \n            \n            \n                \ngetAllDpCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Получает список всех категорий.\nExample :// GET /api/DpCategories\nthis.dpCategoriesService.getAllDpCategories().subscribe(categories => ...);\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список категорий.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpCategoryById\n                        \n                    \n                \n            \n            \n                \ngetDpCategoryById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получает категорию по её идентификатору.\nExample :// GET /api/DpCategories/1\nthis.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Категория.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpCategory\n                        \n                    \n                \n            \n            \n                \nupdateDpCategory(id: number, dpCategory: IDpCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Обновляет существующую категорию.\nExample :// PUT /api/DpCategories/1\n// Body:\n// {\n//   \"dpCategoryId\": 1,\n//   \"dpCategoryTitle\": \"Обновлённая категория\",\n//   \"dpCategoryDescription\": \"Новое описание\"\n// }\nthis.dpCategoriesService.updateDpCategory(1, {\n  dpCategoryId: 1,\n  dpCategoryTitle: 'Обновлённая категория',\n  dpCategoryDescription: 'Новое описание'\n}).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                        \n                                                dpCategory\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённая категория.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpCategories`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-categories.service.ts:57\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpCategory } from '../interface/IDpCategory';\n\n/**\n * Сервис для работы с категориями товаров.\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять категории товаров через API.\n *\n * @example\n * // Получить все категории (GET):\n * // URL: /api/DpCategories\n * this.dpCategoriesService.getAllDpCategories().subscribe(categories => console.log(categories));\n *\n * // Получить категорию по id (GET):\n * // URL: /api/DpCategories/1\n * this.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n *\n * // Создать категорию (POST):\n * // URL: /api/DpCategories\n * // Body:\n * // {\n * //   \"dpCategoryId\": 0,\n * //   \"dpCategoryTitle\": \"Одежда\",\n * //   \"dpCategoryDescription\": \"Вся одежда\"\n * // }\n * this.dpCategoriesService.createDpCategory({\n *   dpCategoryId: 0,\n *   dpCategoryTitle: 'Одежда',\n *   dpCategoryDescription: 'Вся одежда'\n * }).subscribe(newCategory => ...);\n *\n * // Обновить категорию (PUT):\n * // URL: /api/DpCategories/1\n * // Body:\n * // {\n * //   \"dpCategoryId\": 1,\n * //   \"dpCategoryTitle\": \"Обновлённая категория\",\n * //   \"dpCategoryDescription\": \"Новое описание\"\n * // }\n * this.dpCategoriesService.updateDpCategory(1, {\n *   dpCategoryId: 1,\n *   dpCategoryTitle: 'Обновлённая категория',\n *   dpCategoryDescription: 'Новое описание'\n * }).subscribe(() => ...);\n *\n * // Удалить категорию (DELETE):\n * // URL: /api/DpCategories/1\n * this.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpCategoriesService {\n  private baseUrl = `${window.location.origin}/api/DpCategories`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех категорий.\n   *\n   * @returns {Observable} Список категорий.\n   * @example\n   * // GET /api/DpCategories\n   * this.dpCategoriesService.getAllDpCategories().subscribe(categories => ...);\n   */\n  getAllDpCategories(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает категорию по её идентификатору.\n   *\n   * @param {number} id Идентификатор категории.\n   * @returns {Observable} Категория.\n   * @example\n   * // GET /api/DpCategories/1\n   * this.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n   */\n  getDpCategoryById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новую категорию.\n   *\n   * @param {IDpCategory} dpCategory Объект категории.\n   * @returns {Observable} Созданная категория.\n   * @example\n   * // POST /api/DpCategories\n   * // Body:\n   * // {\n   * //   \"dpCategoryId\": 0,\n   * //   \"dpCategoryTitle\": \"Одежда\",\n   * //   \"dpCategoryDescription\": \"Вся одежда\"\n   * // }\n   * this.dpCategoriesService.createDpCategory({\n   *   dpCategoryId: 0,\n   *   dpCategoryTitle: 'Одежда',\n   *   dpCategoryDescription: 'Вся одежда'\n   * }).subscribe(newCategory => ...);\n   */\n  createDpCategory(dpCategory: IDpCategory): Observable {\n    return this.http.post(this.baseUrl, dpCategory);\n  }\n\n  /**\n   * Обновляет существующую категорию.\n   *\n   * @param {number} id Идентификатор категории.\n   * @param {IDpCategory} dpCategory Обновлённая категория.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpCategories/1\n   * // Body:\n   * // {\n   * //   \"dpCategoryId\": 1,\n   * //   \"dpCategoryTitle\": \"Обновлённая категория\",\n   * //   \"dpCategoryDescription\": \"Новое описание\"\n   * // }\n   * this.dpCategoriesService.updateDpCategory(1, {\n   *   dpCategoryId: 1,\n   *   dpCategoryTitle: 'Обновлённая категория',\n   *   dpCategoryDescription: 'Новое описание'\n   * }).subscribe(() => ...);\n   */\n  updateDpCategory(id: number, dpCategory: IDpCategory): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpCategory);\n  }\n\n  /**\n   * Удаляет категорию по идентификатору.\n   *\n   * @param {number} id Идентификатор категории.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpCategories/1\n   * this.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n   */\n  deleteDpCategory(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpImagesService.html":{"url":"injectables/DpImagesService.html","title":"injectable - DpImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-images.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с изображениями товаров.\nПозволяет получать, создавать, обновлять и удалять изображения, а также получать бинарные данные изображения.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpImage\n                            \n                            \n                                deleteDpImage\n                            \n                            \n                                getAllDpImages\n                            \n                            \n                                getDpImageById\n                            \n                            \n                                getDpImageData\n                            \n                            \n                                getDpImagesByProductId\n                            \n                            \n                                updateDpImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-images.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpImage\n                        \n                    \n                \n            \n            \n                \ncreateDpImage(request: ICreateDpImageRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Создаёт новое изображение для товара.\nExample :// POST /api/DpImages (multipart/form-data)\n// FormData:\n// DpProductId: 5\n// DpImageTitle: \"Фото товара\"\n// File: (binary image file)\nconst file = ...; // File из input[type=\"file\"]\nconst formData = new FormData();\nformData.append('DpProductId', '5');\nformData.append('DpImageTitle', 'Фото товара');\nformData.append('File', file);\nthis.http.post('/api/DpImages', formData).subscribe(image => {\n  // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n});// Или через сервис:\nthis.dpImagesService.createDpImage({\n  dpProductId: 5,\n  dpImageTitle: 'Фото товара',\n  file\n}).subscribe(image => console.log(image));\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            ICreateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для создания изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданное изображение.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpImage\n                        \n                    \n                \n            \n            \n                \ndeleteDpImage(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Удаляет изображение по идентификатору.\nExample :this.dpImagesService.deleteDpImage(10).subscribe(() => console.log('Удалено'));\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpImages\n                        \n                    \n                \n            \n            \n                \ngetAllDpImages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Получает список всех изображений.\nExample :// GET /api/DpImages\nthis.dpImagesService.getAllDpImages().subscribe(images => {\n  // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n  console.log(images);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список всех изображений.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImageById\n                        \n                    \n                \n            \n            \n                \ngetDpImageById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Получает изображение по его идентификатору.\nExample :// GET /api/DpImages/10\nthis.dpImagesService.getDpImageById(10).subscribe(image => {\n  // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Объект изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImageData\n                        \n                    \n                \n            \n            \n                \ngetDpImageData(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Получает бинарные данные изображения (Blob) по идентификатору.\nExample :// GET /api/DpImages/10/image\nthis.dpImagesService.getDpImageData(10).subscribe(blob => {\n  const url = URL.createObjectURL(blob);\n  window.open(url);\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Бинарные данные изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImagesByProductId\n                        \n                    \n                \n            \n            \n                \ngetDpImagesByProductId(productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Получает изображения по идентификатору товара.\nExample :// GET /api/DpImages/ByProduct/5\nthis.dpImagesService.getDpImagesByProductId(5).subscribe(images => {\n  // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список изображений для товара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpImage\n                        \n                    \n                \n            \n            \n                \nupdateDpImage(id: number, request: IUpdateDpImageRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Обновляет существующее изображение.\nExample :// PUT /api/DpImages/10 (multipart/form-data)\n// FormData:\n// DpProductId: 5\n// DpImageTitle: \"Новое название\"\n// File: (binary image file, опционально)\nconst file = ...; // Новый файл или undefined\nconst formData = new FormData();\nformData.append('DpProductId', '5');\nformData.append('DpImageTitle', 'Новое название');\nif (file) formData.append('File', file);\nthis.http.put('/api/DpImages/10', formData).subscribe(() => {\n  console.log('Изображение обновлено');\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                        \n                                                request\n                                            \n                                                            IUpdateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для обновления изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpImages`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-images.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpImage } from '../interface/IDpImage';\nimport { ICreateDpImageRequest } from '../interface/ICreateDpImageRequest';\nimport { IUpdateDpImageRequest } from '../interface/IUpdateDpImageRequest';\n\n/**\n * Сервис для работы с изображениями товаров.\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять изображения, а также получать бинарные данные изображения.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpImagesService {\n  private baseUrl = `${window.location.origin}/api/DpImages`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех изображений.\n   *\n   * @returns {Observable} Список всех изображений.\n   * @example\n   * // GET /api/DpImages\n   * this.dpImagesService.getAllDpImages().subscribe(images => {\n   *   // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n   *   console.log(images);\n   * });\n   */\n  getAllDpImages(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает изображения по идентификатору товара.\n   *\n   * @param {number} productId Идентификатор товара.\n   * @returns {Observable} Список изображений для товара.\n   * @example\n   * // GET /api/DpImages/ByProduct/5\n   * this.dpImagesService.getDpImagesByProductId(5).subscribe(images => {\n   *   // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n   * });\n   */\n  getDpImagesByProductId(productId: number): Observable {\n    return this.http.get(`${this.baseUrl}/ByProduct/${productId}`);\n  }\n\n  /**\n   * Получает изображение по его идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Объект изображения.\n   * @example\n   * // GET /api/DpImages/10\n   * this.dpImagesService.getDpImageById(10).subscribe(image => {\n   *   // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n   * });\n   */\n  getDpImageById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Получает бинарные данные изображения (Blob) по идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Бинарные данные изображения.\n   * @example\n   * // GET /api/DpImages/10/image\n   * this.dpImagesService.getDpImageData(10).subscribe(blob => {\n   *   const url = URL.createObjectURL(blob);\n   *   window.open(url);\n   * });\n   */\n  getDpImageData(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}/image`, { responseType: 'blob' });\n  }\n\n  /**\n   * Создаёт новое изображение для товара.\n   *\n   * @param {ICreateDpImageRequest} request Данные для создания изображения.\n   * @returns {Observable} Созданное изображение.\n   * @example\n   * // POST /api/DpImages (multipart/form-data)\n   * // FormData:\n   * // DpProductId: 5\n   * // DpImageTitle: \"Фото товара\"\n   * // File: (binary image file)\n   * const file = ...; // File из input[type=\"file\"]\n   * const formData = new FormData();\n   * formData.append('DpProductId', '5');\n   * formData.append('DpImageTitle', 'Фото товара');\n   * formData.append('File', file);\n   * this.http.post('/api/DpImages', formData).subscribe(image => {\n   *   // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n   * });\n   *\n   * // Или через сервис:\n   * this.dpImagesService.createDpImage({\n   *   dpProductId: 5,\n   *   dpImageTitle: 'Фото товара',\n   *   file\n   * }).subscribe(image => console.log(image));\n   */\n  createDpImage(request: ICreateDpImageRequest): Observable {\n    const formData = new FormData();\n    formData.append('DpProductId', request.dpProductId.toString());\n    formData.append('DpImageTitle', request.dpImageTitle);\n    formData.append('File', request.file);\n\n    return this.http.post(this.baseUrl, formData);\n  }\n\n  /**\n   * Обновляет существующее изображение.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @param {IUpdateDpImageRequest} request Данные для обновления изображения.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpImages/10 (multipart/form-data)\n   * // FormData:\n   * // DpProductId: 5\n   * // DpImageTitle: \"Новое название\"\n   * // File: (binary image file, опционально)\n   * const file = ...; // Новый файл или undefined\n   * const formData = new FormData();\n   * formData.append('DpProductId', '5');\n   * formData.append('DpImageTitle', 'Новое название');\n   * if (file) formData.append('File', file);\n   * this.http.put('/api/DpImages/10', formData).subscribe(() => {\n   *   console.log('Изображение обновлено');\n   * });\n   */\n  updateDpImage(id: number, request: IUpdateDpImageRequest): Observable {\n    const formData = new FormData();\n    formData.append('DpProductId', request.dpProductId.toString());\n    formData.append('DpImageTitle', request.dpImageTitle);\n    if (request.file) {\n      formData.append('File', request.file);\n    }\n\n    return this.http.put(`${this.baseUrl}/${id}`, formData);\n  }\n\n  /**\n   * Удаляет изображение по идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * this.dpImagesService.deleteDpImage(10).subscribe(() => console.log('Удалено'));\n   */\n  deleteDpImage(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpOrderCompositionsService.html":{"url":"injectables/DpOrderCompositionsService.html","title":"injectable - DpOrderCompositionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpOrderCompositionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-order-compositions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с составами заказов (Order Compositions).\nПозволяет получать, создавать, обновлять и удалять составы заказов через API.\nExample :// Получить все составы заказов (GET):\n// URL: /api/DpOrderCompositions\nthis.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => console.log(compositions));// Получить состав заказа по id (GET):\n// URL: /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n  // composition: { dpOrderId, dpProductId, quantity, dpAttributes, dpOrder }\n});\n// Создать состав заказа (POST):\n// URL: /api/DpOrderCompositions\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 3,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.createDpOrderComposition({\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 3,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(newComp => {\n  // newComp: { dpOrderId, dpProductId, quantity, ... }\n});\n// Обновить состав заказа (PUT):\n// URL: /api/DpOrderCompositions/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 5,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.updateDpOrderComposition(1, {\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 5,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(() => {\n  // Состав заказа обновлён\n});\n// Удалить состав заказа (DELETE):\n// URL: /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n  // Состав заказа удалён\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpOrderComposition\n                            \n                            \n                                deleteDpOrderComposition\n                            \n                            \n                                getAllDpOrderCompositions\n                            \n                            \n                                getDpOrderCompositionById\n                            \n                            \n                                updateDpOrderComposition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-order-compositions.service.ts:73\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpOrderComposition\n                        \n                    \n                \n            \n            \n                \ncreateDpOrderComposition(dpOrderComposition: IDpOrderComposition)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Создаёт новый состав заказа.\nExample :// POST /api/DpOrderCompositions\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 3,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.createDpOrderComposition({\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 3,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(newComp => {\n  // newComp: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpOrderComposition\n                                            \n                                                            IDpOrderComposition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный состав заказа.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpOrderComposition\n                        \n                    \n                \n            \n            \n                \ndeleteDpOrderComposition(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Удаляет состав заказа по идентификатору.\nExample :// DELETE /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n  // Состав заказа удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpOrderCompositions\n                        \n                    \n                \n            \n            \n                \ngetAllDpOrderCompositions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Получает список всех составов заказов.\nExample :// GET /api/DpOrderCompositions\nthis.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => {\n  // compositions: [{ ... }]\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список составов заказов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpOrderCompositionById\n                        \n                    \n                \n            \n            \n                \ngetDpOrderCompositionById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Получает состав заказа по его идентификатору.\nExample :// GET /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n  // composition: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Состав заказа.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpOrderComposition\n                        \n                    \n                \n            \n            \n                \nupdateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий состав заказа.\nExample :// PUT /api/DpOrderCompositions/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 5,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.updateDpOrderComposition(1, {\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 5,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(() => {\n  // Состав заказа обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                        \n                                                dpOrderComposition\n                                            \n                                                            IDpOrderComposition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpOrderCompositions`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-order-compositions.service.ts:73\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpOrderComposition } from '../interface/IDpOrderComposition';\n\n/**\n * Сервис для работы с составами заказов (Order Compositions).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять составы заказов через API.\n *\n * @example\n * // Получить все составы заказов (GET):\n * // URL: /api/DpOrderCompositions\n * this.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => console.log(compositions));\n *\n * // Получить состав заказа по id (GET):\n * // URL: /api/DpOrderCompositions/1\n * this.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n *   // composition: { dpOrderId, dpProductId, quantity, dpAttributes, dpOrder }\n * });\n *\n * // Создать состав заказа (POST):\n * // URL: /api/DpOrderCompositions\n * // Body:\n * // {\n * //   \"dpOrderId\": 1,\n * //   \"dpProductId\": 2,\n * //   \"quantity\": 3,\n * //   \"dpAttributes\": [],\n * //   \"dpOrder\": null\n * // }\n * this.dpOrderCompositionsService.createDpOrderComposition({\n *   dpOrderId: 1,\n *   dpProductId: 2,\n *   quantity: 3,\n *   dpAttributes: [],\n *   dpOrder: null\n * }).subscribe(newComp => {\n *   // newComp: { dpOrderId, dpProductId, quantity, ... }\n * });\n *\n * // Обновить состав заказа (PUT):\n * // URL: /api/DpOrderCompositions/1\n * // Body:\n * // {\n * //   \"dpOrderId\": 1,\n * //   \"dpProductId\": 2,\n * //   \"quantity\": 5,\n * //   \"dpAttributes\": [],\n * //   \"dpOrder\": null\n * // }\n * this.dpOrderCompositionsService.updateDpOrderComposition(1, {\n *   dpOrderId: 1,\n *   dpProductId: 2,\n *   quantity: 5,\n *   dpAttributes: [],\n *   dpOrder: null\n * }).subscribe(() => {\n *   // Состав заказа обновлён\n * });\n *\n * // Удалить состав заказа (DELETE):\n * // URL: /api/DpOrderCompositions/1\n * this.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n *   // Состав заказа удалён\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpOrderCompositionsService {\n  private baseUrl = `${window.location.origin}/api/DpOrderCompositions`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех составов заказов.\n   *\n   * @returns {Observable} Список составов заказов.\n   * @example\n   * // GET /api/DpOrderCompositions\n   * this.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => {\n   *   // compositions: [{ ... }]\n   * });\n   */\n  getAllDpOrderCompositions(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает состав заказа по его идентификатору.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @returns {Observable} Состав заказа.\n   * @example\n   * // GET /api/DpOrderCompositions/1\n   * this.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n   *   // composition: { ... }\n   * });\n   */\n  getDpOrderCompositionById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый состав заказа.\n   *\n   * @param {IDpOrderComposition} dpOrderComposition Объект состава заказа.\n   * @returns {Observable} Созданный состав заказа.\n   * @example\n   * // POST /api/DpOrderCompositions\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpProductId\": 2,\n   * //   \"quantity\": 3,\n   * //   \"dpAttributes\": [],\n   * //   \"dpOrder\": null\n   * // }\n   * this.dpOrderCompositionsService.createDpOrderComposition({\n   *   dpOrderId: 1,\n   *   dpProductId: 2,\n   *   quantity: 3,\n   *   dpAttributes: [],\n   *   dpOrder: null\n   * }).subscribe(newComp => {\n   *   // newComp: { ... }\n   * });\n   */\n  createDpOrderComposition(dpOrderComposition: IDpOrderComposition): Observable {\n    return this.http.post(this.baseUrl, dpOrderComposition);\n  }\n\n  /**\n   * Обновляет существующий состав заказа.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @param {IDpOrderComposition} dpOrderComposition Обновлённый объект состава заказа.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpOrderCompositions/1\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpProductId\": 2,\n   * //   \"quantity\": 5,\n   * //   \"dpAttributes\": [],\n   * //   \"dpOrder\": null\n   * // }\n   * this.dpOrderCompositionsService.updateDpOrderComposition(1, {\n   *   dpOrderId: 1,\n   *   dpProductId: 2,\n   *   quantity: 5,\n   *   dpAttributes: [],\n   *   dpOrder: null\n   * }).subscribe(() => {\n   *   // Состав заказа обновлён\n   * });\n   */\n  updateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpOrderComposition);\n  }\n\n  /**\n   * Удаляет состав заказа по идентификатору.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpOrderCompositions/1\n   * this.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n   *   // Состав заказа удалён\n   * });\n   */\n  deleteDpOrderComposition(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpOrdersService.html":{"url":"injectables/DpOrdersService.html","title":"injectable - DpOrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpOrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-orders.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с заказами (Orders).\nПозволяет получать, создавать, обновлять и удалять заказы через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpOrder\n                            \n                            \n                                deleteDpOrder\n                            \n                            \n                                getAllDpOrders\n                            \n                            \n                                getDpOrderById\n                            \n                            \n                                updateDpOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-orders.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpOrder\n                        \n                    \n                \n            \n            \n                \ncreateDpOrder(dpOrder: IDpOrder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Создаёт новый заказ.\nExample :// POST /api/DpOrders\n// Body:\n// {\n//   \"dpOrderId\": 0,\n//   \"dpUserId\": 1,\n//   \"orderDate\": \"2025-06-22T12:00:00\",\n//   \"orderStatus\": \"Новый\"\n// }\nthis.dpOrdersService.createDpOrder({\n  dpOrderId: 0,\n  dpUserId: 1,\n  orderDate: new Date().toISOString(),\n  orderStatus: 'Новый'\n}).subscribe(newOrder => {\n  // newOrder: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpOrder\n                                            \n                                                            IDpOrder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный заказ.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpOrder\n                        \n                    \n                \n            \n            \n                \ndeleteDpOrder(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Удаляет заказ по идентификатору.\nExample :// DELETE /api/DpOrders/1\nthis.dpOrdersService.deleteDpOrder(1).subscribe(() => {\n  // Заказ удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpOrders\n                        \n                    \n                \n            \n            \n                \ngetAllDpOrders()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех заказов.\nExample :// GET /api/DpOrders\nthis.dpOrdersService.getAllDpOrders().subscribe(orders => {\n  // orders: [{ dpOrderId, dpUserId, orderDate, orderStatus, ... }]\n  console.log(orders);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список заказов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpOrderById\n                        \n                    \n                \n            \n            \n                \ngetDpOrderById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает заказ по его идентификатору.\nExample :// GET /api/DpOrders/1\nthis.dpOrdersService.getDpOrderById(1).subscribe(order => {\n  // order: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Заказ.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpOrder\n                        \n                    \n                \n            \n            \n                \nupdateDpOrder(id: number, dpOrder: IDpOrder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий заказ.\nExample :// PUT /api/DpOrders/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpUserId\": 1,\n//   \"orderDate\": \"2025-06-22T12:00:00\",\n//   \"orderStatus\": \"Обновлён\"\n// }\nthis.dpOrdersService.updateDpOrder(1, {\n  dpOrderId: 1,\n  dpUserId: 1,\n  orderDate: new Date().toISOString(),\n  orderStatus: 'Обновлён'\n}).subscribe(() => {\n  // Заказ обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                        \n                                                dpOrder\n                                            \n                                                            IDpOrder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpOrders`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-orders.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpOrder } from '../interface/IDpOrder';\n\n/**\n * Сервис для работы с заказами (Orders).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять заказы через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpOrdersService {\n  private baseUrl = `${window.location.origin}/api/DpOrders`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех заказов.\n   *\n   * @returns {Observable} Список заказов.\n   * @example\n   * // GET /api/DpOrders\n   * this.dpOrdersService.getAllDpOrders().subscribe(orders => {\n   *   // orders: [{ dpOrderId, dpUserId, orderDate, orderStatus, ... }]\n   *   console.log(orders);\n   * });\n   */\n  getAllDpOrders(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает заказ по его идентификатору.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @returns {Observable} Заказ.\n   * @example\n   * // GET /api/DpOrders/1\n   * this.dpOrdersService.getDpOrderById(1).subscribe(order => {\n   *   // order: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n   * });\n   */\n  getDpOrderById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый заказ.\n   *\n   * @param {IDpOrder} dpOrder Объект заказа.\n   * @returns {Observable} Созданный заказ.\n   * @example\n   * // POST /api/DpOrders\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 0,\n   * //   \"dpUserId\": 1,\n   * //   \"orderDate\": \"2025-06-22T12:00:00\",\n   * //   \"orderStatus\": \"Новый\"\n   * // }\n   * this.dpOrdersService.createDpOrder({\n   *   dpOrderId: 0,\n   *   dpUserId: 1,\n   *   orderDate: new Date().toISOString(),\n   *   orderStatus: 'Новый'\n   * }).subscribe(newOrder => {\n   *   // newOrder: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n   * });\n   */\n  createDpOrder(dpOrder: IDpOrder): Observable {\n    return this.http.post(this.baseUrl, dpOrder);\n  }\n\n  /**\n   * Обновляет существующий заказ.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @param {IDpOrder} dpOrder Обновлённый объект заказа.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpOrders/1\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpUserId\": 1,\n   * //   \"orderDate\": \"2025-06-22T12:00:00\",\n   * //   \"orderStatus\": \"Обновлён\"\n   * // }\n   * this.dpOrdersService.updateDpOrder(1, {\n   *   dpOrderId: 1,\n   *   dpUserId: 1,\n   *   orderDate: new Date().toISOString(),\n   *   orderStatus: 'Обновлён'\n   * }).subscribe(() => {\n   *   // Заказ обновлён\n   * });\n   */\n  updateDpOrder(id: number, dpOrder: IDpOrder): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpOrder);\n  }\n\n  /**\n   * Удаляет заказ по идентификатору.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpOrders/1\n   * this.dpOrdersService.deleteDpOrder(1).subscribe(() => {\n   *   // Заказ удалён\n   * });\n   */\n  deleteDpOrder(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpProductAttributesService.html":{"url":"injectables/DpProductAttributesService.html","title":"injectable - DpProductAttributesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpProductAttributesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-product-attributes.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с атрибутами товаров (Product Attributes).\nПозволяет получать, создавать, обновлять и удалять атрибуты товаров через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpProductAttribute\n                            \n                            \n                                deleteDpProductAttribute\n                            \n                            \n                                getAllDpProductAttributes\n                            \n                            \n                                getDpProductAttributeById\n                            \n                            \n                                updateDpProductAttribute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-product-attributes.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpProductAttribute\n                        \n                    \n                \n            \n            \n                \ncreateDpProductAttribute(dpProductAttribute: IDpProductAttribute)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Создаёт новый атрибут товара.\nExample :// POST /api/DpProductAttributes\n// Body:\n// {\n//   \"dpAttributesId\": 0,\n//   \"dpProductId\": 1,\n//   \"dpSize\": \"M\",\n//   \"dpColor\": \"Red\",\n//   ...другие поля...\n// }\nthis.dpProductAttributesService.createDpProductAttribute({\n  dpAttributesId: 0,\n  dpProductId: 1,\n  dpSize: 'M',\n  dpColor: 'Red'\n}).subscribe(attr => {\n  // attr: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpProductAttribute\n                                            \n                                                            IDpProductAttribute\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный атрибут.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpProductAttribute\n                        \n                    \n                \n            \n            \n                \ndeleteDpProductAttribute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Удаляет атрибут товара по идентификатору.\nExample :// DELETE /api/DpProductAttributes/1\nthis.dpProductAttributesService.deleteDpProductAttribute(1).subscribe(() => {\n  // Атрибут удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpProductAttributes\n                        \n                    \n                \n            \n            \n                \ngetAllDpProductAttributes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех атрибутов товаров.\nExample :// GET /api/DpProductAttributes\nthis.dpProductAttributesService.getAllDpProductAttributes().subscribe(attrs => {\n  // attrs: [{ dpAttributesId, dpProductId, dpSize, ... }]\n  console.log(attrs);\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список атрибутов товаров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpProductAttributeById\n                        \n                    \n                \n            \n            \n                \ngetDpProductAttributeById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает атрибут товара по его идентификатору.\nExample :// GET /api/DpProductAttributes/1\nthis.dpProductAttributesService.getDpProductAttributeById(1).subscribe(attr => {\n  // attr: { dpAttributesId, dpProductId, dpSize, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Атрибут товара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpProductAttribute\n                        \n                    \n                \n            \n            \n                \nupdateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий атрибут товара.\nExample :// PUT /api/DpProductAttributes/1\n// Body:\n// {\n//   \"dpAttributesId\": 1,\n//   \"dpProductId\": 1,\n//   \"dpSize\": \"L\",\n//   \"dpColor\": \"Blue\",\n//   ...другие поля...\n// }\nthis.dpProductAttributesService.updateDpProductAttribute(1, {\n  dpAttributesId: 1,\n  dpProductId: 1,\n  dpSize: 'L',\n  dpColor: 'Blue'\n}).subscribe(() => {\n  // Атрибут обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                        \n                                                dpProductAttribute\n                                            \n                                                            IDpProductAttribute\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpProductAttributes`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-product-attributes.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpProductAttribute } from '../interface/IDpProductAttribute';\n\n/**\n * Сервис для работы с атрибутами товаров (Product Attributes).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять атрибуты товаров через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpProductAttributesService {\n  private baseUrl = `${window.location.origin}/api/DpProductAttributes`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех атрибутов товаров.\n   *\n   * @returns {Observable} Список атрибутов товаров.\n   * @example\n   * // GET /api/DpProductAttributes\n   * this.dpProductAttributesService.getAllDpProductAttributes().subscribe(attrs => {\n   *   // attrs: [{ dpAttributesId, dpProductId, dpSize, ... }]\n   *   console.log(attrs);\n   * });\n   */\n  getAllDpProductAttributes(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает атрибут товара по его идентификатору.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @returns {Observable} Атрибут товара.\n   * @example\n   * // GET /api/DpProductAttributes/1\n   * this.dpProductAttributesService.getDpProductAttributeById(1).subscribe(attr => {\n   *   // attr: { dpAttributesId, dpProductId, dpSize, ... }\n   * });\n   */\n  getDpProductAttributeById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый атрибут товара.\n   *\n   * @param {IDpProductAttribute} dpProductAttribute Объект атрибута.\n   * @returns {Observable} Созданный атрибут.\n   * @example\n   * // POST /api/DpProductAttributes\n   * // Body:\n   * // {\n   * //   \"dpAttributesId\": 0,\n   * //   \"dpProductId\": 1,\n   * //   \"dpSize\": \"M\",\n   * //   \"dpColor\": \"Red\",\n   * //   ...другие поля...\n   * // }\n   * this.dpProductAttributesService.createDpProductAttribute({\n   *   dpAttributesId: 0,\n   *   dpProductId: 1,\n   *   dpSize: 'M',\n   *   dpColor: 'Red'\n   * }).subscribe(attr => {\n   *   // attr: { ... }\n   * });\n   */\n  createDpProductAttribute(dpProductAttribute: IDpProductAttribute): Observable {\n    return this.http.post(this.baseUrl, dpProductAttribute);\n  }\n\n  /**\n   * Обновляет существующий атрибут товара.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @param {IDpProductAttribute} dpProductAttribute Обновлённый объект атрибута.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpProductAttributes/1\n   * // Body:\n   * // {\n   * //   \"dpAttributesId\": 1,\n   * //   \"dpProductId\": 1,\n   * //   \"dpSize\": \"L\",\n   * //   \"dpColor\": \"Blue\",\n   * //   ...другие поля...\n   * // }\n   * this.dpProductAttributesService.updateDpProductAttribute(1, {\n   *   dpAttributesId: 1,\n   *   dpProductId: 1,\n   *   dpSize: 'L',\n   *   dpColor: 'Blue'\n   * }).subscribe(() => {\n   *   // Атрибут обновлён\n   * });\n   */\n  updateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpProductAttribute);\n  }\n\n  /**\n   * Удаляет атрибут товара по идентификатору.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpProductAttributes/1\n   * this.dpProductAttributesService.deleteDpProductAttribute(1).subscribe(() => {\n   *   // Атрибут удалён\n   * });\n   */\n  deleteDpProductAttribute(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpSizesService.html":{"url":"injectables/DpSizesService.html","title":"injectable - DpSizesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpSizesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-sizes.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с размерами товаров (Sizes).\nПозволяет получать, создавать, обновлять и удалять размеры товаров через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpSize\n                            \n                            \n                                deleteDpSize\n                            \n                            \n                                getAllDpSizes\n                            \n                            \n                                getDpSizeById\n                            \n                            \n                                updateDpSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-sizes.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpSize\n                        \n                    \n                \n            \n            \n                \ncreateDpSize(dpSize: IDpSize)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Создаёт новый размер.\nExample :// POST /api/DpSizes\n// Body:\n// {\n//   \"sizeId\": 0,\n//   \"size\": \"XL\"\n// }\nthis.dpSizesService.createDpSize({\n  sizeId: 0,\n  size: 'XL'\n}).subscribe(newSize => {\n  // newSize: { sizeId, size }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpSize\n                                            \n                                                            IDpSize\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный размер.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpSize\n                        \n                    \n                \n            \n            \n                \ndeleteDpSize(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Удаляет размер по идентификатору.\nExample :// DELETE /api/DpSizes/1\nthis.dpSizesService.deleteDpSize(1).subscribe(() => {\n  // Размер удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpSizes\n                        \n                    \n                \n            \n            \n                \ngetAllDpSizes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех размеров.\nExample :// GET /api/DpSizes\nthis.dpSizesService.getAllDpSizes().subscribe(sizes => {\n  // sizes: [{ sizeId, size, ... }]\n  console.log(sizes);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список размеров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpSizeById\n                        \n                    \n                \n            \n            \n                \ngetDpSizeById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает размер по его идентификатору.\nExample :// GET /api/DpSizes/1\nthis.dpSizesService.getDpSizeById(1).subscribe(size => {\n  // size: { sizeId, size, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Размер.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpSize\n                        \n                    \n                \n            \n            \n                \nupdateDpSize(id: number, dpSize: IDpSize)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий размер.\nExample :// PUT /api/DpSizes/1\n// Body:\n// {\n//   \"sizeId\": 1,\n//   \"size\": \"XXL\"\n// }\nthis.dpSizesService.updateDpSize(1, {\n  sizeId: 1,\n  size: 'XXL'\n}).subscribe(() => {\n  // Размер обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                        \n                                                dpSize\n                                            \n                                                            IDpSize\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpSizes`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-sizes.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpSize } from '../interface/IDpSize';\n\n/**\n * Сервис для работы с размерами товаров (Sizes).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять размеры товаров через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpSizesService {\n  private baseUrl = `${window.location.origin}/api/DpSizes`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех размеров.\n   *\n   * @returns {Observable} Список размеров.\n   * @example\n   * // GET /api/DpSizes\n   * this.dpSizesService.getAllDpSizes().subscribe(sizes => {\n   *   // sizes: [{ sizeId, size, ... }]\n   *   console.log(sizes);\n   * });\n   */\n  getAllDpSizes(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает размер по его идентификатору.\n   *\n   * @param {number} id Идентификатор размера.\n   * @returns {Observable} Размер.\n   * @example\n   * // GET /api/DpSizes/1\n   * this.dpSizesService.getDpSizeById(1).subscribe(size => {\n   *   // size: { sizeId, size, ... }\n   * });\n   */\n  getDpSizeById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый размер.\n   *\n   * @param {IDpSize} dpSize Объект размера.\n   * @returns {Observable} Созданный размер.\n   * @example\n   * // POST /api/DpSizes\n   * // Body:\n   * // {\n   * //   \"sizeId\": 0,\n   * //   \"size\": \"XL\"\n   * // }\n   * this.dpSizesService.createDpSize({\n   *   sizeId: 0,\n   *   size: 'XL'\n   * }).subscribe(newSize => {\n   *   // newSize: { sizeId, size }\n   * });\n   */\ncreateDpSize(dpSize: IDpSize): Observable {\n    return this.http.post(this.baseUrl, dpSize);\n  }\n\n  /**\n   * Обновляет существующий размер.\n   *\n   * @param {number} id Идентификатор размера.\n   * @param {IDpSize} dpSize Обновлённый объект размера.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpSizes/1\n   * // Body:\n   * // {\n   * //   \"sizeId\": 1,\n   * //   \"size\": \"XXL\"\n   * // }\n   * this.dpSizesService.updateDpSize(1, {\n   *   sizeId: 1,\n   *   size: 'XXL'\n   * }).subscribe(() => {\n   *   // Размер обновлён\n   * });\n   */\n  updateDpSize(id: number, dpSize: IDpSize): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpSize);\n  }\n\n  /**\n   * Удаляет размер по идентификатору.\n   *\n   * @param {number} id Идентификатор размера.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpSizes/1\n   * this.dpSizesService.deleteDpSize(1).subscribe(() => {\n   *   // Размер удалён\n   * });\n   */\n  deleteDpSize(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpUserProjsService.html":{"url":"injectables/DpUserProjsService.html","title":"injectable - DpUserProjsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpUserProjsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-user-projs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с пользователями проектов (UserProjs).\nПозволяет получать, создавать, обновлять и удалять пользователей проектов через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpUserProj\n                            \n                            \n                                deleteDpUserProj\n                            \n                            \n                                getAllDpUserProjs\n                            \n                            \n                                getDpUserProjById\n                            \n                            \n                                updateDpUserProj\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-user-projs.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpUserProj\n                        \n                    \n                \n            \n            \n                \ncreateDpUserProj(dpUserProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Создаёт нового пользователя проекта.\nExample :// POST /api/DpUserProjs\n// Body:\n// {\n//   \"dpUserProjId\": 0,\n//   \"userName\": \"Иван\",\n//   ...другие поля...\n// }\nthis.dpUserProjsService.createDpUserProj({\n  dpUserProjId: 0,\n  userName: 'Иван'\n}).subscribe(newUser => {\n  // newUser: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpUserProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный пользователь проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpUserProj\n                        \n                    \n                \n            \n            \n                \ndeleteDpUserProj(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Удаляет пользователя проекта по идентификатору.\nExample :// DELETE /api/DpUserProjs/1\nthis.dpUserProjsService.deleteDpUserProj(1).subscribe(() => {\n  // Пользователь удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpUserProjs\n                        \n                    \n                \n            \n            \n                \ngetAllDpUserProjs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех пользователей проектов.\nExample :// GET /api/DpUserProjs\nthis.dpUserProjsService.getAllDpUserProjs().subscribe(users => {\n  // users: [{ dpUserProjId, userName, ... }]\n  console.log(users);\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список пользователей проектов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpUserProjById\n                        \n                    \n                \n            \n            \n                \ngetDpUserProjById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает пользователя проекта по его идентификатору.\nExample :// GET /api/DpUserProjs/1\nthis.dpUserProjsService.getDpUserProjById(1).subscribe(user => {\n  // user: { dpUserProjId, userName, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Пользователь проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpUserProj\n                        \n                    \n                \n            \n            \n                \nupdateDpUserProj(id: number, dpUserProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Обновляет существующего пользователя проекта.\nExample :// PUT /api/DpUserProjs/1\n// Body:\n// {\n//   \"dpUserProjId\": 1,\n//   \"userName\": \"Пётр\",\n//   ...другие поля...\n// }\nthis.dpUserProjsService.updateDpUserProj(1, {\n  dpUserProjId: 1,\n  userName: 'Пётр'\n}).subscribe(() => {\n  // Пользователь обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                        \n                                                dpUserProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpUserProjs`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-user-projs.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpUserProj } from '../interface/IDpUserProj';\n\n/**\n * Сервис для работы с пользователями проектов (UserProjs).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять пользователей проектов через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpUserProjsService {\n  private baseUrl = `${window.location.origin}/api/DpUserProjs`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех пользователей проектов.\n   *\n   * @returns {Observable} Список пользователей проектов.\n   * @example\n   * // GET /api/DpUserProjs\n   * this.dpUserProjsService.getAllDpUserProjs().subscribe(users => {\n   *   // users: [{ dpUserProjId, userName, ... }]\n   *   console.log(users);\n   * });\n   */\n  getAllDpUserProjs(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает пользователя проекта по его идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @returns {Observable} Пользователь проекта.\n   * @example\n   * // GET /api/DpUserProjs/1\n   * this.dpUserProjsService.getDpUserProjById(1).subscribe(user => {\n   *   // user: { dpUserProjId, userName, ... }\n   * });\n   */\n  getDpUserProjById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт нового пользователя проекта.\n   *\n   * @param {IDpUserProj} dpUserProj Объект пользователя проекта.\n   * @returns {Observable} Созданный пользователь проекта.\n   * @example\n   * // POST /api/DpUserProjs\n   * // Body:\n   * // {\n   * //   \"dpUserProjId\": 0,\n   * //   \"userName\": \"Иван\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUserProjsService.createDpUserProj({\n   *   dpUserProjId: 0,\n   *   userName: 'Иван'\n   * }).subscribe(newUser => {\n   *   // newUser: { ... }\n   * });\n   */\n  createDpUserProj(dpUserProj: IDpUserProj): Observable {\n    return this.http.post(this.baseUrl, dpUserProj);\n  }\n\n  /**\n   * Обновляет существующего пользователя проекта.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @param {IDpUserProj} dpUserProj Обновлённый объект пользователя проекта.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpUserProjs/1\n   * // Body:\n   * // {\n   * //   \"dpUserProjId\": 1,\n   * //   \"userName\": \"Пётр\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUserProjsService.updateDpUserProj(1, {\n   *   dpUserProjId: 1,\n   *   userName: 'Пётр'\n   * }).subscribe(() => {\n   *   // Пользователь обновлён\n   * });\n   */\n  updateDpUserProj(id: number, dpUserProj: IDpUserProj): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpUserProj);\n  }\n\n  /**\n   * Удаляет пользователя проекта по идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpUserProjs/1\n   * this.dpUserProjsService.deleteDpUserProj(1).subscribe(() => {\n   *   // Пользователь удалён\n   * });\n   */\n  deleteDpUserProj(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpUsersService.html":{"url":"injectables/DpUsersService.html","title":"injectable - DpUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с пользователями (Users).\nПозволяет получать, создавать, обновлять и удалять пользователей через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpUser\n                            \n                            \n                                deleteDpUser\n                            \n                            \n                                getAllDpUsers\n                            \n                            \n                                getDpUserById\n                            \n                            \n                                updateDpUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpUser\n                        \n                    \n                \n            \n            \n                \ncreateDpUser(dpUser: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Создаёт нового пользователя.\nExample :// POST /api/DpUsers\n// Body:\n// {\n//   \"dpUserId\": 0,\n//   \"userName\": \"Иван\",\n//   ...другие поля...\n// }\nthis.dpUsersService.createDpUser({\n  dpUserId: 0,\n  userName: 'Иван'\n}).subscribe(newUser => {\n  // newUser: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpUser\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный пользователь.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpUser\n                        \n                    \n                \n            \n            \n                \ndeleteDpUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Удаляет пользователя по идентификатору.\nExample :// DELETE /api/DpUsers/1\nthis.dpUsersService.deleteDpUser(1).subscribe(() => {\n  // Пользователь удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpUsers\n                        \n                    \n                \n            \n            \n                \ngetAllDpUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех пользователей.\nExample :// GET /api/DpUsers\nthis.dpUsersService.getAllDpUsers().subscribe(users => {\n  // users: [{ dpUserId, userName, ... }]\n  console.log(users);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список пользователей.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpUserById\n                        \n                    \n                \n            \n            \n                \ngetDpUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает пользователя по его идентификатору.\nExample :// GET /api/DpUsers/1\nthis.dpUsersService.getDpUserById(1).subscribe(user => {\n  // user: { dpUserId, userName, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Пользователь.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpUser\n                        \n                    \n                \n            \n            \n                \nupdateDpUser(id: number, dpUser: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Обновляет существующего пользователя.\nExample :// PUT /api/DpUsers/1\n// Body:\n// {\n//   \"dpUserId\": 1,\n//   \"userName\": \"Пётр\",\n//   ...другие поля...\n// }\nthis.dpUsersService.updateDpUser(1, {\n  dpUserId: 1,\n  userName: 'Пётр'\n}).subscribe(() => {\n  // Пользователь обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                dpUser\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpUsers`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-users.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpUser } from '../interface/IDpUser';\n\n/**\n * Сервис для работы с пользователями (Users).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять пользователей через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpUsersService {\n  private baseUrl = `${window.location.origin}/api/DpUsers`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех пользователей.\n   *\n   * @returns {Observable} Список пользователей.\n   * @example\n   * // GET /api/DpUsers\n   * this.dpUsersService.getAllDpUsers().subscribe(users => {\n   *   // users: [{ dpUserId, userName, ... }]\n   *   console.log(users);\n   * });\n   */\n  getAllDpUsers(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает пользователя по его идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @returns {Observable} Пользователь.\n   * @example\n   * // GET /api/DpUsers/1\n   * this.dpUsersService.getDpUserById(1).subscribe(user => {\n   *   // user: { dpUserId, userName, ... }\n   * });\n   */\n  getDpUserById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт нового пользователя.\n   *\n   * @param {IDpUser} dpUser Объект пользователя.\n   * @returns {Observable} Созданный пользователь.\n   * @example\n   * // POST /api/DpUsers\n   * // Body:\n   * // {\n   * //   \"dpUserId\": 0,\n   * //   \"userName\": \"Иван\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUsersService.createDpUser({\n   *   dpUserId: 0,\n   *   userName: 'Иван'\n   * }).subscribe(newUser => {\n   *   // newUser: { ... }\n   * });\n   */\n  createDpUser(dpUser: IDpUser): Observable {\n    return this.http.post(this.baseUrl, dpUser);\n  }\n\n  /**\n   * Обновляет существующего пользователя.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @param {IDpUser} dpUser Обновлённый объект пользователя.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpUsers/1\n   * // Body:\n   * // {\n   * //   \"dpUserId\": 1,\n   * //   \"userName\": \"Пётр\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUsersService.updateDpUser(1, {\n   *   dpUserId: 1,\n   *   userName: 'Пётр'\n   * }).subscribe(() => {\n   *   // Пользователь обновлён\n   * });\n   */\n  updateDpUser(id: number, dpUser: IDpUser): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpUser);\n  }\n\n  /**\n   * Удаляет пользователя по идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpUsers/1\n   * this.dpUsersService.deleteDpUser(1).subscribe(() => {\n   *   // Пользователь удалён\n   * });\n   */\n  deleteDpUser(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAchievement.html":{"url":"interfaces/IAchievement.html","title":"interface - IAchievement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAchievement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IAchievement.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для объекта достижения (Achievement).\nExample :const achievement: IAchievement = {\n  achievementId: 1,\n  title: 'Первый вход',\n  textAchievement: 'Выполните первый вход в систему',\n  dpUserProjs: [{ dpUserProjId: 1, ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            achievementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpUserProjs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            textAchievement\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievementId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjs:     IDpUserProj[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpUserProj[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textAchievement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        textAchievement:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpUserProj } from \"./IDpUserProj\";\n\n/**\n * Интерфейс для объекта достижения (Achievement).\n *\n * @property {number} achievementId - Уникальный идентификатор достижения.\n * @property {string} title - Название достижения.\n * @property {string} [textAchievement] - Описание или дополнительный текст достижения (опционально).\n * @property {IDpUserProj[]} [dpUserProjs] - Список пользователей, связанных с этим достижением (опционально).\n *\n * @example\n * const achievement: IAchievement = {\n *   achievementId: 1,\n *   title: 'Первый вход',\n *   textAchievement: 'Выполните первый вход в систему',\n *   dpUserProjs: [{ dpUserProjId: 1, ... }]\n * };\n */\nexport interface IAchievement {\n    achievementId: number;\n    title: string;\n    textAchievement?: string;\n    dpUserProjs?: IDpUserProj[];\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAddToCartRequest.html":{"url":"interfaces/IAddToCartRequest.html","title":"interface - IAddToCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAddToCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IAddToCartRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Запрос на добавление товара в корзину.\nExample :const req: IAddToCartRequest = { productId: 5, quantity: 2, sizeId: 1 };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IAddToCartRequest {\n    productId: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICartItem.html":{"url":"interfaces/ICartItem.html","title":"interface - ICartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICartItem.ts\n        \n\n\n            \n                Description\n            \n            \n                Элемент корзины.\nExample :const item: ICartItem = { productId: 1, productTitle: 'Кроссовки', price: 1000, quantity: 2, sizeId: 3 };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            price\n                                        \n                                \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            productTitle\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICartItem {\n    productId: number;\n    productTitle: string;\n    price: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICartViewModel.html":{"url":"interfaces/ICartViewModel.html","title":"interface - ICartViewModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICartViewModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICartViewModel.ts\n        \n\n\n            \n                Description\n            \n            \n                Модель представления корзины.\nExample :const cart: ICartViewModel = { cartItems: [...], products: [...] };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cartItems\n                                        \n                                \n                                \n                                        \n                                            products\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cartItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartItems:     ICartItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ICartItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        products\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        products:         IDpProduct[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProduct } from \"./IDpProduct\";\nimport { ICartItem } from \"./ICartItem\";\n\n/**\n * Модель представления корзины.\n *\n * @property {ICartItem[]} cartItems - Список товаров в корзине.\n * @property {IDpProduct[]} products - Список товаров.\n *\n * @example\n * const cart: ICartViewModel = { cartItems: [...], products: [...] };\n */\nexport interface ICartViewModel {\n    cartItems: ICartItem[];\n    products: IDpProduct[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICreateDpImageRequest.html":{"url":"interfaces/ICreateDpImageRequest.html","title":"interface - ICreateDpImageRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateDpImageRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICreateDpImageRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Запрос на создание изображения товара.\nExample :const req: ICreateDpImageRequest = { dpProductId: 1, dpImageTitle: 'Фото', file };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                        \n                                            file\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     File\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     File\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICreateDpImageRequest {\n    dpProductId: number;\n    dpImageTitle: string;\n    file: File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpCategory.html":{"url":"interfaces/IDpCategory.html","title":"interface - IDpCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpCategory.ts\n        \n\n\n            \n                Description\n            \n            \n                Категория товара.\nExample :const cat: IDpCategory = { dpCategoryId: 1, dpCategoryTitle: 'Обувь', sizeId: 2, size: {...} };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpCategoryId\n                                        \n                                \n                                \n                                        \n                                            dpCategoryTitle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProducts\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProducts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProducts:         IDpProduct[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         IDpSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpSize\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpSize } from \"./IDpSize\";\nimport { IDpProduct } from \"./IDpProduct\";\n\n/**\n * Категория товара.\n *\n * @property {number} dpCategoryId - Идентификатор категории.\n * @property {string} dpCategoryTitle - Название категории.\n * @property {number} sizeId - Идентификатор размера.\n * @property {IDpSize} size - Размер.\n * @property {IDpProduct[]} [dpProducts] - Товары в категории (опционально).\n *\n * @example\n * const cat: IDpCategory = { dpCategoryId: 1, dpCategoryTitle: 'Обувь', sizeId: 2, size: {...} };\n */\nexport interface IDpCategory {\n    dpCategoryId: number;\n    dpCategoryTitle: string;\n    sizeId: number;\n    size: IDpSize;\n    dpProducts?: IDpProduct[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpImage.html":{"url":"interfaces/IDpImage.html","title":"interface - IDpImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpImage.ts\n        \n\n\n            \n                Description\n            \n            \n                Изображение товара.\nExample :const img: IDpImage = { dpImagesId: 1, dpProductId: 2, dpImageTitle: 'Фото', dpProduct: {...} };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImagesId\n                                        \n                                \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProduct\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImagesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImagesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProduct\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProduct:         IDpProduct\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProduct } from \"./IDpProduct\";\n\n/**\n * Изображение товара.\n *\n * @property {number} dpImagesId - Идентификатор изображения.\n * @property {number} dpProductId - Идентификатор товара.\n * @property {string} dpImageTitle - Название изображения.\n * @property {Uint8Array} [imagesData] - Данные изображения (опционально).\n * @property {IDpProduct} dpProduct - Товар.\n *\n * @example\n * const img: IDpImage = { dpImagesId: 1, dpProductId: 2, dpImageTitle: 'Фото', dpProduct: {...} };\n */\nexport interface IDpImage {\n    dpImagesId: number;\n    dpProductId: number;\n    dpImageTitle: string;\n    imagesData?: Uint8Array;\n    dpProduct: IDpProduct;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrder.html":{"url":"interfaces/IDpOrder.html","title":"interface - IDpOrder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrder.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для заказа (Order).\nExample :const order: IDpOrder = {\n  dpOrderId: 1,\n  dpUserId: 2,\n  dpDateTimeOrder: new Date(),\n  dpTypeOrder: 'website',\n  dpUser: { dpUserId: 2, dpUsername: 'vasya', ... }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpDateTimeOrder\n                                        \n                                \n                                \n                                        \n                                            dpOrderId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpTypeOrder\n                                        \n                                \n                                \n                                        \n                                            dpUser\n                                        \n                                \n                                \n                                        \n                                            dpUserId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpDateTimeOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDateTimeOrder:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpTypeOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpTypeOrder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUser:         IDpUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpUser } from \"./IDpUser\";\n\n/**\n * Интерфейс для заказа (Order).\n *\n * @property {number} dpOrderId - Уникальный идентификатор заказа.\n * @property {number} dpUserId - Идентификатор пользователя, оформившего заказ.\n * @property {Date} dpDateTimeOrder - Дата и время оформления заказа.\n * @property {string} [dpTypeOrder] - Тип заказа (опционально).\n * @property {IDpUser} dpUser - Объект пользователя, связанный с заказом.\n *\n * @example\n * const order: IDpOrder = {\n *   dpOrderId: 1,\n *   dpUserId: 2,\n *   dpDateTimeOrder: new Date(),\n *   dpTypeOrder: 'website',\n *   dpUser: { dpUserId: 2, dpUsername: 'vasya', ... }\n * };\n */\nexport interface IDpOrder {\n    dpOrderId: number;\n    dpUserId: number;\n    dpDateTimeOrder: Date;\n    dpTypeOrder?: string;\n    dpUser: IDpUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrderComposition.html":{"url":"interfaces/IDpOrderComposition.html","title":"interface - IDpOrderComposition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrderComposition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrderComposition.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для состава заказа (Order Composition).\nExample :const orderComp: IDpOrderComposition = {\n  dpOrderId: 1,\n  dpAttributesId: 2,\n  dpQuantity: 3,\n  dpCost: 1500,\n  dpAttributes: { dpAttributesId: 2, dpProductId: 1, ... },\n  dpOrder: { dpOrderId: 1, dpUserId: 2, ... }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpAttributes\n                                        \n                                \n                                \n                                        \n                                            dpAttributesId\n                                        \n                                \n                                \n                                        \n                                            dpCost\n                                        \n                                \n                                \n                                        \n                                            dpOrder\n                                        \n                                \n                                \n                                        \n                                            dpOrderId\n                                        \n                                \n                                \n                                        \n                                            dpQuantity\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributes:         IDpProductAttribute\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProductAttribute\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrder:         IDpOrder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpOrder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpQuantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpQuantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProductAttribute } from \"./IDpProductAttribute\";\nimport { IDpOrder } from \"./IDpOrder\";\n\n/**\n * Интерфейс для состава заказа (Order Composition).\n *\n * @property {number} dpOrderId - Идентификатор заказа.\n * @property {number} dpAttributesId - Идентификатор атрибута товара.\n * @property {number} dpQuantity - Количество товара в заказе.\n * @property {number} dpCost - Стоимость одной единицы товара.\n * @property {IDpProductAttribute} dpAttributes - Объект атрибута товара.\n * @property {IDpOrder} dpOrder - Объект заказа.\n *\n * @example\n * const orderComp: IDpOrderComposition = {\n *   dpOrderId: 1,\n *   dpAttributesId: 2,\n *   dpQuantity: 3,\n *   dpCost: 1500,\n *   dpAttributes: { dpAttributesId: 2, dpProductId: 1, ... },\n *   dpOrder: { dpOrderId: 1, dpUserId: 2, ... }\n * };\n */\nexport interface IDpOrderComposition {\n    dpOrderId: number;\n    dpAttributesId: number;\n    dpQuantity: number;\n    dpCost: number;\n    dpAttributes: IDpProductAttribute;\n    dpOrder: IDpOrder;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrderDetail.html":{"url":"interfaces/IDpOrderDetail.html","title":"interface - IDpOrderDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrderDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrderDetail.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для детализации заказа (Order Detail).\nExample :const detail: IDpOrderDetail = {\n  productTitle: 'Кроссовки',\n  quantity: 2,\n  sizeId: 3,\n  sizeName: '42',\n  unitPrice: 1500,\n  totalPrice: 3000\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            productTitle\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                                \n                                        \n                                            sizeName\n                                        \n                                \n                                \n                                        \n                                            totalPrice\n                                        \n                                \n                                \n                                        \n                                            unitPrice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unitPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDpOrderDetail {\n    productTitle?: string;\n    quantity: number;\n    sizeId?: number;\n    sizeName: string;\n    unitPrice: number;\n    totalPrice: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpProduct.html":{"url":"interfaces/IDpProduct.html","title":"interface - IDpProduct","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpProduct\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpProduct.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для товара (Product).\nExample :const product: IDpProduct = {\n  dpProductId: 1,\n  dpPrice: 1500,\n  dpTitle: 'Кроссовки',\n  dpPurchasePrice: 1000,\n  dpDiscountPercent: 10,\n  dpDescription: 'Удобные кроссовки для бега',\n  dpCategoryId: 2,\n  dpCategory: { dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... },\n  dpImages: [{ dpImagesId: 1, dpProductId: 1, dpImageTitle: 'Фото', ... }],\n  dpProductAttributes: [{ dpAttributesId: 1, dpProductId: 1, dpCount: 5, ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpCategory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpCategoryId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpDescription\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpDiscountPercent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpImages\n                                        \n                                \n                                \n                                        \n                                            dpPrice\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProductAttributes\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                        \n                                            dpPurchasePrice\n                                        \n                                \n                                \n                                        \n                                            dpTitle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategory:         IDpCategory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpCategory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpDescription\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDescription:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpDiscountPercent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDiscountPercent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpImages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImages:         IDpImage[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpImage[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductAttributes:     IDpProductAttribute[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpProductAttribute[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPurchasePrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPurchasePrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProductAttribute } from \"./IDpProductAttribute\";\nimport { IDpCategory } from \"./IDpCategory\";\nimport { IDpImage } from \"./IDpImage\";\n\n/**\n * Интерфейс для товара (Product).\n *\n * @property {number} dpProductId - Уникальный идентификатор товара.\n * @property {number} dpPrice - Цена товара.\n * @property {string} dpTitle - Название товара.\n * @property {number} [dpDiscountPercent] - Процент скидки (опционально).\n * @property {string} [dpDescription] - Описание товара (опционально).\n * @property {number} [dpCategoryId] - Идентификатор категории (опционально).\n * @property {number} dpPurchasePrice - Закупочная цена товара.\n * @property {IDpCategory} [dpCategory] - Категория товара (опционально).\n * @property {IDpImage[]} [dpImages] - Массив изображений товара (опционально).\n * @property {IDpProductAttribute[]} [dpProductAttributes] - Массив атрибутов товара (опционально).\n *\n * @example\n * const product: IDpProduct = {\n *   dpProductId: 1,\n *   dpPrice: 1500,\n *   dpTitle: 'Кроссовки',\n *   dpPurchasePrice: 1000,\n *   dpDiscountPercent: 10,\n *   dpDescription: 'Удобные кроссовки для бега',\n *   dpCategoryId: 2,\n *   dpCategory: { dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... },\n *   dpImages: [{ dpImagesId: 1, dpProductId: 1, dpImageTitle: 'Фото', ... }],\n *   dpProductAttributes: [{ dpAttributesId: 1, dpProductId: 1, dpCount: 5, ... }]\n * };\n */\nexport interface IDpProduct {\n    dpProductId: number;\n    dpPrice: number;\n    dpTitle: string;\n    dpDiscountPercent?: number;\n    dpDescription?: string;\n    dpCategoryId?: number;\n    dpPurchasePrice: number;\n    dpCategory?: IDpCategory;\n    dpImages?: IDpImage[];\n    dpProductAttributes?: IDpProductAttribute[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpProductAttribute.html":{"url":"interfaces/IDpProductAttribute.html","title":"interface - IDpProductAttribute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpProductAttribute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpProductAttribute.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для атрибута товара (Product Attribute).\nExample :const attr: IDpProductAttribute = {\n  dpAttributesId: 1,\n  dpProductId: 2,\n  dpCount: 10,\n  dpSize: 3,\n  dpProduct: { dpProductId: 2, dpPrice: 1500, ... },\n  dpSizeNavigation: { sizeId: 3, size: '42' }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpAttributesId\n                                        \n                                \n                                \n                                        \n                                            dpCount\n                                        \n                                \n                                \n                                        \n                                            dpProduct\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpSizeNavigation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProduct\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProduct:         IDpProduct\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpSizeNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpSizeNavigation:         IDpSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpSize } from \"./IDpSize\";\nimport { IDpProduct } from \"./IDpProduct\";\n\n/**\n * Интерфейс для атрибута товара (Product Attribute).\n *\n * @property {number} dpAttributesId - Уникальный идентификатор атрибута.\n * @property {number} dpProductId - Идентификатор товара.\n * @property {number} dpCount - Количество товара с этим атрибутом.\n * @property {number} [dpSize] - Идентификатор размера (опционально).\n * @property {IDpProduct} dpProduct - Объект товара.\n * @property {IDpSize} [dpSizeNavigation] - Объект размера (опционально).\n *\n * @example\n * const attr: IDpProductAttribute = {\n *   dpAttributesId: 1,\n *   dpProductId: 2,\n *   dpCount: 10,\n *   dpSize: 3,\n *   dpProduct: { dpProductId: 2, dpPrice: 1500, ... },\n *   dpSizeNavigation: { sizeId: 3, size: '42' }\n * };\n */\nexport interface IDpProductAttribute {\n    dpAttributesId: number;\n    dpProductId: number;\n    dpCount: number;\n    dpSize?: number;\n    dpProduct: IDpProduct;\n    dpSizeNavigation?: IDpSize;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpSize.html":{"url":"interfaces/IDpSize.html","title":"interface - IDpSize","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpSize\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpSize.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для размера товара (Size).\nExample :const size: IDpSize = {\n  sizeId: 1,\n  size: '42',\n  dpProductAttributes: [{ dpAttributesId: 1, ... }],\n  dpCategories: [{ dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpCategories\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProductAttributes\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategories:         IDpCategory[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpCategory[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductAttributes:     IDpProductAttribute[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpProductAttribute[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpCategory } from \"./IDpCategory\";\nimport { IDpProductAttribute } from \"./IDpProductAttribute\";\n\n/**\n * Интерфейс для размера товара (Size).\n *\n * @property {number} sizeId - Уникальный идентификатор размера.\n * @property {string} size - Название или обозначение размера (например, \"42\", \"M\").\n * @property {IDpProductAttribute[]} [dpProductAttributes] - Список атрибутов товаров с этим размером (опционально).\n * @property {IDpCategory[]} [dpCategories] - Список категорий, связанных с этим размером (опционально).\n *\n * @example\n * const size: IDpSize = {\n *   sizeId: 1,\n *   size: '42',\n *   dpProductAttributes: [{ dpAttributesId: 1, ... }],\n *   dpCategories: [{ dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... }]\n * };\n */\nexport interface IDpSize {\n    sizeId: number;\n    size: string;\n    dpProductAttributes?: IDpProductAttribute[];\n    dpCategories?: IDpCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpUser.html":{"url":"interfaces/IDpUser.html","title":"interface - IDpUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpUser.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для пользователя (User).\nExample :const user: IDpUser = {\n  dpUserId: 1,\n  dpUsername: 'vasya',\n  dpPassword: '123456',\n  dpRegistrationDate: new Date(),\n```html\n  dpFullName: 'Василий Иванов',\n  dpPhoneNumber: '+79991234567',\n  dpOrders: [{ dpOrderId: 1, dpUserId: 1, ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpEmail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpFullName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpOrders\n                                        \n                                \n                                \n                                        \n                                            dpPassword\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpPhoneNumber\n                                        \n                                \n                                \n                                        \n                                            dpRegistrationDate\n                                        \n                                \n                                \n                                        \n                                            dpUserId\n                                        \n                                \n                                \n                                        \n                                            dpUsername\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpEmail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpFullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpFullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrders:         IDpOrder[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpOrder[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPassword\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPassword:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPhoneNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPhoneNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpRegistrationDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpRegistrationDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUsername\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUsername:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpOrder } from \"./IDpOrder\";\n\n/**\n * Интерфейс для пользователя (User).\n *\n * @property {number} dpUserId - Уникальный идентификатор пользователя.\n * @property {string} dpUsername - Имя пользователя (логин).\n * @property {string} dpPassword - Пароль пользователя.\n * @property {string} [dpEmail] - Email пользователя (опционально).\n * @property {string} [dpFullName] - Полное имя пользователя (опционально).\n * @property {Date} dpRegistrationDate - Дата регистрации пользователя.\n * @property {string} [dpPhoneNumber] - Телефон пользователя (опционально).\n * @property {IDpOrder[]} [dpOrders] - Список заказов пользователя (опционально).\n *\n * @example\n * const user: IDpUser = {\n *   dpUserId: 1,\n *   dpUsername: 'vasya',\n *   dpPassword: '123456',\n *   dpRegistrationDate: new Date(),\n *   dpEmail: 'vasya@example.com',\n *   dpFullName: 'Василий Иванов',\n *   dpPhoneNumber: '+79991234567',\n *   dpOrders: [{ dpOrderId: 1, dpUserId: 1, ... }]\n * };\n */\nexport interface IDpUser {\n    dpUserId: number;\n    dpUsername: string;\n    dpPassword: string;\n    dpEmail?: string;\n    dpFullName?: string;\n    dpRegistrationDate: Date;\n    dpPhoneNumber?: string;\n    dpOrders?: IDpOrder[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpUserProj.html":{"url":"interfaces/IDpUserProj.html","title":"interface - IDpUserProj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpUserProj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpUserProj.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для пользователя проекта (User Project).\nExample :const userProj: IDpUserProj = {\n  dpUserProjId: 1,\n  login: 'vasya',\n  password: 'qwerty',\n```html\n  achievements: [{ achievementId: 1, title: 'Первый вход' }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            achievements\n                                        \n                                \n                                \n                                        \n                                            dpUserProjId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievements:         IAchievement[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAchievement[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IAchievement } from \"./IAchievement\";\n\n/**\n * Интерфейс для пользователя проекта (User Project).\n *\n * @property {number} dpUserProjId - Уникальный идентификатор пользователя проекта.\n * @property {string} [email] - Email пользователя (опционально).\n * @property {string} password - Пароль пользователя.\n * @property {string} login - Логин пользователя.\n * @property {IAchievement[]} [achievements] - Список достижений пользователя (опционально).\n *\n * @example\n * const userProj: IDpUserProj = {\n *   dpUserProjId: 1,\n *   login: 'vasya',\n *   password: 'qwerty',\n *   email: 'vasya@example.com',\n *   achievements: [{ achievementId: 1, title: 'Первый вход' }]\n * };\n */\nexport interface IDpUserProj {\n    dpUserProjId: number;\n    email?: string;\n    password: string;\n    login: string;\n    achievements?: IAchievement[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRemoveFromCartRequest.html":{"url":"interfaces/IRemoveFromCartRequest.html","title":"interface - IRemoveFromCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRemoveFromCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IRemoveFromCartRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс запроса на удаление товара из корзины.\nExample :const req: IRemoveFromCartRequest = {\n  productId: 5,\n  sizeId: 2\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IRemoveFromCartRequest {\n    productId: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUpdateCartRequest.html":{"url":"interfaces/IUpdateCartRequest.html","title":"interface - IUpdateCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUpdateCartRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс запроса на обновление количества товара в корзине.\nExample :const req: IUpdateCartRequest = {\n  productId: 3,\n  quantity: 5,\n  sizeId: 1\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUpdateCartRequest {\n    productId: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUpdateDpImageRequest.html":{"url":"interfaces/IUpdateDpImageRequest.html","title":"interface - IUpdateDpImageRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateDpImageRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUpdateDpImageRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс запроса на обновление изображения товара.\nExample :const req: IUpdateDpImageRequest = {\n  dpProductId: 1,\n  dpImageTitle: 'Новое фото',\n  file: selectedFile\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            file\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     File\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     File\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUpdateDpImageRequest {\n    dpProductId: number;\n    dpImageTitle: string;\n    file?: File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserHasAchievement.html":{"url":"interfaces/IUserHasAchievement.html","title":"interface - IUserHasAchievement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserHasAchievement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUserHasAchievement.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс связи пользователя проекта с достижением (UserHasAchievement).\nExample :const userAchievement: IUserHasAchievement = {\n  dpUserProjId: 1,\n  achievementId: 2,\n  isObtained: true,\n  dpUserProj: { dpUserProjId: 1, login: 'vasya', password: '123', ... },\n  achievement: { achievementId: 2, title: 'Первый вход', ... }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            achievement\n                                        \n                                \n                                \n                                        \n                                            achievementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpUserProj\n                                        \n                                \n                                \n                                        \n                                            dpUserProjId\n                                        \n                                \n                                \n                                        \n                                            isObtained\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievement:         IAchievement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAchievement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        achievementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievementId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProj\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProj:         IDpUserProj\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpUserProj\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isObtained\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isObtained:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IAchievement } from './IAchievement';\nimport { IDpUserProj } from \"./IDpUserProj\";\n\n/**\n * Интерфейс связи пользователя проекта с достижением (UserHasAchievement).\n *\n * @property {number} dpUserProjId - Внешний ключ на пользователя проекта (IDpUserProj).\n * @property {number} achievementId - Внешний ключ на достижение (IAchievement).\n * @property {boolean} isObtained - Флаг, указывающий, получено ли достижение.\n * @property {IDpUserProj} [dpUserProj] - Навигационное свойство к пользователю проекта (опционально).\n * @property {IAchievement} [achievement] - Навигационное свойство к достижению (опционально).\n *\n * @example\n * const userAchievement: IUserHasAchievement = {\n *   dpUserProjId: 1,\n *   achievementId: 2,\n *   isObtained: true,\n *   dpUserProj: { dpUserProjId: 1, login: 'vasya', password: '123', ... },\n *   achievement: { achievementId: 2, title: 'Первый вход', ... }\n * };\n */\nexport interface IUserHasAchievement {\n  dpUserProjId: number; // Внешний ключ на IDpUserProj\n  achievementId: number; // Внешний ключ на IAchievement\n  isObtained: boolean; // Флаг, указывающий, получено ли достижение\n  dpUserProj?: IDpUserProj; // Навигационное свойство к IDpUserProj\n  achievement?: IAchievement; // Навигационное свойство к IAchievement\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-products.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с товарами (Products).\nПозволяет получать, создавать, обновлять, удалять товары, а также добавлять товары в корзину через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToCart\n                            \n                            \n                                createProduct\n                            \n                            \n                                deleteProduct\n                            \n                            \n                                getAllProducts\n                            \n                            \n                                getProductById\n                            \n                            \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-products.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToCart\n                        \n                    \n                \n            \n            \n                \naddToCart(request: IAddToCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Добавляет товар в корзину.\nExample :// POST /api/Products/AddToCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 2,\n//   \"sizeId\": 3\n// }\nthis.productsService.addToCart({\n  productId: 1,\n  quantity: 2,\n  sizeId: 3\n}).subscribe(res => {\n  // res: { success: true, message: \"Product added to cart.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IAddToCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для добавления в корзину.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат операции.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createProduct\n                        \n                    \n                \n            \n            \n                \ncreateProduct(product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Создаёт новый товар.\nExample :// POST /api/Products\n// Body:\n// {\n//   \"dpProductId\": 0,\n//   \"dpProductTitle\": \"Кроссовки\",\n//   \"dpCategoryId\": 2,\n//   \"dpProductDescription\": \"Описание товара\",\n//   ...другие поля...\n// }\nthis.productsService.createProduct({\n  dpProductId: 0,\n  dpProductTitle: 'Кроссовки',\n  dpCategoryId: 2,\n  dpProductDescription: 'Описание товара'\n}).subscribe(newProduct => {\n  // newProduct: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный товар.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \ndeleteProduct(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Удаляет товар по идентификатору.\nExample :// DELETE /api/Products/1\nthis.productsService.deleteProduct(1).subscribe(() => {\n  // Товар удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Получает список всех товаров.\nExample :// GET /api/Products\nthis.productsService.getAllProducts().subscribe(products => {\n  // products: [{ dpProductId, dpProductTitle, ... }]\n  console.log(products);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список товаров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProductById\n                        \n                    \n                \n            \n            \n                \ngetProductById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Получает товар по его идентификатору.\nExample :// GET /api/Products/1\nthis.productsService.getProductById(1).subscribe(product => {\n  // product: { dpProductId, dpProductTitle, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Товар.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \nupdateProduct(id: number, product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий товар.\nExample :// PUT /api/Products/1\n// Body:\n// {\n//   \"dpProductId\": 1,\n//   \"dpProductTitle\": \"Обновлённый товар\",\n//   \"dpCategoryId\": 2,\n//   ...другие поля...\n// }\nthis.productsService.updateProduct(1, {\n  dpProductId: 1,\n  dpProductTitle: 'Обновлённый товар',\n  dpCategoryId: 2\n}).subscribe(() => {\n  // Товар обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Products`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-products.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpProduct } from '../interface/IDpProduct';\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\n\n/**\n * Сервис для работы с товарами (Products).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять, удалять товары, а также добавлять товары в корзину через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  private baseUrl = `${window.location.origin}/api/Products`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех товаров.\n   *\n   * @returns {Observable} Список товаров.\n   * @example\n   * // GET /api/Products\n   * this.productsService.getAllProducts().subscribe(products => {\n   *   // products: [{ dpProductId, dpProductTitle, ... }]\n   *   console.log(products);\n   * });\n   */\n  getAllProducts(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает товар по его идентификатору.\n   *\n   * @param {number} id Идентификатор товара.\n   * @returns {Observable} Товар.\n   * @example\n   * // GET /api/Products/1\n   * this.productsService.getProductById(1).subscribe(product => {\n   *   // product: { dpProductId, dpProductTitle, ... }\n   * });\n   */\n  getProductById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый товар.\n   *\n   * @param {IDpProduct} product Объект товара.\n   * @returns {Observable} Созданный товар.\n   * @example\n   * // POST /api/Products\n   * // Body:\n   * // {\n   * //   \"dpProductId\": 0,\n   * //   \"dpProductTitle\": \"Кроссовки\",\n   * //   \"dpCategoryId\": 2,\n   * //   \"dpProductDescription\": \"Описание товара\",\n   * //   ...другие поля...\n   * // }\n   * this.productsService.createProduct({\n   *   dpProductId: 0,\n   *   dpProductTitle: 'Кроссовки',\n   *   dpCategoryId: 2,\n   *   dpProductDescription: 'Описание товара'\n   * }).subscribe(newProduct => {\n   *   // newProduct: { ... }\n   * });\n   */\n  createProduct(product: IDpProduct): Observable {\n    return this.http.post(this.baseUrl, product);\n  }\n\n  /**\n   * Обновляет существующий товар.\n   *\n   * @param {number} id Идентификатор товара.\n   * @param {IDpProduct} product Обновлённый объект товара.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/Products/1\n   * // Body:\n   * // {\n   * //   \"dpProductId\": 1,\n   * //   \"dpProductTitle\": \"Обновлённый товар\",\n   * //   \"dpCategoryId\": 2,\n   * //   ...другие поля...\n   * // }\n   * this.productsService.updateProduct(1, {\n   *   dpProductId: 1,\n   *   dpProductTitle: 'Обновлённый товар',\n   *   dpCategoryId: 2\n   * }).subscribe(() => {\n   *   // Товар обновлён\n   * });\n   */\n  updateProduct(id: number, product: IDpProduct): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, product);\n  }\n\n  /**\n   * Удаляет товар по идентификатору.\n   *\n   * @param {number} id Идентификатор товара.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/Products/1\n   * this.productsService.deleteProduct(1).subscribe(() => {\n   *   // Товар удалён\n   * });\n   */\n  deleteProduct(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Добавляет товар в корзину.\n   *\n   * @param {IAddToCartRequest} request Данные для добавления в корзину.\n   * @returns {Observable} Результат операции.\n   * @example\n   * // POST /api/Products/AddToCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 2,\n   * //   \"sizeId\": 3\n   * // }\n   * this.productsService.addToCart({\n   *   productId: 1,\n   *   quantity: 2,\n   *   sizeId: 3\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Product added to cart.\" }\n   * });\n   */\n  addToCart(request: IAddToCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/AddToCart`, request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShopCartService.html":{"url":"injectables/ShopCartService.html","title":"injectable - ShopCartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShopCartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-shop-cart.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с корзиной покупок (Shop Cart).\nПозволяет получать содержимое корзины, добавлять и удалять товары, обновлять корзину, оформлять заказ и экспортировать заказ в Excel.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToCart\n                            \n                            \n                                checkout\n                            \n                            \n                                exportToExcel\n                            \n                            \n                                getCart\n                            \n                            \n                                getCartQuantity\n                            \n                            \n                                removeFromCart\n                            \n                            \n                                updateCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-shop-cart.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToCart\n                        \n                    \n                \n            \n            \n                \naddToCart(request: IAddToCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Добавляет товар в корзину.\nExample :// POST /api/ShopCart/AddToCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 2,\n//   \"sizeId\": 2\n// }\nthis.shopCartService.addToCart({\n  productId: 1,\n  quantity: 2,\n  sizeId: 2\n}).subscribe(res => {\n  // res: { success: true, message: \"Product added to cart.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IAddToCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для добавления товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат добавления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkout\n                        \n                    \n                \n            \n            \n                \ncheckout(cart: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Оформляет заказ по содержимому корзины.\nExample :// POST /api/ShopCart/Checkout\n// Body:\n// [\n//   { \"productId\": 1, \"quantity\": 2, \"sizeId\": 2 },\n//   { \"productId\": 3, \"quantity\": 1, \"sizeId\": 1 }\n// ]\nthis.shopCartService.checkout([\n  { productId: 1, quantity: 2, sizeId: 2 },\n  { productId: 3, quantity: 1, sizeId: 1 }\n]).subscribe(order => {\n  // order: { orderId: number, orderDetails: [...] }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cart\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Массив товаров для оформления заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Информация о заказе.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exportToExcel\n                        \n                    \n                \n            \n            \n                \nexportToExcel(orderId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Экспортирует заказ в Excel.\nExample :this.shopCartService.exportToExcel(123).subscribe(blob => {\n  const url = URL.createObjectURL(blob);\n  window.open(url);\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Файл Excel.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCart\n                        \n                    \n                \n            \n            \n                \ngetCart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Получает текущее содержимое корзины.\nExample :// GET /api/ShopCart\nthis.shopCartService.getCart().subscribe(cart => {\n  // cart: { cartItems: [...], products: [...] }\n  console.log(cart);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Модель корзины.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCartQuantity\n                        \n                    \n                \n            \n            \n                \ngetCartQuantity(productId: number, sizeId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Получает текущее количество товара определённого размера в корзине.\nExample :// GET /api/ShopCart/quantity?productId=1&sizeId=2\nthis.shopCartService.getCartQuantity(1, 2).subscribe(q => {\n  // q: { currentQuantity: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                        \n                                                sizeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Текущее количество.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \nremoveFromCart(request: IRemoveFromCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Удаляет товар из корзины.\nExample :this.shopCartService.removeFromCart({ productId: 1, sizeId: 2 }).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IRemoveFromCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для удаления товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateCart\n                        \n                    \n                \n            \n            \n                \nupdateCart(request: IUpdateCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Обновляет содержимое корзины.\nExample :// POST /api/ShopCart/UpdateCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 3,\n//   \"sizeId\": 2\n// }\nthis.shopCartService.updateCart({\n  productId: 1,\n  quantity: 3,\n  sizeId: 2\n}).subscribe(res => {\n  // res: { success: true, message: \"Cart updated!\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IUpdateCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для обновления корзины.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/ShopCart`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-shop-cart.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ICartViewModel } from '../interface/ICartViewModel';\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\nimport { IUpdateCartRequest } from '../interface/IUpdateCartRequest';\nimport { IDpOrderDetail } from '../interface/IDpOrderDetail';\nimport { IRemoveFromCartRequest } from '../interface/IRemoveFromCartRequest';\n\n/**\n * Сервис для работы с корзиной покупок (Shop Cart).\n *\n * @remarks\n * Позволяет получать содержимое корзины, добавлять и удалять товары, обновлять корзину, оформлять заказ и экспортировать заказ в Excel.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopCartService {\n  private baseUrl = `${window.location.origin}/api/ShopCart`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает текущее содержимое корзины.\n   *\n   * @returns {Observable} Модель корзины.\n   * @example\n   * // GET /api/ShopCart\n   * this.shopCartService.getCart().subscribe(cart => {\n   *   // cart: { cartItems: [...], products: [...] }\n   *   console.log(cart);\n   * });\n   */\n  getCart(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Обновляет содержимое корзины.\n   *\n   * @param {IUpdateCartRequest} request Данные для обновления корзины.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // POST /api/ShopCart/UpdateCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 3,\n   * //   \"sizeId\": 2\n   * // }\n   * this.shopCartService.updateCart({\n   *   productId: 1,\n   *   quantity: 3,\n   *   sizeId: 2\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Cart updated!\" }\n   * });\n   */\n  updateCart(request: IUpdateCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/UpdateCart`, request);\n  }\n\n  /**\n   * Добавляет товар в корзину.\n   *\n   * @param {IAddToCartRequest} request Данные для добавления товара.\n   * @returns {Observable} Результат добавления.\n   * @example\n   * // POST /api/ShopCart/AddToCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 2,\n   * //   \"sizeId\": 2\n   * // }\n   * this.shopCartService.addToCart({\n   *   productId: 1,\n   *   quantity: 2,\n   *   sizeId: 2\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Product added to cart.\" }\n   * });\n   */\n  addToCart(request: IAddToCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/AddToCart`, request);\n  }\n\n  /**\n   * Получает текущее количество товара определённого размера в корзине.\n   *\n   * @param {number} productId Идентификатор товара.\n   * @param {number} sizeId Идентификатор размера.\n   * @returns {Observable} Текущее количество.\n   * @example\n   * // GET /api/ShopCart/quantity?productId=1&sizeId=2\n   * this.shopCartService.getCartQuantity(1, 2).subscribe(q => {\n   *   // q: { currentQuantity: number }\n   * });\n   */\n  getCartQuantity(productId: number, sizeId: number): Observable {\n    return this.http.get(`${this.baseUrl}/quantity?productId=${productId}&sizeId=${sizeId}`);\n  }\n\n  /**\n   * Оформляет заказ по содержимому корзины.\n   *\n   * @param {any[]} cart Массив товаров для оформления заказа.\n   * @returns {Observable} Информация о заказе.\n   * @example\n   * // POST /api/ShopCart/Checkout\n   * // Body:\n   * // [\n   * //   { \"productId\": 1, \"quantity\": 2, \"sizeId\": 2 },\n   * //   { \"productId\": 3, \"quantity\": 1, \"sizeId\": 1 }\n   * // ]\n   * this.shopCartService.checkout([\n   *   { productId: 1, quantity: 2, sizeId: 2 },\n   *   { productId: 3, quantity: 1, sizeId: 1 }\n   * ]).subscribe(order => {\n   *   // order: { orderId: number, orderDetails: [...] }\n   * });\n   */\n  checkout(cart: any[]): Observable {\n    return this.http.post(`${this.baseUrl}/Checkout`, cart);\n  }\n\n  /**\n   * Удаляет товар из корзины.\n   *\n   * @param {IRemoveFromCartRequest} request Данные для удаления товара.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * this.shopCartService.removeFromCart({ productId: 1, sizeId: 2 }).subscribe(() => ...);\n   */\n  removeFromCart(request: IRemoveFromCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/RemoveFromCart`, request);\n  }\n\n  /**\n   * Экспортирует заказ в Excel.\n   *\n   * @param {number} orderId Идентификатор заказа.\n   * @returns {Observable} Файл Excel.\n   * @example\n   * this.shopCartService.exportToExcel(123).subscribe(blob => {\n   *   const url = URL.createObjectURL(blob);\n   *   window.open(url);\n   * });\n   */\n  exportToExcel(orderId: number): Observable {\n    return this.http.post(`${this.baseUrl}/export?orderId=${orderId}`, {}, { responseType: 'blob' });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserAchievementsService.html":{"url":"injectables/UserAchievementsService.html","title":"injectable - UserAchievementsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserAchievementsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/user-achievements.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с тест-кейсами пользователя.\nПозволяет получать, создавать, разблокировать тест-кейсы, а также имитировать ошибки тест-кейсов для тестирования UI и логики.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALWAYS_FAIL_KEY\n                            \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkUserAchievementExists\n                            \n                            \n                                createUserAchievement\n                            \n                            \n                                getAllUserAchievements\n                            \n                            \n                                getAlwaysFailMode\n                            \n                            \n                                getCompletedAchievementsByUsername\n                            \n                            \n                                    Private\n                                getFailedAchievementId\n                            \n                            \n                                getUserAchievement\n                            \n                            \n                                handleAchievement\n                            \n                            \n                                setAlwaysFailMode\n                            \n                            \n                                    Private\n                                simulateServerFailure\n                            \n                            \n                                unlockUserAchievement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, configService: ConfigService, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/user-achievements.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkUserAchievementExists\n                        \n                    \n                \n            \n            \n                \ncheckUserAchievementExists(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Проверка существования тест-кейса у пользователя.\nExample :// GET /api/UserAchievements/Exists/1/14\nthis.userAchievementsService.checkUserAchievementExists(1, 14).subscribe(exists => {\n  // exists: true/false\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                true, если тест-кейс уже есть.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUserAchievement\n                        \n                    \n                \n            \n            \n                \ncreateUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Создание тест-кейса для пользователя.\nExample :// POST /api/UserAchievements/Create/1/14\nthis.userAchievementsService.createUserAchievement(1, 14).subscribe(ach => {\n  // ach: { dpUserProjId, achievementId, isObtained, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный тест-кейс.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUserAchievements\n                        \n                    \n                \n            \n            \n                \ngetAllUserAchievements()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Получение всех тест-кейсов пользователя.\nExample :// GET /api/UserAchievements\nthis.userAchievementsService.getAllUserAchievements().subscribe(list => {\n  // list: [{ dpUserProjId, achievementId, isObtained, ... }]\n  console.log(list);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Массив тест-кейсов пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAlwaysFailMode\n                        \n                    \n                \n            \n            \n                \ngetAlwaysFailMode()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Проверяет, включён ли режим имитации ошибок тест-кейсов.\nExample :if (this.userAchievementsService.getAlwaysFailMode()) { ... }\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если режим включён.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedAchievementsByUsername\n                        \n                    \n                \n            \n            \n                \ngetCompletedAchievementsByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Получение завершённых тест-кейсов по имени пользователя.\nExample :// GET /api/UserAchievements/Completed/vasya\nthis.userAchievementsService.getCompletedAchievementsByUsername('vasya').subscribe(list => {\n  // list: [{ achievementId, title, ... }]\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Имя пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Массив завершённых тест-кейсов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFailedAchievementId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFailedAchievementId(successAchievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:288\n                        \n                    \n\n\n            \n                \n                        Получение ID отрицательного тест-кейса на основе положительного.\nExample :const failedId = this.userAchievementsService.getFailedAchievementId(14);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                successAchievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID успешного тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                ID соответствующего отрицательного тест-кейса.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserAchievement\n                        \n                    \n                \n            \n            \n                \ngetUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Получение конкретного тест-кейса пользователя.\nExample :// GET /api/UserAchievements/1/14\nthis.userAchievementsService.getUserAchievement(1, 14).subscribe(ach => {\n  // ach: { dpUserProjId, achievementId, isObtained, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Тест-кейс пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleAchievement\n                        \n                    \n                \n            \n            \n                \nhandleAchievement(userProjId: number, achievementId: number, successMessage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Универсальный метод для обработки тест-кейса (создание, разблокировка, имитация ошибки).\nExample :this.userAchievementsService.handleAchievement(1, 14, 'Каталог успешно загружен!').subscribe();\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                        \n                                                successMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Сообщение для успешного уведомления.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обработки.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAlwaysFailMode\n                        \n                    \n                \n            \n            \n                \nsetAlwaysFailMode(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Включает или выключает режим имитации ошибок тест-кейсов.\nExample :this.userAchievementsService.setAlwaysFailMode(true);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    true — всегда имитировать ошибку, false — обычный режим.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        simulateServerFailure\n                        \n                    \n                \n            \n            \n                \n                        \n                    simulateServerFailure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlockUserAchievement\n                        \n                    \n                \n            \n            \n                \nunlockUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Разблокировка тест-кейса для пользователя.\nExample :// PUT /api/UserAchievements/Unlock/1/14\nthis.userAchievementsService.unlockUserAchievement(1, 14).subscribe(() => {\n  // Тест-кейс разблокирован\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат разблокировки.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALWAYS_FAIL_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'alwaysFailMode'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/user-achievements.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/UserAchievements'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/user-achievements.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, Observable, of, switchMap, tap, throwError } from 'rxjs';\nimport { IAchievement } from '../interface/IAchievement';\nimport { IUserHasAchievement } from '../interface/IUserHasAchievement';\nimport { ConfigService } from './config.service';\nimport { TuiAlertService } from '@taiga-ui/core';\n\n/**\n * Сервис для работы с тест-кейсами пользователя.\n *\n * @remarks\n * Позволяет получать, создавать, разблокировать тест-кейсы, а также имитировать ошибки тест-кейсов для тестирования UI и логики.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAchievementsService {\n  private readonly baseUrl = '/api/UserAchievements'; // Прокси для API\n  private static readonly ALWAYS_FAIL_KEY = 'alwaysFailMode';\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly configService: ConfigService,\n    private readonly alertService: TuiAlertService\n  ) { }\n\n  /**\n   * Включает или выключает режим имитации ошибок тест-кейсов.\n   * @param {boolean} value true — всегда имитировать ошибку, false — обычный режим.\n   * @example\n   * this.userAchievementsService.setAlwaysFailMode(true);\n   */\n  setAlwaysFailMode(value: boolean) {\n    localStorage.setItem(UserAchievementsService.ALWAYS_FAIL_KEY, value ? '1' : '0');\n  }\n\n  /**\n   * Проверяет, включён ли режим имитации ошибок тест-кейсов.\n   * @returns {boolean} true, если режим включён.\n   * @example\n   * if (this.userAchievementsService.getAlwaysFailMode()) { ... }\n   */\n  getAlwaysFailMode(): boolean {\n    return localStorage.getItem(UserAchievementsService.ALWAYS_FAIL_KEY) === '1';\n  }\n\n  private simulateServerFailure(): boolean {\n    return this.getAlwaysFailMode();\n  }\n\n  /**\n   * Получение всех тест-кейсов пользователя.\n   * @returns {Observable} Массив тест-кейсов пользователя.\n   * @example\n   * // GET /api/UserAchievements\n   * this.userAchievementsService.getAllUserAchievements().subscribe(list => {\n   *   // list: [{ dpUserProjId, achievementId, isObtained, ... }]\n   *   console.log(list);\n   * });\n   */\n  getAllUserAchievements(): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получение конкретного тест-кейса пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Тест-кейс пользователя.\n   * @example\n   * // GET /api/UserAchievements/1/14\n   * this.userAchievementsService.getUserAchievement(1, 14).subscribe(ach => {\n   *   // ach: { dpUserProjId, achievementId, isObtained, ... }\n   * });\n   */\n  getUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(`${this.baseUrl}/${userProjId}/${achievementId}`);\n  }\n\n  /**\n   * Создание тест-кейса для пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Созданный тест-кейс.\n   * @example\n   * // POST /api/UserAchievements/Create/1/14\n   * this.userAchievementsService.createUserAchievement(1, 14).subscribe(ach => {\n   *   // ach: { dpUserProjId, achievementId, isObtained, ... }\n   * });\n   */\n  createUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .post(`${this.baseUrl}/Create/${userProjId}/${achievementId}`, {});\n  }\n\n  /**\n   * Разблокировка тест-кейса для пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Результат разблокировки.\n   * @example\n   * // PUT /api/UserAchievements/Unlock/1/14\n   * this.userAchievementsService.unlockUserAchievement(1, 14).subscribe(() => {\n   *   // Тест-кейс разблокирован\n   * });\n   */\n  unlockUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .put(`${this.baseUrl}/Unlock/${userProjId}/${achievementId}`, {});\n  }\n\n  /**\n   * Получение завершённых тест-кейсов по имени пользователя.\n   * @param {string} username Имя пользователя.\n   * @returns {Observable} Массив завершённых тест-кейсов.\n   * @example\n   * // GET /api/UserAchievements/Completed/vasya\n   * this.userAchievementsService.getCompletedAchievementsByUsername('vasya').subscribe(list => {\n   *   // list: [{ achievementId, title, ... }]\n   * });\n   */\n  getCompletedAchievementsByUsername(username: string): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .get(`${this.baseUrl}/Completed/${username}`);\n  }\n\n  /**\n   * Проверка существования тест-кейса у пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} true, если тест-кейс уже есть.\n   * @example\n   * // GET /api/UserAchievements/Exists/1/14\n   * this.userAchievementsService.checkUserAchievementExists(1, 14).subscribe(exists => {\n   *   // exists: true/false\n   * });\n   */\n  checkUserAchievementExists(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(`${this.baseUrl}/Exists/${userProjId}/${achievementId}`).pipe(\n      catchError(error => {\n        if (error.status === this.configService.httpStatusCodes.notFound) {\n          console.warn(`Тест-кейс ${achievementId} или пользователь ${userProjId} не найдены`);\n          return of(false);\n        }\n        console.error('Ошибка при проверке тест-кейса:', error);\n        return of(false);\n      })\n    );\n  }\n\n  /**\n   * Универсальный метод для обработки тест-кейса (создание, разблокировка, имитация ошибки).\n   * @param {number} userProjId Идентификатор пользователя проекта.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @param {string} successMessage Сообщение для успешного уведомления.\n   * @returns {Observable} Результат обработки.\n   * @example\n   * this.userAchievementsService.handleAchievement(1, 14, 'Каталог успешно загружен!').subscribe();\n   */\n  handleAchievement(\n    userProjId: number,\n    achievementId: number,\n    successMessage: string\n  ): Observable {\n    if (userProjId  {\n          if (result === null) {\n            // Тест-кейс уже существует\n            // this.alertService\n            //   .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\n            //   .subscribe();\n            return of(void 0);\n          }\n          return this.unlockUserAchievement(userProjId, failedAchievementId);\n        }),\n        tap(() => {\n          this.alertService\n            .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\n              appearance: 'error'\n            })\n            .subscribe();\n        }),\n        catchError(error => {\n          console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, error);\n          return of(void 0);\n        })\n      );\n    }\n\n    // Нормальная обработка тест-кейса\n    return this.checkUserAchievementExists(userProjId, achievementId).pipe(\n      switchMap(exists => {\n        if (exists) {\n          console.log(`Тест-кейс ${achievementId} уже выполнен для userProjId ${userProjId}`);\n          // this.alertService\n          //   .open('Тест-кейс уже выполнен!', { appearance: 'info' })\n          //   .subscribe();\n          return of(void 0); // Ничего не делаем, если тест-кейс уже есть\n        }\n        return this.createUserAchievement(userProjId, achievementId).pipe(\n          switchMap(result => {\n            if (result === null) {\n              // Тест-кейс уже существует\n              this.alertService\n                .open('Тест-кейс успешно выполнен!', { appearance: 'success' })\n                .subscribe();\n              return of(void 0);\n            }\n            return this.unlockUserAchievement(userProjId, achievementId);\n          }),\n          tap(() => {\n            this.alertService.open(successMessage, { appearance: 'success' }).subscribe();\n          })\n        );\n      }),\n      catchError(error => {\n        console.error(`Ошибка при обработке тест-кейса ${achievementId} для userProjId ${userProjId}:`, error);\n        const failedAchievementId = this.getFailedAchievementId(achievementId);\n        // Регистрируем отрицательный тест-кейс при ошибке\n        return this.createUserAchievement(userProjId, failedAchievementId).pipe(\n          switchMap(result => {\n            if (result === null) {\n              // Ошибочный тест-кейс уже существует\n              // this.alertService\n              //   .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\n              //   .subscribe();\n              return of(void 0);\n            }\n            return this.unlockUserAchievement(userProjId, failedAchievementId);\n          }),\n          tap(() => {\n            this.alertService\n              .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\n                appearance: 'error'\n              })\n              .subscribe();\n          }),\n          catchError(err => {\n            console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, err);\n            return of(void 0);\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Получение ID отрицательного тест-кейса на основе положительного.\n   * @param {number} successAchievementId ID успешного тест-кейса.\n   * @returns {number} ID соответствующего отрицательного тест-кейса.\n   * @example\n   * const failedId = this.userAchievementsService.getFailedAchievementId(14);\n   */\n  private getFailedAchievementId(successAchievementId: number): number {\n    const successToFailedMap: { [key: number]: number } = {\n      [this.configService.achievementIds.loginSuccess]: this.configService.achievementIds.loginFailed,\n      [this.configService.achievementIds.registerSuccess]: this.configService.achievementIds.registerFailed,\n      [this.configService.achievementIds.addToCartSuccess]: this.configService.achievementIds.addToCartFailed,\n      [this.configService.achievementIds.checkoutSuccess]: this.configService.achievementIds.checkoutFailed,\n      [this.configService.achievementIds.viewProductSuccess]: this.configService.achievementIds.viewProductFailed,\n      [this.configService.achievementIds.createProductSuccess]: this.configService.achievementIds.createProductFailed,\n      [this.configService.achievementIds.updateProfileSuccess]: this.configService.achievementIds.updateProfileFailed,\n      [this.configService.achievementIds.addImageSuccess]: this.configService.achievementIds.addImageFailed,\n      [this.configService.achievementIds.addCategorySuccess]: this.configService.achievementIds.addCategoryFailed,\n      [this.configService.achievementIds.switchToLightThemeSuccess]:\n        this.configService.achievementIds.switchToLightThemeFailed,\n      [this.configService.achievementIds.switchToDarkThemeSuccess]:\n        this.configService.achievementIds.switchToDarkThemeFailed,\n      [this.configService.achievementIds.removeFromCartSuccess]:\n        this.configService.achievementIds.removeFromCartFailed,\n      [this.configService.achievementIds.updateCartQuantitySuccess]:\n        this.configService.achievementIds.updateCartQuantityFailed,\n      [this.configService.achievementIds.loadProductsSuccess]: this.configService.achievementIds.loadProductsFailed,\n      [this.configService.achievementIds.loadProductInfoSuccess]:\n        this.configService.achievementIds.loadProductInfoFailed,\n      [this.configService.achievementIds.navigateToProductSuccess]:\n        this.configService.achievementIds.navigateToProductFailed,\n      [this.configService.achievementIds.toggleThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.resetThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openProductDialogSuccess]:\n        this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openCategoryDialogSuccess]:\n        this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openImageDialogSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.logoutProjSuccess]: this.configService.achievementIds.logoutProjFailed,\n      [this.configService.achievementIds.updateCategorySuccess]:\n        this.configService.achievementIds.updateCategoryFailed,\n      [this.configService.achievementIds.updateImageSuccess]: this.configService.achievementIds.updateImageFailed,\n      [this.configService.achievementIds.updateProductSuccess]: this.configService.achievementIds.updateProductFailed,\n    };\n\n    return successToFailedMap[successAchievementId] || this.configService.achievementIds.buttonNotWorking;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/data/page/about/about.component.ts\n            \n            component\n            AboutComponent\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/data/page/page-cart/page-cart.component.ts\n            \n            interface\n            CartItem\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/docs/docs.component.ts\n            \n            component\n            DocsComponent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/interface/IAchievement.ts\n            \n            interface\n            IAchievement\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/interface/IAddToCartRequest.ts\n            \n            interface\n            IAddToCartRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/ICartItem.ts\n            \n            interface\n            ICartItem\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/ICartViewModel.ts\n            \n            interface\n            ICartViewModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/interface/ICreateDpImageRequest.ts\n            \n            interface\n            ICreateDpImageRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/IDpCategory.ts\n            \n            interface\n            IDpCategory\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpImage.ts\n            \n            interface\n            IDpImage\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrder.ts\n            \n            interface\n            IDpOrder\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrderComposition.ts\n            \n            interface\n            IDpOrderComposition\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrderDetail.ts\n            \n            interface\n            IDpOrderDetail\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpProduct.ts\n            \n            interface\n            IDpProduct\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/app/interface/IDpProductAttribute.ts\n            \n            interface\n            IDpProductAttribute\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpSize.ts\n            \n            interface\n            IDpSize\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/interface/IDpUser.ts\n            \n            interface\n            IDpUser\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/interface/IDpUserProj.ts\n            \n            interface\n            IDpUserProj\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IRemoveFromCartRequest.ts\n            \n            interface\n            IRemoveFromCartRequest\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/interface/IUpdateCartRequest.ts\n            \n            interface\n            IUpdateCartRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/IUpdateDpImageRequest.ts\n            \n            interface\n            IUpdateDpImageRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/IUserHasAchievement.ts\n            \n            interface\n            IUserHasAchievement\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/services/achievements.service.ts\n            \n            injectable\n            AchievementsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/app/services/auth-proj.service.ts\n            \n            injectable\n            AuthProjService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/services/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/dp-categories.service.ts\n            \n            injectable\n            DpCategoriesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-images.service.ts\n            \n            injectable\n            DpImagesService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/services/dp-order-compositions.service.ts\n            \n            injectable\n            DpOrderCompositionsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-orders.service.ts\n            \n            injectable\n            DpOrdersService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-product-attributes.service.ts\n            \n            injectable\n            DpProductAttributesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-products.service.ts\n            \n            injectable\n            ProductsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/app/services/dp-shop-cart.service.ts\n            \n            injectable\n            ShopCartService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/services/dp-sizes.service.ts\n            \n            injectable\n            DpSizesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-user-projs.service.ts\n            \n            injectable\n            DpUserProjsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-users.service.ts\n            \n            injectable\n            DpUsersService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/user-achievements.service.ts\n            \n            injectable\n            UserAchievementsService\n            \n                73 %\n                (11/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : ^19.2.10\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/material : ^19.2.10\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            @fortawesome/fontawesome-free : ^6.7.2\n        \n            @taiga-ui/addon-commerce : ^4.35.0\n        \n            @taiga-ui/addon-table : ^4.36.0\n        \n            @taiga-ui/cdk : ^4.34.0\n        \n            @taiga-ui/core : ^4.36.0\n        \n            @taiga-ui/event-plugins : ^4.0.2\n        \n            @taiga-ui/icons : ^4.34.0\n        \n            @taiga-ui/icons-fontawesome : ^4.37.0\n        \n            @taiga-ui/kit : ^4.34.0\n        \n            @taiga-ui/layout : ^4.35.0\n        \n            @taiga-ui/legacy : ^4.35.0\n        \n            ngx-cookie-service : ^19.1.2\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSota6SiFront\nThis project was generated using Angular CLI version 19.2.8.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
