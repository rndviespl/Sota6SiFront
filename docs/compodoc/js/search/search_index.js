var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,0.266,1,0.939]],["body/components/AboutComponent.html",[0,0.297,1,1.191,2,0.841,3,0.068,4,0.058,5,0.574,6,0.649,7,0.574,8,0.574,9,0.058,10,1.877,11,0.574,12,2.115,13,2.995,14,1.915,15,1.915,16,0.876,17,1.659,18,1.963,19,2.819,20,4.283,21,4.283,22,4.283,23,2.819,24,2.469,25,1.191,26,1.191,27,2.819,28,2.09,29,2.819,30,0.989,31,2.169,32,0.876,33,3.444,34,0.049,35,0.123,36,1.096,37,2.105,38,1.987,39,1.652,40,3.708,41,1.724,42,0.576,43,2.448,44,4.878,45,4.222,46,0.628,47,1.685,48,2.282,49,0.857,50,3.444,51,0.576,52,0.016,53,0.711,54,0.078,55,0.239,56,2.448,57,0.887,58,2.169,59,1.427,60,0.716,61,1.383,62,2.169,63,2.169,64,0.711,65,0.711,66,1.452,67,2.169,68,1.985,69,2.169,70,1.119,71,3.708,72,1.522,73,2.169,74,0.475,75,1.25,76,0.676,77,1.058,78,1.877,79,1.452,80,0.273,81,0.598,82,1.58,83,1.566,84,0.574,85,0.836,86,1.592,87,0.766,88,0.874,89,0.874,90,0.874,91,2.169,92,1.542,93,1.877,94,1.877,95,1.427,96,1.685,97,1.25,98,1.542,99,3.444,100,1.167,101,0.915,102,0.068,103,0.287,104,1.877,105,1.685,106,2.169,107,5.332,108,4.401,109,5.664,110,6.161,111,5.664,112,4.401,113,2.981,114,3.444,115,3.444,116,3.444,117,3.444,118,2.981,119,3.444,120,2.503,121,1.799,122,1.327,123,3.444,124,2.981,125,3.444,126,3.444,127,3.444,128,1.68,129,3.444,130,2.981,131,3.444,132,2.676,133,2.981,134,2.981,135,2.981,136,3.444,137,2.266,138,3.444,139,1.685,140,1.444,141,2.328,142,2.508,143,1.332,144,2.169,145,2.169,146,1.877,147,3.889,148,5.332,149,4.935,150,1.542,151,4.283,152,2.892,153,1.872,154,1.838,155,3.343,156,2.328,157,1.179,158,2.202,159,1.179,160,3.606,161,2.169,162,2.169,163,3.782,164,3.053,165,3.449,166,1.42,167,3.897,168,4.606,169,1.179,170,1.872,171,2.819,172,2.169,173,2.169,174,4.283,175,1.332,176,0.912,177,2.981,178,4.283,179,2.812,180,2.676,181,2.169,182,2.596,183,2.169,184,2.981,185,3.328,186,3.501,187,2.812,188,4.878,189,3.444,190,2.676,191,1.771,192,1.685,193,2.169,194,1.877,195,2.09,196,2.896,197,2.263,198,2.508,199,3.467,200,1.685,201,2.169,202,2.169,203,2.981,204,2.169,205,2.169,206,4.878,207,4.134,208,2.169,209,1.877,210,3.444,211,1.877,212,2.169,213,1.771,214,3.328,215,0.8,216,4.606,217,2.169,218,3.782,219,2.266,220,1.877,221,1.179,222,2.981,223,2.676,224,1.877,225,1.877,226,1.877,227,2.169,228,1.542,229,4.222,230,1.223,231,1.877,232,2.169,233,2.169,234,2.169,235,2.169,236,1.877,237,3.444,238,2.981,239,2.169,240,2.169,241,1.877,242,1.427,243,2.651,244,3.467,245,1.332,246,1.542,247,1.25,248,0.766,249,0.766,250,0.766,251,0.766,252,0.766,253,0.766,254,0.766,255,0.766,256,0.766,257,0.766,258,0.574,259,0.912,260,0.912,261,0.574,262,0.574,263,0.574,264,0.529,265,0.574,266,0.574,267,0.529,268,0.574,269,0.574,270,0.529,271,0.574,272,0.574,273,0.574,274,0.529,275,0.574,276,0.912,277,0.529,278,0.574,279,0.574,280,0.529,281,1.134,282,0.574,283,0.529,284,0.574,285,0.529,286,0.574,287,0.529,288,0.574,289,0.574,290,0.529,291,0.574,292,0.529,293,0.574,294,0.529,295,0.574,296,0.529,297,0.468,298,0.912,299,0.529,300,0.574,301,0.508,302,0.574,303,0.529,304,0.551,305,0.529,306,0.529,307,0.574,308,0.529,309,0.574,310,0.529,311,0.508,312,0.551,313,0.574,314,0.529,315,0.574,316,0.529,317,0.551,318,0.551,319,0.574,320,0.007,321,0.007]],["title/injectables/AchievementsService.html",[322,0.764,323,2.734]],["body/injectables/AchievementsService.html",[3,0.1,4,0.086,9,0.086,34,0.072,35,0.166,36,0.871,42,0.776,46,0.586,49,0.969,51,1.103,52,0.016,53,0.962,54,0.149,55,0.457,57,1.237,60,1.22,61,1.133,64,0.469,65,0.469,74,0.383,80,0.405,86,0.962,102,0.1,103,0.426,120,2.052,121,1.712,122,2.3,166,1.367,175,4.528,215,2.434,297,1.002,320,0.009,321,0.009,322,0.922,323,3.3,324,1.185,325,2.782,326,2.434,327,1.789,328,2.767,329,6.965,330,2.263,331,7.375,332,2.658,333,3.078,334,4.251,335,6.383,336,3.061,337,3.219,338,2.196,339,4.643,340,4.643,341,4.643,342,5.97,343,4.643,344,4.643,345,1.295,346,4.643,347,4.643,348,3.856,349,3.214,350,4.643,351,4.643,352,6.028,353,2.803,354,4.643,355,0.751,356,3.214,357,4.643,358,4.643,359,3.214,360,4.643,361,3.214,362,4.643,363,4.018,364,4.643,365,3.214,366,4.643,367,5.45,368,4.643,369,3.214,370,4.643,371,1.18,372,4.643,373,1.295,374,2.497,375,1.238,376,1.238,377,1.185,378,1.295,379,1.311,380,1.42,381,2.658,382,1.568,383,1.568,384,1.568,385,1.568,386,3.214,387,3.214]],["title/components/AchievmentsPageForUserComponent.html",[0,0.266,264,0.939]],["body/components/AchievmentsPageForUserComponent.html",[0,0.381,1,0.798,2,1.147,3,0.102,4,0.088,5,0.866,6,0.978,7,0.866,8,0.866,9,0.088,11,0.866,14,2.005,15,2.005,16,1.195,17,1.715,25,0.798,26,0.798,30,1.35,32,1.195,34,0.074,35,0.168,36,1.211,37,2.306,39,2.248,42,0.786,46,0.857,48,2.424,49,1.038,51,0.786,52,0.016,53,0.877,54,0.158,55,0.325,57,0.974,60,0.92,61,1.469,64,1.039,65,1.039,68,1.884,74,0.5,76,1.019,77,2.684,80,0.412,81,0.902,83,1.195,84,0.866,87,1.155,88,1.317,100,1.592,102,0.102,103,0.433,140,1.886,154,1.593,166,1.14,176,0.866,230,1.299,248,1.155,249,1.155,250,1.155,251,1.155,252,1.155,253,1.155,254,1.155,255,1.155,256,1.155,257,1.155,258,0.866,259,1.245,260,1.245,261,0.866,262,0.866,263,0.866,264,1.469,265,1.853,266,0.866,267,0.798,268,0.866,269,0.866,270,0.798,271,0.866,272,0.866,273,0.866,274,0.798,275,0.866,276,1.245,277,0.798,278,0.866,279,0.866,280,0.798,281,1.457,282,0.866,283,0.798,284,0.866,285,0.798,286,0.866,287,0.798,288,0.866,289,0.866,290,0.798,291,0.866,292,0.798,293,0.866,294,0.798,295,0.866,296,0.798,297,0.706,298,1.245,299,0.798,300,0.866,301,0.766,302,0.866,303,0.798,304,0.831,305,0.798,306,0.798,307,0.866,308,0.798,309,0.866,310,0.798,311,0.766,312,0.831,313,0.866,314,0.798,315,0.866,316,0.798,317,0.831,318,0.831,319,0.866,320,0.009,321,0.009,327,1.811,334,1.884,348,3.27,355,0.713,371,1.195,374,2.54,379,0.677,388,6.511,389,5.844,390,2.83,391,2.293,392,5.503,393,5.503,394,5.503,395,5.503,396,4.276,397,4.276,398,3.269,399,4.7,400,5.503,401,3.27,402,5.503,403,4.276,404,4.763,405,2.32,406,5.503,407,3.468,408,4.7,409,2.659,410,6.017,411,2.83,412,5.503,413,2.537,414,5.503,415,6.017,416,4.7,417,4.7,418,3.269,419,2.537,420,3.269,421,3.269,422,3.269,423,3.652,424,3.269,425,3.269,426,2.417,427,3.269,428,3.652,429,3.269,430,3.379,431,3.269,432,3.959,433,3.269,434,3.269,435,1.379,436,1.661,437,3.269,438,2.151,439,2.151,440,3.269,441,2.151,442,2.151,443,4.7,444,3.269,445,1.41,446,5.208,447,2.54,448,5.503,449,2.83,450,2.54,451,3.269,452,4.7,453,3.269,454,3.269,455,3.269,456,4.7,457,3.269,458,3.269,459,1.734,460,4.675,461,4.7,462,3.269,463,1.379,464,4.7,465,3.269,466,3.269,467,3.269,468,3.269,469,1.206,470,1.379,471,1.317,472,1.595,473,1.595,474,2.83,475,4.7,476,4.7]],["title/components/AlertDeleteComponent.html",[0,0.266,267,0.939]],["body/components/AlertDeleteComponent.html",[0,0.456,1,1.129,2,1.454,3,0.145,4,0.124,5,1.225,6,1.384,7,1.225,8,1.225,9,0.124,11,1.225,14,2.061,15,2.061,16,1.514,17,2.053,25,1.129,26,1.129,30,1.711,32,1.514,34,0.104,35,0.213,37,2.053,49,0.643,52,0.016,53,0.869,54,0.134,64,0.675,65,0.675,74,0.512,75,2.666,76,1.442,80,0.583,81,1.276,82,1.706,83,1.769,84,1.577,86,1.384,100,2.017,102,0.145,103,0.613,140,1.687,154,1.842,176,1.225,230,1.286,248,1.635,249,1.635,250,1.635,251,1.635,252,1.635,253,1.635,254,1.635,255,1.635,256,1.635,257,1.635,258,1.225,259,1.577,260,1.577,261,1.225,262,1.225,263,1.225,264,1.129,265,1.225,266,1.225,267,1.698,268,2.011,269,1.225,270,1.129,271,1.225,272,1.225,273,1.225,274,1.129,275,1.225,276,1.577,277,1.129,278,1.225,279,1.225,280,1.129,281,1.744,282,1.225,283,1.129,284,1.225,285,1.129,286,1.225,287,1.129,288,1.225,289,1.225,290,1.129,291,1.225,292,1.129,293,1.225,294,1.129,295,1.225,296,1.129,297,0.999,298,1.577,299,1.129,300,1.225,301,1.084,302,1.225,303,1.129,304,1.176,305,1.129,306,1.129,307,1.225,308,1.129,309,1.225,310,1.129,311,1.084,312,1.176,313,1.225,314,1.129,315,1.225,316,1.129,317,1.176,318,1.176,319,1.225,320,0.012,321,0.012,337,2.905,419,2.511,477,5.155,478,4.628,479,4.004,480,4.626,481,5.956,482,2.911,483,4.682,484,4.682,485,4.626,486,3.594,487,4.626,488,2.514,489,4.626,490,4.004,491,3.044,492,3.594,493,4.004,494,5.956,495,3.062]],["title/components/AppComponent.html",[0,0.266,270,0.939]],["body/components/AppComponent.html",[0,0.466,1,1.181,2,1.496,3,0.151,4,0.13,5,1.281,7,1.281,8,1.281,9,0.13,11,1.281,14,2.067,15,2.067,16,1.558,23,4.427,25,1.181,26,1.181,32,1.558,34,0.109,35,0.219,37,2.097,49,0.852,52,0.016,53,0.894,54,0.109,57,1.002,64,0.894,65,0.894,74,0.454,76,1.508,80,0.61,83,1.23,84,1.281,87,1.71,102,0.151,103,0.641,140,1.71,154,1.873,175,4.131,176,1.281,230,1.323,258,1.281,259,1.623,260,1.623,261,1.281,262,1.281,263,1.281,264,1.181,265,1.281,266,1.281,267,1.181,268,1.281,269,1.281,270,1.727,271,1.281,272,1.281,273,1.281,274,1.181,275,1.281,276,1.623,277,1.181,278,1.281,279,1.281,280,1.181,281,1.781,282,1.281,283,1.181,284,1.281,285,1.181,286,1.281,287,1.181,288,1.281,289,1.281,290,1.181,291,1.281,292,1.181,293,1.281,294,1.181,295,1.281,296,1.181,297,1.045,298,1.623,299,1.727,300,1.281,301,1.134,302,1.281,303,1.181,304,1.23,305,1.181,306,1.181,307,1.281,308,1.181,309,1.281,310,1.181,311,1.134,312,1.23,313,1.281,314,1.181,315,1.281,316,1.181,317,1.23,318,1.23,319,1.281,320,0.012,321,0.012,377,2.261,482,2.973,496,4.188,497,6.727,498,6.727,499,6.727,500,6.129,501,4.762,502,6.129,503,5.823,504,5.305,505,4.839,506,5.305,507,4.839,508,4.188,509,4.839]],["title/injectables/AuthProjService.html",[322,0.764,401,2.09]],["body/injectables/AuthProjService.html",[3,0.098,4,0.084,9,0.084,34,0.071,35,0.163,36,1.047,42,0.764,46,0.573,49,0.981,51,0.988,52,0.016,53,0.861,54,0.133,55,0.409,57,1.434,60,1.13,61,1.598,64,0.785,65,0.785,70,1.484,74,0.403,80,0.396,86,0.94,102,0.098,103,0.416,121,1.685,122,2.276,230,1.495,297,1.666,311,1.071,320,0.009,321,0.009,322,0.907,324,1.159,326,2.179,328,2.553,330,1.919,332,2.789,333,3.059,338,2.168,345,1.266,353,2.603,355,0.705,373,1.266,375,1.211,376,1.211,377,1.159,378,1.266,379,0.946,381,2.168,401,2.482,419,2.491,445,1.261,447,2.442,450,3.549,469,2.553,510,6.205,511,2.72,512,3.954,513,4.568,514,3.037,515,5.907,516,4.411,517,5.991,518,5.907,519,4.921,520,4.921,521,4.644,522,5.907,523,5.378,524,6.922,525,5.907,526,3.304,527,4.461,528,4.658,529,4.199,530,4.59,531,3.954,532,4.568,533,3.143,534,4.568,535,3.628,536,3.143,537,4.59,538,3.143,539,4.568,540,4.568,541,3.143,542,3.954,543,3.143,544,4.568,545,3.143,546,3.954,547,3.954,548,3.143,549,2.72,550,2.442,551,2.72,552,2.234,553,2.442,554,4.568,555,4.568,556,2.72,557,3.954,558,3.954,559,3.627,560,4.568,561,4.568,562,4.568,563,3.954,564,2.72,565,2.72,566,3.143,567,2.72,568,2.442,569,2.72,570,2.72]],["title/injectables/AuthService.html",[97,2.216,322,0.764]],["body/injectables/AuthService.html",[3,0.098,4,0.084,9,0.084,34,0.071,35,0.163,36,1.045,42,0.761,46,0.571,49,0.962,51,0.986,52,0.016,53,0.86,54,0.133,55,0.408,57,1.221,60,1.093,61,1.439,64,0.783,65,0.783,70,1.479,74,0.402,80,0.394,86,0.936,97,2.624,102,0.098,103,0.415,121,1.679,122,2.271,230,1.687,297,0.983,311,1.067,320,0.009,321,0.009,322,0.904,324,1.154,326,2.174,328,2.55,330,1.915,332,2.785,333,3.055,334,2.624,338,2.162,345,1.26,353,2.6,355,0.666,373,1.26,375,1.205,376,1.205,377,1.154,378,1.26,379,0.943,381,2.162,407,4.128,419,2.486,445,1.067,450,3.538,469,2.174,512,3.941,514,3.031,516,4.128,517,6.55,519,4.915,520,4.915,521,3.879,527,4.453,528,4.646,530,4.58,531,3.941,542,3.941,546,3.941,547,3.941,549,2.708,550,2.431,551,2.708,556,2.708,557,3.941,558,3.941,559,3.62,563,3.941,564,2.708,565,2.708,568,2.431,570,2.708,571,2.708,572,4.553,573,5.895,574,7.161,575,7.568,576,5.895,577,4.915,578,4.915,579,4.915,580,3.398,581,5.895,582,5.895,583,5.895,584,5.895,585,4.553,586,4.553,587,3.831,588,3.129,589,3.129,590,4.553,591,4.553,592,3.129,593,3.129,594,4.553,595,3.129,596,3.129,597,2.224,598,4.553,599,4.553,600,4.553,601,3.538,602,3.941]],["title/components/BackButtonComponent.html",[0,0.266,26,0.939]],["body/components/BackButtonComponent.html",[0,0.457,1,1.134,2,1.458,3,0.145,4,0.125,5,1.23,6,1.389,7,1.23,8,1.23,9,0.125,11,1.23,14,2.062,15,2.062,16,1.181,25,1.134,26,1.701,30,1.715,32,1.518,34,0.105,36,0.742,42,0.998,46,0.847,48,3.022,49,0.83,51,0.776,52,0.016,53,0.962,54,0.105,55,0.322,60,0.776,61,1.458,74,0.505,80,0.585,81,1.281,87,1.641,92,4.691,100,2.022,102,0.145,103,0.615,140,1.689,154,1.844,176,1.23,228,4.244,230,1.289,248,1.641,249,1.641,250,1.641,251,1.641,252,1.641,253,1.641,254,1.641,255,1.641,256,1.641,257,1.641,258,1.23,259,1.581,260,1.581,261,1.23,262,1.23,263,1.23,264,1.134,265,1.23,266,1.23,267,1.134,268,1.23,269,1.23,270,1.134,271,1.23,272,2.012,273,1.23,274,1.134,275,1.23,276,1.581,277,1.134,278,1.23,279,1.23,280,1.134,281,1.747,282,1.23,283,1.134,284,1.23,285,1.134,286,1.23,287,1.134,288,1.23,289,1.23,290,1.134,291,1.23,292,1.134,293,1.23,294,1.134,295,1.23,296,1.134,297,1.003,298,1.581,299,1.134,300,1.23,301,1.088,302,1.23,303,1.134,304,1.181,305,1.134,306,1.134,307,1.23,308,1.134,309,1.23,310,1.134,311,1.088,312,1.181,313,1.23,314,1.134,315,1.23,316,1.134,317,1.181,318,1.181,319,1.23,320,0.012,321,0.012,378,1.871,445,1.399,449,4.019,459,1.713,603,5.711,604,4.019,605,4.644,606,5.97,607,6.965,608,4.644,609,7.375,610,4.644,611,4.644,612,5.97,613,4.644,614,4.644,615,4.644,616,4.644,617,4.644,618,5.97,619,4.019]],["title/components/CardItemComponent.html",[0,0.266,274,0.939]],["body/components/CardItemComponent.html",[0,0.42,1,0.955,2,1.301,3,0.122,4,0.105,5,1.036,6,1.171,7,1.036,8,1.036,9,0.105,11,1.036,14,2.036,15,2.036,16,1.355,17,1.89,18,2.236,25,0.955,26,0.955,30,1.531,32,1.355,34,0.088,36,1.041,39,2.436,41,2.541,42,0.891,46,0.972,47,3.04,48,2.831,49,0.905,51,0.891,52,0.016,53,0.949,54,0.137,55,0.369,60,0.654,61,1.301,72,1.729,74,0.508,76,1.22,79,2.248,80,0.493,81,1.079,83,0.995,84,1.036,87,1.383,88,1.576,89,1.576,90,1.576,100,1.806,101,1.65,102,0.122,103,0.518,112,3.04,140,1.596,154,1.724,166,0.811,176,1.036,230,1.151,248,1.383,249,1.383,250,1.383,251,1.383,252,1.383,253,1.383,254,1.383,255,1.383,256,1.383,257,1.383,258,1.036,259,1.411,260,1.411,261,1.036,262,1.036,263,1.036,264,0.955,265,1.036,266,1.036,267,0.955,268,1.036,269,1.036,270,0.955,271,1.036,272,1.036,273,1.036,274,1.589,275,1.938,276,1.411,277,1.589,278,1.411,279,1.036,280,0.955,281,1.605,282,1.036,283,0.955,284,1.036,285,0.955,286,1.036,287,0.955,288,1.036,289,1.036,290,0.955,291,1.036,292,0.955,293,1.036,294,0.955,295,1.036,296,0.955,297,0.845,298,1.411,299,0.955,300,1.036,301,0.917,302,1.036,303,0.955,304,0.995,305,0.955,306,1.48,307,1.036,308,0.955,309,1.036,310,0.955,311,0.917,312,0.995,313,1.036,314,0.955,315,1.036,316,0.955,317,0.995,318,0.995,319,1.036,320,0.011,321,0.011,327,1.508,330,1.97,371,1.541,379,0.811,405,2.556,413,2.745,435,1.65,436,1.383,445,0.917,469,2.401,470,1.65,471,1.576,619,3.387,620,5.895,621,5.292,622,3.04,623,3.295,624,3.387,625,4.614,626,5.33,627,3.789,628,5.247,629,3.273,630,3.989,631,5.33,632,2.963,633,5.33,634,3.387,635,2.012,636,3.387,637,3.387,638,2.6,639,2.403,640,2.781,641,3.387,642,2.6,643,2.403,644,4.614,645,3.913,646,1.576,647,3.04,648,1.443,649,6.062,650,3.387,651,4.614,652,5.33,653,5.33,654,3.04,655,3.04]],["title/components/CarouselImgComponent.html",[0,0.266,277,0.939]],["body/components/CarouselImgComponent.html",[0,0.396,1,0.855,2,1.205,3,0.109,4,0.094,5,0.927,6,1.047,7,0.927,8,0.927,9,0.094,11,0.927,12,3.03,13,3.03,14,2.018,15,2.018,16,1.255,17,1.781,18,2.108,25,0.855,26,0.855,27,3.76,28,2.788,30,1.417,32,1.255,34,0.14,35,0.176,36,1.158,40,4.946,42,0.825,45,5.371,46,0.9,49,1.032,51,0.955,52,0.016,53,0.954,54,0.163,55,0.396,57,0.725,60,1.094,61,1.792,64,0.905,65,0.905,70,1.857,71,5.663,74,0.5,75,2.018,77,2.788,78,4.946,80,0.441,81,0.965,83,1.453,84,0.927,85,1.349,86,1.047,100,1.671,102,0.109,103,0.464,104,3.03,128,2.407,140,1.533,142,1.8,154,1.643,158,1.8,164,2.537,166,1.285,169,1.902,176,0.927,182,1.708,191,1.8,195,1.708,196,2.407,197,1.624,213,1.8,219,2.303,221,1.902,230,1.065,242,2.303,248,1.237,249,1.237,250,1.237,251,1.237,252,1.237,253,1.237,254,1.237,255,1.237,256,1.237,257,1.237,258,0.927,259,1.307,260,1.307,261,0.927,262,0.927,263,0.927,264,0.855,265,0.927,266,0.927,267,0.855,268,0.927,269,0.927,270,0.855,271,0.927,272,0.927,273,0.927,274,0.855,275,0.927,276,1.307,277,1.515,278,1.886,279,0.927,280,0.855,281,1.513,282,0.927,283,0.855,284,0.927,285,0.855,286,0.927,287,0.855,288,0.927,289,0.927,290,0.855,291,0.927,292,0.855,293,0.927,294,0.855,295,0.927,296,0.855,297,0.756,298,1.307,299,0.855,300,0.927,301,0.82,302,0.927,303,0.855,304,0.89,305,0.855,306,0.855,307,0.927,308,0.855,309,0.927,310,0.855,311,0.82,312,0.89,313,0.927,314,0.855,315,0.927,316,0.855,317,0.89,318,0.89,319,0.927,320,0.01,321,0.01,330,1.603,355,0.503,379,1.022,391,2.407,409,2.742,436,1.237,438,2.303,445,1.339,514,2.537,627,3.508,630,3.76,638,2.407,640,5.325,642,2.788,643,2.149,656,6.485,657,3.03,658,4.271,659,1.988,660,5.715,661,5.715,662,5.715,663,5.715,664,3.5,665,4.934,666,5.715,667,6.205,668,4.934,669,4.271,670,3.834,671,5.715,672,3.5,673,4.821,674,4.946,675,5.371,676,4.946,677,4.411,678,4.934,679,4.271,680,3.5,681,4.44,682,3.5,683,3.5,684,4.934,685,6.205,686,3.5,687,3.5,688,3.5,689,3.5,690,4.271,691,5.663,692,3.5,693,3.03,694,3.5,695,3.5,696,3.5,697,3.834,698,2.72,699,2.488,700,2.72,701,3.03,702,3.5,703,3.5,704,4.934,705,2.303,706,4.934,707,3.5,708,3.5,709,3.5,710,3.5,711,3.5,712,3.5,713,3.5,714,3.5,715,4.946,716,3.5,717,3.5,718,3.5,719,3.5,720,3.5,721,3.5,722,3.5,723,3.5,724,3.5,725,3.834,726,3.5,727,3.5,728,3.5,729,2.72,730,3.5,731,3.5,732,3.5,733,3.03,734,2.682,735,4.271]],["title/interfaces/CartItem.html",[736,0.461,737,2.734]],["body/interfaces/CartItem.html",[0,0.303,3,0.093,4,0.08,9,0.08,12,1.822,13,1.822,14,0.754,15,0.754,16,0.754,17,1.365,18,1.615,24,2.524,28,2.137,30,0.852,32,0.754,34,0.099,35,0.156,36,1.089,37,2,38,1.376,39,1.763,41,1.548,46,0.541,48,2.097,52,0.016,54,0.067,61,1.698,65,0.639,66,1.251,72,1.311,74,0.479,75,1.71,76,1.365,77,2.137,79,1.847,80,0.552,81,0.818,82,1.615,83,1.324,84,0.786,87,1.049,88,1.195,89,1.195,90,1.195,100,1.005,101,1.251,102,0.093,103,0.393,128,1.447,140,1.22,166,1.27,215,1.92,218,2.109,301,0.696,306,1.403,320,0.009,321,0.009,327,1.143,355,0.624,371,1.976,379,1.375,391,1.447,396,3.403,397,3.403,405,1.251,409,1.311,413,1.847,426,3.576,435,1.251,436,1.548,438,1.953,439,1.953,445,1.63,459,2.826,463,2.424,469,1.92,470,2.195,471,2.097,472,3.499,473,3.499,482,3.126,486,3.403,488,1.613,495,2.252,526,1.822,623,1.613,646,2.097,648,1.92,659,2.097,677,3.113,705,2.882,736,0.356,737,5.299,738,0.888,739,1.953,740,2.306,741,2.306,742,3.791,743,3,744,3.764,745,4.975,746,3.791,747,2.524,748,2.524,749,1.094,750,3.791,751,2.568,752,2.306,753,2.689,754,2.306,755,2.689,756,2.306,757,3.403,758,2.306,759,2.882,760,2.568,761,2.568,762,2.568,763,2.568,764,2.568,765,2.109,766,2.568,767,2.109,768,3.7,769,3.237,770,2.306,771,2.306,772,2.568,773,2.568,774,2.568,775,2.568,776,2.568,777,2.568,778,2.306,779,2.568,780,2.568,781,2.568,782,2.568,783,2.568,784,2.568,785,5.744,786,2.568,787,2.568,788,5.496,789,6.283,790,2.677,791,3.732,792,2.924,793,2.568,794,2.568,795,2.568,796,2.568,797,2.306,798,2.568,799,2.568,800,5.744,801,5.306,802,3.791,803,2.568,804,2.568,805,3.403,806,2.568,807,2.137,808,5.553,809,1.764,810,5.553,811,2.568,812,4.975,813,4.975,814,2.306,815,2.109,816,2.568,817,2.568,818,3.403,819,2.568,820,2.306,821,2.568,822,2.568,823,2.568,824,2.568,825,2.306,826,2.568,827,2.568,828,4.045,829,1.822,830,4.506,831,2.568,832,2.568,833,2.306,834,2.568,835,2.568,836,2.568,837,4.506,838,3.403,839,2.568,840,2.568]],["title/injectables/ConfigService.html",[39,1.303,322,0.764]],["body/injectables/ConfigService.html",[3,0.086,4,0.074,9,0.074,34,0.062,35,0.148,37,2.127,39,1.406,49,0.694,52,0.016,54,0.112,64,0.728,65,0.728,74,0.177,80,0.348,102,0.086,103,0.366,113,3.594,118,3.594,120,2.452,121,2.046,132,3.226,133,3.594,134,3.594,135,3.594,215,1.531,297,0.896,311,0.973,312,1.589,317,1.056,320,0.008,321,0.008,322,0.825,324,1.019,326,1.019,328,2.46,330,1.349,375,1.064,376,1.064,377,1.019,445,1.3,471,1.673,514,2.135,648,1.531,815,2.951,841,2.391,842,4.152,843,3.226,844,5.548,845,4.989,846,4.989,847,4.989,848,4.318,849,4.152,850,4.152,851,2.549,852,4.152,853,2.732,854,4.152,855,3.594,856,4.152,857,2.951,858,4.152,859,4.152,860,4.152,861,4.152,862,4.152,863,4.152,864,3.594,865,4.152,866,4.152,867,3.594,868,4.152,869,4.152,870,4.152,871,4.152,872,4.152,873,3.594,874,4.152,875,2.951,876,4.152,877,4.152,878,4.152,879,4.152,880,4.152,881,4.152,882,4.152,883,4.152,884,3.594,885,4.152,886,4.152,887,4.152,888,4.152,889,4.152,890,4.152,891,4.152,892,3.594,893,4.152,894,4.152,895,4.152,896,4.152,897,4.152,898,4.152,899,4.152,900,4.152,901,4.152,902,4.152,903,4.152,904,4.152,905,4.152,906,4.152,907,4.152,908,4.152,909,4.152,910,4.152,911,4.152,912,4.152,913,4.152,914,4.152,915,4.152,916,4.152,917,4.152,918,4.152,919,4.152,920,4.152,921,4.152,922,4.152,923,4.152,924,4.152,925,4.152,926,4.152,927,4.152,928,4.152,929,4.152,930,4.152,931,4.152,932,4.152,933,4.152,934,4.152,935,4.152,936,4.152,937,4.152,938,4.152,939,4.152,940,4.152,941,2.762,942,3.226,943,4.152,944,4.152,945,2.951,946,4.152,947,4.152,948,4.152,949,3.594,950,3.226,951,4.152,952,4.152,953,4.152,954,4.152,955,4.152,956,2.732,957,4.152,958,4.152,959,4.152,960,4.152,961,3.226,962,4.152,963,4.152,964,4.152,965,3.594,966,4.152,967,3.594,968,4.152,969,3.594,970,4.152,971,4.152,972,4.152,973,3.226,974,4.152,975,2.762,976,4.152,977,4.152,978,4.152,979,4.152,980,4.152,981,4.152,982,4.152,983,4.152,984,4.152,985,4.152,986,4.152,987,4.152,988,4.152,989,4.152,990,4.152,991,4.152,992,4.152,993,4.152,994,4.152,995,4.152,996,4.152,997,4.152,998,4.152,999,4.152,1000,2.762,1001,4.152,1002,4.152]],["title/components/DialogCategoryComponent.html",[0,0.266,280,0.939]],["body/components/DialogCategoryComponent.html",[0,0.334,1,0.637,2,0.971,3,0.082,4,0.07,5,0.691,6,0.781,7,0.691,8,0.691,9,0.07,11,0.691,14,1.959,15,1.959,16,1.012,17,1.503,18,1.778,25,0.637,26,0.637,30,1.143,32,1.012,34,0.059,35,0.142,36,1.259,37,2.386,39,1.826,41,1.905,42,0.665,49,1.052,51,1.123,52,0.016,53,1.016,54,0.154,55,0.465,57,1.496,60,1.145,61,1.818,64,0.979,65,1.016,66,1.678,68,2.293,70,1.986,72,1.758,74,0.459,76,0.814,77,2.351,80,0.329,81,0.72,82,0.963,83,1.475,84,0.691,85,1.006,88,1.052,89,1.052,90,1.052,102,0.082,103,0.346,128,1.941,132,2.028,137,3.172,140,1.36,154,1.427,166,0.824,176,0.691,230,0.859,243,2.62,258,0.691,259,1.053,260,1.053,261,0.691,262,0.691,263,0.691,264,0.637,265,0.691,266,0.691,267,0.637,268,0.691,269,0.691,270,0.637,271,0.691,272,0.691,273,0.691,274,0.637,275,0.691,276,1.053,277,0.637,278,0.691,279,0.691,280,1.316,281,1.814,282,0.691,283,0.637,284,0.691,285,0.637,286,0.691,287,0.637,288,0.691,289,0.691,290,0.637,291,0.691,292,0.637,293,0.691,294,0.637,295,0.691,296,0.637,297,0.564,298,1.053,299,0.637,300,0.691,301,0.612,302,0.691,303,0.637,304,0.664,305,0.637,306,0.637,307,0.691,308,0.637,309,0.691,310,0.637,311,0.612,312,0.664,313,0.691,314,0.637,315,0.691,316,0.637,317,0.664,318,0.664,319,0.691,320,0.008,321,0.008,327,1.006,355,0.719,371,1.742,379,1.267,391,1.941,405,2.033,409,2.382,413,1.101,419,1.101,430,2.443,435,1.101,436,1.406,445,1.49,459,2.255,463,1.678,469,2.688,470,1.678,471,1.603,472,3.102,473,1.941,482,3.192,483,3.426,484,3.426,488,1.419,491,1.718,526,2.96,580,2.778,629,2.443,638,1.273,646,1.603,648,0.963,659,1.603,749,0.963,790,2.045,792,1.942,809,1.603,875,2.828,1003,5.401,1004,5.903,1005,2.259,1006,3.091,1007,2.351,1008,2.96,1009,2.96,1010,3.172,1011,3.172,1012,2.478,1013,3.172,1014,4.82,1015,3.978,1016,3.426,1017,4.666,1018,4.82,1019,4.82,1020,3.745,1021,3.443,1022,3.978,1023,3.978,1024,3.443,1025,3.091,1026,3.091,1027,3.443,1028,3.091,1029,3.978,1030,3.745,1031,3.443,1032,5.929,1033,4.666,1034,2.61,1035,3.978,1036,3.723,1037,2.61,1038,5.391,1039,3.978,1040,5.093,1041,2.61,1042,2.61,1043,2.61,1044,3.443,1045,4.419,1046,2.61,1047,3.091,1048,2.61,1049,3.091,1050,2.61,1051,3.443,1052,2.61,1053,3.091,1054,2.61,1055,2.028,1056,3.978,1057,2.61,1058,2.61,1059,3.978,1060,2.61,1061,2.478,1062,3.091,1063,2.478,1064,2.162,1065,3.091,1066,2.61,1067,2.028,1068,3.978,1069,3.091,1070,2.61,1071,2.61,1072,2.61,1073,2.828,1074,2.61,1075,2.61,1076,2.61,1077,2.028,1078,2.61,1079,2.028,1080,2.61,1081,2.028,1082,1.342,1083,2.028,1084,1.856,1085,1.505,1086,2.028,1087,2.259,1088,2.61,1089,2.028,1090,3.818,1091,2.259,1092,2.028,1093,2.61,1094,1.856,1095,2.028,1096,2.61,1097,3.978,1098,2.61,1099,1.603,1100,2.61,1101,4.751,1102,4.172,1103,2.61,1104,2.61,1105,2.61,1106,3.091,1107,2.259,1108,2.61,1109,2.61,1110,2.61,1111,2.259,1112,2.259,1113,3.426,1114,3.745,1115,2.62,1116,1.856,1117,3.426,1118,3.745,1119,2.028,1120,2.028,1121,2.259,1122,2.61,1123,2.259,1124,2.61,1125,2.61,1126,3.443,1127,2.259,1128,2.259,1129,2.61,1130,4.172,1131,2.259,1132,2.259,1133,2.61,1134,2.259]],["title/components/DialogImageComponent.html",[0,0.266,283,0.939]],["body/components/DialogImageComponent.html",[0,0.314,1,0.578,2,0.901,3,0.074,4,0.064,5,0.627,6,0.709,7,0.627,8,0.627,9,0.183,11,0.627,14,1.937,15,1.937,16,0.939,18,1.673,25,0.578,26,0.578,28,2.213,30,1.06,32,0.939,34,0.053,35,0.132,36,1.255,37,2.457,39,1.735,41,1.81,42,0.617,49,1.063,51,1.027,52,0.016,53,0.952,54,0.15,55,0.425,57,1.316,60,1.091,61,1.762,64,1.043,65,1.043,66,1.557,68,2.128,70,2.3,72,1.632,74,0.463,76,0.739,77,2.213,80,0.299,81,0.653,82,0.874,83,1.412,84,0.627,85,0.913,86,0.709,88,0.954,89,0.954,90,0.954,102,0.074,103,0.314,128,1.801,137,2.985,140,1.301,154,1.356,166,0.94,176,0.627,230,0.797,243,2.465,258,0.627,259,0.978,260,0.978,261,0.627,262,0.627,263,0.627,264,0.578,265,0.627,266,0.627,267,0.578,268,0.627,269,0.627,270,0.578,271,0.627,272,0.627,273,0.627,274,0.578,275,0.627,276,0.978,277,0.578,278,0.627,279,0.627,280,0.578,281,1.767,282,0.627,283,1.25,284,0.627,285,0.578,286,0.627,287,0.578,288,0.627,289,0.627,290,0.578,291,0.627,292,0.578,293,0.627,294,0.578,295,0.627,296,0.578,297,0.512,298,0.978,299,0.578,300,0.627,301,0.555,302,0.627,303,0.578,304,0.602,305,0.578,306,0.578,307,0.627,308,0.578,309,0.627,310,0.578,311,0.555,312,0.602,313,0.627,314,0.578,315,0.627,316,0.578,317,0.602,318,0.602,319,0.627,320,0.007,321,0.007,327,0.913,330,1.199,353,0.874,355,0.599,371,1.659,379,1.316,391,1.801,405,1.913,409,2.263,413,0.999,419,0.999,430,2.267,432,4.294,435,0.999,436,1.305,445,1.489,459,2.169,463,1.557,469,2.611,470,1.557,471,1.487,472,2.996,473,2.213,482,3.366,483,3.224,484,3.224,488,1.288,491,1.559,526,2.785,580,2.128,629,2.267,638,1.156,642,1.801,643,1.455,646,1.487,648,0.874,659,1.487,673,3.979,700,1.841,747,2.614,749,0.874,790,1.898,792,1.487,857,2.624,956,2.429,1003,5.449,1007,2.213,1008,2.785,1009,2.785,1010,2.985,1011,2.985,1012,2.332,1013,2.985,1016,3.224,1020,3.524,1025,2.869,1026,2.869,1028,2.869,1030,3.524,1040,4.313,1045,4.294,1047,2.869,1049,2.869,1053,2.869,1055,1.841,1061,2.332,1063,2.332,1064,3.196,1065,3.979,1067,1.841,1069,2.869,1073,2.624,1077,1.841,1079,1.841,1081,1.841,1082,1.218,1083,1.841,1084,1.684,1085,1.366,1089,1.841,1090,3.37,1092,1.841,1094,1.684,1095,1.841,1101,4.313,1106,2.869,1113,2.624,1114,2.869,1115,2.006,1116,1.684,1117,2.624,1118,2.869,1119,1.841,1120,1.841,1135,5.956,1136,2.051,1137,3.524,1138,4.536,1139,3.692,1140,4.536,1141,4.536,1142,4.536,1143,4.536,1144,4.536,1145,4.536,1146,4.536,1147,3.926,1148,4.536,1149,3.692,1150,3.692,1151,5.122,1152,3.692,1153,3.692,1154,3.692,1155,3.653,1156,2.369,1157,4.536,1158,2.369,1159,3.692,1160,2.369,1161,2.369,1162,2.369,1163,2.369,1164,2.369,1165,3.692,1166,3.653,1167,2.369,1168,3.692,1169,2.369,1170,2.369,1171,3.692,1172,3.692,1173,2.369,1174,2.369,1175,2.369,1176,2.369,1177,6.141,1178,2.369,1179,2.369,1180,2.453,1181,3.653,1182,3.692,1183,2.369,1184,3.692,1185,2.369,1186,2.369,1187,2.369,1188,5.552,1189,2.369,1190,3.196,1191,2.369,1192,2.369,1193,2.369,1194,2.369,1195,2.369,1196,2.369,1197,2.369,1198,2.051,1199,2.051,1200,2.369,1201,2.369,1202,5.881,1203,2.051,1204,2.369,1205,2.051,1206,2.369,1207,3.692,1208,2.369,1209,2.369,1210,5.881,1211,2.369,1212,2.369,1213,2.369,1214,3.692,1215,2.369,1216,2.369,1217,2.369,1218,2.369,1219,2.369,1220,2.369,1221,3.692,1222,2.369,1223,2.369,1224,2.369,1225,2.369,1226,2.369,1227,2.369,1228,2.369,1229,2.369,1230,3.692,1231,3.692,1232,2.369,1233,2.369,1234,2.369,1235,3.196,1236,4.536,1237,2.369,1238,2.369,1239,2.369,1240,2.051,1241,3.692,1242,3.196,1243,2.369,1244,2.369,1245,2.369,1246,2.051]],["title/components/DialogProductComponent.html",[0,0.266,285,0.939]],["body/components/DialogProductComponent.html",[0,0.326,1,0.614,2,0.944,3,0.079,4,0.068,5,0.666,6,0.752,7,0.666,8,0.666,9,0.068,11,0.666,14,1.951,15,1.951,16,0.983,17,1.468,18,1.737,25,0.614,26,0.614,28,2.298,30,1.11,32,0.983,34,0.057,35,0.138,36,1.255,37,2.375,39,1.791,41,1.868,42,0.646,49,1.041,51,1.083,52,0.016,53,0.989,54,0.15,55,0.449,57,1.551,60,1.111,61,1.782,64,0.969,65,1.006,66,1.63,68,2.229,70,2.329,72,1.709,74,0.455,76,0.784,77,2.298,79,1.63,80,0.317,81,0.694,82,0.928,83,1.451,84,0.666,85,0.969,88,1.013,89,1.013,90,1.013,101,1.06,102,0.079,103,0.333,128,1.886,137,3.099,140,1.338,154,1.4,166,0.801,176,0.666,230,0.835,243,2.56,258,0.666,259,1.024,260,1.024,261,0.666,262,0.666,263,0.666,264,0.614,265,0.666,266,0.666,267,0.614,268,0.666,269,0.666,270,0.614,271,0.666,272,0.666,273,0.666,274,0.614,275,0.666,276,1.024,277,0.614,278,0.666,279,0.666,280,0.614,281,1.796,282,0.666,283,0.614,284,0.666,285,1.291,286,0.666,287,0.614,288,0.666,289,0.666,290,0.614,291,0.666,292,0.614,293,0.666,294,0.614,295,0.666,296,0.614,297,0.543,298,1.024,299,0.614,300,0.666,301,0.589,302,0.666,303,0.614,304,0.639,305,0.614,306,0.614,307,0.666,308,0.614,309,0.666,310,0.614,311,0.589,312,0.639,313,0.666,314,0.614,315,0.666,316,0.614,317,0.639,318,0.639,319,0.666,320,0.008,321,0.008,327,0.969,330,1.256,355,0.737,371,1.725,379,1.248,391,1.886,405,1.986,409,2.336,413,1.06,419,1.06,430,2.374,435,1.06,436,1.366,445,1.412,459,2.222,463,1.63,469,2.692,470,1.63,471,1.558,472,3.061,473,1.227,482,3.05,483,3.348,484,3.348,488,1.367,491,1.655,526,2.892,580,2.715,629,2.374,632,2.86,635,1.988,638,1.227,639,1.544,646,1.558,648,0.928,659,1.558,747,2.715,749,0.928,790,1.988,792,1.898,875,2.748,950,3.004,1003,5.349,1007,2.298,1008,2.892,1009,2.892,1010,3.099,1011,3.099,1012,2.422,1013,3.099,1016,3.348,1020,3.66,1021,3.347,1024,3.347,1025,3.004,1026,3.004,1027,3.347,1028,3.004,1030,3.66,1031,3.347,1032,6.061,1033,4.576,1040,4.434,1044,3.347,1045,4.371,1047,3.004,1049,3.004,1051,3.347,1053,3.004,1055,1.954,1061,2.422,1063,2.934,1064,3.274,1067,1.954,1069,3.004,1073,2.748,1077,1.954,1079,1.954,1081,1.954,1082,1.293,1083,1.954,1084,1.788,1085,1.45,1089,1.954,1090,3.965,1092,1.954,1094,1.788,1095,1.954,1099,2.374,1101,4.681,1106,3.004,1113,3.348,1114,3.66,1115,2.56,1116,1.788,1117,3.348,1118,3.66,1119,1.954,1120,1.954,1121,2.177,1126,4.077,1127,2.177,1128,3.347,1130,4.077,1131,2.177,1132,2.177,1134,2.177,1147,4.077,1180,1.111,1190,3.347,1205,3.347,1247,5.847,1248,2.177,1249,4.71,1250,3.866,1251,4.71,1252,3.758,1253,3.347,1254,6.782,1255,2.515,1256,3.866,1257,2.515,1258,5.287,1259,2.515,1260,2.515,1261,2.515,1262,2.515,1263,2.515,1264,2.515,1265,3.866,1266,2.515,1267,2.515,1268,2.515,1269,2.515,1270,2.515,1271,3.347,1272,3.347,1273,3.347,1274,6.477,1275,6.025,1276,3.347,1277,3.347,1278,3.866,1279,2.515,1280,2.515,1281,3.866,1282,2.515,1283,2.515,1284,2.515,1285,2.515,1286,2.515,1287,1.788,1288,2.515,1289,2.177,1290,2.515,1291,2.515,1292,2.515,1293,2.515,1294,3.347,1295,2.515,1296,2.515,1297,2.515,1298,2.177,1299,3.347,1300,2.515,1301,2.515,1302,2.515,1303,2.177,1304,2.515]],["title/injectables/DpCategoriesService.html",[322,0.764,1305,2.988]],["body/injectables/DpCategoriesService.html",[3,0.097,4,0.084,9,0.084,34,0.07,35,0.162,36,0.855,42,0.758,46,0.567,49,0.937,51,1.045,52,0.016,53,0.911,54,0.141,55,0.433,60,1.196,64,0.453,65,0.453,74,0.377,80,0.392,86,0.93,102,0.097,103,0.412,120,2.003,121,1.672,122,2.265,166,1.43,215,2.546,320,0.009,321,0.009,322,0.9,324,1.147,326,2.305,328,2.703,330,2.242,332,2.368,333,3.05,336,2.726,337,2.867,338,2.155,345,1.252,353,2.789,355,0.746,371,1.494,373,1.252,375,1.198,376,1.198,377,1.147,378,1.252,379,1.294,380,1.374,381,2.517,382,1.517,383,1.517,384,1.517,385,1.517,514,3.677,1036,3.825,1062,5.874,1086,2.416,1099,4.642,1305,3.521,1306,3.201,1307,2.691,1308,6.902,1309,5.877,1310,4.532,1311,7.327,1312,5.877,1313,7.56,1314,5.877,1315,5.877,1316,5.877,1317,5.877,1318,4.532,1319,4.532,1320,5.877,1321,4.532,1322,4.532,1323,4.532,1324,4.532,1325,3.109,1326,5.974,1327,4.532,1328,3.109,1329,3.109,1330,4.532,1331,3.109,1332,4.532,1333,3.109,1334,4.532]],["title/injectables/DpImagesService.html",[322,0.764,1335,2.988]],["body/injectables/DpImagesService.html",[3,0.089,4,0.076,9,0.207,34,0.064,35,0.152,36,0.812,42,0.71,46,0.52,49,0.957,51,1.095,52,0.016,53,0.955,54,0.148,55,0.453,60,1.228,64,0.415,65,0.415,70,2.053,74,0.406,80,0.359,86,0.852,102,0.089,103,0.377,121,1.567,122,2.17,243,3.061,320,0.008,321,0.008,322,0.844,324,1.05,326,2.415,328,2.709,330,2.187,332,1.711,336,1.971,338,2.047,345,1.147,353,2.834,355,0.776,373,1.147,375,1.097,376,1.097,377,1.05,378,1.147,379,1.356,380,1.258,381,2.638,382,1.389,383,1.389,384,1.389,385,1.389,445,1.687,514,2.184,630,3.707,642,1.389,643,1.749,725,3.948,729,3.301,807,2.072,829,3.881,857,4.978,956,4.429,1155,3.965,1166,3.965,1180,3.245,1181,4.832,1198,2.465,1199,2.465,1306,3.249,1335,3.301,1336,2.465,1337,4.248,1338,4.248,1339,5.633,1340,4.248,1341,4.248,1342,4.248,1343,4.248,1344,4.248,1345,4.248,1346,2.848,1347,5.633,1348,5.633,1349,7.547,1350,5.633,1351,4.248,1352,6.32,1353,6.32,1354,6.32,1355,4.248,1356,4.248,1357,5.825,1358,5.825,1359,4.248,1360,4.248,1361,4.248,1362,4.248,1363,2.848,1364,4.248,1365,4.377,1366,2.848,1367,4.248,1368,4.248,1369,4.248,1370,2.848,1371,5.633,1372,4.248,1373,4.248,1374,2.848,1375,4.248,1376,4.248,1377,3.677,1378,4.248,1379,2.848,1380,4.248,1381,4.248,1382,4.248,1383,2.848,1384,3.677,1385,4.248,1386,4.248,1387,4.248,1388,2.848,1389,2.848,1390,2.465,1391,4.248,1392,4.248,1393,5.081]],["title/injectables/DpOrderCompositionsService.html",[322,0.764,1394,2.988]],["body/injectables/DpOrderCompositionsService.html",[3,0.084,4,0.072,9,0.072,34,0.06,35,0.145,36,0.783,42,0.679,46,0.489,49,0.892,51,0.982,52,0.016,53,0.856,54,0.132,55,0.407,60,1.153,64,0.391,65,0.391,74,0.351,80,0.338,86,0.802,102,0.084,103,0.355,120,1.794,121,1.497,122,2.106,215,2.723,320,0.008,321,0.008,322,0.806,324,0.989,326,2.166,328,2.621,330,2.147,332,2.202,333,2.921,336,2.535,337,2.666,338,1.974,345,1.08,353,2.723,355,0.724,371,1.39,373,1.08,375,1.033,376,1.033,377,0.989,378,1.08,379,1.216,380,1.185,381,2.365,382,1.308,383,1.308,384,1.308,385,1.308,432,4.857,514,3.547,769,3.687,851,4.533,853,4.349,857,4.698,1180,3.34,1306,3.066,1394,3.154,1395,4.903,1396,2.321,1397,5.465,1398,6.609,1399,5.465,1400,4.06,1401,7.105,1402,5.465,1403,5.465,1404,5.373,1405,6.473,1406,5.811,1407,5.465,1408,5.465,1409,5.465,1410,5.465,1411,5.465,1412,4.06,1413,4.06,1414,5.465,1415,4.06,1416,4.06,1417,4.06,1418,4.06,1419,4.81,1420,2.681,1421,6.609,1422,4.06,1423,2.681,1424,2.681,1425,4.06,1426,2.681,1427,4.06,1428,2.681,1429,4.06,1430,2.681]],["title/injectables/DpOrdersService.html",[322,0.764,1431,2.988]],["body/injectables/DpOrdersService.html",[3,0.106,4,0.091,9,0.091,34,0.076,35,0.172,36,0.898,42,0.807,46,0.619,49,0.961,51,1.081,52,0.016,53,0.943,54,0.146,55,0.448,60,1.219,64,0.495,65,0.495,70,1.988,74,0.393,80,0.428,86,1.015,102,0.106,103,0.449,120,2.133,121,1.78,122,2.358,166,1.267,215,2.748,320,0.01,321,0.01,322,0.959,324,1.251,326,2.385,328,2.689,330,2.183,332,1.944,333,2.704,336,2.239,337,2.354,338,2.263,345,1.367,353,2.825,355,0.759,371,1.227,373,1.367,375,1.307,376,1.307,377,1.251,378,1.367,379,1.339,380,1.499,381,2.605,382,1.655,383,1.655,384,1.655,385,1.655,1306,3.277,1395,3.431,1404,5.379,1406,5.49,1431,3.75,1432,2.936,1433,6.119,1434,4.826,1435,4.826,1436,6.119,1437,4.826,1438,4.826,1439,4.826,1440,4.826,1441,4.414,1442,3.392,1443,6.119,1444,4.647,1445,7.567,1446,6.119,1447,6.119,1448,6.119,1449,7.567,1450,4.826,1451,6.119,1452,4.826,1453,4.826,1454,4.826,1455,3.392,1456,6.719,1457,4.826,1458,3.392,1459,4.826,1460,4.826,1461,4.826,1462,3.392,1463,4.826,1464,4.826,1465,3.392,1466,4.826,1467,4.826,1468,3.392]],["title/injectables/DpProductAttributesService.html",[322,0.764,1469,2.988]],["body/injectables/DpProductAttributesService.html",[3,0.105,4,0.09,9,0.09,34,0.076,35,0.171,36,0.892,42,0.8,46,0.611,49,0.958,51,1.076,52,0.016,53,0.938,54,0.145,55,0.446,60,1.216,64,0.489,65,0.489,74,0.391,80,0.423,86,1.003,102,0.105,103,0.444,120,2.114,121,1.765,122,2.345,166,1.26,215,2.742,320,0.009,321,0.009,322,0.95,324,1.236,326,2.374,328,2.682,330,2.174,332,1.927,333,2.689,336,2.219,337,2.334,338,2.248,345,1.35,353,2.82,355,0.757,371,1.216,373,1.35,375,1.291,376,1.291,377,1.236,378,1.35,379,1.333,380,1.481,381,2.592,382,1.635,383,1.635,384,1.635,385,1.635,635,3.739,1180,3.285,1306,3.267,1469,3.717,1470,2.901,1471,4.784,1472,4.784,1473,4.784,1474,6.085,1475,4.784,1476,4.784,1477,4.784,1478,4.784,1479,4.132,1480,3.351,1481,6.085,1482,5.775,1483,5.775,1484,6.085,1485,7.043,1486,6.085,1487,4.784,1488,4.784,1489,6.085,1490,7.043,1491,4.784,1492,3.351,1493,6.692,1494,4.784,1495,3.351,1496,4.784,1497,4.784,1498,4.784,1499,4.784,1500,3.351,1501,4.784,1502,4.784,1503,3.351,1504,6.085,1505,6.085,1506,4.784,1507,4.784,1508,3.351]],["title/injectables/DpSizesService.html",[322,0.764,1509,2.988]],["body/injectables/DpSizesService.html",[3,0.111,4,0.096,9,0.096,34,0.08,35,0.178,36,0.922,42,0.835,46,0.65,49,0.975,51,1.101,52,0.016,53,0.96,54,0.148,55,0.456,60,1.232,64,0.52,65,0.52,74,0.401,80,0.449,86,1.066,102,0.111,103,0.472,120,2.208,121,1.843,122,2.41,166,1.296,187,4.444,215,2.307,320,0.01,321,0.01,322,0.993,324,1.314,326,2.429,328,2.717,330,2.218,332,2.013,333,2.764,336,2.318,337,2.437,338,2.325,345,1.436,353,2.844,355,0.766,371,1.27,373,1.436,375,1.373,376,1.373,377,1.314,378,1.436,379,1.364,380,1.575,381,2.653,382,1.738,383,1.738,384,1.738,385,1.738,809,3.072,1306,3.319,1483,5.559,1509,3.882,1510,3.084,1511,6.254,1512,4.997,1513,4.997,1514,6.254,1515,4.997,1516,4.997,1517,4.997,1518,4.997,1519,4.465,1520,3.563,1521,6.254,1522,6.254,1523,4.997,1524,4.997,1525,4.997,1526,4.997,1527,3.563,1528,6.827,1529,4.997,1530,3.563,1531,4.997,1532,4.997,1533,4.997,1534,3.563,1535,4.997,1536,4.997,1537,3.563,1538,6.254,1539,4.997,1540,4.997,1541,3.563]],["title/injectables/DpUserProjsService.html",[322,0.764,1542,2.988]],["body/injectables/DpUserProjsService.html",[3,0.108,4,0.093,9,0.093,34,0.078,35,0.174,36,0.906,42,0.816,46,0.629,49,0.966,51,1.088,52,0.016,53,0.949,54,0.147,55,0.451,60,1.223,64,0.503,65,0.503,74,0.396,80,0.435,86,1.032,102,0.108,103,0.457,120,2.158,121,1.801,122,2.375,166,1.277,215,2.274,230,1.58,320,0.01,321,0.01,322,0.97,324,1.272,326,2.4,328,2.699,330,2.195,332,1.967,333,2.724,336,2.265,337,2.382,338,2.284,345,1.39,353,2.831,355,0.761,371,1.242,373,1.39,375,1.329,376,1.329,377,1.272,378,1.39,379,1.348,380,1.524,381,2.621,382,1.683,383,1.683,384,1.683,385,1.683,407,4.307,523,3.794,535,3.711,552,2.452,1306,3.292,1542,3.794,1543,2.985,1544,4.883,1545,4.883,1546,4.883,1547,6.165,1548,4.883,1549,4.883,1550,4.883,1551,4.883,1552,3.449,1553,6.165,1554,4.588,1555,4.883,1556,4.227,1557,6.142,1558,4.883,1559,3.449,1560,6.756,1561,4.883,1562,3.449,1563,4.883,1564,4.227,1565,4.227,1566,4.883,1567,3.449,1568,4.883,1569,4.883,1570,3.449,1571,4.883,1572,4.883]],["title/injectables/DpUsersService.html",[322,0.764,1573,2.988]],["body/injectables/DpUsersService.html",[3,0.111,4,0.095,9,0.095,34,0.08,35,0.178,36,0.92,42,0.832,46,0.646,49,0.973,51,1.099,52,0.016,53,0.958,54,0.148,55,0.455,60,1.23,64,0.517,65,0.517,74,0.4,80,0.447,86,1.06,102,0.111,103,0.469,120,2.199,121,1.836,122,2.404,166,1.292,215,2.301,230,1.075,320,0.01,321,0.01,322,0.989,324,1.307,326,2.424,328,2.714,330,2.214,332,2.005,333,2.757,336,2.308,337,2.428,338,2.317,345,1.427,353,2.842,355,0.765,371,1.265,373,1.427,375,1.365,376,1.365,377,1.307,378,1.427,379,1.361,380,1.566,381,2.648,382,1.728,383,1.728,384,1.728,385,1.728,407,4.327,523,3.867,587,3.946,597,2.519,1306,3.314,1444,4.61,1556,4.307,1564,5.4,1565,4.307,1573,3.867,1574,3.067,1575,4.977,1576,4.977,1577,6.239,1578,4.977,1579,4.977,1580,4.977,1581,4.977,1582,3.543,1583,6.239,1584,4.977,1585,6.184,1586,4.977,1587,3.543,1588,6.815,1589,4.977,1590,3.543,1591,4.977,1592,4.977,1593,3.543,1594,4.977,1595,4.977,1596,3.543,1597,4.977,1598,4.977]],["title/components/FilterByInputComponent.html",[0,0.266,287,0.939]],["body/components/FilterByInputComponent.html",[0,0.396,1,0.857,2,1.207,3,0.11,4,0.094,5,0.93,6,1.05,7,0.93,8,0.93,9,0.094,11,0.93,12,3.036,13,3.036,14,2.018,15,2.018,16,1.257,25,0.857,26,0.857,30,1.42,32,1.257,34,0.079,35,0.177,36,0.915,42,0.827,46,1.044,49,1.058,51,1.095,52,0.016,53,1.018,54,0.163,55,0.483,57,1.521,60,1.095,61,1.793,64,0.991,65,1.083,70,2.128,74,0.488,75,2.023,80,0.443,83,1.257,85,1.353,100,1.675,102,0.11,103,0.465,128,2.412,140,1.535,154,1.645,166,1.186,176,0.93,197,2.655,230,1.068,248,1.24,249,1.24,250,1.24,251,1.24,252,1.24,253,1.24,254,1.24,255,1.24,256,1.24,257,1.24,258,0.93,259,1.309,260,1.309,261,0.93,262,0.93,263,0.93,264,0.857,265,0.93,266,0.93,267,0.857,268,0.93,269,0.93,270,0.857,271,0.93,272,0.93,273,0.93,274,0.857,275,0.93,276,1.309,277,0.857,278,0.93,279,0.93,280,0.857,281,1.516,282,0.93,283,0.857,284,0.93,285,0.857,286,0.93,287,1.659,288,1.887,289,0.93,290,0.857,291,0.93,292,0.857,293,0.93,294,0.857,295,0.93,296,0.857,297,0.758,298,1.309,299,0.857,300,0.93,301,0.823,302,0.93,303,0.857,304,0.893,305,0.857,306,0.857,307,0.93,308,0.857,309,0.93,310,0.857,311,0.823,312,0.893,313,0.93,314,0.857,315,0.93,316,0.857,317,0.893,318,0.893,319,0.93,320,0.01,321,0.01,379,0.727,391,2.412,419,2.413,426,1.805,445,1.456,627,3.515,629,3.036,638,3.195,659,2.503,670,3.842,681,4.447,697,3.842,749,1.295,864,4.954,1007,2.792,1008,3.515,1009,3.515,1045,2.31,1061,2.943,1063,2.943,1082,1.805,1085,2.023,1094,2.495,1115,3.559,1123,4.954,1599,6.625,1600,6.625,1601,3.038,1602,5.724,1603,4.279,1604,4.944,1605,5.724,1606,4.944,1607,5.724,1608,4.944,1609,3.51,1610,4.944,1611,3.515,1612,5.724,1613,5.724,1614,5.724,1615,4.944,1616,4.944,1617,4.944,1618,4.944,1619,4.944,1620,5.724,1621,5.724,1622,3.51,1623,3.51,1624,6.213,1625,3.51,1626,3.51,1627,4.944,1628,5.724,1629,3.51,1630,4.944,1631,3.51,1632,6.213,1633,4.944,1634,3.51,1635,3.51,1636,3.51,1637,4.944,1638,4.944,1639,3.51,1640,4.944,1641,5.724,1642,3.51,1643,3.51,1644,3.51,1645,3.51,1646,3.51,1647,3.51,1648,4.944,1649,3.51,1650,3.51,1651,3.51,1652,3.51,1653,3.51,1654,3.51,1655,3.51,1656,3.51,1657,3.51,1658,3.51,1659,3.51,1660,3.51,1661,3.51,1662,3.51,1663,3.51,1664,3.51,1665,3.51,1666,3.51,1667,3.51,1668,3.51,1669,3.51,1670,3.51]],["title/interfaces/IAchievement.html",[348,2.09,736,0.461]],["body/interfaces/IAchievement.html",[3,0.185,4,0.159,9,0.159,34,0.133,35,0.247,52,0.016,54,0.171,55,0.525,57,1.62,74,0.38,102,0.185,175,4.652,320,0.014,321,0.014,334,4.367,335,6.557,348,3.764,355,0.748,535,3.969,736,0.709,738,1.77,1671,5.119,1672,7.576,1673,5.915]],["title/interfaces/IAddToCartRequest.html",[736,0.461,1674,2.53]],["body/interfaces/IAddToCartRequest.html",[3,0.189,4,0.162,9,0.162,34,0.136,35,0.251,52,0.016,54,0.167,55,0.486,102,0.189,320,0.014,321,0.014,355,0.817,736,0.724,738,1.808,769,3.721,807,3.721,809,3.073,1674,4.616,1675,5.232]],["title/interfaces/ICartItem.html",[736,0.461,743,2.216]],["body/interfaces/ICartItem.html",[3,0.184,4,0.158,9,0.158,34,0.133,35,0.247,52,0.016,54,0.174,55,0.478,57,1.519,102,0.184,320,0.014,321,0.014,355,0.823,736,0.705,738,1.761,743,3.982,767,5.377,768,5.377,769,3.69,807,3.69,809,3.106,1676,5.095,1677,5.095,1678,5.886]],["title/interfaces/ICartViewModel.html",[736,0.461,753,2.361]],["body/interfaces/ICartViewModel.html",[3,0.189,4,0.162,9,0.162,34,0.136,35,0.25,52,0.016,54,0.158,74,0.45,102,0.189,320,0.014,321,0.014,632,3.273,736,0.723,738,1.806,743,4.474,753,4.305,765,5.42,1679,5.226,1680,5.018,1681,6.037]],["title/interfaces/ICreateDpImageRequest.html",[736,0.461,1155,2.53]],["body/interfaces/ICreateDpImageRequest.html",[3,0.189,4,0.163,9,0.214,34,0.137,35,0.251,52,0.016,54,0.167,57,1.537,102,0.189,320,0.014,321,0.014,355,0.756,736,0.726,738,1.813,1155,4.623,1180,3.374,1181,5.023,1682,5.245]],["title/interfaces/IDpCategory.html",[736,0.461,1036,2.09]],["body/interfaces/IDpCategory.html",[3,0.182,4,0.157,9,0.157,34,0.131,35,0.245,52,0.016,54,0.173,55,0.476,57,1.513,74,0.441,102,0.182,187,4.347,320,0.014,321,0.014,355,0.794,632,3.243,736,0.699,738,1.744,809,3.038,1036,3.733,1062,5.859,1099,4.631,1519,4.723,1683,5.047,1684,7.541,1685,5.831]],["title/interfaces/IDpImage.html",[642,1.876,736,0.461]],["body/interfaces/IDpImage.html",[3,0.183,4,0.158,9,0.158,34,0.132,35,0.246,52,0.016,54,0.174,55,0.477,57,1.516,74,0.377,102,0.183,320,0.014,321,0.014,355,0.795,632,3.248,642,3.363,736,0.703,738,1.755,1180,3.339,1181,4.972,1357,6.54,1358,6.54,1686,5.077,1687,6.54,1688,7.321,1689,5.866]],["title/interfaces/IDpOrder.html",[736,0.461,1441,2.361]],["body/interfaces/IDpOrder.html",[3,0.183,4,0.158,9,0.158,34,0.132,35,0.246,52,0.016,54,0.174,55,0.477,57,1.516,74,0.377,102,0.183,320,0.014,321,0.014,355,0.795,587,4.186,736,0.703,738,1.755,744,4.496,1404,5.371,1441,4.233,1444,4.639,1585,6.54,1690,5.077,1691,7.556,1692,7.556,1693,5.866]],["title/interfaces/IDpOrderComposition.html",[736,0.461,1419,2.734]],["body/interfaces/IDpOrderComposition.html",[3,0.181,4,0.155,9,0.155,34,0.13,35,0.244,52,0.016,54,0.175,74,0.439,102,0.181,320,0.013,321,0.013,355,0.821,736,0.693,738,1.73,1404,5.346,1405,6.51,1406,5.844,1419,4.859,1441,4.713,1479,4.424,1482,5.844,1694,5.006,1695,7.521,1696,7.521,1697,5.783]],["title/interfaces/IDpOrderDetail.html",[736,0.461,1698,2.734]],["body/interfaces/IDpOrderDetail.html",[3,0.182,4,0.157,9,0.157,34,0.132,35,0.245,52,0.016,54,0.176,55,0.522,57,1.615,102,0.182,320,0.014,321,0.014,355,0.822,736,0.699,738,1.747,767,5.363,769,3.68,770,5.862,809,3.039,1698,4.886,1699,5.053,1700,7.544,1701,7.544]],["title/interfaces/IDpProduct.html",[632,1.622,736,0.461]],["body/interfaces/IDpProduct.html",[3,0.17,4,0.146,9,0.146,34,0.123,35,0.235,52,0.016,54,0.179,55,0.554,57,1.59,74,0.455,102,0.17,320,0.013,321,0.013,355,0.822,632,2.781,642,3.683,736,0.652,738,1.629,1036,4.103,1099,4.527,1180,3.258,1271,6.381,1272,6.381,1273,6.381,1276,6.381,1277,6.381,1326,6.381,1479,4.352,1702,4.714,1703,7.373,1704,6.381,1705,5.446]],["title/interfaces/IDpProductAttribute.html",[736,0.461,1479,2.216]],["body/interfaces/IDpProductAttribute.html",[3,0.18,4,0.155,9,0.155,34,0.13,35,0.243,52,0.016,54,0.175,55,0.52,74,0.438,102,0.18,320,0.013,321,0.013,355,0.82,632,3.232,736,0.69,738,1.722,1180,3.319,1479,3.929,1482,5.835,1483,5.835,1519,4.707,1687,6.5,1706,4.982,1707,7.51,1708,7.51,1709,5.756]],["title/interfaces/IDpSize.html",[736,0.461,1519,2.361]],["body/interfaces/IDpSize.html",[3,0.184,4,0.158,9,0.158,34,0.133,35,0.247,52,0.016,54,0.17,55,0.524,57,1.518,74,0.443,102,0.184,187,4.358,320,0.014,321,0.014,355,0.746,736,0.704,738,1.759,809,3.046,1036,4.189,1479,4.443,1519,4.239,1704,6.545,1710,5.089,1711,7.561,1712,5.879]],["title/interfaces/IDpUser.html",[587,2.09,736,0.461]],["body/interfaces/IDpUser.html",[3,0.176,4,0.152,9,0.152,34,0.127,35,0.241,52,0.016,54,0.178,55,0.546,57,1.678,74,0.362,102,0.176,320,0.013,321,0.013,355,0.734,577,5.304,578,5.304,579,5.304,587,3.662,736,0.676,738,1.689,744,4.424,1441,4.682,1444,4.582,1713,4.886,1714,7.462,1715,7.462,1716,7.462,1717,5.797,1718,5.645]],["title/interfaces/IDpUserProj.html",[535,1.977,736,0.461]],["body/interfaces/IDpUserProj.html",[3,0.183,4,0.158,9,0.158,34,0.132,35,0.246,52,0.016,54,0.174,55,0.523,57,1.653,74,0.377,102,0.183,297,1.631,320,0.014,321,0.014,327,2.911,348,4.186,355,0.746,516,4.355,535,3.544,736,0.703,738,1.755,1554,4.639,1719,5.077,1720,7.556]],["title/interfaces/IRemoveFromCartRequest.html",[736,0.461,1721,2.734]],["body/interfaces/IRemoveFromCartRequest.html",[3,0.191,4,0.164,9,0.164,34,0.138,35,0.252,52,0.016,54,0.159,55,0.489,102,0.191,320,0.014,321,0.014,355,0.802,736,0.732,738,1.829,807,3.734,809,3.084,1721,5.019,1722,5.29]],["title/interfaces/IUpdateCartRequest.html",[736,0.461,755,2.361]],["body/interfaces/IUpdateCartRequest.html",[3,0.189,4,0.162,9,0.162,34,0.136,35,0.251,52,0.016,54,0.167,55,0.486,102,0.189,320,0.014,321,0.014,355,0.817,736,0.724,738,1.808,755,4.308,769,3.721,807,3.721,809,3.073,1723,5.232]],["title/interfaces/IUpdateDpImageRequest.html",[736,0.461,1166,2.53]],["body/interfaces/IUpdateDpImageRequest.html",[3,0.189,4,0.162,9,0.214,34,0.136,35,0.251,52,0.016,54,0.167,55,0.486,57,1.535,102,0.189,320,0.014,321,0.014,355,0.755,736,0.724,738,1.808,1166,4.616,1180,3.371,1181,5.02,1724,5.232]],["title/interfaces/IUserHasAchievement.html",[736,0.461,1725,2.734]],["body/interfaces/IUserHasAchievement.html",[3,0.177,4,0.152,9,0.152,34,0.128,35,0.241,52,0.016,54,0.172,55,0.517,74,0.433,102,0.177,320,0.013,321,0.013,334,4.304,348,4.252,352,6.463,355,0.789,419,3.041,535,4.023,736,0.678,738,1.693,1554,4.585,1557,6.463,1725,4.797,1726,4.897,1727,6.463]],["title/components/IconTrashComponent.html",[0,0.266,290,0.939]],["body/components/IconTrashComponent.html",[0,0.437,1,1.032,2,1.371,3,0.132,4,0.114,5,1.119,6,1.265,7,1.119,8,1.119,9,0.114,11,1.119,14,2.048,15,2.048,16,1.428,17,1.965,24,3.634,25,1.032,26,1.032,29,4.148,30,1.613,32,1.428,34,0.095,36,0.898,42,0.939,46,1.024,48,2.955,49,0.934,51,0.707,52,0.016,53,0.919,54,0.142,55,0.293,60,0.707,61,1.371,70,1.373,74,0.509,80,0.533,81,1.166,82,2.478,83,1.428,84,1.119,86,1.265,87,1.494,100,1.902,102,0.132,103,0.56,140,1.639,154,1.779,166,0.876,176,1.972,230,1.212,248,1.494,249,1.494,250,1.494,251,1.494,252,1.494,253,1.494,254,1.494,255,1.494,256,1.494,257,1.494,258,1.119,259,1.487,260,1.487,261,1.119,262,1.119,263,1.119,264,1.032,265,1.119,266,1.119,267,1.371,268,1.487,269,1.119,270,1.032,271,1.119,272,1.119,273,1.119,274,1.032,275,1.119,276,1.487,277,1.032,278,1.119,279,1.119,280,1.032,281,1.669,282,1.119,283,1.032,284,1.119,285,1.032,286,1.119,287,1.032,288,1.119,289,1.119,290,1.64,291,1.119,292,1.032,293,1.119,294,1.032,295,1.119,296,1.032,297,0.913,298,1.487,299,1.032,300,1.119,301,0.991,302,1.119,303,1.032,304,1.075,305,1.032,306,1.64,307,1.119,308,1.032,309,1.119,310,1.032,311,0.991,312,1.075,313,1.119,314,1.032,315,1.119,316,1.032,317,1.075,318,1.075,319,1.119,320,0.011,321,0.011,379,1.163,445,0.991,478,3.284,482,2.786,490,3.659,491,2.781,492,3.284,493,3.659,495,2.173,627,3.991,638,2.739,670,4.362,681,4.898,697,4.362,743,3.634,752,3.284,792,1.703,1016,3.991,1113,3.005,1115,3.426,1116,3.005,1117,3.005,1365,3.284,1728,6.052,1729,6.052,1730,3.659,1731,5.615,1732,4.227,1733,5.615,1734,6.717,1735,6.304,1736,4.227,1737,5.615,1738,4.227,1739,4.227,1740,4.227,1741,5.615,1742,4.227,1743,4.227,1744,4.227,1745,4.227,1746,4.227,1747,4.227,1748,6.304,1749,5.615,1750,4.227,1751,4.227]],["title/components/LoadingComponent.html",[0,0.266,292,0.939]],["body/components/LoadingComponent.html",[0,0.476,1,1.24,2,1.542,3,0.159,4,0.136,5,1.344,7,1.344,8,1.344,9,0.136,11,1.344,14,2.074,15,2.074,16,1.291,25,1.24,26,1.24,32,1.606,34,0.114,35,0.226,49,0.706,52,0.016,53,0.921,54,0.114,57,1.309,59,4.525,64,0.74,65,0.74,74,0.326,80,0.64,102,0.159,103,0.673,140,1.735,154,1.905,176,1.344,230,1.364,258,1.344,259,1.673,260,1.673,261,1.344,262,1.344,263,1.344,264,1.24,265,1.344,266,1.344,267,1.24,268,1.344,269,1.344,270,1.24,271,1.344,272,1.344,273,1.344,274,1.24,275,1.344,276,1.673,277,1.24,278,1.344,279,1.344,280,1.24,281,1.821,282,1.344,283,1.24,284,1.344,285,1.24,286,1.344,287,1.24,288,1.344,289,1.344,290,1.24,291,1.344,292,1.757,293,1.344,294,1.24,295,1.344,296,1.24,297,1.096,298,1.673,299,1.24,300,1.344,301,1.19,302,1.344,303,1.24,304,1.291,305,1.24,306,1.24,307,1.344,308,1.24,309,1.344,310,1.24,311,1.19,312,1.291,313,1.344,314,1.24,315,1.344,316,1.24,317,1.291,318,1.291,319,1.344,320,0.012,321,0.012,501,4.908,1752,4.394,1753,5.468,1754,6.317,1755,6.317,1756,6.317,1757,5.077]],["title/components/LoginComponent.html",[0,0.266,294,0.939]],["body/components/LoginComponent.html",[0,0.384,1,0.807,2,1.157,3,0.103,4,0.089,5,0.876,6,0.989,7,0.876,8,0.876,9,0.089,11,0.876,14,2.007,15,2.007,16,1.205,17,1.726,18,2.043,19,3.644,25,0.807,26,0.807,30,1.361,32,1.205,34,0.075,35,0.169,36,1.097,37,1.885,38,2.569,39,2.324,41,2.424,42,0.792,46,0.864,48,2.764,49,0.841,51,0.553,52,0.016,53,0.808,54,0.075,55,0.229,60,0.792,61,1.157,64,0.482,65,0.482,66,1.394,70,2.229,72,1.461,74,0.504,76,1.477,79,1.998,80,0.417,81,0.912,82,2.231,83,1.538,84,1.255,85,1.274,87,1.168,88,1.332,89,1.332,90,1.332,97,3.954,98,2.35,100,1.605,101,1.394,102,0.103,103,0.438,140,1.501,141,3.009,142,3.11,143,2.03,147,3.009,152,2.575,153,2.575,154,1.858,155,3.11,156,2.575,157,1.797,158,2.436,159,1.797,160,2.575,164,3.11,165,3.287,166,1.38,167,2.91,169,1.797,170,1.797,171,2.176,176,0.876,182,1.613,191,1.7,195,1.613,196,1.613,197,1.534,198,2.436,213,1.7,221,1.797,230,1.196,245,2.03,247,2.731,248,1.168,249,1.168,250,1.168,251,1.168,252,1.168,253,1.168,254,1.168,255,1.168,256,1.168,257,1.168,258,0.876,259,1.255,260,1.255,261,0.876,262,0.876,263,0.876,264,0.807,265,0.876,266,0.876,267,0.807,268,0.876,269,0.876,270,0.807,271,0.876,272,0.876,273,0.876,274,0.807,275,0.876,276,1.255,277,0.807,278,0.876,279,0.876,280,0.807,281,1.466,282,0.876,283,0.807,284,0.876,285,0.807,286,0.876,287,0.807,288,0.876,289,0.876,290,0.807,291,0.876,292,0.807,293,0.876,294,1.477,295,0.876,296,0.807,297,1.196,298,1.255,299,0.807,300,0.876,301,0.775,302,0.876,303,0.807,304,0.841,305,0.807,306,0.807,307,0.876,308,0.807,309,0.876,310,0.807,311,0.775,312,1.408,313,0.876,314,0.807,315,0.876,316,0.807,317,0.841,318,0.841,319,0.876,320,0.009,321,0.009,327,1.274,371,1.694,379,0.685,405,2.335,407,2.731,413,2.55,435,1.394,436,1.674,445,1.418,459,2.231,463,1.394,469,2.043,470,2.335,471,2.231,472,2.701,473,2.701,482,2.447,495,2.436,516,2.731,559,2.91,577,2.35,578,2.35,579,2.35,587,2.575,597,2.35,601,2.569,602,2.862,623,3.009,646,1.332,648,1.22,734,1.797,744,2.03,749,1.22,791,2.436,792,2.231,843,2.569,1007,2.701,1012,2.847,1061,2.847,1063,3.292,1064,3.287,1082,1.7,1444,2.03,1611,4.091,1717,2.569,1758,2.862,1759,3.936,1760,3.936,1761,3.936,1762,3.936,1763,3.936,1764,3.936,1765,3.306,1766,4.738,1767,5.235,1768,5.235,1769,2.862,1770,5.235,1771,3.306,1772,4.101,1773,3.306,1774,3.306,1775,4.101,1776,4.101,1777,3.306,1778,2.35,1779,2.176,1780,4.738,1781,2.35,1782,2.862,1783,2.35,1784,4.101,1785,3.306,1786,2.35,1787,2.35,1788,4.303,1789,3.682,1790,3.306,1791,3.306,1792,2.569,1793,2.862,1794,3.4,1795,1.906,1796,2.176,1797,3.936,1798,2.35,1799,3.368]],["title/components/LoginProjComponent.html",[0,0.266,296,0.939]],["body/components/LoginProjComponent.html",[0,0.404,1,0.886,2,1.235,3,0.113,4,0.097,5,0.961,6,1.086,7,0.961,8,0.961,9,0.097,11,0.961,14,2.024,15,2.024,16,1.287,17,1.816,18,2.149,19,3.834,25,0.886,26,0.886,30,1.453,32,1.287,34,0.082,35,0.181,36,0.932,37,1.965,38,2.703,42,0.846,46,0.923,48,2.839,49,0.877,51,0.607,52,0.016,53,0.85,54,0.082,55,0.251,60,0.846,61,1.235,64,0.529,65,0.529,66,1.53,70,2.231,74,0.505,76,1.131,79,2.134,80,0.458,81,1.001,82,2.325,83,1.603,84,1.34,85,1.398,87,1.282,100,1.714,101,1.53,102,0.113,103,0.481,140,1.554,141,3.167,142,3.241,143,2.228,147,3.167,152,2.75,153,2.75,154,1.903,155,3.241,156,2.75,157,1.972,158,2.602,159,1.972,160,2.75,164,3.241,165,3.426,166,1.207,167,3.107,169,1.972,170,1.972,171,2.388,176,0.961,182,1.77,191,1.866,195,1.77,196,1.77,197,1.683,198,2.602,213,1.866,221,1.972,230,1.093,245,2.228,247,2.917,248,1.282,249,1.282,250,1.282,251,1.282,252,1.282,253,1.282,254,1.282,255,1.282,256,1.282,257,1.282,258,0.961,259,1.34,260,1.34,261,0.961,262,0.961,263,0.961,264,0.886,265,0.961,266,0.961,267,0.886,268,0.961,269,0.961,270,0.886,271,0.961,272,0.961,273,0.961,274,0.886,275,0.961,276,1.34,277,0.886,278,0.961,279,0.961,280,0.886,281,1.543,282,0.961,283,0.886,284,0.961,285,0.886,286,0.961,287,0.886,288,0.961,289,0.961,290,0.886,291,0.961,292,0.886,293,0.961,294,0.886,295,0.961,296,1.539,297,1.613,298,1.34,299,0.886,300,0.961,301,0.851,302,0.961,303,0.886,304,0.923,305,0.886,306,0.886,307,0.961,308,0.886,309,0.961,310,0.886,311,0.851,312,1.482,313,0.961,314,0.886,315,0.961,316,0.886,317,1.686,318,0.923,319,0.961,320,0.01,321,0.01,371,1.287,401,1.972,436,1.282,441,2.388,442,2.388,445,0.851,459,2.325,463,1.53,482,2.575,495,2.996,516,3.358,535,2.602,537,2.82,552,2.579,559,2.228,623,3.167,648,1.338,734,1.972,749,1.338,791,2.602,792,2.039,1007,2.842,1012,2.996,1061,2.996,1063,3.409,1064,3.426,1082,1.866,1554,2.228,1611,4.216,1759,4.142,1760,4.142,1761,4.142,1762,4.142,1763,4.142,1764,4.142,1767,5.457,1768,5.457,1778,2.579,1779,2.388,1781,2.579,1783,2.579,1787,2.579,1793,3.141,1794,3.578,1795,2.092,1796,2.388,1797,4.142,1798,2.579,1799,3.597,1800,5.739,1801,5.739,1802,2.579,1803,3.141,1804,3.932,1805,3.141,1806,5.457,1807,2.82,1808,4.38,1809,3.629,1810,3.141,1811,3.141,1812,3.932,1813,3.141,1814,3.629,1815,3.629,1816,3.141,1817,3.629,1818,3.141]],["title/components/NavbarComponent.html",[0,0.266,299,0.939]],["body/components/NavbarComponent.html",[0,0.414,1,0.929,2,1.277,3,0.119,4,0.102,5,1.007,6,1.138,7,1.007,8,1.007,9,0.102,11,1.007,14,2.032,15,2.032,16,1.33,17,1.862,18,2.204,23,3.931,24,3.444,25,1.571,26,1.571,27,3.931,28,2.915,29,3.931,30,1.502,32,1.33,34,0.086,35,0.187,36,0.955,41,2.522,42,0.874,43,3.717,46,0.954,47,2.956,48,2.807,49,1.011,51,0.874,52,0.016,53,0.938,54,0.135,55,0.362,56,3.717,57,1.238,59,2.503,60,1.127,61,1.801,64,0.763,65,0.763,72,1.681,74,0.506,76,1.186,79,2.205,80,0.48,81,1.049,83,1.33,84,1.007,85,1.466,87,1.344,89,1.533,90,1.533,92,2.704,93,3.293,95,2.503,96,2.956,97,4.114,98,2.704,100,1.771,101,1.604,102,0.119,103,0.504,105,2.956,140,1.581,154,1.845,155,2.689,176,1.007,179,4.016,229,6.031,230,1.505,243,3.247,244,4.247,248,1.344,249,1.344,250,1.344,251,1.344,252,1.344,253,1.344,254,1.344,255,1.344,256,1.344,257,1.344,258,1.007,259,1.385,260,1.385,261,1.007,262,1.007,263,1.007,264,0.929,265,1.007,266,1.007,267,0.929,268,1.007,269,1.007,270,0.929,271,1.007,272,1.385,273,1.007,274,0.929,275,1.007,276,1.385,277,0.929,278,1.007,279,1.007,280,0.929,281,1.582,282,1.007,283,0.929,284,1.007,285,0.929,286,1.007,287,0.929,288,1.007,289,1.007,290,0.929,291,1.007,292,0.929,293,1.007,294,0.929,295,1.007,296,0.929,297,0.821,298,1.385,299,1.571,300,1.007,301,0.892,302,1.007,303,0.929,304,0.967,305,0.929,306,0.929,307,1.007,308,0.929,309,1.007,310,0.929,311,0.892,312,1.33,313,1.007,314,0.929,315,1.007,316,0.929,317,0.967,318,0.967,319,1.007,320,0.01,321,0.01,409,2.843,419,2.205,426,3.308,445,0.892,521,3.441,527,4.573,529,4.573,530,4.999,553,2.956,568,2.956,646,1.533,747,3.444,748,3.444,749,1.403,1115,2.842,1787,2.704,1819,3.293,1820,5.229,1821,3.805,1822,5.229,1823,4.642,1824,5.568,1825,5.229,1826,3.805,1827,3.805,1828,3.805,1829,3.805,1830,3.805,1831,3.805,1832,5.229,1833,3.805,1834,5.229,1835,3.293,1836,3.805,1837,3.805,1838,3.805,1839,3.805,1840,6.433,1841,5.229,1842,4.526,1843,6.433,1844,5.229,1845,5.229]],["title/components/PageCartComponent.html",[0,0.266,301,0.901]],["body/components/PageCartComponent.html",[0,0.287,1,0.505,2,0.809,3,0.065,4,0.056,5,0.547,6,0.618,7,0.547,8,0.547,9,0.056,11,0.547,12,2.035,13,2.035,14,1.902,15,1.902,16,0.843,17,1.293,18,1.53,24,2.391,25,0.505,26,0.505,28,2.024,30,0.952,32,0.843,34,0.094,35,0.118,36,1.098,37,2.14,38,1.924,39,1.973,41,1.677,42,0.554,46,0.605,48,2.581,49,1.009,51,1.071,52,0.016,53,0.955,54,0.153,55,0.433,60,1.115,61,1.745,64,0.809,65,0.911,66,0.871,72,1.464,74,0.478,75,1.191,76,1.033,77,2.024,79,1.397,80,0.418,81,0.57,82,1.75,83,1.055,84,0.547,87,0.73,88,0.832,89,0.832,90,0.832,100,1.122,101,0.871,102,0.065,103,0.274,128,1.616,140,1.563,141,1.123,142,1.704,147,1.801,149,2.949,150,1.469,152,1.801,153,1.123,154,1.542,155,2.133,156,1.123,157,1.801,158,1.062,159,1.123,160,1.123,163,1.469,164,1.062,165,1.801,166,1.254,176,0.547,179,1.91,182,2.705,184,1.789,185,2.575,186,1.36,194,1.789,195,1.008,196,1.008,197,0.959,198,2.44,199,1.469,200,1.606,215,1.53,218,2.355,222,2.868,230,0.715,231,2.868,246,3.941,248,0.73,249,0.73,250,0.73,251,0.73,252,0.73,253,0.73,254,0.73,255,0.73,256,0.73,257,0.73,258,0.547,259,0.877,260,0.877,261,0.547,262,0.547,263,0.547,264,0.505,265,0.547,266,0.547,267,0.505,268,0.547,269,0.547,270,0.505,271,0.547,272,0.547,273,0.547,274,0.505,275,0.547,276,0.877,277,0.505,278,0.547,279,0.547,280,0.505,281,1.098,282,0.547,283,0.505,284,0.547,285,0.505,286,0.547,287,0.505,288,0.547,289,0.547,290,0.505,291,0.547,292,0.505,293,0.547,294,0.505,295,0.547,296,0.505,297,0.446,298,0.877,299,0.505,300,0.547,301,1.112,302,0.547,303,0.505,304,0.525,305,0.505,306,1.525,307,0.547,308,0.505,309,0.547,310,0.505,311,0.484,312,0.525,313,0.547,314,0.505,315,0.547,316,0.505,317,0.525,318,0.525,319,0.547,320,0.007,321,0.007,327,0.796,355,0.69,371,1.886,379,1.207,391,1.616,396,3.223,397,3.223,405,1.749,409,2.097,413,2.001,426,3.294,435,0.871,436,1.171,438,1.36,439,1.36,445,1.534,459,2.676,463,2.001,469,1.53,470,1.749,471,1.671,472,3.193,473,3.193,482,3.353,486,3.223,488,1.123,495,1.704,526,2.547,623,1.123,638,1.008,646,1.671,648,1.53,654,3.223,655,3.223,659,1.912,677,3.373,705,3.123,736,0.248,737,5.377,739,4.803,740,5.672,741,1.606,742,1.789,743,1.91,744,2.035,745,2.868,746,3.59,747,2.391,748,2.391,749,0.762,750,3.59,751,1.789,752,1.606,753,2.035,754,1.606,755,2.035,756,1.606,757,3.687,758,1.606,759,3.418,760,2.868,761,2.868,762,3.59,763,2.868,764,2.868,765,2.949,766,3.59,767,2.355,768,3.373,769,3.126,770,2.575,771,3.223,772,3.59,773,1.789,774,1.789,775,1.789,776,1.789,777,1.789,778,2.575,779,3.59,780,1.789,781,4.108,782,1.789,783,1.789,784,1.789,785,5.042,786,1.789,787,1.789,788,4.978,789,5.77,790,2.133,791,3.428,792,2.686,793,2.868,794,3.59,795,4.799,796,1.789,797,1.606,798,1.789,799,2.868,800,5.406,801,4.496,802,2.868,803,2.868,804,2.868,805,2.575,806,1.789,807,1.616,808,4.799,809,1.335,810,4.799,811,1.789,812,4.108,813,4.108,814,1.606,815,3.373,816,1.789,817,1.789,818,2.575,819,1.789,820,1.606,821,1.789,822,1.789,823,1.789,824,1.789,825,1.606,826,1.789,827,2.868,828,3.223,829,1.269,830,3.59,831,1.789,832,1.789,833,1.606,834,3.59,835,1.789,836,4.108,837,4.496,838,2.575,839,1.789,840,2.868,961,2.575,1045,1.36,1115,1.123,1794,2.035,1846,2.066,1847,3.314,1848,3.314,1849,3.314,1850,3.314,1851,3.314,1852,2.066,1853,2.066,1854,2.066,1855,2.066,1856,2.066,1857,2.066,1858,2.066,1859,2.066,1860,2.066,1861,2.066,1862,2.066,1863,2.066,1864,2.066,1865,2.066,1866,2.066,1867,2.066,1868,2.066,1869,2.066,1870,2.066,1871,2.066,1872,2.066,1873,2.066,1874,2.066,1875,3.314,1876,3.314,1877,3.314,1878,2.066,1879,3.314,1880,2.066,1881,2.066,1882,2.066,1883,2.066]],["title/components/PageCatalogItemComponent.html",[0,0.266,303,0.939]],["body/components/PageCatalogItemComponent.html",[0,0.395,1,0.852,2,1.202,3,0.109,4,0.094,5,0.924,6,1.044,7,0.924,8,0.924,9,0.094,11,0.924,12,3.022,13,3.022,14,2.017,15,2.017,16,1.252,17,1.778,25,0.852,26,0.852,28,2.782,30,1.414,32,1.252,34,0.111,35,0.176,36,1.157,37,1.087,38,2.646,39,2.36,41,2.462,42,0.823,46,0.898,49,0.969,51,0.954,52,0.016,53,0.953,54,0.14,55,0.395,60,1.036,61,1.655,64,0.509,65,0.509,66,1.471,74,0.503,75,2.01,76,1.087,77,2.782,80,0.621,81,0.962,82,2.285,83,0.887,84,0.924,86,1.044,88,1.405,89,1.405,90,1.405,100,1.667,102,0.109,103,0.462,128,2.401,140,1.755,154,1.641,166,1.181,176,0.924,179,2.01,182,1.702,186,2.295,187,2.01,191,1.793,195,1.702,196,2.401,197,1.618,198,2.531,213,1.793,219,2.295,221,1.896,230,1.063,242,2.295,248,1.233,249,1.233,250,1.233,251,1.233,252,1.233,253,1.233,254,1.233,255,1.233,256,1.233,257,1.233,258,0.924,259,1.303,260,1.303,261,0.924,262,0.924,263,0.924,264,0.852,265,0.924,266,0.924,267,0.852,268,0.924,269,0.924,270,0.852,271,0.924,272,0.924,273,0.924,274,1.513,275,0.924,276,1.303,277,0.852,278,0.924,279,0.924,280,0.852,281,1.51,282,0.924,283,0.852,284,0.924,285,0.852,286,0.924,287,0.852,288,0.924,289,0.924,290,0.852,291,0.924,292,0.852,293,0.924,294,0.852,295,0.924,296,0.852,297,0.753,298,1.303,299,0.852,300,0.924,301,0.818,302,0.924,303,1.513,304,2.008,305,0.852,306,1.393,307,0.924,308,0.852,309,0.924,310,0.852,311,0.818,312,0.887,313,0.924,314,0.852,315,0.924,316,0.852,317,0.887,318,0.887,319,0.924,320,0.01,321,0.01,327,1.344,353,2.104,355,0.725,371,1.45,379,1.02,391,2.401,405,2.405,409,2.738,413,2.613,426,3.359,435,1.471,436,1.739,445,1.154,459,2.285,463,1.471,469,2.285,470,1.471,471,1.405,472,2.401,621,2.71,622,2.71,624,3.019,625,4.26,632,2.755,634,3.019,635,2.933,637,3.019,639,2.142,644,4.26,646,1.405,647,2.71,659,2.298,676,4.937,677,4.404,715,5.363,739,4.683,771,4.432,788,4.814,790,1.793,791,1.793,792,1.405,797,2.71,965,4.26,1090,3.239,1252,4.404,1287,2.479,1680,3.753,1753,3.019,1795,2.01,1884,6.159,1885,6.196,1886,4.922,1887,3.019,1888,4.922,1889,4.26,1890,4.922,1891,3.488,1892,4.922,1893,3.488,1894,3.488,1895,3.488,1896,3.488,1897,3.488,1898,5.704,1899,3.488,1900,3.488,1901,3.488,1902,3.488,1903,4.922,1904,3.488,1905,3.019,1906,3.488,1907,4.922,1908,3.488,1909,3.019,1910,3.019,1911,3.488,1912,3.019,1913,3.488,1914,3.488,1915,3.488]],["title/components/PageItemFromCatalogComponent.html",[0,0.266,305,0.939]],["body/components/PageItemFromCatalogComponent.html",[0,0.295,1,0.526,2,0.836,3,0.067,4,0.058,5,0.571,6,0.645,7,0.571,8,0.571,9,0.058,11,0.571,14,1.913,15,1.92,16,0.871,17,1.329,18,1.573,25,0.526,26,0.526,30,0.984,32,0.871,34,0.049,35,0.122,36,1.059,37,0.672,38,1.978,39,2.006,41,2.093,42,0.573,46,0.625,49,0.903,51,0.713,52,0.016,53,0.773,54,0.127,55,0.295,60,0.887,61,1.584,64,0.5,65,0.5,66,0.909,74,0.455,76,0.672,77,2.081,79,1.445,80,0.432,81,0.594,82,1.793,83,0.548,84,0.571,87,0.761,88,0.868,89,0.868,90,0.868,101,0.909,102,0.067,103,0.285,112,4.388,139,1.674,140,1.58,141,3.34,142,3.705,143,2.619,147,3.069,149,4.369,150,2.435,152,2.318,153,3.218,154,1.985,155,3.256,156,1.862,157,2.318,158,3.518,159,3.34,160,3.069,163,2.435,164,3.045,165,3.218,166,1.513,168,1.865,169,1.171,170,1.862,175,2.984,176,0.571,177,1.865,179,3.996,180,2.662,182,2.587,185,1.674,186,4.359,187,3.65,190,1.674,191,3.256,192,1.674,195,2.998,196,3.515,197,2.46,198,3.045,199,2.435,200,2.662,203,2.965,209,1.865,213,2.499,214,2.662,215,1.956,216,2.965,218,2.435,219,3.716,220,3.692,221,2.641,223,2.662,224,1.865,225,1.865,228,3.77,230,0.74,236,3.692,238,5.126,241,1.865,242,3.49,243,3.34,244,4.369,245,2.104,246,3.77,258,0.571,259,0.907,260,0.907,261,0.571,262,0.571,263,0.571,264,0.526,265,0.571,266,0.571,267,0.526,268,0.571,269,0.571,270,0.526,271,0.571,272,0.571,273,0.571,274,0.526,275,1.568,276,0.907,277,1.187,278,1.287,279,0.571,280,0.526,281,1.129,282,0.571,283,0.526,284,0.571,285,0.526,286,0.571,287,0.526,288,0.571,289,0.571,290,0.526,291,0.571,292,0.526,293,0.571,294,0.526,295,0.571,296,0.526,297,0.465,298,0.907,299,0.526,300,0.571,301,0.505,302,0.571,303,0.526,304,1.084,305,1.187,306,1.885,307,0.571,308,0.526,309,0.571,310,0.526,311,0.505,312,0.548,313,0.571,314,0.526,315,0.571,316,0.526,317,0.548,318,0.548,319,0.571,320,0.007,321,0.007,326,1.573,327,0.83,355,0.495,371,1.714,379,0.71,391,1.671,405,1.798,409,2.148,413,2.049,435,0.909,436,1.507,445,1.388,459,2.443,463,1.445,469,1.264,470,1.445,471,1.38,472,2.889,473,2.889,495,1.108,514,2.193,623,2.318,628,3.692,629,2.104,630,2.806,632,2.382,635,3.943,636,1.865,638,1.671,639,1.323,640,1.532,641,1.865,642,1.671,643,1.323,646,0.868,648,0.795,654,1.674,655,1.674,658,4.207,669,2.965,674,3.692,675,4.207,690,2.965,691,5.126,693,3.692,698,1.674,699,1.532,733,1.865,734,3.971,735,3.692,739,4.359,748,2.458,749,0.795,757,3.776,758,1.674,759,2.806,768,3.455,769,2.755,778,3.314,790,1.108,791,2.499,792,2.137,807,1.051,809,0.868,829,1.323,848,1.865,853,2.806,855,2.965,942,1.674,945,3.455,956,3.716,967,4.207,1006,3.314,1180,1.514,1252,4.21,1287,1.532,1384,2.965,1677,2.965,1794,3.257,1795,2.458,1842,2.965,1912,1.865,1916,5.734,1917,1.865,1918,4.265,1919,3.426,1920,4.265,1921,3.426,1922,2.155,1923,4.86,1924,3.426,1925,3.426,1926,2.155,1927,2.155,1928,2.155,1929,2.155,1930,3.426,1931,2.155,1932,2.155,1933,2.155,1934,2.155,1935,2.155,1936,2.155,1937,2.155,1938,2.155,1939,2.155,1940,2.155,1941,3.426,1942,1.865,1943,1.865,1944,1.865,1945,1.865,1946,2.965,1947,2.155,1948,2.155,1949,2.155,1950,2.155,1951,2.155,1952,2.155,1953,2.155,1954,2.155,1955,2.155,1956,2.155,1957,2.155,1958,2.155,1959,2.155,1960,2.155,1961,2.155,1962,3.426,1963,2.155,1964,2.155,1965,2.155,1966,2.155,1967,2.155,1968,2.155,1969,2.155,1970,2.155,1971,2.155,1972,2.155,1973,2.155,1974,2.155,1975,2.155,1976,2.155,1977,2.155,1978,3.426,1979,3.426,1980,3.426,1981,3.426,1982,5.922,1983,5.304,1984,4.265,1985,5.304,1986,3.426,1987,2.155,1988,2.965,1989,3.426,1990,4.265,1991,3.426,1992,3.426,1993,3.426,1994,2.155,1995,2.155,1996,1.865,1997,2.155,1998,4.265,1999,3.426,2000,2.155,2001,2.155,2002,2.155,2003,3.426,2004,2.155,2005,2.155,2006,2.965,2007,3.426,2008,3.426,2009,2.155,2010,3.426,2011,2.155,2012,2.155,2013,2.155,2014,2.965,2015,2.155,2016,2.155,2017,3.426,2018,2.155,2019,2.155,2020,3.426,2021,2.155,2022,3.426,2023,1.865,2024,1.865,2025,2.155,2026,2.155,2027,3.426,2028,2.155,2029,2.155,2030,2.155,2031,2.155]],["title/injectables/ProductsService.html",[322,0.764,2032,2.988]],["body/injectables/ProductsService.html",[3,0.096,4,0.083,9,0.083,34,0.069,35,0.161,36,0.85,42,0.752,46,0.561,49,0.957,51,1.086,52,0.016,53,0.947,54,0.146,55,0.45,60,1.222,64,0.448,65,0.448,74,0.399,80,0.388,86,0.92,102,0.096,103,0.407,120,1.986,121,1.658,122,2.253,166,1.211,215,2.538,320,0.009,321,0.009,322,0.893,324,1.134,326,2.396,328,2.697,330,2.111,332,2.355,333,2.871,336,2.085,337,2.193,338,2.141,345,1.238,353,2.827,355,0.745,371,1.143,373,1.238,375,1.185,376,1.185,377,1.134,378,1.238,379,1.346,380,1.359,381,2.617,382,1.5,383,1.5,384,1.5,385,1.5,519,3.195,520,3.195,580,2.591,632,2.959,635,3.759,639,1.888,648,1.658,659,1.811,759,2.958,769,2.852,807,2.852,809,2.355,829,3.263,851,4.489,853,3.847,945,3.195,949,5.06,950,3.493,1099,4.225,1180,3.231,1253,3.891,1306,3.255,1674,4.093,1680,3.847,2032,3.493,2033,2.661,2034,4.495,2035,5.846,2036,4.495,2037,4.495,2038,3.891,2039,3.074,2040,4.495,2041,4.495,2042,3.891,2043,4.495,2044,3.074,2045,7.311,2046,5.846,2047,4.495,2048,4.495,2049,4.495,2050,4.495,2051,3.074,2052,6.497,2053,4.495,2054,3.074,2055,4.495,2056,4.495,2057,4.495,2058,3.074,2059,4.495,2060,4.495,2061,3.074,2062,4.495,2063,4.495,2064,2.661,2065,2.661]],["title/components/RegisterComponent.html",[0,0.266,308,0.939]],["body/components/RegisterComponent.html",[0,0.381,1,0.799,2,1.148,3,0.102,4,0.088,5,0.866,6,0.979,7,0.866,8,0.866,9,0.088,11,0.866,14,2.005,15,2.005,16,1.196,17,1.716,18,2.03,19,3.622,25,0.799,26,0.799,30,1.351,32,1.196,34,0.074,35,0.168,36,1.061,37,1.876,38,2.554,39,2.317,41,2.417,42,0.786,46,0.858,48,2.755,49,0.837,51,0.547,52,0.016,53,0.803,54,0.074,55,0.227,57,0.678,60,0.786,61,1.148,64,0.477,65,0.477,66,1.379,70,2.222,72,1.446,74,0.503,76,1.466,79,1.983,80,0.412,81,0.902,82,2.22,83,1.53,84,1.245,85,1.26,87,1.156,88,1.318,89,1.318,90,1.318,100,1.593,101,1.379,102,0.102,103,0.433,140,1.494,141,2.992,142,3.095,143,2.009,147,2.992,152,2.555,153,2.555,154,1.853,155,3.095,156,2.555,157,1.778,158,2.418,159,1.778,160,2.555,164,3.095,165,3.271,166,1.375,167,2.887,169,1.778,170,1.778,171,2.153,176,0.866,182,1.596,191,1.682,195,1.596,196,1.596,197,1.517,198,2.418,213,1.682,221,1.778,230,1.189,245,2.009,247,2.71,248,1.156,249,1.156,250,1.156,251,1.156,252,1.156,253,1.156,254,1.156,255,1.156,256,1.156,257,1.156,258,0.866,259,1.245,260,1.245,261,0.866,262,0.866,263,0.866,264,0.799,265,0.866,266,0.866,267,0.799,268,0.866,269,0.866,270,0.799,271,0.866,272,0.866,273,0.866,274,0.799,275,0.866,276,1.245,277,0.799,278,0.866,279,0.866,280,0.799,281,1.458,282,0.866,283,0.799,284,0.866,285,0.799,286,0.866,287,0.799,288,0.866,289,0.866,290,0.799,291,0.866,292,0.799,293,0.866,294,0.799,295,0.866,296,0.799,297,0.706,298,1.245,299,0.799,300,0.866,301,0.767,302,0.866,303,0.799,304,0.832,305,0.799,306,0.799,307,0.866,308,1.469,309,0.866,310,0.799,311,1.29,312,1.4,313,0.866,314,0.799,315,0.866,316,0.799,317,0.832,318,0.832,319,0.866,320,0.009,321,0.009,327,1.26,355,0.333,371,1.739,379,0.678,405,2.321,407,2.71,413,2.538,435,1.379,436,1.662,445,1.411,459,2.352,463,1.379,469,2.22,470,2.321,471,2.218,472,2.685,473,2.685,482,2.433,495,1.682,516,2.71,521,2.153,559,2.009,577,2.325,578,2.325,579,2.325,587,2.555,597,2.325,601,2.542,623,2.992,646,1.318,648,1.207,734,1.778,744,2.009,749,1.207,791,2.83,792,2.425,1007,2.685,1012,2.83,1061,2.83,1063,3.278,1064,3.271,1082,1.682,1444,2.009,1611,4.076,1717,2.542,1759,3.913,1760,3.913,1761,3.913,1762,3.913,1763,3.913,1764,3.913,1769,2.832,1770,5.209,1772,4.07,1775,4.07,1776,4.07,1778,2.325,1779,2.153,1781,2.325,1782,2.832,1783,2.325,1786,2.325,1788,4.277,1789,3.654,1792,2.542,1794,3.38,1795,1.886,1796,2.153,1797,3.913,1798,2.325,1799,3.343,2066,2.832,2067,3.271,2068,4.702,2069,5.209,2070,5.209,2071,3.271,2072,3.271,2073,3.271,2074,3.271,2075,4.702,2076,4.07,2077,3.271,2078,3.271,2079,2.832,2080,3.271,2081,4.07,2082,3.271,2083,3.271,2084,3.271]],["title/components/RegisterProjComponent.html",[0,0.266,310,0.939]],["body/components/RegisterProjComponent.html",[0,0.402,1,0.88,2,1.23,3,0.113,4,0.097,5,0.955,6,1.079,7,0.955,8,0.955,9,0.097,11,0.955,14,2.023,15,2.023,16,1.281,17,1.81,18,2.142,19,3.821,25,0.88,26,0.88,30,1.447,32,1.281,34,0.081,35,0.18,36,0.928,37,1.959,38,2.693,42,0.842,46,0.919,48,2.833,49,0.874,51,0.603,52,0.016,53,0.847,54,0.081,55,0.25,60,0.842,61,1.23,64,0.526,65,0.526,66,1.52,70,2.226,74,0.505,76,1.124,79,2.124,80,0.455,81,0.994,82,2.319,83,1.598,84,1.334,85,1.389,87,1.274,100,1.706,101,1.52,102,0.113,103,0.478,140,1.55,141,3.155,142,3.232,143,2.214,147,3.155,152,2.737,153,2.737,154,1.9,155,3.232,156,2.737,157,1.959,158,2.59,159,1.959,160,2.737,164,3.232,165,3.416,166,1.203,167,3.093,169,1.959,170,1.959,171,2.372,176,0.955,182,1.759,191,1.854,195,1.759,196,1.759,197,1.672,198,2.59,213,1.854,221,1.959,230,1.088,245,2.214,247,2.903,248,1.274,249,1.274,250,1.274,251,1.274,252,1.274,253,1.274,254,1.274,255,1.274,256,1.274,257,1.274,258,0.955,259,1.334,260,1.334,261,0.955,262,0.955,263,0.955,264,0.88,265,0.955,266,0.955,267,0.88,268,0.955,269,0.955,270,0.88,271,0.955,272,0.955,273,0.955,274,0.88,275,0.955,276,1.334,277,0.88,278,0.955,279,0.955,280,0.88,281,1.538,282,0.955,283,0.88,284,0.955,285,0.88,286,0.955,287,0.88,288,0.955,289,0.955,290,0.88,291,0.955,292,0.88,293,0.955,294,0.88,295,0.955,296,0.88,297,1.357,298,1.334,299,0.88,300,0.955,301,0.845,302,0.955,303,0.88,304,0.917,305,0.88,306,0.88,307,0.955,308,0.88,309,0.955,310,1.535,311,1.682,312,1.476,313,0.955,314,0.88,315,0.955,316,0.88,317,1.742,318,0.917,319,0.955,320,0.01,321,0.01,371,1.281,401,1.959,436,1.274,441,2.372,442,2.372,445,1.181,459,2.319,463,1.52,482,2.566,495,2.985,516,3.347,535,2.59,537,2.801,552,2.563,559,2.214,623,3.155,648,1.33,734,1.959,749,1.33,791,1.854,792,2.029,1007,2.832,1012,2.985,1061,2.985,1063,3.401,1064,3.416,1082,1.854,1554,2.214,1611,4.208,1759,4.127,1760,4.127,1761,4.127,1762,4.127,1763,4.127,1764,4.127,1778,2.563,1779,2.372,1781,2.563,1783,2.563,1788,2.801,1792,2.801,1794,3.565,1795,2.078,1796,2.372,1797,4.127,1798,2.563,1799,3.581,1802,2.563,1803,3.12,1804,3.914,1805,3.12,1806,5.441,1807,2.801,1808,4.36,1810,3.12,1811,3.12,1812,3.914,1813,3.12,1816,3.12,1818,3.12,2069,5.441,2070,5.441,2081,4.36,2085,5.725,2086,5.725,2087,3.605,2088,3.605,2089,3.605,2090,3.605,2091,3.605]],["title/injectables/ShopCartService.html",[322,0.764,2092,2.988]],["body/injectables/ShopCartService.html",[3,0.088,4,0.075,9,0.075,34,0.063,35,0.15,36,0.806,42,0.703,46,0.513,49,0.953,51,1.09,52,0.016,53,0.951,54,0.147,55,0.452,60,1.225,64,0.41,65,0.41,74,0.43,80,0.354,86,0.841,102,0.088,103,0.372,121,1.552,122,2.156,215,2.829,320,0.008,321,0.008,322,0.836,324,1.037,326,2.405,328,2.702,332,2.534,333,2.779,338,2.031,345,1.132,353,2.829,355,0.758,371,1.07,373,1.132,375,1.083,376,1.083,377,1.037,378,1.132,379,1.351,380,1.242,381,2.627,445,0.986,514,2.163,519,3.978,520,3.978,580,3.226,635,2.163,648,2.064,659,2.255,725,2.184,729,3.268,753,1.726,754,2.184,755,3.68,756,2.184,759,4.663,765,2.99,769,3.63,807,3.711,809,3.09,815,2.99,825,4.348,829,4.209,838,3.268,851,4.71,853,4.411,945,2.99,961,3.268,1306,3.238,1377,3.641,1390,2.433,1395,2.99,1674,3.943,1680,2.768,1698,1.998,1721,4.26,2038,3.641,2042,3.641,2064,2.433,2065,2.433,2092,3.268,2093,6.213,2094,2.433,2095,6.289,2096,4.207,2097,5.597,2098,4.207,2099,4.207,2100,4.207,2101,2.811,2102,4.207,2103,4.207,2104,4.207,2105,2.811,2106,4.207,2107,4.207,2108,4.207,2109,4.207,2110,4.207,2111,2.811,2112,4.207,2113,2.811,2114,4.207,2115,4.207,2116,4.207,2117,4.207,2118,2.811,2119,4.207,2120,4.207,2121,4.207,2122,4.207,2123,4.207,2124,4.207,2125,2.811,2126,4.207,2127,4.207,2128,2.811,2129,4.207,2130,4.207,2131,4.207,2132,2.811,2133,2.811,2134,2.811,2135,2.811,2136,2.811,2137,2.811,2138,2.811]],["title/components/ThemeToggleComponent.html",[0,0.266,25,0.939]],["body/components/ThemeToggleComponent.html",[0,0.376,1,0.781,2,1.13,3,0.1,4,0.086,5,0.847,6,0.957,7,0.847,8,0.847,9,0.086,11,0.847,14,2.001,15,2.001,16,1.177,17,1.695,25,1.454,26,0.781,30,1.329,32,1.177,34,0.072,35,0.165,36,1.268,37,2.441,38,2.522,39,2.018,41,2.105,42,0.774,46,0.992,49,1.042,51,0.535,52,0.016,53,0.793,54,0.104,55,0.222,57,1.126,60,0.909,61,1.608,64,1.05,65,1.05,66,1.951,68,2.667,72,2.045,74,0.495,76,0.997,79,1.951,80,0.403,81,0.882,82,1.18,83,1.177,84,0.847,85,1.233,88,1.289,89,1.289,90,1.289,95,4.966,100,1.567,101,1.349,102,0.1,103,0.424,128,2.257,140,1.481,154,1.577,166,1.365,170,2.954,176,0.847,179,2.667,230,0.999,247,2.667,248,1.131,249,1.131,250,1.131,251,1.131,252,1.131,253,1.131,254,1.131,255,1.131,256,1.131,257,1.131,258,0.847,259,1.225,260,1.225,261,0.847,262,0.847,263,0.847,264,0.781,265,0.847,266,0.847,267,0.781,268,0.847,269,0.847,270,0.781,271,0.847,272,0.847,273,0.847,274,0.781,275,0.847,276,1.225,277,0.781,278,0.847,279,0.847,280,0.781,281,1.44,282,0.847,283,0.781,284,0.847,285,0.781,286,0.847,287,0.781,288,0.847,289,0.847,290,0.781,291,0.847,292,0.781,293,0.847,294,0.781,295,0.847,296,0.781,297,0.691,298,1.225,299,0.781,300,0.847,301,0.75,302,0.847,303,0.781,304,0.814,305,0.781,306,0.781,307,0.847,308,0.781,309,0.847,310,0.781,311,0.75,312,1.854,313,0.847,314,0.781,315,0.847,316,0.781,317,0.814,318,0.814,319,0.847,320,0.009,321,0.009,327,1.233,334,4.086,355,0.692,371,1.515,379,0.663,405,2.292,413,1.349,430,2.842,435,1.349,436,1.131,445,1.592,459,1.707,460,2.486,469,2.331,470,1.951,471,1.864,503,4.705,504,4.005,508,2.769,580,3.133,646,1.289,648,1.707,659,2.19,705,3.577,748,3.133,749,1.18,790,1.645,791,3.063,792,2.4,851,1.965,969,5.156,2139,6.532,2140,2.769,2141,6.32,2142,5.436,2143,3.199,2144,4.628,2145,5.436,2146,5.436,2147,4.628,2148,5.957,2149,4.628,2150,4.628,2151,3.199,2152,3.199,2153,3.199,2154,3.199,2155,3.199,2156,3.199,2157,4.628,2158,3.199,2159,4.628,2160,4.628,2161,3.199,2162,4.628,2163,3.199,2164,4.628,2165,3.199,2166,3.199,2167,3.199,2168,3.199,2169,3.199,2170,3.199,2171,2.769,2172,3.199,2173,3.199,2174,4.628,2175,5.436,2176,3.199,2177,7.547,2178,4.628,2179,4.628,2180,3.199,2181,3.199,2182,3.199,2183,5.436,2184,4.005,2185,4.005,2186,5.436,2187,2.769,2188,2.769,2189,4.628,2190,3.199,2191,3.199,2192,3.199,2193,3.199,2194,2.769]],["title/injectables/UserAchievementsService.html",[41,1.359,322,0.764]],["body/injectables/UserAchievementsService.html",[3,0.151,4,0.057,9,0.057,34,0.048,35,0.121,36,1.118,37,1.965,38,1.96,39,1.995,41,1.197,42,0.566,46,0.618,49,0.961,51,1.054,52,0.016,53,0.919,54,0.149,55,0.437,57,1.339,60,1.219,61,0.519,64,0.494,65,0.768,70,1.824,74,0.378,80,0.268,82,1.779,83,0.54,84,0.563,86,0.636,102,0.066,103,0.282,108,2.633,120,0.939,121,1.25,122,1.858,166,1.22,175,2.081,207,3.747,215,1.25,320,0.007,321,0.007,322,0.673,324,0.784,326,2.325,328,2.689,330,1.824,332,1.365,334,4.413,336,1.572,338,1.703,345,0.856,348,1.155,353,2.72,355,0.803,363,2.933,371,1.603,373,0.856,374,1.651,375,0.819,376,0.819,377,0.784,379,1.572,380,0.939,381,2.784,407,1.953,419,2.658,426,1.742,432,2.781,445,1.13,459,2.434,460,1.651,469,2.629,473,1.037,474,4.859,492,1.651,550,3.747,646,1.365,648,1.25,650,1.839,651,1.839,659,2.262,705,1.398,790,2.479,792,2.373,805,1.651,814,1.651,818,1.651,820,1.651,828,1.651,833,1.651,843,1.651,873,2.933,942,1.651,1090,2.781,1091,1.839,1102,1.839,1107,1.839,1111,1.839,1112,1.839,1203,1.839,1235,1.839,1240,1.839,1242,1.839,1246,1.839,1289,1.839,1294,1.839,1298,1.839,1299,1.839,1303,1.839,1365,1.651,1554,3.447,1725,1.511,1727,4.859,1784,1.839,1789,1.651,1823,2.633,1909,1.839,1910,1.839,1942,1.839,1943,1.839,1944,1.839,1945,1.839,1946,1.839,2076,1.839,2079,1.839,2184,1.839,2185,1.839,2187,1.839,2188,1.839,2194,1.839,2195,6.051,2196,1.839,2197,4.226,2198,4.226,2199,3.389,2200,3.389,2201,4.822,2202,4.822,2203,3.389,2204,3.389,2205,3.389,2206,3.389,2207,4.822,2208,3.389,2209,3.389,2210,3.389,2211,2.125,2212,3.389,2213,3.389,2214,3.389,2215,4.226,2216,3.389,2217,3.389,2218,2.125,2219,3.389,2220,3.389,2221,4.822,2222,4.822,2223,2.125,2224,4.822,2225,3.389,2226,2.125,2227,3.389,2228,2.125,2229,3.389,2230,3.389,2231,3.389,2232,2.125,2233,3.389,2234,3.389,2235,3.389,2236,3.389,2237,2.125,2238,3.389,2239,3.389,2240,4.822,2241,2.125,2242,3.389,2243,3.389,2244,2.125,2245,3.389,2246,2.125,2247,3.389,2248,2.125,2249,3.389,2250,3.389,2251,3.389,2252,2.125,2253,2.125,2254,5.89,2255,2.125,2256,2.125,2257,2.125,2258,2.125,2259,2.125,2260,5.614,2261,2.125,2262,4.226,2263,2.125,2264,2.125,2265,2.125,2266,2.125,2267,4.226,2268,2.125,2269,1.839,2270,3.389,2271,4.226,2272,5.614,2273,4.859,2274,5.614,2275,4.226,2276,5.268,2277,3.389,2278,2.125,2279,3.389,2280,2.125,2281,3.389,2282,3.389,2283,2.125,2284,2.125,2285,2.125,2286,2.125,2287,2.125,2288,2.125,2289,2.125,2290,2.125,2291,2.125,2292,2.125,2293,2.125]],["title/components/UserPageComponent.html",[0,0.266,314,0.939]],["body/components/UserPageComponent.html",[0,0.358,1,0.5,2,0.803,3,0.064,4,0.055,5,0.542,6,0.613,7,0.542,8,0.542,9,0.055,11,0.542,14,1.9,15,1.9,16,0.837,17,1.286,18,1.521,23,2.714,24,2.377,25,1.153,26,0.5,27,2.714,28,2.012,29,2.714,30,0.945,32,0.837,34,0.046,35,0.118,36,1.165,37,2.225,42,0.55,43,2.339,46,0.6,48,1.902,49,1.02,51,0.923,52,0.016,53,0.88,54,0.144,55,0.382,56,2.339,57,1.144,59,1.348,60,1.009,61,1.711,64,0.985,65,0.985,70,2.161,74,0.489,76,0.639,79,1.387,80,0.258,81,0.565,83,1.476,84,0.871,85,0.789,87,0.724,94,1.773,95,1.348,96,1.592,97,1.181,98,1.456,100,1.115,101,0.864,102,0.064,103,0.271,105,1.592,108,2.557,137,2.714,139,1.592,140,1.559,141,2.811,142,2.659,146,1.773,147,2.566,148,3.57,149,3.357,150,1.456,152,3.001,153,3.384,154,1.93,155,3.42,156,1.788,157,3.001,158,2.659,159,2.241,160,3.001,163,3.357,164,2.12,165,1.788,166,0.978,167,1.258,169,1.113,170,1.113,176,0.542,179,3.949,180,2.557,182,0.999,186,2.714,187,2.377,190,1.592,191,1.692,192,1.592,195,2.523,196,3.038,197,0.95,198,1.053,199,4.29,213,2.659,214,3.204,219,2.714,223,3.669,226,1.773,228,3.357,230,1.479,242,2.714,243,3.909,244,4.126,246,3.926,247,1.181,248,1.457,249,0.724,250,0.724,251,0.724,252,0.724,253,0.724,254,0.724,255,0.724,256,0.724,257,0.724,258,0.542,259,0.871,260,0.871,261,0.542,262,0.542,263,0.542,264,0.5,265,0.542,266,0.542,267,0.5,268,0.542,269,0.542,270,0.5,271,0.542,272,0.542,273,0.542,274,0.5,275,1.092,276,0.871,277,0.5,278,0.542,279,0.542,280,1.153,281,1.649,282,0.542,283,1.153,284,0.542,285,1.153,286,0.542,287,0.5,288,0.542,289,0.542,290,0.5,291,0.542,292,0.5,293,0.542,294,0.5,295,0.542,296,0.5,297,0.442,298,0.871,299,0.5,300,0.542,301,0.48,302,0.542,303,0.5,304,0.521,305,0.5,306,0.5,307,0.542,308,0.5,309,0.542,310,0.5,311,0.48,312,0.521,313,0.542,314,1.153,315,0.542,316,0.5,317,0.521,318,0.521,319,0.542,320,0.006,321,0.006,330,2.368,355,0.634,379,0.854,401,2.566,403,3.204,409,2.087,419,1.387,423,2.557,426,1.692,428,2.557,432,4.563,436,1.457,441,1.348,442,1.348,445,0.48,446,1.773,447,1.592,459,1.521,463,2.626,488,1.113,521,2.165,527,1.456,529,3.357,553,1.592,567,1.773,569,1.773,630,2.714,632,1.739,635,2.428,638,2.012,639,1.258,642,2.012,643,1.258,659,2.225,673,3.669,679,3.57,700,1.592,734,1.788,747,2.377,748,2.377,749,0.756,851,2.532,956,3.107,973,3.669,1004,1.592,1006,3.669,1007,2.012,1008,2.532,1009,2.532,1010,2.714,1011,2.714,1012,2.12,1013,2.714,1017,4.087,1036,2.241,1061,2.984,1063,1.053,1064,3.001,1065,4.291,1073,2.339,1082,1.053,1084,1.456,1085,1.181,1086,1.592,1087,1.773,1115,3.001,1135,1.592,1137,3.204,1247,1.592,1252,3.357,1287,1.456,1611,2.021,1680,2.714,1786,3.926,1787,1.456,1795,1.181,1796,1.348,1887,1.773,1889,2.848,1905,2.848,1988,1.773,1996,1.773,2006,3.57,2014,2.848,2023,1.773,2024,1.773,2269,3.57,2294,5.727,2295,6.38,2296,1.773,2297,2.048,2298,3.291,2299,4.124,2300,4.124,2301,4.124,2302,4.124,2303,4.124,2304,4.124,2305,4.124,2306,4.124,2307,3.291,2308,3.291,2309,3.291,2310,3.291,2311,4.124,2312,2.048,2313,2.048,2314,3.291,2315,2.048,2316,3.291,2317,2.048,2318,3.291,2319,2.048,2320,2.048,2321,2.048,2322,2.048,2323,3.291,2324,2.048,2325,2.048,2326,2.048,2327,3.291,2328,5.523,2329,2.048,2330,2.048,2331,2.048,2332,2.048,2333,2.048,2334,3.291,2335,2.048,2336,2.048,2337,2.048,2338,3.291,2339,2.048,2340,2.048,2341,2.048,2342,4.124,2343,2.048,2344,2.048,2345,2.048,2346,2.048,2347,3.291,2348,2.048,2349,3.291,2350,2.048,2351,2.048,2352,2.048,2353,4.124,2354,2.048,2355,2.048,2356,3.291,2357,4.124,2358,2.048,2359,3.291,2360,5.523,2361,4.124,2362,2.048,2363,2.048,2364,3.291,2365,2.048,2366,2.048,2367,2.048,2368,3.291,2369,2.048,2370,2.048,2371,4.124,2372,4.124,2373,2.048,2374,2.048,2375,2.048,2376,2.048,2377,4.124,2378,2.048,2379,2.048,2380,4.124,2381,2.048,2382,3.291,2383,3.291,2384,3.291,2385,4.124,2386,2.048,2387,2.048]],["title/components/UserPageProjComponent.html",[0,0.266,316,0.939]],["body/components/UserPageProjComponent.html",[0,0.404,1,0.887,2,1.237,3,0.114,4,0.098,5,0.962,7,0.962,8,0.962,9,0.098,11,0.962,14,2.024,15,2.024,16,1.288,17,1.818,18,2.151,23,3.837,24,2.095,25,0.887,26,0.887,27,2.391,28,2.845,29,2.391,32,1.288,34,0.082,35,0.181,36,1.223,37,2.306,39,2.327,41,2.491,42,0.847,43,3.601,46,0.924,48,2.541,49,1.049,51,0.847,52,0.016,53,0.92,54,0.142,55,0.351,56,2.583,57,1.049,59,2.391,60,1.109,61,1.677,64,1.002,65,1.002,68,2.095,72,1.606,74,0.484,76,1.133,80,0.458,81,1.002,83,1.483,84,0.962,85,1.4,87,1.284,88,1.464,89,1.464,90,1.464,102,0.114,103,0.482,140,1.896,154,1.67,166,1.208,176,0.962,230,1.552,258,0.962,259,1.341,260,1.341,261,0.962,262,0.962,263,0.962,264,1.54,265,1.341,266,0.962,267,0.887,268,0.962,269,0.962,270,0.887,271,0.962,272,0.962,273,0.962,274,0.887,275,0.962,276,1.341,277,0.887,278,0.962,279,0.962,280,0.887,281,1.544,282,0.962,283,0.887,284,0.962,285,0.887,286,0.962,287,0.887,288,0.962,289,0.962,290,0.887,291,0.962,292,0.887,293,0.962,294,0.887,295,0.962,296,0.887,297,0.785,298,1.341,299,0.887,300,0.962,301,0.852,302,0.962,303,0.887,304,0.924,305,0.887,306,0.887,307,0.962,308,0.887,309,0.962,310,0.887,311,0.852,312,0.924,313,0.962,314,0.887,315,0.962,316,1.54,317,1.483,318,0.924,319,0.962,320,0.01,321,0.01,327,1.4,355,0.37,389,2.824,401,3.428,403,4.531,404,5.047,405,2.459,409,2.788,411,3.146,413,1.532,419,2.136,423,3.936,426,3.243,428,3.936,430,3.111,435,1.532,436,1.284,441,2.391,442,2.391,445,1.187,469,1.34,470,1.532,471,1.464,501,3.936,529,4.145,646,1.464,647,2.824,747,3.361,748,3.361,749,1.34,973,4.531,1007,2.845,1008,3.581,1009,3.581,1010,3.837,1011,3.837,1012,2.998,1013,3.837,1085,2.095,1137,4.531,1802,2.583,1804,3.936,1807,2.824,1812,3.936,1823,4.531,1824,5.047,1835,3.146,2294,5.904,2388,6.577,2389,5.066,2390,3.634,2391,3.634,2392,3.634,2393,3.634,2394,3.634,2395,3.634,2396,3.634,2397,3.634,2398,3.634,2399,3.634,2400,3.634,2401,3.634]],["title/coverage.html",[2402,4.559]],["body/coverage.html",[0,0.555,1,1.001,9,0.11,10,3.55,25,1.001,26,1.001,39,1.389,41,1.449,52,0.016,54,0.092,70,1.332,92,2.915,95,2.698,97,2.364,140,1.555,166,1.691,230,0.885,264,1.001,267,1.001,270,1.001,274,1.001,277,1.001,280,1.001,283,1.001,285,1.001,287,1.001,290,1.001,292,1.001,294,1.001,296,1.001,299,1.001,301,0.961,303,1.001,304,1.399,305,1.001,306,1.343,308,1.001,310,1.001,314,1.001,316,1.001,320,0.011,321,0.011,322,1.553,323,2.915,325,3.55,348,2.229,388,3.55,389,3.186,390,3.55,401,2.229,439,2.698,477,3.55,478,3.186,479,3.55,496,3.55,510,3.55,511,3.55,535,2.109,571,3.55,587,2.229,603,3.55,604,3.55,620,3.55,621,3.186,622,4.275,632,1.729,635,2.109,640,2.915,642,2.001,656,3.55,657,3.55,734,2.229,736,0.952,737,2.915,739,4.367,740,4.275,741,4.275,743,2.364,753,2.518,755,2.518,841,3.55,867,3.55,1003,4.414,1004,3.186,1005,3.55,1036,2.229,1135,3.186,1136,3.55,1155,2.698,1166,2.698,1247,3.186,1248,3.55,1305,3.186,1306,3.513,1307,3.55,1335,3.186,1336,3.55,1394,3.186,1395,2.915,1396,3.55,1419,2.915,1431,3.186,1432,3.55,1441,2.518,1469,3.186,1470,3.55,1479,2.364,1509,3.186,1510,3.55,1519,2.518,1542,3.186,1543,3.55,1573,3.186,1574,3.55,1599,3.55,1600,3.55,1601,3.55,1671,3.55,1674,2.698,1675,3.55,1676,3.55,1679,3.55,1682,3.55,1683,3.55,1686,3.55,1690,3.55,1694,3.55,1698,2.915,1699,3.55,1702,3.55,1706,3.55,1710,3.55,1713,3.55,1719,3.55,1721,2.915,1722,3.55,1723,3.55,1724,3.55,1725,2.915,1726,3.55,1728,3.55,1729,3.55,1730,3.55,1752,3.55,1758,3.55,1800,3.55,1801,3.55,1802,4.414,1819,3.55,1884,3.55,1916,3.55,1917,3.55,2032,3.186,2033,3.55,2066,3.55,2085,3.55,2086,3.55,2092,3.186,2093,3.55,2094,3.55,2139,3.55,2140,3.55,2195,3.55,2196,3.55,2294,4.275,2295,3.55,2296,3.55,2388,3.55,2402,3.55,2403,4.101,2404,4.101,2405,4.101,2406,6.636,2407,3.55,2408,4.101,2409,3.55,2410,4.101,2411,6.21,2412,6.921,2413,4.101,2414,4.101,2415,4.101,2416,4.101,2417,5.502,2418,7.279,2419,5.502,2420,4.101,2421,4.101,2422,4.101,2423,4.101,2424,4.101,2425,4.101,2426,4.101,2427,7.125,2428,6.21,2429,4.101,2430,5.502,2431,5.502,2432,4.101,2433,4.101,2434,4.101,2435,4.101,2436,4.101,2437,7.279,2438,7.279,2439,5.502,2440,5.502,2441,4.101,2442,4.101,2443,4.101]],["title/dependencies.html",[2444,2.772,2445,4.008]],["body/dependencies.html",[52,0.016,80,0.718,81,1.571,83,2.03,84,1.508,85,2.195,86,1.704,87,2.013,320,0.013,321,0.013,438,4.458,439,3.749,488,3.096,698,5.264,699,4.816,701,4.931,749,2.101,1085,3.283,1779,3.749,2445,4.931,2446,5.697,2447,6.775,2448,7.835,2449,5.697,2450,5.697,2451,5.697,2452,5.697,2453,5.697,2454,5.697,2455,7.232,2456,6.775,2457,7.232,2458,5.697,2459,5.697,2460,5.697,2461,6.775,2462,5.697,2463,5.697,2464,5.697,2465,5.697,2466,5.697,2467,5.697,2468,5.697,2469,5.697,2470,5.697,2471,5.697,2472,5.697]],["title/index.html",[34,0.072,2473,3.202,2474,3.202]],["body/index.html",[0,0.49,2,1.322,4,0.145,52,0.013,64,0.959,70,1.76,107,6.369,124,6.526,130,4.688,140,1.269,207,4.208,211,4.688,318,1.377,320,0.013,321,0.013,328,2.827,506,4.688,699,3.85,1786,3.85,2171,6.634,2273,4.688,2475,7.077,2476,5.416,2477,6.573,2478,4.688,2479,5.416,2480,6.573,2481,7.077,2482,5.416,2483,7.539,2484,5.416,2485,6.573,2486,5.416,2487,5.416,2488,6.573,2489,5.416,2490,5.416,2491,5.416,2492,5.416,2493,5.416,2494,6.573,2495,6.573,2496,5.416,2497,5.416,2498,5.416,2499,7.077,2500,5.416,2501,5.416,2502,5.416,2503,5.416,2504,5.416,2505,5.416,2506,7.077,2507,5.416,2508,5.416,2509,5.416,2510,5.416,2511,5.416,2512,5.416,2513,5.416,2514,5.416,2515,5.416,2516,5.416,2517,6.573,2518,7.077,2519,5.416,2520,5.416,2521,5.416,2522,5.416,2523,5.416,2524,5.416,2525,7.077,2526,5.416,2527,7.664,2528,5.416,2529,6.573,2530,5.416,2531,5.416,2532,5.416,2533,5.416,2534,5.416,2535,5.416,2536,5.416,2537,5.416,2538,5.416,2539,5.416,2540,5.416,2541,5.416,2542,5.416,2543,5.416,2544,4.208,2545,5.416]],["title/modules.html",[2546,4.559]],["body/modules.html",[52,0.014,320,0.014,321,0.014,2546,5.515]],["title/overview.html",[2544,4.093]],["body/overview.html",[2,1.544,52,0.014,320,0.014,321,0.014,324,2.332,738,1.892,875,4.494,884,5.473,892,5.473,2544,4.913]],["title/properties.html",[35,0.165,2444,2.772]],["body/properties.html",[35,0.227,52,0.015,320,0.014,321,0.014,2478,5.494,2547,6.347]],["title/miscellaneous/variables.html",[2548,2.772,2549,4.008]],["body/miscellaneous/variables.html",[34,0.138,52,0.016,54,0.138,64,0.891,65,0.891,320,0.014,321,0.014,323,4.344,659,2.462,1603,6.111,2407,5.29,2409,6.111,2548,5.29,2549,5.29,2550,6.112,2551,6.112,2552,6.112,2553,6.112,2554,6.112,2555,6.112,2556,6.112,2557,6.112]]],"invertedIndex":[["",{"_index":52,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":166,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["0.0.0",{"_index":2547,"title":{},"body":{"properties.html":{}}}],["0.125rem",{"_index":217,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.15",{"_index":1989,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["0.15.0",{"_index":2472,"title":{},"body":{"dependencies.html":{}}}],["0.25rem",{"_index":167,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["0.2s",{"_index":237,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.3s",{"_index":1984,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["0.5rem",{"_index":160,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["0.5s",{"_index":1999,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["0.75rem",{"_index":2006,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["0.8",{"_index":1963,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["0.875rem",{"_index":2017,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["0/1",{"_index":2410,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":2424,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":2429,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":2413,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":2425,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":2417,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":2420,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":2416,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":2411,"title":{},"body":{"coverage.html":{}}}],["0/20",{"_index":2414,"title":{},"body":{"coverage.html":{}}}],["0/21",{"_index":2422,"title":{},"body":{"coverage.html":{}}}],["0/23",{"_index":2426,"title":{},"body":{"coverage.html":{}}}],["0/26",{"_index":2415,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":2406,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":2412,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":2418,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":2427,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":2428,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":2423,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":2419,"title":{},"body":{"coverage.html":{}}}],["0000000000",{"_index":601,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["01",{"_index":157,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["02",{"_index":245,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["03",{"_index":226,"title":{},"body":{"components/AboutComponent.html":{},"components/UserPageComponent.html":{}}}],["06",{"_index":1447,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["1",{"_index":215,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["1.125rem",{"_index":203,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["1.25rem",{"_index":2014,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["1.2rem",{"_index":1914,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["1.5",{"_index":192,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["1.5rem",{"_index":214,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["1.75rem",{"_index":2381,"title":{},"body":{"components/UserPageComponent.html":{}}}],["1/9",{"_index":2421,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":471,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["100",{"_index":734,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["1000",{"_index":1968,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["100vh",{"_index":1796,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["1024",{"_index":1188,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["1024}mb",{"_index":1222,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["11",{"_index":867,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["11/15",{"_index":2442,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":869,"title":{},"body":{"injectables/ConfigService.html":{}}}],["1200px",{"_index":1878,"title":{},"body":{"components/PageCartComponent.html":{}}}],["12px",{"_index":2385,"title":{},"body":{"components/UserPageComponent.html":{}}}],["13",{"_index":871,"title":{},"body":{"injectables/ConfigService.html":{}}}],["14",{"_index":873,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{}}}],["14).subscribe",{"_index":2251,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["14).subscribe(ach",{"_index":2221,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["14).subscribe(exists",{"_index":2214,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["15",{"_index":875,"title":{},"body":{"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{},"overview.html":{}}}],["16",{"_index":877,"title":{},"body":{"injectables/ConfigService.html":{}}}],["16px",{"_index":148,"title":{},"body":{"components/AboutComponent.html":{},"components/UserPageComponent.html":{}}}],["17",{"_index":879,"title":{},"body":{"injectables/ConfigService.html":{}}}],["18",{"_index":113,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["18px",{"_index":205,"title":{},"body":{"components/AboutComponent.html":{}}}],["19",{"_index":882,"title":{},"body":{"injectables/ConfigService.html":{}}}],["19.1.2",{"_index":2467,"title":{},"body":{"dependencies.html":{}}}],["19.2.0",{"_index":2448,"title":{},"body":{"dependencies.html":{}}}],["19.2.10",{"_index":2447,"title":{},"body":{"dependencies.html":{}}}],["19.2.8",{"_index":2479,"title":{},"body":{"index.html":{}}}],["1px",{"_index":224,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["1rem",{"_index":147,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["2",{"_index":851,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["2).subscribe(q",{"_index":2121,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["2.3.0",{"_index":2470,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":884,"title":{},"body":{"injectables/ConfigService.html":{},"overview.html":{}}}],["200",{"_index":132,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{}}}],["2000",{"_index":2082,"title":{},"body":{"components/RegisterComponent.html":{}}}],["200px",{"_index":2024,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["201",{"_index":979,"title":{},"body":{"injectables/ConfigService.html":{}}}],["2025",{"_index":1446,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["204",{"_index":981,"title":{},"body":{"injectables/ConfigService.html":{}}}],["20px",{"_index":2378,"title":{},"body":{"components/UserPageComponent.html":{}}}],["21",{"_index":886,"title":{},"body":{"injectables/ConfigService.html":{}}}],["212529",{"_index":1841,"title":{},"body":{"components/NavbarComponent.html":{}}}],["22",{"_index":888,"title":{},"body":{"injectables/ConfigService.html":{}}}],["22t12:00:00",{"_index":1448,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["23",{"_index":890,"title":{},"body":{"injectables/ConfigService.html":{}}}],["24",{"_index":892,"title":{},"body":{"injectables/ConfigService.html":{},"overview.html":{}}}],["24px",{"_index":1988,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["25",{"_index":894,"title":{},"body":{"injectables/ConfigService.html":{}}}],["255",{"_index":2022,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["26",{"_index":896,"title":{},"body":{"injectables/ConfigService.html":{}}}],["27",{"_index":898,"title":{},"body":{"injectables/ConfigService.html":{}}}],["28",{"_index":900,"title":{},"body":{"injectables/ConfigService.html":{}}}],["280px",{"_index":1994,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["29",{"_index":902,"title":{},"body":{"injectables/ConfigService.html":{}}}],["2px",{"_index":234,"title":{},"body":{"components/AboutComponent.html":{}}}],["2rem",{"_index":222,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{}}}],["2xx",{"_index":977,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3",{"_index":853,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpOrderCompositionsService.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["30",{"_index":904,"title":{},"body":{"injectables/ConfigService.html":{}}}],["300px",{"_index":1913,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["301",{"_index":984,"title":{},"body":{"injectables/ConfigService.html":{}}}],["302",{"_index":986,"title":{},"body":{"injectables/ConfigService.html":{}}}],["31",{"_index":906,"title":{},"body":{"injectables/ConfigService.html":{}}}],["32",{"_index":908,"title":{},"body":{"injectables/ConfigService.html":{}}}],["32rem",{"_index":1798,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["33",{"_index":910,"title":{},"body":{"injectables/ConfigService.html":{}}}],["34",{"_index":912,"title":{},"body":{"injectables/ConfigService.html":{}}}],["35",{"_index":914,"title":{},"body":{"injectables/ConfigService.html":{}}}],["36",{"_index":916,"title":{},"body":{"injectables/ConfigService.html":{}}}],["37",{"_index":918,"title":{},"body":{"injectables/ConfigService.html":{}}}],["38",{"_index":920,"title":{},"body":{"injectables/ConfigService.html":{}}}],["39",{"_index":922,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3xx",{"_index":982,"title":{},"body":{"injectables/ConfigService.html":{}}}],["4",{"_index":855,"title":{},"body":{"injectables/ConfigService.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["4.0.2",{"_index":2460,"title":{},"body":{"dependencies.html":{}}}],["4.34.0",{"_index":2457,"title":{},"body":{"dependencies.html":{}}}],["4.35.0",{"_index":2455,"title":{},"body":{"dependencies.html":{}}}],["4.36.0",{"_index":2456,"title":{},"body":{"dependencies.html":{}}}],["4.37.0",{"_index":2463,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":2436,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":924,"title":{},"body":{"injectables/ConfigService.html":{}}}],["400",{"_index":989,"title":{},"body":{"injectables/ConfigService.html":{}}}],["400px",{"_index":1995,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["401",{"_index":133,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["403",{"_index":992,"title":{},"body":{"injectables/ConfigService.html":{}}}],["404",{"_index":134,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["409",{"_index":995,"title":{},"body":{"injectables/ConfigService.html":{}}}],["41",{"_index":926,"title":{},"body":{"injectables/ConfigService.html":{}}}],["42",{"_index":928,"title":{},"body":{"injectables/ConfigService.html":{}}}],["43",{"_index":930,"title":{},"body":{"injectables/ConfigService.html":{}}}],["44",{"_index":932,"title":{},"body":{"injectables/ConfigService.html":{}}}],["45",{"_index":934,"title":{},"body":{"injectables/ConfigService.html":{}}}],["46",{"_index":936,"title":{},"body":{"injectables/ConfigService.html":{}}}],["47",{"_index":938,"title":{},"body":{"injectables/ConfigService.html":{}}}],["47.9375rem",{"_index":171,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["48",{"_index":940,"title":{},"body":{"injectables/ConfigService.html":{}}}],["480px",{"_index":2025,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["4px",{"_index":168,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["4xx",{"_index":987,"title":{},"body":{"injectables/ConfigService.html":{}}}],["5",{"_index":857,"title":{},"body":{"injectables/ConfigService.html":{},"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{}}}],["50",{"_index":112,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["50/50",{"_index":2400,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["500",{"_index":135,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["5000",{"_index":1118,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["503",{"_index":999,"title":{},"body":{"injectables/ConfigService.html":{}}}],["5mb",{"_index":1200,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["5xx",{"_index":996,"title":{},"body":{"injectables/ConfigService.html":{}}}],["6",{"_index":859,"title":{},"body":{"injectables/ConfigService.html":{}}}],["6.7.2",{"_index":2454,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":2438,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":2435,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":2010,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["60px",{"_index":1881,"title":{},"body":{"components/PageCartComponent.html":{}}}],["66",{"_index":2434,"title":{},"body":{"coverage.html":{}}}],["6px",{"_index":2379,"title":{},"body":{"components/UserPageComponent.html":{}}}],["6rem",{"_index":2019,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["7",{"_index":861,"title":{},"body":{"injectables/ConfigService.html":{}}}],["7.8.0",{"_index":2468,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":2433,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":2431,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":2432,"title":{},"body":{"coverage.html":{}}}],["700",{"_index":201,"title":{},"body":{"components/AboutComponent.html":{}}}],["73",{"_index":2441,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":2437,"title":{},"body":{"coverage.html":{}}}],["767px",{"_index":173,"title":{},"body":{"components/AboutComponent.html":{}}}],["768px",{"_index":2023,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["77",{"_index":2430,"title":{},"body":{"coverage.html":{}}}],["79990001122",{"_index":575,"title":{},"body":{"injectables/AuthService.html":{}}}],["8",{"_index":118,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["8/10",{"_index":2440,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":2439,"title":{},"body":{"coverage.html":{}}}],["800px",{"_index":146,"title":{},"body":{"components/AboutComponent.html":{},"components/UserPageComponent.html":{}}}],["888",{"_index":1915,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["8px",{"_index":163,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["9",{"_index":864,"title":{},"body":{"injectables/ConfigService.html":{},"components/FilterByInputComponent.html":{}}}],["90",{"_index":143,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["90vw",{"_index":145,"title":{},"body":{"components/AboutComponent.html":{}}}],["9]/g",{"_index":1125,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["a.achievementid",{"_index":466,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["a.quantity",{"_index":775,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["about'},{'name",{"_index":263,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["about.component.css",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.css,../../../styles/root.css",{"_index":31,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{}}}],["aboutcomponent",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["absolute",{"_index":2002,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["accessors",{"_index":629,"title":{},"body":{"components/CardItemComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["accordion",{"_index":193,"title":{},"body":{"components/AboutComponent.html":{}}}],["ach",{"_index":2222,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["ach.textachievement",{"_index":476,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["ach.title",{"_index":475,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["achievement",{"_index":352,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/IUserHasAchievement.html":{}}}],["achievement.ts",{"_index":1673,"title":{},"body":{"interfaces/IAchievement.html":{}}}],["achievementid",{"_index":334,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthService.html":{},"interfaces/IAchievement.html":{},"interfaces/IUserHasAchievement.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["achievementid).pipe",{"_index":2279,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievementids",{"_index":845,"title":{},"body":{"injectables/ConfigService.html":{}}}],["achievements",{"_index":327,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"interfaces/IDpUserProj.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["achievements.filter(a",{"_index":457,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["achievements.map(a",{"_index":465,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["achievements.service",{"_index":90,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["achievements.service.ts",{"_index":2196,"title":{},"body":{"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["achievements.service.ts:117",{"_index":2248,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:135",{"_index":2228,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:154",{"_index":2211,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:179",{"_index":2241,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:19",{"_index":2252,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:20",{"_index":2209,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:288",{"_index":2232,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:34",{"_index":2244,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:44",{"_index":2226,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:48",{"_index":2246,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:62",{"_index":2223,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:80",{"_index":2237,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:98",{"_index":2218,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievementsrepo",{"_index":414,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["achievementsrepositoryservice",{"_index":415,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["achievementsservice",{"_index":323,"title":{"injectables/AchievementsService.html":{}},"body":{"injectables/AchievementsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["achievementtitle",{"_index":367,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["achievments",{"_index":265,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["achievmentspageforusercomponent",{"_index":264,"title":{"components/AchievmentsPageForUserComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["actions",{"_index":218,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["activatedroute",{"_index":1923,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["actual_component",{"_index":319,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["add",{"_index":1677,"title":{},"body":{"interfaces/ICartItem.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["addcategory",{"_index":957,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addcategoryfailed",{"_index":911,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addcategorysuccess",{"_index":863,"title":{},"body":{"injectables/ConfigService.html":{}}}],["added",{"_index":2042,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addimage",{"_index":954,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addimagefailed",{"_index":909,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addimagesuccess",{"_index":862,"title":{},"body":{"injectables/ConfigService.html":{}}}],["additional",{"_index":2536,"title":{},"body":{"index.html":{}}}],["addtocart",{"_index":945,"title":{},"body":{"injectables/ConfigService.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addtocart(request",{"_index":2038,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addtocartfailed",{"_index":899,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addtocartsuccess",{"_index":852,"title":{},"body":{"injectables/ConfigService.html":{}}}],["alert",{"_index":268,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["alertdeletecomponent",{"_index":267,"title":{"components/AlertDeleteComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["alerts",{"_index":1016,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{}}}],["alertservice",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["align",{"_index":182,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["allachievements",{"_index":400,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["allowedchars",{"_index":1659,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["allowedchars.test(inputchar",{"_index":1660,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["allowedtypes",{"_index":1140,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["always_fail_key",{"_index":2198,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["alwaysfailmode",{"_index":1823,"title":{},"body":{"components/NavbarComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageProjComponent.html":{}}}],["angular",{"_index":107,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["angular/cdk",{"_index":2446,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/scrolling",{"_index":440,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["angular/common",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":373,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["angular/compiler",{"_index":2449,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":749,"title":{},"body":{"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["angular/material",{"_index":2450,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":698,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"dependencies.html":{}}}],["angular/router",{"_index":87,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["animation",{"_index":1912,"title":{},"body":{"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["api",{"_index":120,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["api/achievements",{"_index":329,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["api/achievements/1",{"_index":331,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["api/auth",{"_index":572,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/auth/login",{"_index":583,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/auth/logout",{"_index":974,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/auth/register",{"_index":573,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/authproj",{"_index":513,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/authproj/login",{"_index":515,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/authproj/register",{"_index":522,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/cart/add",{"_index":946,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/cart/remove",{"_index":962,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/cart/update",{"_index":964,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/categories/add",{"_index":958,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/checkout",{"_index":947,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/dpcategories",{"_index":1308,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["api/dpcategories/1",{"_index":1311,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["api/dpimages",{"_index":1347,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/10",{"_index":1371,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/10/image",{"_index":1375,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/byproduct/5",{"_index":1380,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpordercompositions",{"_index":1398,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["api/dpordercompositions/1",{"_index":1401,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["api/dporders",{"_index":1443,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["api/dporders/1",{"_index":1456,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["api/dpproductattributes",{"_index":1481,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["api/dpproductattributes/1",{"_index":1493,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["api/dpsizes",{"_index":1521,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["api/dpsizes/1",{"_index":1528,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["api/dpuserprojs",{"_index":1553,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["api/dpuserprojs/1",{"_index":1560,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["api/dpusers",{"_index":1583,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["api/dpusers/1",{"_index":1588,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["api/login",{"_index":943,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products",{"_index":949,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ProductsService.html":{}}}],["api/products/1",{"_index":2052,"title":{},"body":{"injectables/ProductsService.html":{}}}],["api/products/add",{"_index":955,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/addtocart",{"_index":2040,"title":{},"body":{"injectables/ProductsService.html":{}}}],["api/products/all",{"_index":966,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/create",{"_index":951,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/info",{"_index":968,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/profile/update",{"_index":953,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/register",{"_index":944,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/reset",{"_index":972,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/switch",{"_index":960,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/toggle",{"_index":970,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/shopcart",{"_index":2114,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/addtocart",{"_index":2102,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/checkout",{"_index":2106,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/quantity?productid=1&sizeid=2",{"_index":2119,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/updatecart",{"_index":2129,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/userachievements",{"_index":2224,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/1/14",{"_index":2238,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/completed/vasya",{"_index":2229,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/create/1/14",{"_index":2219,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/exists/1/14",{"_index":2212,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/unlock/1/14",{"_index":2249,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["apiendpoints",{"_index":846,"title":{},"body":{"injectables/ConfigService.html":{}}}],["apis/common",{"_index":2173,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["app.component.css",{"_index":502,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.html",{"_index":500,"title":{},"body":{"components/AppComponent.html":{}}}],["appcomponent",{"_index":270,"title":{"components/AppComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["appconfig",{"_index":2409,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["appearance",{"_index":792,"title":{},"body":{"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["application",{"_index":2488,"title":{},"body":{"index.html":{}}}],["applicationconfig",{"_index":2551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aria",{"_index":136,"title":{},"body":{"components/AboutComponent.html":{}}}],["artifacts",{"_index":2510,"title":{},"body":{"index.html":{}}}],["asp.net",{"_index":109,"title":{},"body":{"components/AboutComponent.html":{}}}],["aspect",{"_index":1992,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["asyncpipe",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["attr",{"_index":1489,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes",{"_index":1471,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts",{"_index":1470,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"coverage.html":{}}}],["attributes.service.ts:103",{"_index":1503,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:118",{"_index":1492,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:16",{"_index":1477,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:31",{"_index":1495,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:46",{"_index":1500,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:74",{"_index":1480,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attrs",{"_index":1497,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["authprojrepository",{"_index":1808,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["authprojrepositoryservice",{"_index":1806,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["authprojservice",{"_index":401,"title":{"injectables/AuthProjService.html":{}},"body":{"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["authrepository",{"_index":1772,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["authrepositoryservice",{"_index":1770,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["authservice",{"_index":97,"title":{"injectables/AuthService.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["auto",{"_index":150,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["autoclose",{"_index":1117,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{}}}],["automatically",{"_index":2489,"title":{},"body":{"index.html":{}}}],["available",{"_index":2501,"title":{},"body":{"index.html":{}}}],["avatar",{"_index":229,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{}}}],["avatar:hover",{"_index":239,"title":{},"body":{"components/AboutComponent.html":{}}}],["b",{"_index":773,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["b.price",{"_index":776,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["b.quantity",{"_index":777,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["back",{"_index":272,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["backbuttoncomponent",{"_index":26,"title":{"components/BackButtonComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["backend",{"_index":512,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["background",{"_index":153,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["badrequest",{"_index":988,"title":{},"body":{"injectables/ConfigService.html":{}}}],["base",{"_index":156,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["basedomain",{"_index":615,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["baseurl",{"_index":338,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["behaviorsubject",{"_index":549,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":547,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["between",{"_index":2009,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["binary",{"_index":1350,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["blob",{"_index":725,"title":{},"body":{"components/CarouselImgComponent.html":{},"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["block",{"_index":1996,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["blue",{"_index":1505,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["blur",{"_index":764,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["body",{"_index":333,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["body.dark",{"_index":1799,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["bold",{"_index":1883,"title":{},"body":{"components/PageCartComponent.html":{}}}],["boolean",{"_index":419,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"interfaces/IUserHasAchievement.html":{},"components/NavbarComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["border",{"_index":158,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["bottom",{"_index":185,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["box",{"_index":164,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["break",{"_index":2361,"title":{},"body":{"components/UserPageComponent.html":{}}}],["browser",{"_index":699,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"dependencies.html":{},"index.html":{}}}],["btn",{"_index":2020,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["build",{"_index":2506,"title":{},"body":{"index.html":{}}}],["buildthis",{"_index":2507,"title":{},"body":{"index.html":{}}}],["button",{"_index":228,"title":{},"body":{"components/AboutComponent.html":{},"components/BackButtonComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["button'},{'name",{"_index":273,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["button.component",{"_index":93,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{}}}],["button.component.css",{"_index":612,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["button.component.css,../../../styles/root.css",{"_index":605,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["button.component.html",{"_index":606,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["button.component.ts",{"_index":604,"title":{},"body":{"components/BackButtonComponent.html":{},"coverage.html":{}}}],["button.component.ts:12",{"_index":610,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["button.component.ts:15",{"_index":611,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["button/back",{"_index":92,"title":{},"body":{"components/AboutComponent.html":{},"components/BackButtonComponent.html":{},"components/NavbarComponent.html":{},"coverage.html":{}}}],["button[tuibutton",{"_index":2382,"title":{},"body":{"components/UserPageComponent.html":{}}}],["button[tuibutton]:hover",{"_index":2386,"title":{},"body":{"components/UserPageComponent.html":{}}}],["buttonnotworking",{"_index":919,"title":{},"body":{"injectables/ConfigService.html":{}}}],["buttons",{"_index":2384,"title":{},"body":{"components/UserPageComponent.html":{}}}],["buttons.css",{"_index":249,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["calc(1.5rem",{"_index":2015,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["card",{"_index":275,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["card:hover",{"_index":1986,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["carditemcomponent",{"_index":274,"title":{"components/CardItemComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["cards.css",{"_index":250,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["carousel",{"_index":278,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["carousel.css",{"_index":253,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["carouselimgcomponent",{"_index":277,"title":{"components/CarouselImgComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["cart",{"_index":759,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["cart'},{'name",{"_index":302,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["cart.component.css",{"_index":761,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["cart.component.css,../../../styles/root.css",{"_index":1846,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.html",{"_index":760,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["cart.component.ts",{"_index":741,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"coverage.html":{}}}],["cart.component.ts:100",{"_index":1855,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:107",{"_index":1865,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:142",{"_index":1854,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:186",{"_index":1867,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:250",{"_index":1864,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:260",{"_index":1862,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:42",{"_index":1871,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:43",{"_index":1868,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:44",{"_index":1869,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:45",{"_index":1870,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:46",{"_index":1874,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:47",{"_index":1873,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:48",{"_index":1853,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:53",{"_index":1872,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:59",{"_index":1861,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:63",{"_index":1860,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:83",{"_index":1866,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:87",{"_index":1857,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:91",{"_index":1858,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.component.ts:95",{"_index":1859,"title":{},"body":{"components/PageCartComponent.html":{}}}],["cart.service.ts",{"_index":2094,"title":{},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["cart.service.ts:101",{"_index":2118,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:124",{"_index":2105,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:136",{"_index":2125,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:151",{"_index":2111,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:20",{"_index":2100,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:35",{"_index":2113,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:60",{"_index":2128,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:85",{"_index":2101,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart/page",{"_index":740,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"coverage.html":{}}}],["cartitem",{"_index":737,"title":{"interfaces/CartItem.html":{}},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"coverage.html":{}}}],["cartitem.productid",{"_index":812,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["cartitem.sizeid",{"_index":813,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["cartitem[k",{"_index":835,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["cartitems",{"_index":765,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{}}}],["cartservice",{"_index":778,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["cartviewmodel",{"_index":783,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["cartviewmodel.cartitems.map(item",{"_index":786,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["cartviewmodel.ts",{"_index":1681,"title":{},"body":{"interfaces/ICartViewModel.html":{}}}],["case",{"_index":2353,"title":{},"body":{"components/UserPageComponent.html":{}}}],["catalog",{"_index":304,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["catalog'},{'name",{"_index":307,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["catalog.component.css",{"_index":1918,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.html",{"_index":1919,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts",{"_index":1917,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"coverage.html":{}}}],["catalog.component.ts:113",{"_index":1931,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:142",{"_index":1929,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:25",{"_index":1932,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:26",{"_index":1933,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:27",{"_index":1924,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:39",{"_index":1934,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:43",{"_index":1928,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:47",{"_index":1927,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog.component.ts:75",{"_index":1926,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["catalog/page",{"_index":1916,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"coverage.html":{}}}],["catch",{"_index":619,"title":{},"body":{"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{}}}],["catcherror",{"_index":2253,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["catcherror(err",{"_index":2286,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["catcherror(error",{"_index":2267,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["categories",{"_index":2299,"title":{},"body":{"components/UserPageComponent.html":{}}}],["categories.service.ts",{"_index":1307,"title":{},"body":{"injectables/DpCategoriesService.html":{},"coverage.html":{}}}],["categories.service.ts:105",{"_index":1325,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:129",{"_index":1333,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:142",{"_index":1328,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:57",{"_index":1323,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:69",{"_index":1329,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:82",{"_index":1331,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categoriesrepository",{"_index":2311,"title":{},"body":{"components/UserPageComponent.html":{}}}],["categoriesrepositoryservice",{"_index":1017,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/UserPageComponent.html":{}}}],["category",{"_index":1006,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["category'},{'name",{"_index":282,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["category.component",{"_index":2343,"title":{},"body":{"components/UserPageComponent.html":{}}}],["category.component.css",{"_index":1014,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.html",{"_index":1015,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts",{"_index":1005,"title":{},"body":{"components/DialogCategoryComponent.html":{},"coverage.html":{}}}],["category.component.ts:130",{"_index":1057,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:161",{"_index":1048,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:171",{"_index":1050,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:181",{"_index":1046,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:191",{"_index":1034,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:201",{"_index":1041,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:205",{"_index":1052,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:35",{"_index":1070,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:37",{"_index":1058,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:38",{"_index":1074,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:39",{"_index":1060,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:40",{"_index":1075,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:41",{"_index":1071,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:42",{"_index":1076,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:44",{"_index":1072,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:46",{"_index":1066,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:51",{"_index":1078,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:55",{"_index":1080,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:59",{"_index":1043,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:73",{"_index":1054,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category.component.ts:91",{"_index":1037,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["category/dialog",{"_index":1004,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["categorydata",{"_index":1038,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["categorydata).subscribe",{"_index":1109,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["categorydialog",{"_index":2300,"title":{},"body":{"components/UserPageComponent.html":{}}}],["categoryform",{"_index":1018,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["categorynameinputref",{"_index":1019,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["cd",{"_index":676,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["cdkfixedsizevirtualscroll",{"_index":392,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["cdkvirtualforof",{"_index":393,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["cdkvirtualscrollviewport",{"_index":394,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["cdr",{"_index":779,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["center",{"_index":198,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["changedetection",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/FilterByInputComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["changedetectionstrategy",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{},"components/AlertDeleteComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/FilterByInputComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["changedetectionstrategy.onpush",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/FilterByInputComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["changedetectorref",{"_index":677,"title":{},"body":{"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["changes",{"_index":687,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["changes['images",{"_index":707,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["changes['images'].firstchange",{"_index":708,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["checkauthstatus",{"_index":529,"title":{},"body":{"injectables/AuthProjService.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["checklengthandwarn",{"_index":1021,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["checklengthandwarn(value",{"_index":1031,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["checkout",{"_index":815,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{}}}],["checkout(cart",{"_index":2104,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["checkoutemptycart",{"_index":939,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkoutfailed",{"_index":901,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkoutsuccess",{"_index":854,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkuserachievementexists",{"_index":2199,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["checkuserachievementexists(userprojid",{"_index":2210,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["choose",{"_index":2532,"title":{},"body":{"index.html":{}}}],["class",{"_index":103,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["cleanedvalue",{"_index":1121,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["cli",{"_index":124,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["closed",{"_index":2360,"title":{},"body":{"components/UserPageComponent.html":{}}}],["code",{"_index":2494,"title":{},"body":{"index.html":{}}}],["color",{"_index":179,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["column",{"_index":242,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["columns",{"_index":766,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["come",{"_index":2531,"title":{},"body":{"index.html":{}}}],["command",{"_index":2525,"title":{},"body":{"index.html":{}}}],["commerce",{"_index":701,"title":{},"body":{"components/CarouselImgComponent.html":{},"dependencies.html":{}}}],["commonmodule",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["compile",{"_index":2508,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1786,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/UserPageComponent.html":{},"index.html":{}}}],["completedachievementids",{"_index":402,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["component",{"_index":0,"title":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{},"index.html":{}}}],["component_template",{"_index":262,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"index.html":{},"overview.html":{}}}],["components/back",{"_index":91,"title":{},"body":{"components/AboutComponent.html":{}}}],["components/card",{"_index":1895,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["components/carousel",{"_index":1935,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["components/dialog",{"_index":2342,"title":{},"body":{"components/UserPageComponent.html":{}}}],["components/theme",{"_index":94,"title":{},"body":{"components/AboutComponent.html":{},"components/UserPageComponent.html":{}}}],["composition",{"_index":1403,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions",{"_index":1397,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts",{"_index":1396,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"coverage.html":{}}}],["compositions.service.ts:102",{"_index":1426,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:131",{"_index":1420,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:161",{"_index":1428,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:176",{"_index":1423,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:73",{"_index":1417,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:87",{"_index":1424,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["config.service",{"_index":2256,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["configservice",{"_index":39,"title":{"injectables/ConfigService.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["confirmation",{"_index":823,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["conflict",{"_index":994,"title":{},"body":{"injectables/ConfigService.html":{}}}],["console.error",{"_index":790,"title":{},"body":{"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["console.error('[achievements",{"_index":461,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["console.error('login",{"_index":1817,"title":{},"body":{"components/LoginProjComponent.html":{}}}],["console.error('registration",{"_index":2090,"title":{},"body":{"components/RegisterProjComponent.html":{}}}],["console.info('category",{"_index":2364,"title":{},"body":{"components/UserPageComponent.html":{}}}],["console.info('image",{"_index":2368,"title":{},"body":{"components/UserPageComponent.html":{}}}],["console.info('product",{"_index":2359,"title":{},"body":{"components/UserPageComponent.html":{}}}],["console.log",{"_index":1365,"title":{},"body":{"injectables/DpImagesService.html":{},"components/IconTrashComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log('[achievements",{"_index":448,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["console.log('creating",{"_index":2356,"title":{},"body":{"components/UserPageComponent.html":{}}}],["console.log('login",{"_index":1815,"title":{},"body":{"components/LoginProjComponent.html":{}}}],["console.log('registration",{"_index":2089,"title":{},"body":{"components/RegisterProjComponent.html":{}}}],["console.log('updated",{"_index":2371,"title":{},"body":{"components/UserPageComponent.html":{}}}],["console.log('uploading",{"_index":2367,"title":{},"body":{"components/UserPageComponent.html":{}}}],["console.log(`[catalog",{"_index":1907,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["console.log(`achievement",{"_index":386,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["console.log(attrs",{"_index":1498,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["console.log(cart",{"_index":2116,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["console.log(cartviewmodel",{"_index":784,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["console.log(categories",{"_index":1310,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["console.log(compositions",{"_index":1400,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["console.log(image",{"_index":1361,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["console.log(images",{"_index":1368,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["console.log(list",{"_index":363,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log(orders",{"_index":1460,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["console.log(products",{"_index":2056,"title":{},"body":{"injectables/ProductsService.html":{}}}],["console.log(sizes",{"_index":1532,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["console.log(users",{"_index":1565,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["console.warn",{"_index":2269,"title":{},"body":{"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{}}}],["console.warn('[achievements",{"_index":467,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["const",{"_index":445,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpImagesService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["constructor",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["constructor(alerts",{"_index":1736,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["constructor(authprojrepository",{"_index":1805,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["constructor(authrepository",{"_index":1769,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["constructor(cartservice",{"_index":1852,"title":{},"body":{"components/PageCartComponent.html":{}}}],["constructor(configservice",{"_index":411,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/UserPageProjComponent.html":{}}}],["constructor(http",{"_index":345,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["constructor(imagesrepository",{"_index":672,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["constructor(location",{"_index":608,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["constructor(private",{"_index":378,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["constructor(productsrepository",{"_index":1887,"title":{},"body":{"components/PageCatalogItemComponent.html":{},"components/UserPageComponent.html":{}}}],["constructor(route",{"_index":1922,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["constructor(router",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"components/NavbarComponent.html":{}}}],["container",{"_index":1794,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["content",{"_index":213,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["context",{"_index":483,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["controlname",{"_index":1254,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["controlvalueaccessor",{"_index":1602,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["cookie",{"_index":2465,"title":{},"body":{"dependencies.html":{}}}],["core",{"_index":110,"title":{},"body":{"components/AboutComponent.html":{}}}],["cover",{"_index":2001,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["coverage",{"_index":2402,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createachievement",{"_index":339,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["createachievement(achievement",{"_index":347,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["createcategory",{"_index":1022,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["createcategory(categorydata",{"_index":1035,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["created",{"_index":978,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createdcategory",{"_index":1104,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["createdimage",{"_index":1238,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["createdpcategory",{"_index":1318,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["createdpcategory(dpcategory",{"_index":1324,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["createdpimage",{"_index":1337,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["createdpimage(request",{"_index":1345,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["createdporder",{"_index":1434,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["createdporder(dporder",{"_index":1440,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["createdpordercomposition",{"_index":1412,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["createdpordercomposition(dpordercomposition",{"_index":1418,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["createdpproductattribute",{"_index":1472,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["createdpproductattribute(dpproductattribute",{"_index":1478,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["createdproduct",{"_index":1296,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["createdpsize",{"_index":1512,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["createdpsize(dpsize",{"_index":1518,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["createdpuser",{"_index":1575,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["createdpuser(dpuser",{"_index":1581,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["createdpuserproj",{"_index":1545,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["createdpuserproj(dpuserproj",{"_index":1551,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["createimage",{"_index":1149,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["createimage(imagedata",{"_index":1154,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["createproduct",{"_index":950,"title":{},"body":{"injectables/ConfigService.html":{},"components/DialogProductComponent.html":{},"injectables/ProductsService.html":{}}}],["createproduct(product",{"_index":2043,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproduct(productdata",{"_index":1256,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["createproductfailed",{"_index":905,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createproductsuccess",{"_index":858,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createrequest",{"_index":1233,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["createuserachievement",{"_index":2200,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["createuserachievement(userprojid",{"_index":2217,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["css",{"_index":117,"title":{},"body":{"components/AboutComponent.html":{}}}],["currency:'rub",{"_index":654,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["currency:\\'rub",{"_index":655,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["currencypipe",{"_index":746,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["current",{"_index":837,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["currentquantity",{"_index":2123,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cursor",{"_index":232,"title":{},"body":{"components/AboutComponent.html":{}}}],["custom_elements_schema",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["dark",{"_index":247,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["darkmode",{"_index":503,"title":{},"body":{"components/AppComponent.html":{},"components/ThemeToggleComponent.html":{}}}],["data",{"_index":243,"title":{},"body":{"components/AboutComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpImagesService.html":{},"components/NavbarComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["data/components/navbar/navbar.component",{"_index":509,"title":{},"body":{"components/AppComponent.html":{}}}],["date",{"_index":744,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/RegisterComponent.html":{}}}],["date().toisostring",{"_index":1451,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["decorators",{"_index":1067,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["decreasequantity",{"_index":1847,"title":{},"body":{"components/PageCartComponent.html":{}}}],["decreasequantity(item",{"_index":803,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["default",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["delete",{"_index":337,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AlertDeleteComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["delete'},{'name",{"_index":269,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["delete.component",{"_index":1740,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["delete.component.css",{"_index":494,"title":{},"body":{"components/AlertDeleteComponent.html":{}}}],["delete.component.css,../../../styles/root.css",{"_index":480,"title":{},"body":{"components/AlertDeleteComponent.html":{}}}],["delete.component.html",{"_index":481,"title":{},"body":{"components/AlertDeleteComponent.html":{}}}],["delete.component.ts",{"_index":479,"title":{},"body":{"components/AlertDeleteComponent.html":{},"coverage.html":{}}}],["delete.component.ts:17",{"_index":485,"title":{},"body":{"components/AlertDeleteComponent.html":{}}}],["delete/alert",{"_index":478,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/IconTrashComponent.html":{},"coverage.html":{}}}],["deleteachievement",{"_index":340,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["deleteachievement(id",{"_index":354,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["deletedpcategory",{"_index":1319,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["deletedpcategory(id",{"_index":1327,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["deletedpimage",{"_index":1338,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["deletedpimage(id",{"_index":1362,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["deletedporder",{"_index":1435,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["deletedporder(id",{"_index":1454,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["deletedpordercomposition",{"_index":1413,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["deletedpordercomposition(id",{"_index":1422,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["deletedpproductattribute",{"_index":1473,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["deletedpproductattribute(id",{"_index":1491,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["deletedpsize",{"_index":1513,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["deletedpsize(id",{"_index":1526,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["deletedpuser",{"_index":1576,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["deletedpuser(id",{"_index":1586,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["deletedpuserproj",{"_index":1546,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["deletedpuserproj(id",{"_index":1558,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["deleteproduct",{"_index":2034,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproduct(id",{"_index":2050,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dependencies",{"_index":2445,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":326,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["detailed",{"_index":2541,"title":{},"body":{"index.html":{}}}],["details",{"_index":2007,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["development",{"_index":2480,"title":{},"body":{"index.html":{}}}],["dialog",{"_index":281,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["dialogcategorycomponent",{"_index":280,"title":{"components/DialogCategoryComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["dialogimagecomponent",{"_index":283,"title":{"components/DialogImageComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["dialogproductcomponent",{"_index":285,"title":{"components/DialogProductComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["dialogs",{"_index":1020,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["dialogservice",{"_index":2301,"title":{},"body":{"components/UserPageComponent.html":{}}}],["direction",{"_index":219,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["directive",{"_index":261,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["directives",{"_index":318,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"index.html":{}}}],["directory",{"_index":2512,"title":{},"body":{"index.html":{}}}],["dismissible",{"_index":2328,"title":{},"body":{"components/UserPageComponent.html":{}}}],["display",{"_index":195,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["dist",{"_index":2511,"title":{},"body":{"index.html":{}}}],["div.action",{"_index":2383,"title":{},"body":{"components/UserPageComponent.html":{}}}],["document.body.appendchild(fullscreendiv",{"_index":1976,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["document.body.classlist.add('dark",{"_index":2180,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["document.body.classlist.toggle('dark",{"_index":2179,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["document.body.removechild(fullscreendiv",{"_index":1975,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["document.createelement('div",{"_index":1954,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["document.createelement('img",{"_index":1969,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["documentation",{"_index":2403,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["domsanitizer",{"_index":675,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["dpattributes",{"_index":1405,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["dpattributesid",{"_index":1482,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpcategories",{"_index":1711,"title":{},"body":{"interfaces/IDpSize.html":{}}}],["dpcategoriesservice",{"_index":1305,"title":{"injectables/DpCategoriesService.html":{}},"body":{"injectables/DpCategoriesService.html":{},"coverage.html":{}}}],["dpcategory",{"_index":1326,"title":{},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpProduct.html":{}}}],["dpcategory.ts",{"_index":1685,"title":{},"body":{"interfaces/IDpCategory.html":{}}}],["dpcategorydescription",{"_index":1313,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["dpcategoryid",{"_index":1099,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"injectables/ProductsService.html":{}}}],["dpcategorytitle",{"_index":1062,"title":{},"body":{"components/DialogCategoryComponent.html":{},"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{}}}],["dpcolor",{"_index":1485,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["dpcost",{"_index":1695,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["dpcount",{"_index":1707,"title":{},"body":{"interfaces/IDpProductAttribute.html":{}}}],["dpdatetimeorder",{"_index":1691,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["dpdescription",{"_index":1272,"title":{},"body":{"components/DialogProductComponent.html":{},"interfaces/IDpProduct.html":{}}}],["dpdiscountpercent",{"_index":1277,"title":{},"body":{"components/DialogProductComponent.html":{},"interfaces/IDpProduct.html":{}}}],["dpemail",{"_index":1714,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpfullname",{"_index":1715,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpimage.ts",{"_index":1689,"title":{},"body":{"interfaces/IDpImage.html":{}}}],["dpimages",{"_index":1703,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpimagesid",{"_index":1357,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{}}}],["dpimagesservice",{"_index":1335,"title":{"injectables/DpImagesService.html":{}},"body":{"injectables/DpImagesService.html":{},"coverage.html":{}}}],["dpimagetitle",{"_index":1181,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpImage.html":{},"interfaces/IUpdateDpImageRequest.html":{}}}],["dporder",{"_index":1406,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["dporder.ts",{"_index":1693,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["dpordercomposition",{"_index":1421,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["dpordercomposition.ts",{"_index":1697,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["dpordercompositionsservice",{"_index":1394,"title":{"injectables/DpOrderCompositionsService.html":{}},"body":{"injectables/DpOrderCompositionsService.html":{},"coverage.html":{}}}],["dporderid",{"_index":1404,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{}}}],["dporders",{"_index":1716,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpordersservice",{"_index":1431,"title":{"injectables/DpOrdersService.html":{}},"body":{"injectables/DpOrdersService.html":{},"coverage.html":{}}}],["dppassword",{"_index":578,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpUser.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["dpphonenumber",{"_index":579,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpUser.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["dpprice",{"_index":1273,"title":{},"body":{"components/DialogProductComponent.html":{},"interfaces/IDpProduct.html":{}}}],["dpproduct",{"_index":1687,"title":{},"body":{"interfaces/IDpImage.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpproduct.ts",{"_index":1705,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpproductattribute",{"_index":1490,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["dpproductattribute.ts",{"_index":1709,"title":{},"body":{"interfaces/IDpProductAttribute.html":{}}}],["dpproductattributes",{"_index":1704,"title":{},"body":{"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{}}}],["dpproductattributesservice",{"_index":1469,"title":{"injectables/DpProductAttributesService.html":{}},"body":{"injectables/DpProductAttributesService.html":{},"coverage.html":{}}}],["dpproductdescription",{"_index":2046,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dpproductid",{"_index":1180,"title":{},"body":{"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpProductAttributesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IUpdateDpImageRequest.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{}}}],["dpproducts",{"_index":1684,"title":{},"body":{"interfaces/IDpCategory.html":{}}}],["dpproducttitle",{"_index":2045,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dppurchaseprice",{"_index":1276,"title":{},"body":{"components/DialogProductComponent.html":{},"interfaces/IDpProduct.html":{}}}],["dpquantity",{"_index":1696,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["dpregistrationdate",{"_index":1717,"title":{},"body":{"interfaces/IDpUser.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["dpsize",{"_index":1483,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpsize.ts",{"_index":1712,"title":{},"body":{"interfaces/IDpSize.html":{}}}],["dpsizenavigation",{"_index":1708,"title":{},"body":{"interfaces/IDpProductAttribute.html":{}}}],["dpsizesservice",{"_index":1509,"title":{"injectables/DpSizesService.html":{}},"body":{"injectables/DpSizesService.html":{},"coverage.html":{}}}],["dptitle",{"_index":1271,"title":{},"body":{"components/DialogProductComponent.html":{},"interfaces/IDpProduct.html":{}}}],["dptypeorder",{"_index":1692,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["dpuser",{"_index":1585,"title":{},"body":{"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{}}}],["dpuser.ts",{"_index":1718,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpuserid",{"_index":1444,"title":{},"body":{"injectables/DpOrdersService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["dpusername",{"_index":577,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpUser.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["dpuserproj",{"_index":1557,"title":{},"body":{"injectables/DpUserProjsService.html":{},"interfaces/IUserHasAchievement.html":{}}}],["dpuserprojid",{"_index":1554,"title":{},"body":{"injectables/DpUserProjsService.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["dpuserprojs",{"_index":1672,"title":{},"body":{"interfaces/IAchievement.html":{}}}],["dpuserprojsservice",{"_index":1542,"title":{"injectables/DpUserProjsService.html":{}},"body":{"injectables/DpUserProjsService.html":{},"coverage.html":{}}}],["dpusersservice",{"_index":1573,"title":{"injectables/DpUsersService.html":{}},"body":{"injectables/DpUsersService.html":{},"coverage.html":{}}}],["dynamic",{"_index":2451,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":2528,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":2530,"title":{},"body":{"index.html":{}}}],["e5e5e5",{"_index":227,"title":{},"body":{"components/AboutComponent.html":{}}}],["ease",{"_index":1985,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["edit",{"_index":2372,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editcategorybyid",{"_index":2307,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editcategorybyid(id",{"_index":2314,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editcategoryform",{"_index":2302,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editimagebyid",{"_index":2308,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editimagebyid(id",{"_index":2316,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editimageform",{"_index":2303,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editproductbyid",{"_index":2309,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editproductbyid(id",{"_index":2318,"title":{},"body":{"components/UserPageComponent.html":{}}}],["editproductform",{"_index":2304,"title":{},"body":{"components/UserPageComponent.html":{}}}],["element",{"_index":260,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["elementref",{"_index":1040,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["ellipsis",{"_index":2011,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["email",{"_index":1720,"title":{},"body":{"interfaces/IDpUserProj.html":{}}}],["emitevent",{"_index":1665,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["empty",{"_index":1879,"title":{},"body":{"components/PageCartComponent.html":{}}}],["end",{"_index":2527,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":976,"title":{},"body":{"injectables/ConfigService.html":{}}}],["endpoints",{"_index":842,"title":{},"body":{"injectables/ConfigService.html":{}}}],["entity",{"_index":129,"title":{},"body":{"components/AboutComponent.html":{}}}],["err",{"_index":460,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["error",{"_index":459,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/BackButtonComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{}}}],["error.error?.message",{"_index":2091,"title":{},"body":{"components/RegisterProjComponent.html":{}}}],["error.message",{"_index":1241,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["error.status",{"_index":1789,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["errormessage",{"_index":1788,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["eslint",{"_index":126,"title":{},"body":{"components/AboutComponent.html":{}}}],["event",{"_index":1045,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/PageCartComponent.html":{}}}],["event.ctrlkey",{"_index":1661,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["event.key",{"_index":1658,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["event.metakey",{"_index":1662,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["event.preventdefault",{"_index":1094,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{}}}],["event.target",{"_index":1119,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["eventcoalescing",{"_index":2555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eventemitter",{"_index":681,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{}}}],["example",{"_index":328,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["excel",{"_index":2095,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["execute",{"_index":2519,"title":{},"body":{"index.html":{}}}],["exists",{"_index":2215,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["export",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["exporttoexcel",{"_index":2096,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["exporttoexcel(orderid",{"_index":2110,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["extends",{"_index":742,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["fade",{"_index":2030,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fadein",{"_index":2027,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fail",{"_index":1845,"title":{},"body":{"components/NavbarComponent.html":{}}}],["failed",{"_index":1818,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["failedachievementid",{"_index":2276,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedachievementid).pipe",{"_index":2285,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedid",{"_index":2233,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedimage",{"_index":1141,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["failedtoload",{"_index":917,"title":{},"body":{"injectables/ConfigService.html":{}}}],["false",{"_index":426,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"interfaces/CartItem.html":{},"components/FilterByInputComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["feature",{"_index":206,"title":{},"body":{"components/AboutComponent.html":{}}}],["fff",{"_index":1843,"title":{},"body":{"components/NavbarComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["file.size",{"_index":1220,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["files",{"_index":2493,"title":{},"body":{"index.html":{}}}],["fill",{"_index":1842,"title":{},"body":{"components/NavbarComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["filter",{"_index":288,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["filterbyinputcomponent",{"_index":287,"title":{"components/FilterByInputComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["filtereditems",{"_index":1621,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["finalvalue",{"_index":1126,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["fit",{"_index":2000,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fixed",{"_index":1956,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["flex",{"_index":196,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["fn",{"_index":1632,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["following",{"_index":2524,"title":{},"body":{"index.html":{}}}],["font",{"_index":186,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["fontawesome",{"_index":2462,"title":{},"body":{"dependencies.html":{}}}],["forbidden",{"_index":991,"title":{},"body":{"injectables/ConfigService.html":{}}}],["forkjoin",{"_index":702,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["forkjoin(imagerequests).subscribe(results",{"_index":727,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["form",{"_index":1611,"title":{},"body":{"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["form[tuicardlarge",{"_index":1797,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["formcontrol",{"_index":1063,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["formcontrol(0",{"_index":1274,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["formcontrol(null",{"_index":1065,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/UserPageComponent.html":{}}}],["formdata",{"_index":1349,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata).subscribe",{"_index":1386,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata).subscribe(image",{"_index":1356,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('dpimagetitle",{"_index":1353,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('dpproductid",{"_index":1352,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('file",{"_index":1354,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formgroup",{"_index":1061,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["forms",{"_index":116,"title":{},"body":{"components/AboutComponent.html":{}}}],["formsmodule",{"_index":748,"title":{},"body":{"interfaces/CartItem.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["fortawesome/fontawesome",{"_index":2452,"title":{},"body":{"dependencies.html":{}}}],["forwardref",{"_index":1607,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["found",{"_index":985,"title":{},"body":{"injectables/ConfigService.html":{}}}],["framework",{"_index":130,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["free",{"_index":2453,"title":{},"body":{"dependencies.html":{}}}],["fullscreendiv",{"_index":1953,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.addeventlistener('click",{"_index":1974,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.appendchild(img",{"_index":1973,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.alignitems",{"_index":1966,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.backgroundcolor",{"_index":1961,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.display",{"_index":1964,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.height",{"_index":1960,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.justifycontent",{"_index":1965,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.left",{"_index":1958,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.position",{"_index":1955,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.top",{"_index":1957,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.width",{"_index":1959,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["fullscreendiv.style.zindex",{"_index":1967,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["gap",{"_index":199,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["generate",{"_index":2499,"title":{},"body":{"index.html":{}}}],["generated",{"_index":2476,"title":{},"body":{"index.html":{}}}],["get(`${this.baseurl}/completed/${username",{"_index":2265,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getachievementbyid",{"_index":341,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getachievementbyid(id",{"_index":358,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getallachievements",{"_index":342,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getalldpcategories",{"_index":1320,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getalldpimages",{"_index":1339,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getalldpordercompositions",{"_index":1414,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getalldporders",{"_index":1436,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getalldpproductattributes",{"_index":1474,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getalldpsizes",{"_index":1514,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getalldpuserprojs",{"_index":1547,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getalldpusers",{"_index":1577,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getallproducts",{"_index":2035,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getalluserachievements",{"_index":2201,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getalwaysfailmode",{"_index":2202,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getcart",{"_index":2097,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcartquantity",{"_index":2098,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcartquantity(productid",{"_index":2117,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcompletedachievementsbyusername",{"_index":2203,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getcompletedachievementsbyusername(username",{"_index":2227,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getdata",{"_index":1079,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["getdpcategorybyid",{"_index":1321,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getdpcategorybyid(id",{"_index":1330,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getdpimagebyid",{"_index":1340,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagebyid(id",{"_index":1369,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagedata",{"_index":1341,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagedata(id",{"_index":1373,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagesbyproductid",{"_index":1342,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagesbyproductid(productid",{"_index":1378,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdporderbyid",{"_index":1437,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getdporderbyid(id",{"_index":1461,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getdpordercompositionbyid",{"_index":1415,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getdpordercompositionbyid(id",{"_index":1425,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getdpproductattributebyid",{"_index":1475,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getdpproductattributebyid(id",{"_index":1499,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getdpsizebyid",{"_index":1515,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getdpsizebyid(id",{"_index":1533,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getdpuserbyid",{"_index":1578,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getdpuserbyid(id",{"_index":1592,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getdpuserprojbyid",{"_index":1548,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getdpuserprojbyid(id",{"_index":1566,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getfailedachievementid",{"_index":2204,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getfailedachievementid(successachievementid",{"_index":2231,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getfiltereditems",{"_index":1646,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["gethasvalue",{"_index":1077,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["getimages",{"_index":636,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["getproductbyid",{"_index":2036,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getproductbyid(id",{"_index":2057,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getting",{"_index":2473,"title":{"index.html":{}},"body":{}}],["gettotal",{"_index":794,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["gettotal(item",{"_index":1877,"title":{},"body":{"components/PageCartComponent.html":{}}}],["gettotal(undefined",{"_index":1856,"title":{},"body":{"components/PageCartComponent.html":{}}}],["gettotalamount",{"_index":795,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["getuserachievement",{"_index":2205,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getuserachievement(userprojid",{"_index":2236,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["goback",{"_index":607,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["h1",{"_index":2380,"title":{},"body":{"components/UserPageComponent.html":{}}}],["h3",{"_index":1880,"title":{},"body":{"components/PageCartComponent.html":{}}}],["handleachievement",{"_index":1090,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/PageCatalogItemComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["handleachievement(userprojid",{"_index":473,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["hasvalue",{"_index":1030,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["header",{"_index":194,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{}}}],["header.css",{"_index":252,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["height",{"_index":191,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["helpbuilding",{"_index":2505,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":1983,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["host",{"_index":2377,"title":{},"body":{"components/UserPageComponent.html":{}}}],["hover",{"_index":2387,"title":{},"body":{"components/UserPageComponent.html":{}}}],["html",{"_index":259,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["htmlinputelement",{"_index":1120,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["http",{"_index":121,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["http://localhost:4200",{"_index":2487,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":122,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["httpstatuscodes",{"_index":847,"title":{},"body":{"injectables/ConfigService.html":{}}}],["iachievement",{"_index":348,"title":{"interfaces/IAchievement.html":{}},"body":{"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["iaddtocartrequest",{"_index":1674,"title":{"interfaces/IAddToCartRequest.html":{}},"body":{"interfaces/IAddToCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["icartitem",{"_index":743,"title":{"interfaces/ICartItem.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"components/IconTrashComponent.html":{},"components/PageCartComponent.html":{},"coverage.html":{}}}],["icartviewmodel",{"_index":753,"title":{"interfaces/ICartViewModel.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["icon",{"_index":176,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["icons.css",{"_index":254,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["icontrashcomponent",{"_index":290,"title":{"components/IconTrashComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["icreatedpimagerequest",{"_index":1155,"title":{"interfaces/ICreateDpImageRequest.html":{}},"body":{"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"coverage.html":{}}}],["id",{"_index":330,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{}}}],["identifier",{"_index":2404,"title":{},"body":{"coverage.html":{}}}],["idpcategory",{"_index":1036,"title":{"interfaces/IDpCategory.html":{}},"body":{"components/DialogCategoryComponent.html":{},"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["idpcategory).subscribe",{"_index":2363,"title":{},"body":{"components/UserPageComponent.html":{}}}],["idpimage",{"_index":642,"title":{"interfaces/IDpImage.html":{}},"body":{"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["idpimage).subscribe",{"_index":2366,"title":{},"body":{"components/UserPageComponent.html":{}}}],["idporder",{"_index":1441,"title":{"interfaces/IDpOrder.html":{}},"body":{"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpUser.html":{},"coverage.html":{}}}],["idpordercomposition",{"_index":1419,"title":{"interfaces/IDpOrderComposition.html":{}},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{},"coverage.html":{}}}],["idporderdetail",{"_index":1698,"title":{"interfaces/IDpOrderDetail.html":{}},"body":{"interfaces/IDpOrderDetail.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["idpproduct",{"_index":632,"title":{"interfaces/IDpProduct.html":{}},"body":{"components/CardItemComponent.html":{},"components/DialogProductComponent.html":{},"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["idpproduct).subscribe",{"_index":2355,"title":{},"body":{"components/UserPageComponent.html":{}}}],["idpproductattribute",{"_index":1479,"title":{"interfaces/IDpProductAttribute.html":{}},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpsize",{"_index":1519,"title":{"interfaces/IDpSize.html":{}},"body":{"injectables/DpSizesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpuser",{"_index":587,"title":{"interfaces/IDpUser.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"coverage.html":{}}}],["idpuserproj",{"_index":535,"title":{"interfaces/IDpUserProj.html":{}},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"coverage.html":{}}}],["image",{"_index":956,"title":{},"body":{"injectables/ConfigService.html":{},"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["image'},{'name",{"_index":284,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["image.component",{"_index":2344,"title":{},"body":{"components/UserPageComponent.html":{}}}],["image.component.css",{"_index":1138,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.html",{"_index":1139,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts",{"_index":1136,"title":{},"body":{"components/DialogImageComponent.html":{},"coverage.html":{}}}],["image.component.ts:112",{"_index":1169,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:122",{"_index":1164,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:151",{"_index":1156,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:197",{"_index":1167,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:233",{"_index":1162,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:243",{"_index":1163,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:40",{"_index":1191,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:42",{"_index":1170,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:43",{"_index":1176,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:44",{"_index":1185,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:45",{"_index":1193,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:46",{"_index":1174,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:47",{"_index":1194,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:49",{"_index":1175,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:51",{"_index":1179,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:52",{"_index":1178,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:53",{"_index":1187,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:54",{"_index":1186,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:56",{"_index":1183,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:61",{"_index":1192,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:62",{"_index":1189,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:63",{"_index":1173,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:65",{"_index":1195,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:69",{"_index":1196,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:73",{"_index":1158,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:86",{"_index":1161,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.component.ts:94",{"_index":1160,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image.dpimagesid",{"_index":724,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["image/dialog",{"_index":1135,"title":{},"body":{"components/DialogImageComponent.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["image/jpeg",{"_index":1171,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["image/png",{"_index":1172,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["imageclick",{"_index":671,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["imagecontrol",{"_index":1142,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["imagedata",{"_index":1157,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["imagedata).subscribe",{"_index":1244,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["imagedata.dpimagetitle",{"_index":1231,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["imagedata.dpproductid",{"_index":1230,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["imagedialog",{"_index":2305,"title":{},"body":{"components/UserPageComponent.html":{}}}],["imageform",{"_index":1143,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["imagerequests",{"_index":720,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["images",{"_index":630,"title":{},"body":{"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"injectables/DpImagesService.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["images.service.ts",{"_index":1336,"title":{},"body":{"injectables/DpImagesService.html":{},"coverage.html":{}}}],["images.service.ts:110",{"_index":1346,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:140",{"_index":1383,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:159",{"_index":1363,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:18",{"_index":1344,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:33",{"_index":1366,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:48",{"_index":1379,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:63",{"_index":1370,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:79",{"_index":1374,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["imagescount",{"_index":1903,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["imagesdata",{"_index":1358,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{}}}],["imagesrepository",{"_index":679,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/UserPageComponent.html":{}}}],["imagesrepositoryservice",{"_index":673,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/DialogImageComponent.html":{},"components/UserPageComponent.html":{}}}],["imageurl",{"_index":693,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["imageurls",{"_index":666,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img",{"_index":658,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["img'},{'name",{"_index":279,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["img.component",{"_index":641,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["img.component.css",{"_index":704,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.css,../../../styles/root.css",{"_index":664,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.html",{"_index":665,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts",{"_index":657,"title":{},"body":{"components/CarouselImgComponent.html":{},"coverage.html":{}}}],["img.component.ts:32",{"_index":680,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:33",{"_index":682,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:34",{"_index":695,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:35",{"_index":696,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:36",{"_index":678,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:44",{"_index":689,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:48",{"_index":686,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:54",{"_index":688,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:63",{"_index":683,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.component.ts:93",{"_index":692,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["img.src",{"_index":1970,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["img.style.maxheight",{"_index":1972,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["img.style.maxwidth",{"_index":1971,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["img/carousel",{"_index":640,"title":{},"body":{"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"coverage.html":{}}}],["img:hover",{"_index":2004,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["implements",{"_index":391,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["includes",{"_index":2496,"title":{},"body":{"index.html":{}}}],["including",{"_index":2540,"title":{},"body":{"index.html":{}}}],["increasequantity",{"_index":1848,"title":{},"body":{"components/PageCartComponent.html":{}}}],["increasequantity(item",{"_index":799,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["information",{"_index":2539,"title":{},"body":{"index.html":{}}}],["inject",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["inject(achievementsrepositoryservice",{"_index":444,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["inject(authprojservice",{"_index":423,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["inject(categoriesrepositoryservice",{"_index":1059,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["inject(configservice",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["inject(imagesrepositoryservice",{"_index":1184,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["inject(productsrepositoryservice",{"_index":1281,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["inject(router",{"_index":428,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["inject(tui_dark_mode",{"_index":504,"title":{},"body":{"components/AppComponent.html":{},"components/ThemeToggleComponent.html":{}}}],["inject(tui_dark_mode_key",{"_index":2157,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["inject(tuialertservice",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{}}}],["inject(tuidialogservice",{"_index":1073,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/UserPageComponent.html":{}}}],["inject(userachievementsrepositoryservice",{"_index":430,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["inject(userachievementsservice",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["inject(wa_local_storage",{"_index":2162,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["inject(wa_window).matchmedia('(prefers",{"_index":2159,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["injectable",{"_index":322,"title":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["injectables",{"_index":324,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"overview.html":{}}}],["injectcontext",{"_index":484,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["innervalue",{"_index":1612,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input",{"_index":638,"title":{},"body":{"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["input'},{'name",{"_index":289,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["input.component.css",{"_index":1648,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.css,../../../styles/root.css",{"_index":1609,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.html",{"_index":1610,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts",{"_index":1601,"title":{},"body":{"components/FilterByInputComponent.html":{},"coverage.html":{}}}],["input.component.ts:27",{"_index":1625,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:28",{"_index":1623,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:29",{"_index":1626,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:31",{"_index":1642,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:35",{"_index":1643,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:37",{"_index":1647,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:41",{"_index":1622,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:51",{"_index":1629,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:59",{"_index":1639,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:64",{"_index":1631,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:68",{"_index":1634,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:72",{"_index":1636,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:80",{"_index":1644,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.component.ts:81",{"_index":1645,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["input.files",{"_index":1211,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["input.files.length",{"_index":1212,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["input.files[0",{"_index":1213,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["input.value",{"_index":1128,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["input.value.replace(/[^a",{"_index":1122,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["input/filter",{"_index":1600,"title":{},"body":{"components/FilterByInputComponent.html":{},"coverage.html":{}}}],["input[type=\"file",{"_index":1351,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["inputchar",{"_index":1657,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["inputs",{"_index":627,"title":{},"body":{"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{}}}],["interface",{"_index":736,"title":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/PageCartComponent.html":{},"coverage.html":{}}}],["interface/iachievement",{"_index":374,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["interface/iaddtocartrequest",{"_index":2064,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["interface/icartitem",{"_index":752,"title":{},"body":{"interfaces/CartItem.html":{},"components/IconTrashComponent.html":{},"components/PageCartComponent.html":{}}}],["interface/icartviewmodel",{"_index":754,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{}}}],["interface/icreatedpimagerequest",{"_index":1198,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{}}}],["interface/idpcategory",{"_index":1086,"title":{},"body":{"components/DialogCategoryComponent.html":{},"injectables/DpCategoriesService.html":{},"components/UserPageComponent.html":{}}}],["interface/idpimage",{"_index":643,"title":{},"body":{"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["interface/idporder",{"_index":1468,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["interface/idpordercomposition",{"_index":1430,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["interface/idporderdetail",{"_index":2132,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["interface/idpproduct",{"_index":639,"title":{},"body":{"components/CardItemComponent.html":{},"components/DialogProductComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/UserPageComponent.html":{}}}],["interface/idpproductattribute",{"_index":1508,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["interface/idpsize",{"_index":1541,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["interface/idpuser",{"_index":597,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DpUsersService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["interface/idpuserproj",{"_index":552,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{},"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["interface/iremovefromcartrequest",{"_index":2133,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["interface/iupdatecartrequest",{"_index":756,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{}}}],["interface/iupdatedpimagerequest",{"_index":1199,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{}}}],["interface/iuserhasachievement",{"_index":2255,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["interfaces",{"_index":738,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"overview.html":{}}}],["iremovefromcartrequest",{"_index":1721,"title":{"interfaces/IRemoveFromCartRequest.html":{}},"body":{"interfaces/IRemoveFromCartRequest.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["isauthenticated",{"_index":527,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{}}}],["isauthenticatedsubject",{"_index":528,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["iscompleted",{"_index":408,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["iscompleted(achievementid",{"_index":417,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["isdisabled",{"_index":1637,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["isloading",{"_index":771,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["isobtained",{"_index":1727,"title":{},"body":{"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["isprojauthenticated",{"_index":403,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["issuccess",{"_index":2401,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["item",{"_index":306,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["item'},{'name",{"_index":276,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["item.component",{"_index":1896,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["item.component.css",{"_index":644,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["item.component.css,../../../styles/root.css",{"_index":624,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["item.component.html",{"_index":625,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["item.component.ts",{"_index":622,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{},"coverage.html":{}}}],["item.component.ts:22",{"_index":1894,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["item.component.ts:23",{"_index":1888,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["item.component.ts:25",{"_index":631,"title":{},"body":{"components/CardItemComponent.html":{}}}],["item.component.ts:34",{"_index":637,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["item.component.ts:38",{"_index":634,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["item.component.ts:61",{"_index":1891,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["item.component.ts:95",{"_index":1893,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["item.includes(value",{"_index":1652,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["item.price",{"_index":1876,"title":{},"body":{"components/PageCartComponent.html":{}}}],["item.productid",{"_index":808,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["item.producttitle",{"_index":1875,"title":{},"body":{"components/PageCartComponent.html":{}}}],["item.quantity",{"_index":801,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["item.sizeid",{"_index":810,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["item/card",{"_index":621,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{},"coverage.html":{}}}],["item/page",{"_index":1884,"title":{},"body":{"components/PageCatalogItemComponent.html":{},"coverage.html":{}}}],["items",{"_index":197,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["iupdatecartrequest",{"_index":755,"title":{"interfaces/IUpdateCartRequest.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/IUpdateCartRequest.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["iupdatedpimagerequest",{"_index":1166,"title":{"interfaces/IUpdateDpImageRequest.html":{}},"body":{"components/DialogImageComponent.html":{},"injectables/DpImagesService.html":{},"interfaces/IUpdateDpImageRequest.html":{},"coverage.html":{}}}],["iuserhasachievement",{"_index":1725,"title":{"interfaces/IUserHasAchievement.html":{}},"body":{"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["jpeg",{"_index":1224,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["json.parse(atob(projtoken.split('.')[1",{"_index":451,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["json.stringify(data",{"_index":2357,"title":{},"body":{"components/UserPageComponent.html":{}}}],["justify",{"_index":221,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["jwt",{"_index":123,"title":{},"body":{"components/AboutComponent.html":{}}}],["k",{"_index":836,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["karma",{"_index":2520,"title":{},"body":{"index.html":{}}}],["key",{"_index":705,"title":{},"body":{"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["keyboardevent",{"_index":1628,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["keyframes",{"_index":2026,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["l",{"_index":1504,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["label",{"_index":1115,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/UserPageComponent.html":{}}}],["label.always",{"_index":1844,"title":{},"body":{"components/NavbarComponent.html":{}}}],["layout.css",{"_index":255,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["left",{"_index":177,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["legend",{"_index":258,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["li",{"_index":210,"title":{},"body":{"components/AboutComponent.html":{}}}],["li::before",{"_index":212,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":190,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["list",{"_index":207,"title":{},"body":{"components/AboutComponent.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["literal",{"_index":694,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["loadcartitems",{"_index":781,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["loadedimage",{"_index":1144,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["loadimageurls",{"_index":667,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["loading",{"_index":1753,"title":{},"body":{"components/LoadingComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["loading'},{'name",{"_index":293,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["loading.component.css",{"_index":1755,"title":{},"body":{"components/LoadingComponent.html":{}}}],["loading.component.html",{"_index":1754,"title":{},"body":{"components/LoadingComponent.html":{}}}],["loading.gif",{"_index":1756,"title":{},"body":{"components/LoadingComponent.html":{}}}],["loadingcomponent",{"_index":292,"title":{"components/LoadingComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["loadingimage",{"_index":1145,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["loadproductinfo",{"_index":967,"title":{},"body":{"injectables/ConfigService.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["loadproductinfofailed",{"_index":927,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductinfosuccess",{"_index":874,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproducts",{"_index":965,"title":{},"body":{"injectables/ConfigService.html":{},"components/PageCatalogItemComponent.html":{}}}],["loadproducts(userprojid",{"_index":1890,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["loadproductsfailed",{"_index":925,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductsorfail",{"_index":1885,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["loadproductssuccess",{"_index":872,"title":{},"body":{"injectables/ConfigService.html":{}}}],["local",{"_index":2482,"title":{},"body":{"index.html":{}}}],["localstorage.getitem('projtoken",{"_index":447,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"components/UserPageComponent.html":{}}}],["localstorage.getitem('token",{"_index":1838,"title":{},"body":{"components/NavbarComponent.html":{}}}],["localstorage.getitem(userachievementsservice.always_fail_key",{"_index":2258,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["localstorage.removeitem('projtoken",{"_index":567,"title":{},"body":{"injectables/AuthProjService.html":{},"components/UserPageComponent.html":{}}}],["localstorage.removeitem('token",{"_index":568,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/NavbarComponent.html":{}}}],["localstorage.removeitem('userprojid",{"_index":569,"title":{},"body":{"injectables/AuthProjService.html":{},"components/UserPageComponent.html":{}}}],["localstorage.setitem('projtoken",{"_index":560,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem('token",{"_index":602,"title":{},"body":{"injectables/AuthService.html":{},"components/LoginComponent.html":{}}}],["localstorage.setitem('userprojid",{"_index":561,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem(userachievementsservice.always_fail_key",{"_index":2257,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["location",{"_index":609,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["login",{"_index":297,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"interfaces/IDpUserProj.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["login'},{'name",{"_index":295,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["login(user",{"_index":586,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(userproj",{"_index":534,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["login.component.css",{"_index":1780,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.css,../../../styles/root.css",{"_index":1765,"title":{},"body":{"components/LoginComponent.html":{}}}],["login.component.html",{"_index":1766,"title":{},"body":{"components/LoginComponent.html":{}}}],["logincomponent",{"_index":294,"title":{"components/LoginComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["loginfailed",{"_index":895,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loginprojcomponent",{"_index":296,"title":{"components/LoginProjComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["loginsuccess",{"_index":849,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logout",{"_index":530,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/NavbarComponent.html":{}}}],["logoutattempt",{"_index":404,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/UserPageProjComponent.html":{}}}],["logoutproj",{"_index":973,"title":{},"body":{"injectables/ConfigService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["logoutprojfailed",{"_index":931,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logoutprojsuccess",{"_index":887,"title":{},"body":{"injectables/ConfigService.html":{}}}],["m",{"_index":1484,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["map",{"_index":703,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["map(blob",{"_index":723,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["margin",{"_index":149,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["matching",{"_index":321,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.random",{"_index":647,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/UserPageProjComponent.html":{}}}],["max",{"_index":141,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["maxfilesize",{"_index":1146,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["maxlength",{"_index":1032,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["media",{"_index":170,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["message",{"_index":580,"title":{},"body":{"injectables/AuthService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["methods",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["middle",{"_index":183,"title":{},"body":{"components/AboutComponent.html":{}}}],["min",{"_index":1795,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["min(50rem",{"_index":144,"title":{},"body":{"components/AboutComponent.html":{}}}],["miscellaneous",{"_index":2548,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["modify",{"_index":2492,"title":{},"body":{"index.html":{}}}],["modules",{"_index":2546,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":2538,"title":{},"body":{"index.html":{}}}],["movedpermanently",{"_index":983,"title":{},"body":{"injectables/ConfigService.html":{}}}],["movefocus",{"_index":1023,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["movefocus(targetinput",{"_index":1039,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["mssql",{"_index":111,"title":{},"body":{"components/AboutComponent.html":{}}}],["multi",{"_index":1608,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["multipart/form",{"_index":1348,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["name",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["namefor",{"_index":2500,"title":{},"body":{"index.html":{}}}],["navbar",{"_index":1820,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar'},{'name",{"_index":300,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["navbar.component.css",{"_index":1832,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.css,../../../styles/root.css",{"_index":1821,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbar.component.html",{"_index":1822,"title":{},"body":{"components/NavbarComponent.html":{}}}],["navbarcomponent",{"_index":299,"title":{"components/NavbarComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["navigate",{"_index":2486,"title":{},"body":{"index.html":{}}}],["navigateto",{"_index":43,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["navigateto(path",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["navigatetohome",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{}}}],["navigatetologin",{"_index":2069,"title":{},"body":{"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["navigatetoproduct",{"_index":626,"title":{},"body":{"components/CardItemComponent.html":{}}}],["navigatetoproduct(product",{"_index":633,"title":{},"body":{"components/CardItemComponent.html":{}}}],["navigatetoproductfailed",{"_index":929,"title":{},"body":{"injectables/ConfigService.html":{}}}],["navigatetoproductsuccess",{"_index":876,"title":{},"body":{"injectables/ConfigService.html":{}}}],["navigatetoregister",{"_index":1767,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{}}}],["navigation.css",{"_index":251,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["needs",{"_index":2535,"title":{},"body":{"index.html":{}}}],["negative",{"_index":1116,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{}}}],["new",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrdersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"coverage.html":{},"index.html":{}}}],["newcomp",{"_index":1409,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["newimages",{"_index":716,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["newimages.length",{"_index":719,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["newimages.map(image",{"_index":721,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["neworder",{"_index":1453,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["newpass",{"_index":524,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["newproduct",{"_index":2049,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newquantity",{"_index":800,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["newsize",{"_index":1525,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["newuser",{"_index":523,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["next",{"_index":463,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["ng",{"_index":2171,"title":{},"body":{"components/ThemeToggleComponent.html":{},"index.html":{}}}],["ng_value_accessor",{"_index":1605,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["ngforof",{"_index":486,"title":{},"body":{"components/AlertDeleteComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["ngif",{"_index":747,"title":{},"body":{"interfaces/CartItem.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["ngonchanges",{"_index":668,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["ngonchanges(changes",{"_index":684,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["ngondestroy",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{}}}],["ngoninit",{"_index":409,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["ngx",{"_index":2464,"title":{},"body":{"dependencies.html":{}}}],["nocontent",{"_index":980,"title":{},"body":{"injectables/ConfigService.html":{}}}],["none",{"_index":209,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["notfound",{"_index":993,"title":{},"body":{"injectables/ConfigService.html":{}}}],["notification",{"_index":1742,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["notification.subscribe",{"_index":1751,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["nowrap",{"_index":2013,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["null",{"_index":432,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/DialogImageComponent.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{}}}],["number",{"_index":355,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["object",{"_index":848,"title":{},"body":{"injectables/ConfigService.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["object.values(this.configservice.achievementids",{"_index":455,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["object.values(this.imageurls).foreach(url",{"_index":709,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["observable",{"_index":353,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/DialogImageComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/PageCatalogItemComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["of(false",{"_index":2270,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["of(void",{"_index":2274,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["onchange",{"_index":1613,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["ondestroy",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{}}}],["one",{"_index":2533,"title":{},"body":{"index.html":{}}}],["onfilechange",{"_index":1150,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["onfilechange(event",{"_index":1159,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["onimageclick",{"_index":669,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["onimageclick(imageurl",{"_index":690,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["oninit",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["oninput",{"_index":1024,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["oninput(event",{"_index":1044,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["onkeypress",{"_index":1615,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["onkeypress(event",{"_index":1627,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["onlogin",{"_index":1768,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{}}}],["onnotworkingbuttonclick",{"_index":410,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["onregister",{"_index":2070,"title":{},"body":{"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["onsortchange",{"_index":1849,"title":{},"body":{"components/PageCartComponent.html":{}}}],["onsortchange(event",{"_index":840,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["ontouched",{"_index":1614,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["onvaluechange",{"_index":834,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["onvaluechange(value",{"_index":1863,"title":{},"body":{"components/PageCartComponent.html":{}}}],["opacity",{"_index":1998,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["open",{"_index":2273,"title":{},"body":{"injectables/UserAchievementsService.html":{},"index.html":{}}}],["open(message",{"_index":1114,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["open(new",{"_index":1743,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["opencategorydialogsuccess",{"_index":883,"title":{},"body":{"injectables/ConfigService.html":{}}}],["opendialog",{"_index":2310,"title":{},"body":{"components/UserPageComponent.html":{}}}],["opendialog(component",{"_index":2323,"title":{},"body":{"components/UserPageComponent.html":{}}}],["openimagedialogsuccess",{"_index":885,"title":{},"body":{"injectables/ConfigService.html":{}}}],["openimageinfullscreen",{"_index":1921,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["openimageinfullscreen(imageurl",{"_index":1930,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["openproductdialogsuccess",{"_index":881,"title":{},"body":{"injectables/ConfigService.html":{}}}],["optimizes",{"_index":2514,"title":{},"body":{"index.html":{}}}],["optional",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["options",{"_index":762,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["order",{"_index":1395,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["orderdate",{"_index":1445,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orderdetails",{"_index":2109,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["orderid",{"_index":825,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{}}}],["orders",{"_index":1433,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts",{"_index":1432,"title":{},"body":{"injectables/DpOrdersService.html":{},"coverage.html":{}}}],["orders.service.ts:101",{"_index":1465,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:116",{"_index":1455,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:16",{"_index":1439,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:31",{"_index":1458,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:46",{"_index":1462,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:73",{"_index":1442,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orderstatus",{"_index":1449,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["out",{"_index":2031,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["output",{"_index":697,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{}}}],["outputs",{"_index":670,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{}}}],["overflow",{"_index":1982,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["overview",{"_index":2544,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["p",{"_index":1905,"title":{},"body":{"components/PageCatalogItemComponent.html":{},"components/UserPageComponent.html":{}}}],["p.dpimages?.length",{"_index":1906,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["package",{"_index":2444,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":152,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["page",{"_index":140,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{},"index.html":{}}}],["page'},{'name",{"_index":315,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["page.component.css",{"_index":2347,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.css,../../../styles/root.css",{"_index":2297,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.html",{"_index":2298,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts",{"_index":2296,"title":{},"body":{"components/UserPageComponent.html":{},"coverage.html":{}}}],["page.component.ts:105",{"_index":2313,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:111",{"_index":2320,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:118",{"_index":2321,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:122",{"_index":2324,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:158",{"_index":2319,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:177",{"_index":2315,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:196",{"_index":2317,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:54",{"_index":2330,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:55",{"_index":2325,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:56",{"_index":2341,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:57",{"_index":2340,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:58",{"_index":2326,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:59",{"_index":2336,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:61",{"_index":2333,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:65",{"_index":2331,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:69",{"_index":2332,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:74",{"_index":2337,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:76",{"_index":2339,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:81",{"_index":2329,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:86",{"_index":2335,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:89",{"_index":2312,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page.component.ts:98",{"_index":2322,"title":{},"body":{"components/UserPageComponent.html":{}}}],["page/user",{"_index":2295,"title":{},"body":{"components/UserPageComponent.html":{},"coverage.html":{}}}],["pagecartcomponent",{"_index":301,"title":{"components/PageCartComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["pagecatalogitemcomponent",{"_index":303,"title":{"components/PageCatalogItemComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["pageitemfromcatalogcomponent",{"_index":305,"title":{"components/PageItemFromCatalogComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["pagination",{"_index":2005,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["param",{"_index":381,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["parameters",{"_index":51,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["parseint(localstorage.getitem('userprojid",{"_index":470,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["pass",{"_index":517,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["password",{"_index":516,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/IDpUserProj.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["path",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{},"components/LoadingComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["payload",{"_index":450,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["payload).pipe",{"_index":557,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["payload.sub",{"_index":453,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["performance",{"_index":2515,"title":{},"body":{"index.html":{}}}],["phonenumber",{"_index":574,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipe",{"_index":1745,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["pipes",{"_index":2504,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":2459,"title":{},"body":{"dependencies.html":{}}}],["png",{"_index":1225,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["pointer",{"_index":233,"title":{},"body":{"components/AboutComponent.html":{}}}],["polymorpheuscomponent",{"_index":490,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/IconTrashComponent.html":{}}}],["polymorpheuscomponent(alertdeletecomponent",{"_index":1744,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["position",{"_index":1990,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["post",{"_index":332,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["post(`${this.baseurl}/create/${userprojid}/${achievementid",{"_index":2263,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["powerful",{"_index":2497,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":127,"title":{},"body":{"components/AboutComponent.html":{}}}],["previousurl",{"_index":613,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["previousurl.startswith(basedomain",{"_index":616,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["price",{"_index":768,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["primary",{"_index":180,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["private",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["product",{"_index":635,"title":{},"body":{"components/CardItemComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpProductAttributesService.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["product'},{'name",{"_index":286,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["product.component",{"_index":2345,"title":{},"body":{"components/UserPageComponent.html":{}}}],["product.component.css",{"_index":1249,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.html",{"_index":1250,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts",{"_index":1248,"title":{},"body":{"components/DialogProductComponent.html":{},"coverage.html":{}}}],["product.component.ts:135",{"_index":1266,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:176",{"_index":1261,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:186",{"_index":1262,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:196",{"_index":1260,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:204",{"_index":1255,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:214",{"_index":1263,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:38",{"_index":1280,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:40",{"_index":1267,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:41",{"_index":1270,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:42",{"_index":1282,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:43",{"_index":1283,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:44",{"_index":1268,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:45",{"_index":1284,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:47",{"_index":1269,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:49",{"_index":1279,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:58",{"_index":1285,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:62",{"_index":1286,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:66",{"_index":1259,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:76",{"_index":1264,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.component.ts:94",{"_index":1257,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["product.dpproductid",{"_index":1911,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["product/dialog",{"_index":1247,"title":{},"body":{"components/DialogProductComponent.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["productdata",{"_index":1258,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["productdata).subscribe",{"_index":1301,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["productdialog",{"_index":2306,"title":{},"body":{"components/UserPageComponent.html":{}}}],["productform",{"_index":1251,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["productid",{"_index":807,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpImagesService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["productinfo",{"_index":628,"title":{},"body":{"components/CardItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["productinfo.dpprice",{"_index":653,"title":{},"body":{"components/CardItemComponent.html":{}}}],["productinfo.dptitle",{"_index":652,"title":{},"body":{"components/CardItemComponent.html":{}}}],["productinfo?.dpcategory?.dpcategorytitle",{"_index":1981,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["productinfo?.dpdescription",{"_index":1980,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["productinfo?.dpprice",{"_index":1979,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["productinfo?.dptitle",{"_index":1978,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["production",{"_index":2513,"title":{},"body":{"index.html":{}}}],["productlist",{"_index":1902,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["productlist.length",{"_index":1908,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["productlist.reduce((sum",{"_index":1904,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["productnameinputref",{"_index":1147,"title":{},"body":{"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["products",{"_index":1680,"title":{},"body":{"interfaces/ICartViewModel.html":{},"components/PageCatalogItemComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"components/UserPageComponent.html":{}}}],["products.service.ts",{"_index":2033,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["products.service.ts:102",{"_index":2061,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:117",{"_index":2051,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:142",{"_index":2039,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:17",{"_index":2037,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:32",{"_index":2054,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:47",{"_index":2058,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:75",{"_index":2044,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsrepository",{"_index":1889,"title":{},"body":{"components/PageCatalogItemComponent.html":{},"components/UserPageComponent.html":{}}}],["productsrepositoryservice",{"_index":1252,"title":{},"body":{"components/DialogProductComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["productsservice",{"_index":2032,"title":{"injectables/ProductsService.html":{}},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["producttitle",{"_index":767,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderDetail.html":{},"components/PageCartComponent.html":{}}}],["proj",{"_index":317,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["proj'},{'name",{"_index":298,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["proj.component.css",{"_index":1812,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageProjComponent.html":{}}}],["proj.component.css,../../../styles/root.css",{"_index":1803,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["proj.component.html",{"_index":1804,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageProjComponent.html":{}}}],["proj.component.ts",{"_index":1802,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["proj.component.ts:112",{"_index":2392,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:34",{"_index":1811,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["proj.component.ts:37",{"_index":1807,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageProjComponent.html":{}}}],["proj.component.ts:38",{"_index":2397,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:39",{"_index":2398,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:40",{"_index":2395,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:41",{"_index":2396,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:42",{"_index":2389,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:45",{"_index":1810,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["proj.component.ts:49",{"_index":2393,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:69",{"_index":1809,"title":{},"body":{"components/LoginProjComponent.html":{}}}],["proj.component.ts:70",{"_index":2087,"title":{},"body":{"components/RegisterProjComponent.html":{}}}],["proj.component.ts:81",{"_index":2394,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:85",{"_index":2390,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.component.ts:91",{"_index":2391,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["proj.service",{"_index":442,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["proj.service.ts",{"_index":511,"title":{},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["proj.service.ts:101",{"_index":541,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:122",{"_index":543,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:129",{"_index":533,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:140",{"_index":538,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:41",{"_index":545,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:42",{"_index":548,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:47",{"_index":532,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:69",{"_index":536,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj/login",{"_index":1801,"title":{},"body":{"components/LoginProjComponent.html":{},"coverage.html":{}}}],["proj/register",{"_index":2086,"title":{},"body":{"components/RegisterProjComponent.html":{},"coverage.html":{}}}],["proj/user",{"_index":2388,"title":{},"body":{"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["project",{"_index":2475,"title":{},"body":{"index.html":{}}}],["projs.service.ts",{"_index":1543,"title":{},"body":{"injectables/DpUserProjsService.html":{},"coverage.html":{}}}],["projs.service.ts:110",{"_index":1559,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:16",{"_index":1550,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:31",{"_index":1562,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:46",{"_index":1567,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:70",{"_index":1552,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:95",{"_index":1570,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projtoken",{"_index":446,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/UserPageComponent.html":{}}}],["properties",{"_index":35,"title":{"properties.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"properties.html":{}}}],["property",{"_index":1678,"title":{},"body":{"interfaces/ICartItem.html":{}}}],["protected",{"_index":482,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["provide",{"_index":1604,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["provideanimations",{"_index":2552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providedin",{"_index":376,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["provideeventplugins",{"_index":2557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providehttpclient(withinterceptorsfromdi",{"_index":2553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providerouter(routes",{"_index":2556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":1603,"title":{},"body":{"components/FilterByInputComponent.html":{},"miscellaneous/variables.html":{}}}],["providezonechangedetection",{"_index":2554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":526,"title":{},"body":{"injectables/AuthProjService.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/PageCartComponent.html":{}}}],["put",{"_index":336,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["put(`${this.baseurl}/unlock/${userprojid}/${achievementid",{"_index":2264,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["q",{"_index":2122,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["quantity",{"_index":769,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IUpdateCartRequest.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["radius",{"_index":159,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["radius('l",{"_index":162,"title":{},"body":{"components/AboutComponent.html":{}}}],["ratio",{"_index":1993,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["reactive",{"_index":115,"title":{},"body":{"components/AboutComponent.html":{}}}],["reactiveformsmodule",{"_index":1007,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["read",{"_index":1069,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["readonly",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["recordachievement",{"_index":2147,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["recordachievement(userprojid",{"_index":2150,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["red",{"_index":1486,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["reference",{"_index":2545,"title":{},"body":{"index.html":{}}}],["references",{"_index":2542,"title":{},"body":{"index.html":{}}}],["register",{"_index":311,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["register'},{'name",{"_index":309,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["register(user",{"_index":591,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(userproj",{"_index":540,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["register.component.css",{"_index":2075,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.css,../../../styles/root.css",{"_index":2067,"title":{},"body":{"components/RegisterComponent.html":{}}}],["register.component.html",{"_index":2068,"title":{},"body":{"components/RegisterComponent.html":{}}}],["registercomponent",{"_index":308,"title":{"components/RegisterComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["registered",{"_index":581,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerfailed",{"_index":897,"title":{},"body":{"injectables/ConfigService.html":{}}}],["registeronchange",{"_index":1616,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["registeronchange(fn",{"_index":1630,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["registerontouched",{"_index":1617,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["registerontouched(fn",{"_index":1633,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["registerprojcomponent",{"_index":310,"title":{"components/RegisterProjComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["registersuccess",{"_index":850,"title":{},"body":{"injectables/ConfigService.html":{}}}],["relative",{"_index":1991,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["reload",{"_index":2490,"title":{},"body":{"index.html":{}}}],["remarks",{"_index":375,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["removefromcart",{"_index":961,"title":{},"body":{"injectables/ConfigService.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{}}}],["removefromcart(item",{"_index":804,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["removefromcart(request",{"_index":2124,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["removefromcartfailed",{"_index":921,"title":{},"body":{"injectables/ConfigService.html":{}}}],["removefromcartsuccess",{"_index":868,"title":{},"body":{"injectables/ConfigService.html":{}}}],["removeimage",{"_index":1151,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["repositories/achievements",{"_index":437,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["repositories/auth",{"_index":1778,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["repositories/categories",{"_index":1087,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/UserPageComponent.html":{}}}],["repositories/images",{"_index":700,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/DialogImageComponent.html":{},"components/UserPageComponent.html":{}}}],["repositories/products",{"_index":1287,"title":{},"body":{"components/DialogProductComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["repositories/shop",{"_index":758,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["repositories/user",{"_index":435,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["repository.service",{"_index":436,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["request",{"_index":829,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpImagesService.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["request.dpimagetitle",{"_index":1392,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["request.dpproductid.tostring",{"_index":1391,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["request.file",{"_index":1393,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["res",{"_index":520,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["reset",{"_index":2148,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["resettheme",{"_index":971,"title":{},"body":{"injectables/ConfigService.html":{}}}],["resetthemesuccess",{"_index":880,"title":{},"body":{"injectables/ConfigService.html":{}}}],["resources",{"_index":2537,"title":{},"body":{"index.html":{}}}],["response",{"_index":495,"title":{},"body":{"components/AlertDeleteComponent.html":{},"interfaces/CartItem.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["response.orderid",{"_index":826,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["response.status",{"_index":1001,"title":{},"body":{"injectables/ConfigService.html":{}}}],["response.success",{"_index":832,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["response.token",{"_index":559,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["response.userprojid",{"_index":2078,"title":{},"body":{"components/RegisterComponent.html":{}}}],["response.userprojid.tostring",{"_index":562,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["responsealert",{"_index":1735,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["responsetype",{"_index":1390,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["rest",{"_index":131,"title":{},"body":{"components/AboutComponent.html":{}}}],["restful",{"_index":119,"title":{},"body":{"components/AboutComponent.html":{}}}],["result",{"_index":2271,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["results",{"_index":320,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["results.foreach",{"_index":728,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["return",{"_index":379,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{}}}],["returns",{"_index":60,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["rgba(0",{"_index":1962,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["rgba(0,0,0,0.08",{"_index":235,"title":{},"body":{"components/AboutComponent.html":{}}}],["rgba(0,0,0,0.16",{"_index":240,"title":{},"body":{"components/AboutComponent.html":{}}}],["rgba(255",{"_index":2021,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["right",{"_index":231,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{}}}],["root",{"_index":377,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["root'},{'name",{"_index":271,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["route",{"_index":1925,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["router",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["routerlink",{"_index":22,"title":{},"body":{"components/AboutComponent.html":{}}}],["routermodule",{"_index":499,"title":{},"body":{"components/AppComponent.html":{}}}],["routeroutlet",{"_index":497,"title":{},"body":{"components/AppComponent.html":{}}}],["row",{"_index":220,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["run",{"_index":2483,"title":{},"body":{"index.html":{}}}],["runner",{"_index":2522,"title":{},"body":{"index.html":{}}}],["running",{"_index":2485,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AlertDeleteComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"components/DialogImageComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/IconTrashComponent.html":{},"components/PageCatalogItemComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":551,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["safeurl",{"_index":691,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["safevalue",{"_index":1654,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["sanitizer",{"_index":674,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["savedtheme",{"_index":2175,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["scaffolding",{"_index":2495,"title":{},"body":{"index.html":{}}}],["scale(1.05",{"_index":241,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["schemas",{"_index":101,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["schematics",{"_index":2502,"title":{},"body":{"index.html":{}}}],["scheme",{"_index":2160,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["search",{"_index":1624,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["searchquery",{"_index":1620,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["secondary",{"_index":2018,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["section",{"_index":184,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{}}}],["securitycontext",{"_index":1936,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["selectedfile",{"_index":1148,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["selectedsizeid",{"_index":1920,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["serveonce",{"_index":2484,"title":{},"body":{"index.html":{}}}],["server",{"_index":2481,"title":{},"body":{"index.html":{}}}],["servererror",{"_index":997,"title":{},"body":{"injectables/ConfigService.html":{}}}],["service",{"_index":2466,"title":{},"body":{"dependencies.html":{}}}],["services/auth",{"_index":441,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["services/auth.service",{"_index":98,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{}}}],["services/config.service",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["services/user",{"_index":89,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["serviceunavailable",{"_index":998,"title":{},"body":{"injectables/ConfigService.html":{}}}],["setalwaysfailmode",{"_index":2206,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["setalwaysfailmode(value",{"_index":2243,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["setauthenticated",{"_index":531,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["setauthenticated(isauthenticated",{"_index":542,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["setdisabledstate",{"_index":1618,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":1635,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["setdisabledstate?(isdisabled",{"_index":1668,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["settimeout",{"_index":2080,"title":{},"body":{"components/RegisterComponent.html":{}}}],["shadow",{"_index":165,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["shop",{"_index":2093,"title":{},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["shopcartrepositoryservice",{"_index":757,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["shopcartservice",{"_index":2092,"title":{"injectables/ShopCartService.html":{}},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["showerror",{"_index":1025,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["showerror(message",{"_index":1047,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["shownotification",{"_index":1734,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["showsuccess",{"_index":1026,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["showsuccess(message",{"_index":1049,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["showwarning",{"_index":1027,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["showwarning(message",{"_index":1051,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["simplechanges",{"_index":685,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["simulateserverfailure",{"_index":2207,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["size",{"_index":187,"title":{},"body":{"components/AboutComponent.html":{},"injectables/DpSizesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpSize.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["size('l",{"_index":204,"title":{},"body":{"components/AboutComponent.html":{}}}],["size('m",{"_index":189,"title":{},"body":{"components/AboutComponent.html":{}}}],["sizeid",{"_index":809,"title":{},"body":{"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"injectables/DpSizesService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpSize.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["sizename",{"_index":1700,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["sizes",{"_index":1511,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts",{"_index":1510,"title":{},"body":{"injectables/DpSizesService.html":{},"coverage.html":{}}}],["sizes.service.ts:108",{"_index":1527,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:16",{"_index":1517,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:31",{"_index":1530,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:46",{"_index":1534,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:69",{"_index":1520,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:93",{"_index":1537,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizing",{"_index":169,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["solid",{"_index":225,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["sota6sifront",{"_index":506,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"index.html":{}}}],["space",{"_index":2008,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["speed",{"_index":2516,"title":{},"body":{"index.html":{}}}],["src/.../app.config.ts",{"_index":2550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app.component.ts",{"_index":496,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:18",{"_index":507,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:19",{"_index":505,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.config.ts",{"_index":2407,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/data/components/alert",{"_index":477,"title":{},"body":{"components/AlertDeleteComponent.html":{},"coverage.html":{}}}],["src/app/data/components/back",{"_index":603,"title":{},"body":{"components/BackButtonComponent.html":{},"coverage.html":{}}}],["src/app/data/components/card",{"_index":620,"title":{},"body":{"components/CardItemComponent.html":{},"coverage.html":{}}}],["src/app/data/components/carousel",{"_index":656,"title":{},"body":{"components/CarouselImgComponent.html":{},"coverage.html":{}}}],["src/app/data/components/dialog",{"_index":1003,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"coverage.html":{}}}],["src/app/data/components/filter",{"_index":1599,"title":{},"body":{"components/FilterByInputComponent.html":{},"coverage.html":{}}}],["src/app/data/components/icon",{"_index":1728,"title":{},"body":{"components/IconTrashComponent.html":{},"coverage.html":{}}}],["src/app/data/components/loading/loading.component.ts",{"_index":1752,"title":{},"body":{"components/LoadingComponent.html":{},"coverage.html":{}}}],["src/app/data/components/loading/loading.component.ts:10",{"_index":1757,"title":{},"body":{"components/LoadingComponent.html":{}}}],["src/app/data/components/login",{"_index":1800,"title":{},"body":{"components/LoginProjComponent.html":{},"coverage.html":{}}}],["src/app/data/components/login/login.component.ts",{"_index":1758,"title":{},"body":{"components/LoginComponent.html":{},"coverage.html":{}}}],["src/app/data/components/login/login.component.ts:105",{"_index":1773,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/data/components/login/login.component.ts:38",{"_index":1777,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/data/components/login/login.component.ts:41",{"_index":1771,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/data/components/login/login.component.ts:53",{"_index":1774,"title":{},"body":{"components/LoginComponent.html":{}}}],["src/app/data/components/navbar/navbar.component.ts",{"_index":1819,"title":{},"body":{"components/NavbarComponent.html":{},"coverage.html":{}}}],["src/app/data/components/navbar/navbar.component.ts:32",{"_index":1831,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/data/components/navbar/navbar.component.ts:33",{"_index":1825,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/data/components/navbar/navbar.component.ts:41",{"_index":1829,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/data/components/navbar/navbar.component.ts:49",{"_index":1830,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/data/components/navbar/navbar.component.ts:53",{"_index":1828,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/data/components/navbar/navbar.component.ts:57",{"_index":1827,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/data/components/navbar/navbar.component.ts:62",{"_index":1826,"title":{},"body":{"components/NavbarComponent.html":{}}}],["src/app/data/components/register",{"_index":2085,"title":{},"body":{"components/RegisterProjComponent.html":{},"coverage.html":{}}}],["src/app/data/components/register/register.component.ts",{"_index":2066,"title":{},"body":{"components/RegisterComponent.html":{},"coverage.html":{}}}],["src/app/data/components/register/register.component.ts:105",{"_index":2072,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/data/components/register/register.component.ts:37",{"_index":2074,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/data/components/register/register.component.ts:40",{"_index":2071,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/data/components/register/register.component.ts:51",{"_index":2073,"title":{},"body":{"components/RegisterComponent.html":{}}}],["src/app/data/components/theme",{"_index":2139,"title":{},"body":{"components/ThemeToggleComponent.html":{},"coverage.html":{}}}],["src/app/data/page/about/about.component.ts",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/data/page/about/about.component.ts:38",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:39",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:40",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:41",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:47",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:51",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:57",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/achievments",{"_index":388,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"coverage.html":{}}}],["src/app/data/page/page",{"_index":739,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"coverage.html":{}}}],["src/app/data/page/user",{"_index":2294,"title":{},"body":{"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["src/app/interface/iachievement.ts",{"_index":1671,"title":{},"body":{"interfaces/IAchievement.html":{},"coverage.html":{}}}],["src/app/interface/iaddtocartrequest.ts",{"_index":1675,"title":{},"body":{"interfaces/IAddToCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/icartitem.ts",{"_index":1676,"title":{},"body":{"interfaces/ICartItem.html":{},"coverage.html":{}}}],["src/app/interface/icartviewmodel.ts",{"_index":1679,"title":{},"body":{"interfaces/ICartViewModel.html":{},"coverage.html":{}}}],["src/app/interface/icreatedpimagerequest.ts",{"_index":1682,"title":{},"body":{"interfaces/ICreateDpImageRequest.html":{},"coverage.html":{}}}],["src/app/interface/idpcategory.ts",{"_index":1683,"title":{},"body":{"interfaces/IDpCategory.html":{},"coverage.html":{}}}],["src/app/interface/idpimage.ts",{"_index":1686,"title":{},"body":{"interfaces/IDpImage.html":{},"coverage.html":{}}}],["src/app/interface/idporder.ts",{"_index":1690,"title":{},"body":{"interfaces/IDpOrder.html":{},"coverage.html":{}}}],["src/app/interface/idpordercomposition.ts",{"_index":1694,"title":{},"body":{"interfaces/IDpOrderComposition.html":{},"coverage.html":{}}}],["src/app/interface/idporderdetail.ts",{"_index":1699,"title":{},"body":{"interfaces/IDpOrderDetail.html":{},"coverage.html":{}}}],["src/app/interface/idpproduct.ts",{"_index":1702,"title":{},"body":{"interfaces/IDpProduct.html":{},"coverage.html":{}}}],["src/app/interface/idpproductattribute.ts",{"_index":1706,"title":{},"body":{"interfaces/IDpProductAttribute.html":{},"coverage.html":{}}}],["src/app/interface/idpsize.ts",{"_index":1710,"title":{},"body":{"interfaces/IDpSize.html":{},"coverage.html":{}}}],["src/app/interface/idpuser.ts",{"_index":1713,"title":{},"body":{"interfaces/IDpUser.html":{},"coverage.html":{}}}],["src/app/interface/idpuserproj.ts",{"_index":1719,"title":{},"body":{"interfaces/IDpUserProj.html":{},"coverage.html":{}}}],["src/app/interface/iremovefromcartrequest.ts",{"_index":1722,"title":{},"body":{"interfaces/IRemoveFromCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/iupdatecartrequest.ts",{"_index":1723,"title":{},"body":{"interfaces/IUpdateCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/iupdatedpimagerequest.ts",{"_index":1724,"title":{},"body":{"interfaces/IUpdateDpImageRequest.html":{},"coverage.html":{}}}],["src/app/interface/iuserhasachievement.ts",{"_index":1726,"title":{},"body":{"interfaces/IUserHasAchievement.html":{},"coverage.html":{}}}],["src/app/services/achievements.service.ts",{"_index":325,"title":{},"body":{"injectables/AchievementsService.html":{},"coverage.html":{}}}],["src/app/services/achievements.service.ts:116",{"_index":369,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:129",{"_index":356,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:140",{"_index":365,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:44",{"_index":346,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:56",{"_index":361,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:69",{"_index":359,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:92",{"_index":349,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/auth",{"_index":510,"title":{},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts",{"_index":571,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:127",{"_index":588,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:149",{"_index":589,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:51",{"_index":595,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:52",{"_index":596,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:57",{"_index":585,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:66",{"_index":593,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:91",{"_index":592,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/config.service.ts",{"_index":841,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/app/services/config.service.ts:107",{"_index":1000,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:23",{"_index":941,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:81",{"_index":975,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/dp",{"_index":1306,"title":{},"body":{"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["src/app/services/user",{"_index":2195,"title":{},"body":{"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["standalone",{"_index":128,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/ThemeToggleComponent.html":{}}}],["start",{"_index":211,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["started",{"_index":2474,"title":{"index.html":{}},"body":{}}],["state",{"_index":824,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["statements",{"_index":2405,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":2197,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["storage",{"_index":2145,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["store",{"_index":2509,"title":{},"body":{"index.html":{}}}],["stretch",{"_index":735,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["string",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUpdateDpImageRequest.html":{},"components/LoadingComponent.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["style",{"_index":208,"title":{},"body":{"components/AboutComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["styles/root.css",{"_index":100,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["styles/variables.css",{"_index":139,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["styleurl",{"_index":501,"title":{},"body":{"components/AppComponent.html":{},"components/LoadingComponent.html":{},"components/UserPageProjComponent.html":{}}}],["styleurls",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["subject",{"_index":1177,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["submit",{"_index":1028,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["submit(event",{"_index":1053,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["subscribe",{"_index":371,"title":{},"body":{"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["subscribe(attr",{"_index":1488,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["subscribe(image",{"_index":1360,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["subscribe(newach",{"_index":351,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["subscribe(newcategory",{"_index":1315,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["subscribe(newcomp",{"_index":1408,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["subscribe(neworder",{"_index":1452,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["subscribe(newproduct",{"_index":2048,"title":{},"body":{"injectables/ProductsService.html":{}}}],["subscribe(newsize",{"_index":1524,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["subscribe(newuser",{"_index":1556,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["subscribe(order",{"_index":2108,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["subscribe(res",{"_index":519,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["subscription",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{}}}],["subscriptions",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{}}}],["success",{"_index":648,"title":{},"body":{"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["successachievementid",{"_index":2235,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successful",{"_index":1816,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["successfully",{"_index":582,"title":{},"body":{"injectables/AuthService.html":{}}}],["successmessage",{"_index":2240,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successmessage.replace",{"_index":2277,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successtofailedmap",{"_index":2287,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successtofailedmap[successachievementid",{"_index":2293,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["such",{"_index":2503,"title":{},"body":{"index.html":{}}}],["suits",{"_index":2534,"title":{},"body":{"index.html":{}}}],["sum",{"_index":797,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["svg",{"_index":1840,"title":{},"body":{"components/NavbarComponent.html":{}}}],["switch",{"_index":2352,"title":{},"body":{"components/UserPageComponent.html":{}}}],["switchmap",{"_index":492,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/IconTrashComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["switchmap((response",{"_index":1746,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["switchmap(exists",{"_index":2280,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchmap(result",{"_index":2282,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchtheme",{"_index":959,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtodarkthemefailed",{"_index":915,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtodarkthemesuccess",{"_index":866,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtolightthemefailed",{"_index":913,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtolightthemesuccess",{"_index":865,"title":{},"body":{"injectables/ConfigService.html":{}}}],["systemtheme",{"_index":2189,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["table",{"_index":439,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"coverage.html":{},"dependencies.html":{}}}],["tables.css",{"_index":256,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":2443,"title":{},"body":{"coverage.html":{}}}],["taiga",{"_index":83,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["takeuntil",{"_index":493,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/IconTrashComponent.html":{}}}],["takeuntil(this.router.events",{"_index":1750,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["tap",{"_index":550,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/UserAchievementsService.html":{}}}],["tap(response",{"_index":558,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["targetinput",{"_index":1042,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["targetinput.nativeelement.queryselector('input').focus",{"_index":1133,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["templateurl",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["test",{"_index":2521,"title":{},"body":{"index.html":{}}}],["testing",{"_index":2529,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":2526,"title":{},"body":{"index.html":{}}}],["tests",{"_index":2518,"title":{},"body":{"index.html":{}}}],["text",{"_index":246,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["textachievement",{"_index":335,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{}}}],["theme",{"_index":312,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["theme=\"dark",{"_index":244,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["themetogglecomponent",{"_index":25,"title":{"components/ThemeToggleComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["this.achievementsservice.createachievement",{"_index":350,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.deleteachievement(1).subscribe",{"_index":357,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.getachievementbyid(1).subscribe(ach",{"_index":360,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.getallachievements().subscribe(list",{"_index":362,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.unlockachievement('first",{"_index":366,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.updateachievement(1",{"_index":370,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.alerts",{"_index":1113,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{}}}],["this.alerts.open",{"_index":1749,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["this.alertservice",{"_index":2272,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.alertservice.open",{"_index":791,"title":{},"body":{"interfaces/CartItem.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{}}}],["this.alertservice.open(errormessage",{"_index":1792,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["this.alertservice.open(response.message",{"_index":1951,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.alertservice.open(successmessage",{"_index":2283,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.allachievements",{"_index":456,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["this.allowedtypes.includes(file.type",{"_index":1223,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.alwaysfailmode",{"_index":1835,"title":{},"body":{"components/NavbarComponent.html":{},"components/UserPageProjComponent.html":{}}}],["this.authprojrepository.login(userproj).subscribe",{"_index":1814,"title":{},"body":{"components/LoginProjComponent.html":{}}}],["this.authprojrepository.register(userproj).subscribe",{"_index":2088,"title":{},"body":{"components/RegisterProjComponent.html":{}}}],["this.authprojservice.isauthenticated$.subscribe(isauthenticated",{"_index":2348,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.authprojservice.login",{"_index":518,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authprojservice.logout",{"_index":539,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authprojservice.register",{"_index":525,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authprojservice.setauthenticated(false",{"_index":2351,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.authprojservice.setauthenticated(this.isprojauthenticated",{"_index":2350,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.authrepository.login(user).subscribe",{"_index":1785,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.authrepository.register(user).subscribe",{"_index":2077,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.authservice.isauthenticated$.subscribe(isauthenticated",{"_index":1833,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.authservice.login",{"_index":584,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.logout",{"_index":590,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.register",{"_index":576,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.setauthenticated(false",{"_index":1837,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.authservice.setauthenticated(this.isauthenticated",{"_index":1839,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.cartitems",{"_index":785,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartitems.filter(cartitem",{"_index":811,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartitems.length",{"_index":816,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartitems.map((item",{"_index":839,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartitems.map(cartitem",{"_index":830,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartitems.reduce((sum",{"_index":796,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartservice.addtocart(request).subscribe",{"_index":1950,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.cartservice.checkout().subscribe",{"_index":819,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartservice.clearcart",{"_index":821,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartservice.getcart().subscribe",{"_index":782,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartservice.removefromcart",{"_index":806,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.cartservice.updatecart(request).subscribe",{"_index":831,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.categoriesrepository.getdpcategorybyid(id).subscribe",{"_index":2373,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.categoriesrepositoryservice.createdpcategory(categorydata).subscribe",{"_index":1103,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.categoriesrepositoryservice.updatedpcategory(categorydata.dpcategoryid",{"_index":1108,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.categorydialog",{"_index":2362,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.categorydialog(category).subscribe",{"_index":2374,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.categoryform.get('dpcategorytitle')?.setvalue(finalvalue",{"_index":1129,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.categoryform.patchvalue(this.data",{"_index":1093,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.categoryform.valid",{"_index":1088,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.categoryform.value",{"_index":1096,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.cd.markforcheck",{"_index":715,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["this.cdr.markforcheck",{"_index":789,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.checkauthstatus",{"_index":553,"title":{},"body":{"injectables/AuthProjService.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{}}}],["this.checklengthandwarn(cleanedvalue",{"_index":1127,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.checkuserachievementexists(userprojid",{"_index":2278,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.completedachievementids",{"_index":464,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["this.completedachievementids.includes(achievementid",{"_index":468,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["this.configservice.achievementids.addcategoryfailed",{"_index":1102,"title":{},"body":{"components/DialogCategoryComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addcategorysuccess",{"_index":1107,"title":{},"body":{"components/DialogCategoryComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addimagefailed",{"_index":1235,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addimagesuccess",{"_index":1240,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addtocartfailed",{"_index":1946,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addtocartsuccess",{"_index":942,"title":{},"body":{"injectables/ConfigService.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.buttonnotworking",{"_index":474,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.checkoutemptycart",{"_index":817,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.configservice.achievementids.checkoutfailed",{"_index":818,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.checkoutsuccess",{"_index":820,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.createproductfailed",{"_index":1294,"title":{},"body":{"components/DialogProductComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.createproductsuccess",{"_index":1298,"title":{},"body":{"components/DialogProductComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductinfofailed",{"_index":1945,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductinfosuccess",{"_index":1943,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductsfailed",{"_index":1910,"title":{},"body":{"components/PageCatalogItemComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductssuccess",{"_index":1909,"title":{},"body":{"components/PageCatalogItemComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loginfailed",{"_index":1784,"title":{},"body":{"components/LoginComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loginsuccess",{"_index":843,"title":{},"body":{"injectables/ConfigService.html":{},"components/LoginComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.logoutprojfailed",{"_index":2292,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.logoutprojsuccess",{"_index":2291,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.navigatetoproductfailed",{"_index":651,"title":{},"body":{"components/CardItemComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.navigatetoproductsuccess",{"_index":650,"title":{},"body":{"components/CardItemComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.opencategorydialogsuccess",{"_index":1091,"title":{},"body":{"components/DialogCategoryComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.openimagedialogsuccess",{"_index":1203,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.openproductdialogsuccess",{"_index":1289,"title":{},"body":{"components/DialogProductComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.registerfailed",{"_index":2076,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.registersuccess",{"_index":2079,"title":{},"body":{"components/RegisterComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.removefromcartfailed",{"_index":805,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.removefromcartsuccess",{"_index":814,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.resetthemesuccess",{"_index":2194,"title":{},"body":{"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtodarkthemefailed",{"_index":2184,"title":{},"body":{"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtodarkthemesuccess",{"_index":2187,"title":{},"body":{"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtolightthemefailed",{"_index":2185,"title":{},"body":{"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtolightthemesuccess",{"_index":2188,"title":{},"body":{"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.togglethemesuccess",{"_index":2290,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecartquantityfailed",{"_index":828,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecartquantitysuccess",{"_index":833,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecategoryfailed",{"_index":1112,"title":{},"body":{"components/DialogCategoryComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecategorysuccess",{"_index":1111,"title":{},"body":{"components/DialogCategoryComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateimagefailed",{"_index":1242,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateimagesuccess",{"_index":1246,"title":{},"body":{"components/DialogImageComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateproductfailed",{"_index":1299,"title":{},"body":{"components/DialogProductComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateproductsuccess",{"_index":1303,"title":{},"body":{"components/DialogProductComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateprofilefailed",{"_index":2289,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateprofilesuccess",{"_index":2288,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.viewproductfailed",{"_index":1944,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.viewproductsuccess",{"_index":1942,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.apiendpoints.login",{"_index":844,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.configservice.httpstatuscodes.badrequest",{"_index":2084,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.configservice.httpstatuscodes.conflict",{"_index":2083,"title":{},"body":{"components/RegisterComponent.html":{}}}],["this.configservice.httpstatuscodes.notfound",{"_index":2268,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.httpstatuscodes.servererror",{"_index":1791,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.configservice.httpstatuscodes.success",{"_index":1002,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.configservice.httpstatuscodes.unauthorized",{"_index":1790,"title":{},"body":{"components/LoginComponent.html":{}}}],["this.context.completewith(categorydata",{"_index":1110,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.context.completewith(createdcategory",{"_index":1105,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.context.completewith(createdimage",{"_index":1239,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.context.completewith(createdproduct",{"_index":1297,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.context.completewith(productdata",{"_index":1302,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.context.completewith(this.data",{"_index":1245,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.context.data",{"_index":1089,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.createcategory(categorydata",{"_index":1100,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.createimage(createrequest",{"_index":1234,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.createproduct(productdata",{"_index":1293,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.createuserachievement(userprojid",{"_index":2281,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.darkmode",{"_index":2164,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.darkmode.set(systemtheme",{"_index":2191,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.darkmode.set(this.toggle",{"_index":2178,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.data",{"_index":1092,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.data.dpcategoryid",{"_index":1097,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.data.dpimagesid",{"_index":1228,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.data.dpimagetitle",{"_index":1206,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.data.dpproductid",{"_index":1205,"title":{},"body":{"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.dpcategoriesservice.createdpcategory",{"_index":1314,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.deletedpcategory(1).subscribe",{"_index":1317,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.getalldpcategories().subscribe(categories",{"_index":1309,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.getdpcategorybyid(1).subscribe(category",{"_index":1312,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.updatedpcategory(1",{"_index":1316,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpimagesservice.createdpimage",{"_index":1359,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.deletedpimage(10).subscribe",{"_index":1364,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getalldpimages().subscribe(images",{"_index":1367,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagebyid(10).subscribe(image",{"_index":1372,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagedata(10).subscribe(blob",{"_index":1376,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagesbyproductid(5).subscribe(images",{"_index":1381,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpordercompositionsservice.createdpordercomposition",{"_index":1407,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.deletedpordercomposition(1).subscribe",{"_index":1411,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.getalldpordercompositions().subscribe(compositions",{"_index":1399,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.getdpordercompositionbyid(1).subscribe(composition",{"_index":1402,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.updatedpordercomposition(1",{"_index":1410,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordersservice.createdporder",{"_index":1450,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.deletedporder(1).subscribe",{"_index":1457,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.getalldporders().subscribe(orders",{"_index":1459,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.getdporderbyid(1).subscribe(order",{"_index":1463,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.updatedporder(1",{"_index":1466,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpproductattributesservice.createdpproductattribute",{"_index":1487,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.deletedpproductattribute(1).subscribe",{"_index":1494,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.getalldpproductattributes().subscribe(attrs",{"_index":1496,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.getdpproductattributebyid(1).subscribe(attr",{"_index":1501,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.updatedpproductattribute(1",{"_index":1506,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpsizesservice.createdpsize",{"_index":1523,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.deletedpsize(1).subscribe",{"_index":1529,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.getalldpsizes().subscribe(sizes",{"_index":1531,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.getdpsizebyid(1).subscribe(size",{"_index":1535,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.updatedpsize(1",{"_index":1539,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpuserprojsservice.createdpuserproj",{"_index":1555,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.deletedpuserproj(1).subscribe",{"_index":1561,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.getalldpuserprojs().subscribe(users",{"_index":1563,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.getdpuserprojbyid(1).subscribe(user",{"_index":1568,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.updatedpuserproj(1",{"_index":1571,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpusersservice.createdpuser",{"_index":1584,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.deletedpuser(1).subscribe",{"_index":1589,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.getalldpusers().subscribe(users",{"_index":1591,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.getdpuserbyid(1).subscribe(user",{"_index":1594,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.updatedpuser(1",{"_index":1597,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.failedimage$.next(file",{"_index":1217,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.failedimage$.next(null",{"_index":1209,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.failedimage$.next(this.selectedfile",{"_index":1236,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.form.controls['search'].setvalue(value",{"_index":1664,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.form.controls['search'].valuechanges.subscribe(value",{"_index":1653,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.form.disable",{"_index":1669,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.form.enable",{"_index":1670,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.form.get('search')?.value",{"_index":1649,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.form.valid",{"_index":1781,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["this.form.value.login",{"_index":1813,"title":{},"body":{"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["this.form.value.password",{"_index":1783,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["this.form.value.username",{"_index":1782,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["this.getalwaysfailmode",{"_index":2259,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.getfailedachievementid(achievementid",{"_index":2284,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.gettotal(item",{"_index":798,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.hasvalue",{"_index":1095,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.http",{"_index":2262,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.delete(`${this.baseurl}/${id",{"_index":385,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.get(`${this.baseurl}/${id",{"_index":382,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.get(`${this.baseurl}/${id}/image",{"_index":1389,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.get(`${this.baseurl}/${userprojid}/${achievementid",{"_index":2261,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.get(`${this.baseurl}/byproduct/${productid",{"_index":1388,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.get(`${this.baseurl}/exists/${userprojid}/${achievementid}`).pipe",{"_index":2266,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.get(`${this.baseurl}/quantity?productid=${productid}&sizeid=${sizeid",{"_index":2135,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.get(this.baseurl",{"_index":380,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["this.http.post('/api/dpimages",{"_index":1355,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.post(`${this.baseurl}/addtocart",{"_index":2065,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/checkout",{"_index":2136,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/export?orderid=${orderid",{"_index":2138,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/login",{"_index":556,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.http.post(`${this.baseurl}/register",{"_index":564,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.http.post(`${this.baseurl}/removefromcart",{"_index":2137,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/updatecart",{"_index":2134,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(this.baseurl",{"_index":383,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.put('/api/dpimages/10",{"_index":1385,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.put(`${this.baseurl}/${id",{"_index":384,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.imageclick.emit(imageurl",{"_index":732,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.imagecontrol.setvalue(file",{"_index":1218,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.imagecontrol.setvalue(null",{"_index":1207,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.imagedialog",{"_index":2365,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.imagedialog(image).subscribe",{"_index":2376,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.imageform.patchvalue",{"_index":1204,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.imageform.valid",{"_index":1201,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.imageform.value",{"_index":1226,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.images",{"_index":712,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.images.filter(image",{"_index":717,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.images.length",{"_index":713,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.imagesrepository.getdpimagebyid(id).subscribe",{"_index":2375,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.imagesrepository.getdpimagedata(image.dpimagesid).pipe",{"_index":722,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.imagesrepositoryservice.createdpimage(imagedata).subscribe",{"_index":1237,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.imagesrepositoryservice.updatedpimage(this.data.dpimagesid",{"_index":1243,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.imageurls",{"_index":714,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.imageurls[id",{"_index":730,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.imageurls[image.dpimagesid",{"_index":718,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.innervalue",{"_index":1663,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.isauthenticated",{"_index":1834,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.isauthenticatedsubject.asobservable",{"_index":546,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.isauthenticatedsubject.next(isauthenticated",{"_index":565,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.isloading",{"_index":788,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{}}}],["this.isprojauthenticated",{"_index":2349,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.item.productid",{"_index":1748,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["this.items.filter(item",{"_index":1651,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.loadcartitems",{"_index":780,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.loadedimage$.next(file",{"_index":1219,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.loadedimage$.next(null",{"_index":1208,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.loadimageurls",{"_index":706,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.loadingimage$.next(null",{"_index":1210,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.loadingimage$.next(this.selectedfile",{"_index":1227,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.loadproductinfo",{"_index":1938,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.loadproducts(userprojid",{"_index":1899,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["this.loadproductsorfail",{"_index":1897,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["this.location.back",{"_index":617,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["this.location.path(true",{"_index":614,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["this.maxfilesize",{"_index":1221,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.media.matches",{"_index":2190,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.navigateto",{"_index":106,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.onchange",{"_index":1666,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.onchange(safevalue",{"_index":1656,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.ontouched",{"_index":1667,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.openimageinfullscreen(imageurl",{"_index":1977,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.productdialog",{"_index":2354,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.productdialog(product).subscribe",{"_index":2370,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.productform.patchvalue",{"_index":1304,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.productform.patchvalue(this.data",{"_index":1290,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.productform.valid",{"_index":1288,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.productform.value",{"_index":1291,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.productinfo",{"_index":1941,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.productinfo.dpimages",{"_index":645,"title":{},"body":{"components/CardItemComponent.html":{}}}],["this.productinfo.dpproductid",{"_index":1947,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.productinfo?.dpimages",{"_index":1937,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.products",{"_index":1898,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["this.products$.subscribe",{"_index":1901,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["this.products.push(data",{"_index":2358,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.productsrepository.getallproducts",{"_index":1900,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["this.productsrepository.getproductbyid(id).subscribe",{"_index":2369,"title":{},"body":{"components/UserPageComponent.html":{}}}],["this.productsrepositoryservice.createproduct(productdata).subscribe",{"_index":1295,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.productsrepositoryservice.getproductbyid(+dpproductid).subscribe",{"_index":1940,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.productsrepositoryservice.updateproduct(productdata.dpproductid",{"_index":1300,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.productsservice.addtocart",{"_index":2041,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.createproduct",{"_index":2047,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.deleteproduct(1).subscribe",{"_index":2053,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.getallproducts().subscribe(products",{"_index":2055,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.getproductbyid(1).subscribe(product",{"_index":2059,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.updateproduct(1",{"_index":2062,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.quantity",{"_index":1948,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.recordachievement",{"_index":2193,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.recordachievement(userprojid",{"_index":2186,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.responsealert.emit(true",{"_index":1747,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["this.route.snapshot.parammap.get('dpproductid",{"_index":1939,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.router.navigate",{"_index":1787,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{}}}],["this.router.navigate(['/login",{"_index":2081,"title":{},"body":{"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["this.router.navigate(['/order",{"_index":822,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.router.navigate(['/register",{"_index":1793,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{}}}],["this.router.navigate([path",{"_index":105,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{}}}],["this.router.navigatebyurl",{"_index":618,"title":{},"body":{"components/BackButtonComponent.html":{}}}],["this.sanitizer.bypasssecuritytrusturl(url",{"_index":731,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.sanitizer.sanitize(securitycontext.url",{"_index":1952,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.searchquery.emit(safevalue",{"_index":1655,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.searchquery.emit(value",{"_index":1650,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["this.selectedfile",{"_index":1202,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.selectedsizeid",{"_index":1949,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["this.setauthenticated(!!token",{"_index":566,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.setauthenticated(false",{"_index":570,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.setauthenticated(true",{"_index":563,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.shopcartservice.addtocart",{"_index":2103,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.checkout",{"_index":2107,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.exporttoexcel(123).subscribe(blob",{"_index":2112,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.getcart().subscribe(cart",{"_index":2115,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.getcartquantity(1",{"_index":2120,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.removefromcart",{"_index":2126,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.updatecart",{"_index":2130,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.showerror",{"_index":1101,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.showerror(validationerror",{"_index":1216,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.showsuccess",{"_index":1106,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.showwarning",{"_index":1132,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["this.simulateserverfailure",{"_index":2260,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.storage.getitem(this.key",{"_index":2176,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.storage.removeitem(this.key",{"_index":2192,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.storage.setitem(this.key",{"_index":2181,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.subscriptions.add",{"_index":726,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["this.subscriptions.unsubscribe",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{}}}],["this.toggle",{"_index":2177,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.toggle.tostring",{"_index":2182,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.togglecount",{"_index":2183,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["this.unlockuserachievement(userprojid",{"_index":2275,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.updatecartitemquantity(item",{"_index":802,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["this.updatecategory",{"_index":1098,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["this.updateimage(updaterequest",{"_index":1232,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["this.updateproduct",{"_index":1292,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["this.userachievementsrepo.getcompletedachievementsbyusername(this.username",{"_index":462,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["this.userachievementsrepository",{"_index":472,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{}}}],["this.userachievementsrepository.handleachievement",{"_index":649,"title":{},"body":{"components/CardItemComponent.html":{}}}],["this.userachievementsservice.checkuserachievementexists(1",{"_index":2213,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.createuserachievement(1",{"_index":2220,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getalluserachievements().subscribe(list",{"_index":2225,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getalwaysfailmode",{"_index":646,"title":{},"body":{"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageProjComponent.html":{}}}],["this.userachievementsservice.getcompletedachievementsbyusername('vasya').subscribe(list",{"_index":2230,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getfailedachievementid(14",{"_index":2234,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getuserachievement(1",{"_index":2239,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.handleachievement(1",{"_index":2242,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.setalwaysfailmode(this.alwaysfailmode",{"_index":1836,"title":{},"body":{"components/NavbarComponent.html":{}}}],["this.userachievementsservice.setalwaysfailmode(true",{"_index":2245,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.unlockuserachievement(1",{"_index":2250,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.username",{"_index":452,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["this.validatefile(file",{"_index":1215,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["throwerror",{"_index":2254,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["title",{"_index":175,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AppComponent.html":{},"interfaces/IAchievement.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["toggle",{"_index":2141,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle'},{'name",{"_index":313,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["toggle.component",{"_index":96,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{}}}],["toggle.component.css",{"_index":2174,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.css,../../../styles/root.css",{"_index":2143,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.html",{"_index":2144,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts",{"_index":2140,"title":{},"body":{"components/ThemeToggleComponent.html":{},"coverage.html":{}}}],["toggle.component.ts:20",{"_index":2158,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:21",{"_index":2163,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:22",{"_index":2161,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:23",{"_index":2156,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:24",{"_index":2166,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:25",{"_index":2167,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:26",{"_index":2154,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:27",{"_index":2155,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:29",{"_index":2165,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:30",{"_index":2149,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:42",{"_index":2153,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:80",{"_index":2152,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle.component.ts:96",{"_index":2151,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggle/theme",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{},"components/NavbarComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"coverage.html":{}}}],["togglealwaysfail",{"_index":1824,"title":{},"body":{"components/NavbarComponent.html":{},"components/UserPageProjComponent.html":{}}}],["togglecount",{"_index":2146,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["toggletheme",{"_index":969,"title":{},"body":{"injectables/ConfigService.html":{},"components/ThemeToggleComponent.html":{}}}],["togglethemesuccess",{"_index":878,"title":{},"body":{"injectables/ConfigService.html":{}}}],["token",{"_index":521,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"components/UserPageComponent.html":{}}}],["tools",{"_index":2498,"title":{},"body":{"index.html":{}}}],["top",{"_index":216,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["total",{"_index":1882,"title":{},"body":{"components/PageCartComponent.html":{}}}],["totalprice",{"_index":770,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IDpOrderDetail.html":{},"components/PageCartComponent.html":{}}}],["totalsorter",{"_index":772,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["trackbyindex",{"_index":1850,"title":{},"body":{"components/PageCartComponent.html":{}}}],["trackbyindex(index",{"_index":793,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["trackbyproductid",{"_index":1886,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["trackbyproductid(index",{"_index":1892,"title":{},"body":{"components/PageCatalogItemComponent.html":{}}}],["transform",{"_index":238,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["transition",{"_index":236,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["translate",{"_index":2003,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["translatey",{"_index":1987,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["translatey(0",{"_index":2029,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["translatey(10px",{"_index":2028,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["transparent",{"_index":1997,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["trash",{"_index":1731,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["trash'},{'name",{"_index":291,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["trash.component.css",{"_index":1741,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["trash.component.css,../../../styles/root.css",{"_index":1732,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["trash.component.html",{"_index":1733,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["trash.component.ts",{"_index":1730,"title":{},"body":{"components/IconTrashComponent.html":{},"coverage.html":{}}}],["trash.component.ts:19",{"_index":1738,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["trash.component.ts:22",{"_index":1737,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["trash.component.ts:28",{"_index":1739,"title":{},"body":{"components/IconTrashComponent.html":{}}}],["trash/icon",{"_index":1729,"title":{},"body":{"components/IconTrashComponent.html":{},"coverage.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["true",{"_index":659,"title":{},"body":{"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":2216,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["try",{"_index":449,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/BackButtonComponent.html":{}}}],["tslib",{"_index":2469,"title":{},"body":{"dependencies.html":{}}}],["tui",{"_index":155,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["tui.border",{"_index":161,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.breakpoint('sm",{"_index":172,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.font",{"_index":188,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(1",{"_index":178,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(2",{"_index":174,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(4",{"_index":151,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui_dark_mode",{"_index":508,"title":{},"body":{"components/AppComponent.html":{},"components/ThemeToggleComponent.html":{}}}],["tui_dark_mode_key",{"_index":2168,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["tuiaccordion",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiaccordionitem",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuialertoptions",{"_index":489,"title":{},"body":{"components/AlertDeleteComponent.html":{}}}],["tuialertservice",{"_index":82,"title":{},"body":{"components/AboutComponent.html":{},"components/AlertDeleteComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["tuiamountpipe",{"_index":660,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["tuiappearance",{"_index":623,"title":{},"body":{"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["tuiautofocus",{"_index":137,"title":{},"body":{"components/AboutComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/UserPageComponent.html":{}}}],["tuiavatar",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuibutton",{"_index":18,"title":{},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuicardlarge",{"_index":1759,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["tuicarousel",{"_index":661,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["tuicomparator",{"_index":750,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["tuidatalistwrapper",{"_index":1008,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuiday",{"_index":745,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["tuiday.currentlocal",{"_index":787,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["tuidefaultsort",{"_index":751,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["tuidefaultsort(a.price",{"_index":774,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["tuidialog",{"_index":2346,"title":{},"body":{"components/UserPageComponent.html":{}}}],["tuidialog(dialogcategorycomponent",{"_index":2327,"title":{},"body":{"components/UserPageComponent.html":{}}}],["tuidialog(dialogimagecomponent",{"_index":2334,"title":{},"body":{"components/UserPageComponent.html":{}}}],["tuidialog(dialogproductcomponent",{"_index":2338,"title":{},"body":{"components/UserPageComponent.html":{}}}],["tuidialogcontext",{"_index":1083,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["tuidialogservice",{"_index":1084,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/UserPageComponent.html":{}}}],["tuierror",{"_index":1760,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["tuifielderrorpipe",{"_index":1761,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["tuifilelike",{"_index":1197,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["tuifiles",{"_index":1137,"title":{},"body":{"components/DialogImageComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuiform",{"_index":1762,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["tuiheader",{"_index":1763,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["tuiicon",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"components/IconTrashComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuiiconpipe",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{},"components/IconTrashComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuiinputmodule",{"_index":1009,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuilink",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{},"components/AppComponent.html":{},"components/NavbarComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuiloader",{"_index":663,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["tuinotification",{"_index":1764,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["tuipagination",{"_index":662,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["tuipopover",{"_index":487,"title":{},"body":{"components/AlertDeleteComponent.html":{}}}],["tuiroot",{"_index":498,"title":{},"body":{"components/AppComponent.html":{}}}],["tuiscrollable",{"_index":395,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["tuiscrollbar",{"_index":396,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["tuiselectmodule",{"_index":1010,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuislider",{"_index":1011,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuiswitch",{"_index":2142,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["tuitable",{"_index":397,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["tuitextfield",{"_index":1012,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuitextfieldcontrollermodule",{"_index":1013,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["tuititle",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{}}}],["type",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":710,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["typescript",{"_index":114,"title":{},"body":{"components/AboutComponent.html":{}}}],["typography.css",{"_index":257,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["ui",{"_index":108,"title":{},"body":{"components/AboutComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{}}}],["ui/addon",{"_index":438,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"dependencies.html":{}}}],["ui/cdk",{"_index":488,"title":{},"body":{"components/AlertDeleteComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/PageCartComponent.html":{},"components/UserPageComponent.html":{},"dependencies.html":{}}}],["ui/core",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["ui/event",{"_index":2458,"title":{},"body":{"dependencies.html":{}}}],["ui/icons",{"_index":2461,"title":{},"body":{"dependencies.html":{}}}],["ui/kit",{"_index":85,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["ui/layout",{"_index":1779,"title":{},"body":{"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"dependencies.html":{}}}],["ui/legacy",{"_index":1085,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"dependencies.html":{}}}],["ui/polymorpheus",{"_index":491,"title":{},"body":{"components/AlertDeleteComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/IconTrashComponent.html":{}}}],["uint8array",{"_index":1688,"title":{},"body":{"interfaces/IDpImage.html":{}}}],["unauthorized",{"_index":990,"title":{},"body":{"injectables/ConfigService.html":{}}}],["undefined",{"_index":1384,"title":{},"body":{"injectables/DpImagesService.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["unit",{"_index":2517,"title":{},"body":{"index.html":{}}}],["unitprice",{"_index":1701,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["unlockachievement",{"_index":343,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlockachievement(achievementtitle",{"_index":364,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlocked",{"_index":387,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlockuserachievement",{"_index":2208,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["unlockuserachievement(userprojid",{"_index":2247,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["updateachievement",{"_index":344,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["updateachievement(id",{"_index":368,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["updatecart",{"_index":2099,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["updatecart(request",{"_index":2127,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["updatecartitemquantity",{"_index":1851,"title":{},"body":{"components/PageCartComponent.html":{}}}],["updatecartitemquantity(item",{"_index":827,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["updatecartquantity",{"_index":963,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecartquantityfailed",{"_index":923,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecartquantitysuccess",{"_index":870,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecategory",{"_index":1029,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["updatecategory(categorydata",{"_index":1056,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["updatecategoryfailed",{"_index":933,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecategorysuccess",{"_index":889,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updated",{"_index":838,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{},"injectables/ShopCartService.html":{}}}],["updatedpcategory",{"_index":1322,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["updatedpcategory(id",{"_index":1332,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["updatedpimage",{"_index":1343,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["updatedpimage(id",{"_index":1382,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["updatedporder",{"_index":1438,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["updatedporder(id",{"_index":1464,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["updatedpordercomposition",{"_index":1416,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["updatedpordercomposition(id",{"_index":1427,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["updatedpproductattribute",{"_index":1476,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["updatedpproductattribute(id",{"_index":1502,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["updatedpsize",{"_index":1516,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["updatedpsize(id",{"_index":1536,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["updatedpuser",{"_index":1579,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["updatedpuser(id",{"_index":1595,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["updatedpuserproj",{"_index":1549,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["updatedpuserproj(id",{"_index":1569,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["updateimage",{"_index":1152,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["updateimage(imagedata",{"_index":1165,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["updateimagefailed",{"_index":935,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateimagesuccess",{"_index":891,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateon",{"_index":763,"title":{},"body":{"interfaces/CartItem.html":{},"components/PageCartComponent.html":{}}}],["updateproduct",{"_index":1253,"title":{},"body":{"components/DialogProductComponent.html":{},"injectables/ProductsService.html":{}}}],["updateproduct(id",{"_index":2060,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproduct(productdata",{"_index":1265,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["updateproductfailed",{"_index":937,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateproductsuccess",{"_index":893,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofile",{"_index":952,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofilefailed",{"_index":907,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofilesuccess",{"_index":860,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updaterequest",{"_index":1229,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["url",{"_index":514,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ShopCartService.html":{}}}],["url.createobjecturl(blob",{"_index":729,"title":{},"body":{"components/CarouselImgComponent.html":{},"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["url.revokeobjecturl(url",{"_index":711,"title":{},"body":{"components/CarouselImgComponent.html":{}}}],["use",{"_index":2523,"title":{},"body":{"index.html":{}}}],["useexisting",{"_index":1606,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["user",{"_index":230,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["user'},{'name",{"_index":266,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["user.component",{"_index":2399,"title":{},"body":{"components/UserPageProjComponent.html":{}}}],["user.component.css",{"_index":443,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.css,../../../styles/root.css",{"_index":398,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.html",{"_index":399,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts",{"_index":390,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"coverage.html":{}}}],["user.component.ts:102",{"_index":421,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:30",{"_index":422,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:31",{"_index":425,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:32",{"_index":434,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:33",{"_index":433,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:34",{"_index":424,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:35",{"_index":429,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:36",{"_index":431,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:38",{"_index":427,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:39",{"_index":416,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:47",{"_index":420,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.component.ts:98",{"_index":418,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["user.dppassword",{"_index":599,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dpphonenumber",{"_index":600,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dpusername",{"_index":598,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/achievments",{"_index":389,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["userachievementsrepo",{"_index":412,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["userachievementsrepository",{"_index":405,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["userachievementsrepositoryservice",{"_index":413,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageProjComponent.html":{}}}],["userachievementsservice",{"_index":41,"title":{"injectables/UserAchievementsService.html":{}},"body":{"components/AboutComponent.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["userid",{"_index":406,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["username",{"_index":407,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/LoginComponent.html":{},"components/RegisterComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["userpagecomponent",{"_index":314,"title":{"components/UserPageComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["userpageprojcomponent",{"_index":316,"title":{"components/UserPageProjComponent.html":{}},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"coverage.html":{}}}],["userproj",{"_index":537,"title":{},"body":{"injectables/AuthProjService.html":{},"components/LoginProjComponent.html":{},"components/RegisterProjComponent.html":{}}}],["userproj.login",{"_index":554,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["userproj.password",{"_index":555,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["userprojid",{"_index":469,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CardItemComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageProjComponent.html":{}}}],["userprojs",{"_index":1544,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["users",{"_index":1564,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["users.service.ts",{"_index":1574,"title":{},"body":{"injectables/DpUsersService.html":{},"coverage.html":{}}}],["users.service.ts:110",{"_index":1587,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:16",{"_index":1580,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:31",{"_index":1590,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:46",{"_index":1593,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:70",{"_index":1582,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:95",{"_index":1596,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["using",{"_index":2477,"title":{},"body":{"index.html":{}}}],["ux",{"_index":138,"title":{},"body":{"components/AboutComponent.html":{}}}],["validatefile",{"_index":1153,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["validatefile(file",{"_index":1168,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["validationerror",{"_index":1214,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["validators",{"_index":1082,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["validators.max(100",{"_index":1278,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["validators.maxlength(200",{"_index":1182,"title":{},"body":{"components/DialogImageComponent.html":{}}}],["validators.min(0",{"_index":1275,"title":{},"body":{"components/DialogProductComponent.html":{}}}],["validators.minlength(3",{"_index":1775,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.minlength(6",{"_index":1776,"title":{},"body":{"components/LoginComponent.html":{},"components/RegisterComponent.html":{}}}],["validators.pattern('^[a",{"_index":1640,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["validators.required",{"_index":1064,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["validids",{"_index":454,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["validids.includes(a.achievementid",{"_index":458,"title":{},"body":{"components/AchievmentsPageForUserComponent.html":{}}}],["value",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"components/FilterByInputComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"injectables/ProductsService.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"injectables/ShopCartService.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{},"miscellaneous/variables.html":{}}}],["value.length",{"_index":1130,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["value.slice(0",{"_index":1131,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["var",{"_index":154,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/AppComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoadingComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["variable",{"_index":2408,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2549,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["variables.css",{"_index":248,"title":{},"body":{"components/AboutComponent.html":{},"components/AchievmentsPageForUserComponent.html":{},"components/AlertDeleteComponent.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"components/UserPageComponent.html":{}}}],["version",{"_index":2478,"title":{},"body":{"index.html":{},"properties.html":{}}}],["vertical",{"_index":181,"title":{},"body":{"components/AboutComponent.html":{}}}],["viewchild",{"_index":1081,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["viewchild('categorynameinput",{"_index":1068,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["viewchild('productnameinput",{"_index":1190,"title":{},"body":{"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["viewproduct",{"_index":948,"title":{},"body":{"injectables/ConfigService.html":{}}}],["viewproductfailed",{"_index":903,"title":{},"body":{"injectables/ConfigService.html":{}}}],["viewproductsuccess",{"_index":856,"title":{},"body":{"injectables/ConfigService.html":{}}}],["visit",{"_index":2543,"title":{},"body":{"index.html":{}}}],["void",{"_index":61,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"components/AchievmentsPageForUserComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"components/BackButtonComponent.html":{},"components/CardItemComponent.html":{},"components/CarouselImgComponent.html":{},"interfaces/CartItem.html":{},"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{},"components/FilterByInputComponent.html":{},"components/IconTrashComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/NavbarComponent.html":{},"components/PageCartComponent.html":{},"components/PageCatalogItemComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/ThemeToggleComponent.html":{},"injectables/UserAchievementsService.html":{},"components/UserPageComponent.html":{},"components/UserPageProjComponent.html":{}}}],["wa_local_storage",{"_index":2169,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["wa_window",{"_index":2170,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["warning",{"_index":1134,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["warningthreshold",{"_index":1033,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogProductComponent.html":{}}}],["web",{"_index":2172,"title":{},"body":{"components/ThemeToggleComponent.html":{}}}],["webpack",{"_index":125,"title":{},"body":{"components/AboutComponent.html":{}}}],["weight",{"_index":200,"title":{},"body":{"components/AboutComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["weight('bold",{"_index":202,"title":{},"body":{"components/AboutComponent.html":{}}}],["whenever",{"_index":2491,"title":{},"body":{"index.html":{}}}],["white",{"_index":2012,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["width",{"_index":142,"title":{},"body":{"components/AboutComponent.html":{},"components/CarouselImgComponent.html":{},"components/LoginComponent.html":{},"components/LoginProjComponent.html":{},"components/PageCartComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/RegisterComponent.html":{},"components/RegisterProjComponent.html":{},"components/UserPageComponent.html":{}}}],["window.location.origin}/api/achievements",{"_index":372,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["window.location.origin}/api/auth",{"_index":594,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.location.origin}/api/authproj",{"_index":544,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["window.location.origin}/api/dpcategories",{"_index":1334,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["window.location.origin}/api/dpimages",{"_index":1387,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["window.location.origin}/api/dpordercompositions",{"_index":1429,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["window.location.origin}/api/dporders",{"_index":1467,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["window.location.origin}/api/dpproductattributes",{"_index":1507,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["window.location.origin}/api/dpsizes",{"_index":1540,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["window.location.origin}/api/dpuserprojs",{"_index":1572,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["window.location.origin}/api/dpusers",{"_index":1598,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["window.location.origin}/api/products",{"_index":2063,"title":{},"body":{"injectables/ProductsService.html":{}}}],["window.location.origin}/api/shopcart",{"_index":2131,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["window.open(url",{"_index":1377,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["wrap",{"_index":223,"title":{},"body":{"components/AboutComponent.html":{},"components/PageItemFromCatalogComponent.html":{},"components/UserPageComponent.html":{}}}],["wrapper",{"_index":733,"title":{},"body":{"components/CarouselImgComponent.html":{},"components/PageItemFromCatalogComponent.html":{}}}],["writevalue",{"_index":1619,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["writevalue(value",{"_index":1638,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["xl",{"_index":1522,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["xxl",{"_index":1538,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["y",{"_index":2016,"title":{},"body":{"components/PageItemFromCatalogComponent.html":{}}}],["yes",{"_index":1055,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/DialogImageComponent.html":{},"components/DialogProductComponent.html":{}}}],["z",{"_index":1641,"title":{},"body":{"components/FilterByInputComponent.html":{}}}],["z0",{"_index":1124,"title":{},"body":{"components/DialogCategoryComponent.html":{}}}],["za",{"_index":1123,"title":{},"body":{"components/DialogCategoryComponent.html":{},"components/FilterByInputComponent.html":{}}}],["zone.js",{"_index":2471,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/about/about.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            TuiButton\n                            TuiTitle\n                            TuiAccordion\n                            TuiAccordionItem\n                            RouterLink\n                            CommonModule\n                            TuiLink\n                            TuiIcon\n                            TuiButton\n                                ThemeToggleComponent\n                                BackButtonComponent\n                            TuiAvatar\n                            AsyncPipe\n                            TuiIconPipe\n                \n            \n\n            \n                styleUrls\n                ./about.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                alertService\n                            \n                            \n                                    Private\n                                    Readonly\n                                configService\n                            \n                            \n                                    Private\n                                    Readonly\n                                subscriptions\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateTo\n                            \n                            \n                                navigateToHome\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/about/about.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateTo\n                        \n                    \n                \n            \n            \n                \nnavigateTo(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToHome\n                        \n                    \n                \n            \n            \n                \nnavigateToHome()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Переходит на главную страницу\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        alertService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiAlertService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ConfigService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ChangeDetectionStrategy, inject, OnInit, OnDestroy, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { TuiButton, TuiTitle, TuiAlertService, TuiIcon, TuiIconPipe, TuiLink } from '@taiga-ui/core';\nimport { TuiAccordion, TuiAccordionItem, TuiAvatar } from '@taiga-ui/kit';\nimport { Subscription } from 'rxjs';\nimport { Router, RouterLink } from '@angular/router';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\nimport { BackButtonComponent } from '../../components/back-button/back-button.component';\nimport { ThemeToggleComponent } from '../../components/theme-toggle/theme-toggle.component';\nimport { AuthService } from '../../../services/auth.service';\n\n@Component({\n  selector: 'app-about',\n imports: [\n    CommonModule,\n    TuiButton,\n    TuiTitle,\n    TuiAccordion,\n    TuiAccordionItem,\n    RouterLink,\n     CommonModule,\n    TuiLink,\n    TuiIcon,\n    TuiButton,\n    ThemeToggleComponent,\n    BackButtonComponent,\n    TuiAvatar,\n    AsyncPipe,\n    TuiIconPipe,\n  ],\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AboutComponent {\nprivate readonly userAchievementsService = inject(UserAchievementsService);\n  private readonly configService = inject(ConfigService);\n  private readonly alertService = inject(TuiAlertService);\n  private readonly subscriptions = new Subscription();\n \n  constructor(\n    private router: Router,\n  ) {}\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n navigateTo(path: string): void {\n    this.router.navigate([path]);\n  }\n  /**\n   * Переходит на главную страницу\n   */\n  navigateToHome(): void {\n    this.navigateTo('/');\n  }\n}\n    \n\n    \n        \n  \n    \n      Этот интерактивный образовательный тренажер разработан для обучения разработчиков ПО созданию\n      веб-приложений. Он имитирует реальный интернет-магазин, позволяя практиковаться в разработке\n      фронтенда (Angular, Taiga UI) и взаимодействии с бэкендом (ASP.NET Core, MSSQL). Тренажер\n      включает тест-кейсы с 50% имитацией сбоев сервера для обучения обработке ошибок.\n    \n  \n\n  \n   \n      \n        \n        Возможности тренажера\n      \n      \n        \n          \n            Каталог товаров: Просматривайте товары, переходите к детальной информации о продукте.\n          \n          \n            Корзина: Добавляйте товары, изменяйте количество, удаляйте позиции и оформляйте заказ.\n          \n          \n            Авторизация и регистрация: Практикуйтесь в реализации входа и создания учетной записи.\n          \n          \n            Система тест-кейсов: Выполняйте действия (вход, покупка, смена темы и т.д.) с 50% имитацией сбоев сервера для обучения обработке ошибок.\n          \n          \n            Темы интерфейса: Переключайтесь между светлой и тёмной темой с возможностью сброса к системной.\n          \n          \n            Управление контентом: Создавайте и редактируйте продукты, категории и изображения через диалоговые окна.\n          \n          \n            Адаптивный дизайн: Тренажер оптимизирован для десктопов, планшетов и мобильных устройств.\n          \n        \n      \n    \n\n   \n      \n        \n        Технологии\n      \n      \n        \n          \n            Фронтенд: Angular 18, TypeScript, Taiga UI, RxJS, Angular Reactive Forms, CSS.\n          \n          \n            Бэкенд: ASP.NET Core 8, RESTful API, MSSQL, контроллеры.\n          \n          \n            Интеграция: HTTP-запросы через HttpClient, прокси для API, JWT-авторизация.\n          \n          \n            Инструменты: Angular CLI, Webpack, ESLint, Prettier.\n          \n        \n      \n    \n\n    \n      \n        \n        Архитектура\n      \n      \n        \n          Тренажер использует простую и понятную архитектуру, подходящую для образовательных целей:\n        \n        \n          \n            Фронтенд: Модульная структура с standalone-компонентами, сервисы для бизнес-логики, RxJS для управления состоянием.\n          \n          \n            Бэкенд: ASP.NET Core контроллеры, прямое взаимодействие с MSSQL через Entity Framework Core.\n          \n          \n            Взаимодействие: REST API с обработкой HTTP-статусов (200, 401, 404, 500), централизованная обработка ошибок.\n          \n          \n            Оптимизация: ChangeDetectionStrategy.OnPush, ленивая загрузка модулей, мемоизация.\n          \n        \n      \n    \n\n    \n      \n        \n        Особенности\n      \n      \n        \n          \n            Имитация сбоев: 50% вероятность серверных ошибок в тест-кейсах для обучения устойчивости приложений.\n          \n          \n            Уведомления: TuiAlertService для информирования об успехах и ошибках.\n          \n          \n            Доступность: ARIA-атрибуты, управление фокусом через TuiAutoFocus.\n          \n          \n            UX: Плавные анимации, интуитивные диалоги, кастомизированные Taiga UI компоненты.\n          \n          \n            Обучение: Тренажер разработан для практики разработки, тестирования и отладки веб-приложений.\n          \n        \n      \n    \n  \n\n \n    Перейти в каталог\n    На главную\n    \n\n\n    \n\n    \n                \n                    ./about.component.css\n                \n                @import '../../../styles/variables.css';\n\n.about-page {\n  max-width: 90%; /* Относительная ширина для гибкости */\n  width: min(50rem, 90vw); /* Ограничение ширины ≈ 800px при базовом 1rem = 16px */\n  margin: 1rem auto; /* tui.spacing(4) ≈ 16px → 1rem */\n  padding: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\n  background: var(--tui-base-01);\n  border-radius: 0.5rem; /* tui.border-radius('l') ≈ 8px → 0.5rem */\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow); /* 4px → 0.25rem, 16px → 1rem */\n  box-sizing: border-box;\n}\n\n@media (max-width: 47.9375rem) { /* tui.breakpoint('sm') ≈ 767px → 47.9375rem */\n  .about-page {\n    margin: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n    padding: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n  }\n}\n\n.title-icon {\n  margin-left: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  color: var(--tui-primary);\n  vertical-align: middle; /* Четкое выравнивание с заголовком */\n}\n\n.about-section {\n  margin-bottom: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\n  line-height: 1.5;\n}\n\n.accordion-header {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  font-weight: 700; /* tui.font-weight('bold') */\n  font-size: 1.125rem; /* tui.font-size('l') ≈ 18px → 1.125rem */\n}\n\n.feature-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.feature-list li {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  margin-bottom: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\n}\n\n.feature-list li::before {\n  content: '•';\n  color: var(--tui-primary);\n  font-size: 1.5rem;\n  line-height: 1;\n  margin-top: 0.125rem; /* Смещение для выравнивания с текстом */\n}\n\n.actions {\n    display: flex;\n    flex-direction: row;\n    gap: 1.5rem; /* увеличенный отступ между элементами */\n    justify-content: center;\n    align-items: center;\n    margin-top: 2rem; /* увеличенный отступ сверху от аккордеона */\n    margin-bottom: 1rem;\n    flex-wrap: wrap;\n    padding: 1rem 0 0 0;\n    border-top: 1px solid var(--tui-base-03, #e5e5e5); /* лёгкая линия для отделения */\n}\n\n.actions button,\n.actions tui-avatar,\n.actions .user-avatar {\n    margin: 0;\n}\n\n.user-avatar {\n    margin-left: 1.5rem;\n    margin-right: 0.5rem;\n    cursor: pointer;\n    box-shadow: 0 2px 8px var(--tui-shadow, rgba(0,0,0,0.08));\n    transition: box-shadow 0.2s, transform 0.2s;\n}\n.user-avatar:hover {\n    box-shadow: 0 4px 16px var(--tui-shadow, rgba(0,0,0,0.16));\n    transform: scale(1.05);\n}\n\n@media (max-width: 47.9375rem) {\n    .actions {\n        flex-direction: column;\n        gap: 1rem;\n        align-items: center;\n        margin-top: 2rem;\n        padding-top: 0.5rem;\n    }\n    .user-avatar {\n        margin: 0.5rem 0 0 0;\n    }\n}\n\n/* Замените их на [data-theme=\"dark\"] */\n[data-theme=\"dark\"] .about-page {\n  background: var(--tui-base-02); /* Используйте правильную переменную для фона */\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\n}\n\n[data-theme=\"dark\"] .about-section,\n[data-theme=\"dark\"] .feature-list li {\n  color: var(--text-color-dark); /* Светлый цвет текста */\n}\n\n\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Этот интерактивный образовательный тренажер разработан для обучения разработчиков ПО созданию      веб-приложений. Он имитирует реальный интернет-магазин, позволяя практиковаться в разработке      фронтенда (Angular, Taiga UI) и взаимодействии с бэкендом (ASP.NET Core, MSSQL). Тренажер      включает тест-кейсы с 50% имитацией сбоев сервера для обучения обработке ошибок.                                 Возможности тренажера                                          Каталог товаров: Просматривайте товары, переходите к детальной информации о продукте.                                Корзина: Добавляйте товары, изменяйте количество, удаляйте позиции и оформляйте заказ.                                Авторизация и регистрация: Практикуйтесь в реализации входа и создания учетной записи.                                Система тест-кейсов: Выполняйте действия (вход, покупка, смена темы и т.д.) с 50% имитацией сбоев сервера для обучения обработке ошибок.                                Темы интерфейса: Переключайтесь между светлой и тёмной темой с возможностью сброса к системной.                                Управление контентом: Создавайте и редактируйте продукты, категории и изображения через диалоговые окна.                                Адаптивный дизайн: Тренажер оптимизирован для десктопов, планшетов и мобильных устройств.                                                     Технологии                                          Фронтенд: Angular 18, TypeScript, Taiga UI, RxJS, Angular Reactive Forms, CSS.                                Бэкенд: ASP.NET Core 8, RESTful API, MSSQL, контроллеры.                                Интеграция: HTTP-запросы через HttpClient, прокси для API, JWT-авторизация.                                Инструменты: Angular CLI, Webpack, ESLint, Prettier.                                                      Архитектура                              Тренажер использует простую и понятную архитектуру, подходящую для образовательных целей:                                      Фронтенд: Модульная структура с standalone-компонентами, сервисы для бизнес-логики, RxJS для управления состоянием.                                Бэкенд: ASP.NET Core контроллеры, прямое взаимодействие с MSSQL через Entity Framework Core.                                Взаимодействие: REST API с обработкой HTTP-статусов (200, 401, 404, 500), централизованная обработка ошибок.                                Оптимизация: ChangeDetectionStrategy.OnPush, ленивая загрузка модулей, мемоизация.                                                      Особенности                                          Имитация сбоев: 50% вероятность серверных ошибок в тест-кейсах для обучения устойчивости приложений.                                Уведомления: TuiAlertService для информирования об успехах и ошибках.                                Доступность: ARIA-атрибуты, управление фокусом через TuiAutoFocus.                                UX: Плавные анимации, интуитивные диалоги, кастомизированные Taiga UI компоненты.                                Обучение: Тренажер разработан для практики разработки, тестирования и отладки веб-приложений.                                   Перейти в каталог    На главную    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AchievementsService.html":{"url":"injectables/AchievementsService.html","title":"injectable - AchievementsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AchievementsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/achievements.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с достижениями (Achievements).\nПозволяет получать, создавать, обновлять и удалять достижения через API.\nExample :// Получить все достижения (GET):\nGET /api/Achievements// Получить достижение по id (GET):\nGET /api/Achievements/1\n// Создать достижение (POST):\nPOST /api/Achievements\nBody:\n{\n  \"achievementId\": 0,\n  \"title\": \"Новое достижение\",\n  \"textAchievement\": \"Описание достижения\"\n}\n// Обновить достижение (PUT):\nPUT /api/Achievements/1\nBody:\n{\n  \"achievementId\": 1,\n  \"title\": \"Обновлённое достижение\",\n  \"textAchievement\": \"Новое описание\"\n}\n// Удалить достижение (DELETE):\nDELETE /api/Achievements/1\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createAchievement\n                            \n                            \n                                deleteAchievement\n                            \n                            \n                                getAchievementById\n                            \n                            \n                                getAllAchievements\n                            \n                            \n                                unlockAchievement\n                            \n                            \n                                updateAchievement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/achievements.service.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createAchievement\n                        \n                    \n                \n            \n            \n                \ncreateAchievement(achievement: IAchievement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Создаёт новое достижение.\nExample :// POST /api/Achievements\n// Body:\n// {\n//   \"achievementId\": 0,\n//   \"title\": \"Новое достижение\",\n//   \"textAchievement\": \"Описание достижения\"\n// }\nthis.achievementsService.createAchievement({\n  achievementId: 0,\n  title: 'Новое достижение',\n  textAchievement: 'Описание достижения'\n}).subscribe(newAch => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                achievement\n                                            \n                                                            IAchievement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект достижения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданное достижение.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAchievement\n                        \n                    \n                \n            \n            \n                \ndeleteAchievement(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Удаляет достижение по идентификатору.\nExample :// DELETE /api/Achievements/1\nthis.achievementsService.deleteAchievement(1).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор достижения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAchievementById\n                        \n                    \n                \n            \n            \n                \ngetAchievementById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Получает достижение по его идентификатору.\nExample :// GET /api/Achievements/1\nthis.achievementsService.getAchievementById(1).subscribe(ach => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор достижения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Достижение.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllAchievements\n                        \n                    \n                \n            \n            \n                \ngetAllAchievements()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Получает список всех достижений.\nExample :// GET /api/Achievements\nthis.achievementsService.getAllAchievements().subscribe(list => console.log(list));\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список достижений.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlockAchievement\n                        \n                    \n                \n            \n            \n                \nunlockAchievement(achievementTitle: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Разблокирует достижение по названию.\nExample :this.achievementsService.unlockAchievement('First Login');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                achievementTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Название достижения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAchievement\n                        \n                    \n                \n            \n            \n                \nupdateAchievement(id: number, achievement: IAchievement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Обновляет существующее достижение.\nExample :// PUT /api/Achievements/1\n// Body:\n// {\n//   \"achievementId\": 1,\n//   \"title\": \"Обновлённое достижение\",\n//   \"textAchievement\": \"Новое описание\"\n// }\nthis.achievementsService.updateAchievement(1, {\n  achievementId: 1,\n  title: 'Обновлённое достижение',\n  textAchievement: 'Новое описание'\n}).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор достижения.\n\n                                            \n                                        \n                                        \n                                                achievement\n                                            \n                                                            IAchievement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект достижения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Achievements`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/achievements.service.ts:44\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IAchievement } from '../interface/IAchievement';\n\n/**\n * Сервис для работы с достижениями (Achievements).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять достижения через API.\n *\n * @example\n * // Получить все достижения (GET):\n * GET /api/Achievements\n *\n * // Получить достижение по id (GET):\n * GET /api/Achievements/1\n *\n * // Создать достижение (POST):\n * POST /api/Achievements\n * Body:\n * {\n *   \"achievementId\": 0,\n *   \"title\": \"Новое достижение\",\n *   \"textAchievement\": \"Описание достижения\"\n * }\n *\n * // Обновить достижение (PUT):\n * PUT /api/Achievements/1\n * Body:\n * {\n *   \"achievementId\": 1,\n *   \"title\": \"Обновлённое достижение\",\n *   \"textAchievement\": \"Новое описание\"\n * }\n *\n * // Удалить достижение (DELETE):\n * DELETE /api/Achievements/1\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AchievementsService {\n  private baseUrl = `${window.location.origin}/api/Achievements`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех достижений.\n   *\n   * @returns {Observable} Список достижений.\n   * @example\n   * // GET /api/Achievements\n   * this.achievementsService.getAllAchievements().subscribe(list => console.log(list));\n   */\n  getAllAchievements(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает достижение по его идентификатору.\n   *\n   * @param {number} id Идентификатор достижения.\n   * @returns {Observable} Достижение.\n   * @example\n   * // GET /api/Achievements/1\n   * this.achievementsService.getAchievementById(1).subscribe(ach => ...);\n   */\n  getAchievementById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новое достижение.\n   *\n   * @param {IAchievement} achievement Объект достижения.\n   * @returns {Observable} Созданное достижение.\n   * @example\n   * // POST /api/Achievements\n   * // Body:\n   * // {\n   * //   \"achievementId\": 0,\n   * //   \"title\": \"Новое достижение\",\n   * //   \"textAchievement\": \"Описание достижения\"\n   * // }\n   * this.achievementsService.createAchievement({\n   *   achievementId: 0,\n   *   title: 'Новое достижение',\n   *   textAchievement: 'Описание достижения'\n   * }).subscribe(newAch => ...);\n   */\n  createAchievement(achievement: IAchievement): Observable {\n    return this.http.post(this.baseUrl, achievement);\n  }\n\n  /**\n   * Обновляет существующее достижение.\n   *\n   * @param {number} id Идентификатор достижения.\n   * @param {IAchievement} achievement Обновлённый объект достижения.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/Achievements/1\n   * // Body:\n   * // {\n   * //   \"achievementId\": 1,\n   * //   \"title\": \"Обновлённое достижение\",\n   * //   \"textAchievement\": \"Новое описание\"\n   * // }\n   * this.achievementsService.updateAchievement(1, {\n   *   achievementId: 1,\n   *   title: 'Обновлённое достижение',\n   *   textAchievement: 'Новое описание'\n   * }).subscribe(() => ...);\n   */\n  updateAchievement(id: number, achievement: IAchievement): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, achievement);\n  }\n\n  /**\n   * Удаляет достижение по идентификатору.\n   *\n   * @param {number} id Идентификатор достижения.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/Achievements/1\n   * this.achievementsService.deleteAchievement(1).subscribe(() => ...);\n   */\n  deleteAchievement(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Разблокирует достижение по названию.\n   *\n   * @param {string} achievementTitle Название достижения.\n   * @example\n   * this.achievementsService.unlockAchievement('First Login');\n   */\n  unlockAchievement(achievementTitle: string): void {\n    console.log(`Achievement unlocked: ${achievementTitle}`);\n    // Здесь вы можете добавить логику для обновления состояния ачивки на сервере или локально\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AchievmentsPageForUserComponent.html":{"url":"components/AchievmentsPageForUserComponent.html","title":"component - AchievmentsPageForUserComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AchievmentsPageForUserComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-achievments-page-for-user\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            CdkFixedSizeVirtualScroll\n                            CdkVirtualForOf\n                            CdkVirtualScrollViewport\n                            TuiScrollable\n                            TuiScrollbar\n                            TuiTable\n                \n            \n\n            \n                styleUrls\n                ./achievments-page-for-user.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./achievments-page-for-user.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                allAchievements\n                            \n                            \n                                    Private\n                                    Readonly\n                                authProjService\n                            \n                            \n                                completedAchievementIds\n                            \n                            \n                                isProjAuthenticated\n                            \n                            \n                                    Private\n                                logoutAttempt\n                            \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsRepository\n                            \n                            \n                                userId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isCompleted\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onNotWorkingButtonClick\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userAchievementsRepo: UserAchievementsRepositoryService, achievementsRepo: AchievementsRepositoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:39\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsRepo\n                                                  \n                                                        \n                                                                    UserAchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        achievementsRepo\n                                                  \n                                                        \n                                                                    AchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isCompleted\n                        \n                    \n                \n            \n            \n                \nisCompleted(achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:98\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onNotWorkingButtonClick\n                        \n                    \n                \n            \n            \n                \nonNotWorkingButtonClick()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:102\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        allAchievements\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IAchievement[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authProjService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthProjService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        completedAchievementIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isProjAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logoutAttempt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject, OnInit } from '@angular/core';\nimport { IAchievement } from '../../../interface/IAchievement';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { CommonModule } from '@angular/common';\nimport { AchievementsRepositoryService } from '../../../repositories/achievements-repository.service';\nimport { TuiTable } from '@taiga-ui/addon-table';\nimport { TuiScrollable, TuiScrollbar } from '@taiga-ui/core';\nimport {\n  CdkFixedSizeVirtualScroll,\n  CdkVirtualForOf,\n  CdkVirtualScrollViewport,\n} from '@angular/cdk/scrolling';\nimport { Router } from '@angular/router';\nimport { AuthProjService } from '../../../services/auth-proj.service';\n\n\n@Component({\n  selector: 'app-achievments-page-for-user',\n  imports: [CommonModule, CdkFixedSizeVirtualScroll,\n    CdkVirtualForOf,\n    CdkVirtualScrollViewport,\n    TuiScrollable,\n    TuiScrollbar,\n    TuiTable,],\n  templateUrl: './achievments-page-for-user.component.html',\n  styleUrls: ['./achievments-page-for-user.component.css', '../../../styles/root.css']\n})\nexport class AchievmentsPageForUserComponent implements OnInit {\n  allAchievements: IAchievement[] = [];\n  completedAchievementIds: number[] = [];\n  username: string = '';\n  userId: number | null = null;\nprivate readonly authProjService = inject(AuthProjService);\n  private readonly router = inject(Router);\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\n\n  isProjAuthenticated: boolean = false;\n  private logoutAttempt = 0;\n\n  constructor(\n    private readonly configService: ConfigService = inject(ConfigService),\n    private readonly userAchievementsRepo: UserAchievementsRepositoryService = inject(UserAchievementsRepositoryService),\n    private readonly achievementsRepo: AchievementsRepositoryService = inject(AchievementsRepositoryService)\n  ) { }\n\n  ngOnInit(): void {\n    const projToken = localStorage.getItem('projToken');\n    console.log('[Achievements] projToken:', projToken);\n\n    if (projToken) {\n      try {\n        const payload = JSON.parse(atob(projToken.split('.')[1]));\n        this.username = payload.sub; //  {\n        const validIds = Object.values(this.configService.achievementIds);\n        this.allAchievements = achievements.filter(a => validIds.includes(a.achievementId));\n        console.log('[Achievements] Загружены все ачивки:', this.allAchievements);\n      },\n      error: (err) => {\n        console.error('[Achievements] Ошибка при получении всех ачивок:', err);\n      }\n    });\n\n    // Получаем список завершённых ачивок пользователя\n    if (this.username) {\n      this.userAchievementsRepo.getCompletedAchievementsByUsername(this.username)\n        .subscribe({\n          next: (achievements: IAchievement[]) => {\n            this.completedAchievementIds = achievements.map(a => a.achievementId);\n            console.log('[Achievements] Выполненные ачивки пользователя:', this.completedAchievementIds);\n          },\n          error: (err) => {\n            console.error('[Achievements] Ошибка при получении выполненных ачивок пользователя:', err);\n          }\n        });\n    } else {\n      console.warn('[Achievements] Не удалось получить выполненные ачивки: username пустой');\n    }\n  }\n\n  isCompleted(achievementId: number): boolean {\n    return this.completedAchievementIds.includes(achievementId);\n  } \n\n   onNotWorkingButtonClick(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.userAchievementsRepository\n      .handleAchievement(userProjId, this.configService.achievementIds.buttonNotWorking, 'Кнопка не работает!')\n      .subscribe();\n    // Можно добавить уведомление или визуальный эффект\n  }\n}\n    \n\n    \n        \n  \n    \n      \n        Название\n        Описание\n        Статус\n      \n    \n    \n      \n        {{ ach.title }}\n        {{ ach.textAchievement }}\n        \n          Выполнено\n          —\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./achievments-page-for-user.component.css\n                \n                \n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    Название        Описание        Статус                            {{ ach.title }}        {{ ach.textAchievement }}                  Выполнено          —                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AchievmentsPageForUserComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AlertDeleteComponent.html":{"url":"components/AlertDeleteComponent.html","title":"component - AlertDeleteComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AlertDeleteComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/alert-delete/alert-delete.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-alert-on-delete\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./alert-delete.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./alert-delete.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                context\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : injectContext, boolean>>()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/alert-delete/alert-delete.component.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { CommonModule, NgForOf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport type { TuiPopover } from '@taiga-ui/cdk';\nimport type { TuiAlertOptions } from '@taiga-ui/core';\nimport { TuiAlertService } from '@taiga-ui/core';\nimport { injectContext, PolymorpheusComponent } from '@taiga-ui/polymorpheus';\nimport { switchMap, takeUntil } from 'rxjs';\n\n@Component({\n  selector: 'app-alert-on-delete',\n  imports: [CommonModule],\n  templateUrl: './alert-delete.component.html',\n  styleUrls:[ './alert-delete.component.css',\n    '../../../styles/root.css',],\n})\nexport class AlertDeleteComponent {\n  protected readonly context =\n  injectContext, boolean>>();\n}\n    \n\n    \n        \n    {{ response ? 'Да' : 'Нет' }}\n\n    \n\n    \n                \n                    ./alert-delete.component.css\n                \n                \n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    {{ response ? \\'Да\\' : \\'Нет\\' }}'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AlertDeleteComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n            \n                imports\n                \n                            RouterOutlet\n                            TuiRoot\n                            RouterModule\n                            TuiLink\n                                NavbarComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n            \n                styleUrl\n                ./app.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                darkMode\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        darkMode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TUI_DARK_MODE)\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Sota6SiFront'\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { TUI_DARK_MODE, TuiLink, TuiRoot } from \"@taiga-ui/core\";\nimport { Component, inject } from '@angular/core';\nimport { RouterModule, RouterOutlet } from '@angular/router';\nimport { NavbarComponent } from \"./data/components/navbar/navbar.component\";\n@Component({\n  selector: 'app-root',\n  imports: [  \n    RouterOutlet, \n    TuiRoot, \n    RouterModule,\n    TuiLink,\n    NavbarComponent,\n    ],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css'\n})\nexport class AppComponent {\n  title = 'Sota6SiFront';\n  protected readonly darkMode = inject(TUI_DARK_MODE);\n}\n\n    \n\n    \n        \n  \n  \n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthProjService.html":{"url":"injectables/AuthProjService.html","title":"injectable - AuthProjService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthProjService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth-proj.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для авторизации и регистрации пользователей проекта.\nПозволяет выполнять вход, регистрацию, выход и отслеживать статус авторизации пользователя.\nРаботает с backend-контроллером по адресу /api/AuthProj.\nExample :// Вход пользователя (POST):\n// URL: /api/AuthProj/login\n// Body:\n// {\n//   \"login\": \"user\",\n//   \"password\": \"pass\"\n// }\nthis.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});// Регистрация пользователя (POST):\n// URL: /api/AuthProj/register\n// Body:\n// {\n//   \"login\": \"newuser\",\n//   \"password\": \"newpass\"\n// }\nthis.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Public\n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                isAuthenticatedSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAuthStatus\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                register\n                            \n                            \n                                setAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth-proj.service.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAuthStatus\n                        \n                    \n                \n            \n            \n                \ncheckAuthStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Проверяет статус авторизации пользователя по наличию токена.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(userProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя.\nExample :// POST /api/AuthProj/login\n// Body:\n// {\n//   \"login\": \"user\",\n//   \"password\": \"pass\"\n// }\nthis.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя (логин и пароль).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном и ID пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Выполняет выход пользователя, очищая локальное хранилище.\nExample :this.authProjService.logout();\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(userProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\nExample :// POST /api/AuthProj/register\n// Body:\n// {\n//   \"login\": \"newuser\",\n//   \"password\": \"newpass\"\n// }\nthis.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя (логин и пароль).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном и ID пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAuthenticated\n                        \n                    \n                \n            \n            \n                \nsetAuthenticated(isAuthenticated: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Устанавливает статус авторизации пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isAuthenticated\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый статус авторизации.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/AuthProj`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.isAuthenticatedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:47\n                        \n                    \n\n            \n                \n                    Observable для отслеживания статуса авторизации пользователя.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isAuthenticatedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { IDpUserProj } from '../interface/IDpUserProj';\n\n/**\n * Сервис для авторизации и регистрации пользователей проекта.\n *\n * @remarks\n * Позволяет выполнять вход, регистрацию, выход и отслеживать статус авторизации пользователя.\n * Работает с backend-контроллером по адресу `/api/AuthProj`.\n *\n * @example\n * // Вход пользователя (POST):\n * // URL: /api/AuthProj/login\n * // Body:\n * // {\n * //   \"login\": \"user\",\n * //   \"password\": \"pass\"\n * // }\n * this.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n *\n * // Регистрация пользователя (POST):\n * // URL: /api/AuthProj/register\n * // Body:\n * // {\n * //   \"login\": \"newuser\",\n * //   \"password\": \"newpass\"\n * // }\n * this.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthProjService {\n  private baseUrl = `${window.location.origin}/api/AuthProj`;\n  private isAuthenticatedSubject = new BehaviorSubject(false);\n\n  /**\n   * Observable для отслеживания статуса авторизации пользователя.\n   */\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.checkAuthStatus();\n  }\n\n  /**\n   * Выполняет вход пользователя.\n   *\n   * @param {IDpUserProj} userProj Данные пользователя (логин и пароль).\n   * @returns {Observable} Ответ с токеном и ID пользователя.\n   * @example\n   * // POST /api/AuthProj/login\n   * // Body:\n   * // {\n   * //   \"login\": \"user\",\n   * //   \"password\": \"pass\"\n   * // }\n   * this.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n   *   // res: { token: string, userProjId: number }\n   * });\n   */\n  login(userProj: IDpUserProj): Observable {\n    const payload = {\n      login: userProj.login,\n      password: userProj.password,\n    };\n    return this.http.post(`${this.baseUrl}/login`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('projToken', response.token);\n          localStorage.setItem('userProjId', response.userProjId.toString());\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {IDpUserProj} userProj Данные пользователя (логин и пароль).\n   * @returns {Observable} Ответ с токеном и ID пользователя.\n   * @example\n   * // POST /api/AuthProj/register\n   * // Body:\n   * // {\n   * //   \"login\": \"newuser\",\n   * //   \"password\": \"newpass\"\n   * // }\n   * this.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n   *   // res: { token: string, userProjId: number }\n   * });\n   */\n  register(userProj: IDpUserProj): Observable {\n    const payload = {\n      login: userProj.login,\n      password: userProj.password\n    };\n    return this.http.post(`${this.baseUrl}/register`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('projToken', response.token);\n          localStorage.setItem('userProjId', response.userProjId.toString());\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Устанавливает статус авторизации пользователя.\n   *\n   * @param {boolean} isAuthenticated Новый статус авторизации.\n   */\n  setAuthenticated(isAuthenticated: boolean): void {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n\n  /**\n   * Проверяет статус авторизации пользователя по наличию токена.\n   */\n  checkAuthStatus(): void {\n    const token = localStorage.getItem('projToken');\n    this.setAuthenticated(!!token);\n  }\n\n  /**\n   * Выполняет выход пользователя, очищая локальное хранилище.\n   *\n   * @example\n   * this.authProjService.logout();\n   */\n  logout(): void {\n    localStorage.removeItem('projToken');\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProjId');\n    this.setAuthenticated(false);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для авторизации и регистрации пользователей.\nПозволяет выполнять регистрацию, вход, выход и отслеживать статус авторизации пользователя.\nРаботает с backend-контроллером по адресу /api/Auth.\nExample :// Регистрация пользователя (POST):\n// URL: /api/Auth/register\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.register({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { message: \"User registered successfully.\" }\n});// Вход пользователя (POST):\n// URL: /api/Auth/login\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.login({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                isAuthenticatedSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                register\n                            \n                            \n                                setAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя.\nExample :// POST /api/Auth/login\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.login({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { token: string, userProjId: number, achievementId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном, ID пользователя и достижением.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Выполняет выход пользователя, очищая локальное хранилище.\nExample :this.authService.logout();\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(user: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\nExample :// POST /api/Auth/register\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.register({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { message: \"User registered successfully.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном, ID пользователя и достижением.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAuthenticated\n                        \n                    \n                \n            \n            \n                \nsetAuthenticated(isAuthenticated: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Устанавливает статус авторизации пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isAuthenticated\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый статус авторизации.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Auth`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.isAuthenticatedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:57\n                        \n                    \n\n            \n                \n                    Observable для отслеживания статуса авторизации пользователя.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isAuthenticatedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:52\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { IDpUser } from '../interface/IDpUser';\n\n/**\n * Сервис для авторизации и регистрации пользователей.\n *\n * @remarks\n * Позволяет выполнять регистрацию, вход, выход и отслеживать статус авторизации пользователя.\n * Работает с backend-контроллером по адресу `/api/Auth`.\n *\n * @example\n * // Регистрация пользователя (POST):\n * // URL: /api/Auth/register\n * // Body:\n * // {\n * //   \"username\": \"user\",\n * //   \"password\": \"pass\",\n * //   \"phoneNumber\": \"79990001122\"\n * // }\n * this.authService.register({\n *   dpUsername: 'user',\n *   dpPassword: 'pass',\n *   dpPhoneNumber: '79990001122'\n * }).subscribe(res => {\n *   // res: { message: \"User registered successfully.\" }\n * });\n *\n * // Вход пользователя (POST):\n * // URL: /api/Auth/login\n * // Body:\n * // {\n * //   \"username\": \"user\",\n * //   \"password\": \"pass\",\n * //   \"phoneNumber\": \"79990001122\"\n * // }\n * this.authService.login({\n *   dpUsername: 'user',\n *   dpPassword: 'pass',\n *   dpPhoneNumber: '79990001122'\n * }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = `${window.location.origin}/api/Auth`;\n  private isAuthenticatedSubject = new BehaviorSubject(false);\n\n  /**\n   * Observable для отслеживания статуса авторизации пользователя.\n   */\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Устанавливает статус авторизации пользователя.\n   *\n   * @param {boolean} isAuthenticated Новый статус авторизации.\n   */\n  setAuthenticated(isAuthenticated: boolean): void {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {IDpUser} user Данные пользователя.\n   * @returns {Observable} Ответ с токеном, ID пользователя и достижением.\n   * @example\n   * // POST /api/Auth/register\n   * // Body:\n   * // {\n   * //   \"username\": \"user\",\n   * //   \"password\": \"pass\",\n   * //   \"phoneNumber\": \"79990001122\"\n   * // }\n   * this.authService.register({\n   *   dpUsername: 'user',\n   *   dpPassword: 'pass',\n   *   dpPhoneNumber: '79990001122'\n   * }).subscribe(res => {\n   *   // res: { message: \"User registered successfully.\" }\n   * });\n   */\n  register(user: IDpUser): Observable {\n    const payload = {\n      username: user.dpUsername,\n      password: user.dpPassword,\n      phoneNumber: user.dpPhoneNumber || '0000000000'\n    };\n    return this.http.post(`${this.baseUrl}/register`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n /**\n   * Выполняет вход пользователя.\n   *\n   * @param {IDpUser} user Данные пользователя.\n   * @returns {Observable} Ответ с токеном, ID пользователя и достижением.\n   * @example\n   * // POST /api/Auth/login\n   * // Body:\n   * // {\n   * //   \"username\": \"user\",\n   * //   \"password\": \"pass\",\n   * //   \"phoneNumber\": \"79990001122\"\n   * // }\n   * this.authService.login({\n   *   dpUsername: 'user',\n   *   dpPassword: 'pass',\n   *   dpPhoneNumber: '79990001122'\n   * }).subscribe(res => {\n   *   // res: { token: string, userProjId: number, achievementId: number }\n   * });\n   */\n  login(user: IDpUser): Observable {\n    const payload = {\n      username: user.dpUsername,\n      password: user.dpPassword,\n      phoneNumber: user.dpPhoneNumber || '0000000000'\n    };\n    return this.http.post(`${this.baseUrl}/login`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Выполняет выход пользователя, очищая локальное хранилище.\n   *\n   * @example\n   * this.authService.logout();\n   */\n  logout(): void {\n    localStorage.removeItem('token');\n    this.setAuthenticated(false);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/BackButtonComponent.html":{"url":"components/BackButtonComponent.html","title":"component - BackButtonComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  BackButtonComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/back-button/back-button.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-back-button\n            \n\n\n\n            \n                styleUrls\n                ./back-button.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./back-button.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                goBack\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(location: Location, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/back-button/back-button.component.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        location\n                                                  \n                                                        \n                                                                    Location\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        goBack\n                        \n                    \n                \n            \n            \n                \ngoBack()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/back-button/back-button.component.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-back-button',\n  imports: [],\n  templateUrl: './back-button.component.html',\n  styleUrls: ['./back-button.component.css',\n    '../../../styles/root.css',],\n})\nexport class BackButtonComponent {\n  constructor(private location: Location, private router: Router) {}\n\n  goBack(): void {\n    try {\n      const previousUrl = this.location.path(true); \n      const baseDomain = '/'; \n      if (previousUrl.startsWith(baseDomain)) {\n        this.location.back(); \n      } else {\n        this.router.navigateByUrl('/');\n      }\n    } catch (error) {\n      this.router.navigateByUrl('/');\n    }\n  }\n\n}\n    \n\n    \n        \n  Назад\n\n    \n\n    \n                \n                    ./back-button.component.css\n                \n                \n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '  Назад'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'BackButtonComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CardItemComponent.html":{"url":"components/CardItemComponent.html","title":"component - CardItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CardItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/card-item/card-item.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-card-item\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            TuiAppearance\n                            TuiButton\n                                CarouselImgComponent\n                \n            \n\n            \n                styleUrls\n                ./card-item.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./card-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToProduct\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                productInfo\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    images\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, configService: ConfigService, userAchievementsRepository: UserAchievementsRepositoryService, userAchievementsService: UserAchievementsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/card-item/card-item.component.ts:25\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsRepository\n                                                  \n                                                        \n                                                                    UserAchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsService\n                                                  \n                                                        \n                                                                        UserAchievementsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        productInfo\n                    \n                \n                \n                    \n                        Type :         IDpProduct\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/card-item/card-item.component.ts:25\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToProduct\n                        \n                    \n                \n            \n            \n                \nnavigateToProduct(product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/card-item/card-item.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        images\n                    \n                \n\n                \n                    \n                        getimages()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/card-item/card-item.component.ts:34\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, inject, Input } from '@angular/core';\nimport { IDpProduct } from '../../../interface/IDpProduct';\nimport { CommonModule } from '@angular/common';\nimport { TuiAppearance, TuiButton } from '@taiga-ui/core';\nimport { CarouselImgComponent } from '../carousel-img/carousel-img.component';\nimport { IDpImage } from '../../../interface/IDpImage';\nimport { Router } from '@angular/router';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-card-item',\n  imports: [\n    CommonModule,\n    TuiAppearance,\n    TuiButton,\n    CarouselImgComponent\n  ],\n  templateUrl: './card-item.component.html',\n  styleUrls: ['./card-item.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class CardItemComponent {\n  @Input() productInfo!: IDpProduct;\n\n  constructor(\n    private router: Router,\n    private configService: ConfigService,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService)\n  ) { }\n\n  get images(): IDpImage[] {\n    return this.productInfo.dpImages || [];\n  }\n\n  navigateToProduct(product: IDpProduct): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      // Галочка включена — 50% шанс на ошибку\n      if (Math.random()  {\n        if (success) {\n          this.userAchievementsRepository.handleAchievement(\n            userProjId,\n            this.configService.achievementIds.navigateToProductSuccess, // Используем числовой ID\n            'тест-кейс: Переход к товару выполнен!'\n          ).subscribe();\n        } else {\n          this.userAchievementsRepository.handleAchievement(\n            userProjId,\n            this.configService.achievementIds.navigateToProductFailed, // Используем числовой ID\n            'тест-кейс: Ошибка перехода к товару!'\n          ).subscribe();\n        }\n      })\n      .catch(() => {\n        this.userAchievementsRepository.handleAchievement(\n          userProjId,\n          this.configService.achievementIds.navigateToProductFailed, // Используем числовой ID\n          'тест-кейс: Ошибка перехода к товару!'\n        ).subscribe();\n      });\n  }\n}\n    \n\n    \n        \n    \n    {{ productInfo.dpTitle }}\n    {{ productInfo.dpPrice | currency:'RUB ' }}\n    \n        \n        Перейти к товару\n    \n\n    \n\n    \n                \n                    ./card-item.component.css\n                \n                \n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        {{ productInfo.dpTitle }}    {{ productInfo.dpPrice | currency:\\'RUB \\' }}                    Перейти к товару    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CardItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CarouselImgComponent.html":{"url":"components/CarouselImgComponent.html","title":"component - CarouselImgComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CarouselImgComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/carousel-img/carousel-img.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-carousel-img\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            AsyncPipe\n                            TuiAmountPipe\n                            TuiAvatar\n                            TuiButton\n                            TuiCarousel\n                            TuiPagination\n                            TuiLoader\n                \n            \n\n            \n                styleUrls\n                ./carousel-img.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./carousel-img.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                imageUrls\n                            \n                            \n                                index\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loadImageUrls\n                            \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onImageClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                images\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                imageClick\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(imagesRepository: ImagesRepositoryService, sanitizer: DomSanitizer, cd: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/carousel-img/carousel-img.component.ts:36\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        imagesRepository\n                                                  \n                                                        \n                                                                    ImagesRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        images\n                    \n                \n                \n                    \n                        Type :         IDpImage[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/carousel-img/carousel-img.component.ts:32\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        imageClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/carousel-img/carousel-img.component.ts:33\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadImageUrls\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadImageUrls()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/carousel-img/carousel-img.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/carousel-img/carousel-img.component.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/carousel-img/carousel-img.component.ts:54\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/carousel-img/carousel-img.component.ts:44\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onImageClick\n                        \n                    \n                \n            \n            \n                \nonImageClick(imageUrl: SafeUrl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/carousel-img/carousel-img.component.ts:93\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                imageUrl\n                                            \n                                                        SafeUrl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        imageUrls\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/carousel-img/carousel-img.component.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/carousel-img/carousel-img.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription\n\n                    \n                \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/carousel-img/carousel-img.component.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, SimpleChanges, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\nimport { SafeUrl, DomSanitizer } from '@angular/platform-browser';\nimport { IDpImage } from '../../../interface/IDpImage';\nimport { ImagesRepositoryService } from '../../../repositories/images-repository.service';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { TuiButton, TuiLoader } from '@taiga-ui/core';\nimport { TuiAvatar, TuiCarousel, TuiPagination } from '@taiga-ui/kit';\nimport { TuiAmountPipe } from '@taiga-ui/addon-commerce';\nimport { Subscription, forkJoin, map } from 'rxjs';\n\n@Component({\n  selector: 'app-carousel-img',\n  standalone: true,\n  imports: [\n    CommonModule,\n    AsyncPipe,\n    TuiAmountPipe,\n    TuiAvatar,\n    TuiButton,\n    TuiCarousel,\n    TuiPagination,\n    TuiLoader\n  ],\n  templateUrl: './carousel-img.component.html',\n  styleUrls: [\n    './carousel-img.component.css',\n    '../../../styles/root.css'\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CarouselImgComponent implements OnInit, OnDestroy {\n  @Input() images: IDpImage[] = [];\n  @Output() imageClick = new EventEmitter();\n  imageUrls: { [key: number]: SafeUrl } = {};\n  index = 0;\n  private subscriptions: Subscription = new Subscription();\n\n  constructor(\n    private imagesRepository: ImagesRepositoryService,\n    private sanitizer: DomSanitizer,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  ngOnInit(): void {\n    this.loadImageUrls();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['images'] && !changes['images'].firstChange) {\n      this.loadImageUrls();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n    Object.values(this.imageUrls).forEach(url => {\n      if (typeof url === 'string') {\n        URL.revokeObjectURL(url);\n      }\n    });\n  }\n\n  private loadImageUrls(): void {\n    if (!this.images || this.images.length === 0) {\n      this.imageUrls = {};\n      this.cd.markForCheck();\n      return;\n    }\n\n    const newImages = this.images.filter(image => !this.imageUrls[image.dpImagesId]);\n    if (newImages.length === 0) {\n      this.cd.markForCheck();\n      return;\n    }\n\n    const imageRequests = newImages.map(image =>\n      this.imagesRepository.getDpImageData(image.dpImagesId).pipe(\n        map(blob => ({ id: image.dpImagesId, blob }))\n      )\n    );\n\n    this.subscriptions.add(\n      forkJoin(imageRequests).subscribe(results => {\n        results.forEach(({ id, blob }) => {\n          const url = URL.createObjectURL(blob);\n          this.imageUrls[id] = this.sanitizer.bypassSecurityTrustUrl(url);\n        });\n        this.cd.markForCheck();\n      })\n    );\n  }\n\n  onImageClick(imageUrl: SafeUrl): void {\n    this.imageClick.emit(imageUrl);\n  }\n}\n    \n\n    \n        \n    \n        \n            \n                \n            \n        \n    \n    \n\n    \n\n    \n                \n                    ./carousel-img.component.css\n                \n                .wrapper {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: stretch;\n    align-items: stretch;\n    box-sizing: border-box;\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                                                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'CarouselImgComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CartItem.html":{"url":"interfaces/CartItem.html","title":"interface - CartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/data/page/page-cart/page-cart.component.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ICartItem\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     TuiDay\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TuiDay\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AsyncPipe, CommonModule, CurrencyPipe, NgForOf, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TuiButton, TuiAppearance, TuiAlertService, TuiScrollbar, TuiIcon } from '@taiga-ui/core';\nimport { TuiTable, TuiComparator } from '@taiga-ui/addon-table';\nimport { TuiDay, tuiDefaultSort } from '@taiga-ui/cdk';\nimport { ICartItem } from '../../../interface/ICartItem';\nimport { ICartViewModel } from '../../../interface/ICartViewModel';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IUpdateCartRequest } from '../../../interface/IUpdateCartRequest';\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\ninterface CartItem extends ICartItem {\n  readonly date: TuiDay;\n}\n\n@Component({\n  selector: 'app-page-cart',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    CurrencyPipe,\n    FormsModule,\n    NgForOf,\n    NgIf,\n    TuiButton,\n    TuiTable,\n    CommonModule,\n    TuiScrollbar,\n    TuiIcon\n  ],\n  templateUrl: './page-cart.component.html',\n  styleUrls: ['./page-cart.component.css', '../../../styles/root.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PageCartComponent implements OnInit {\n  protected readonly options = { updateOn: 'blur' } as const;\n  protected cartItems: CartItem[] = [];\n  protected readonly columns = ['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const;\n  protected isLoading = false;\n  private readonly userAchievementsService = inject(UserAchievementsService);\n  protected readonly totalSorter: TuiComparator = (a, b) =>\n    tuiDefaultSort(a.price * a.quantity, b.price * b.quantity);\n\n  constructor(\n    private cartService: ShopCartRepositoryService,\n    private cdr: ChangeDetectorRef,\n    public router: Router,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private configService: ConfigService,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadCartItems();\n  }\n\n  private loadCartItems(): void {\n    this.cartService.getCart().subscribe({\n      next: (cartViewModel: ICartViewModel) => {\n        console.log(cartViewModel);\n        this.cartItems = cartViewModel.cartItems.map(item => ({\n          ...item,\n          date: TuiDay.currentLocal(),\n        }));\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        console.error('Ошибка при загрузке корзины:', error);\n        this.alertService.open('Не удалось загрузить корзину. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected trackByIndex(index: number): number {\n    return index;\n  }\n\n  protected getTotal({ price, quantity }: CartItem): number {\n    return price * quantity;\n  }\n\n  protected getTotalAmount(): number {\n    return this.cartItems.reduce((sum, item) => sum + this.getTotal(item), 0);\n  }\n\n  increaseQuantity(item: CartItem): void {\n    const newQuantity = item.quantity + 1;\n    this.updateCartItemQuantity(item, newQuantity);\n  }\n\n  decreaseQuantity(item: CartItem): void {\n    if (item.quantity > 1) {\n      const newQuantity = item.quantity - 1;\n      this.updateCartItemQuantity(item, newQuantity);\n    }\n  }\n\n  removeFromCart(item: CartItem): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Тест-кейс: ошибка удаления товара из корзины!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось удалить товар (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.removeFromCart({ productId: item.productId, sizeId: item.sizeId }).subscribe({\n      next: () => {\n        this.cartItems = this.cartItems.filter(cartItem =>\n          !(cartItem.productId === item.productId && cartItem.sizeId === item.sizeId)\n        );\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartSuccess, 'Товар успешно удалён из корзины!')\n          .subscribe();\n        this.alertService.open('Товар удалён из корзины', { appearance: 'success' }).subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при удалении товара из корзины:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Ошибка удаления товара из корзины!')\n          .subscribe();\n        this.alertService.open('Не удалось удалить товар. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  checkout(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n\n    if (this.cartItems.length === 0) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutEmptyCart, 'Тест-кейс: Попытка оформления пустой корзины!')\n        .subscribe();\n      this.alertService.open('Корзина пуста, добавьте товары перед оформлением', { appearance: 'error' }).subscribe();\n      return;\n    }\n\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Тест-кейс: ошибка оформления заказа!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось оформить заказ (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.checkout().subscribe({\n      next: (response) => {\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutSuccess, 'Заказ успешно оформлен!')\n          .subscribe();\n        this.alertService.open('Заказ успешно оформлен!', { appearance: 'success' }).subscribe();\n        this.cartService.clearCart();\n        this.cartItems = [];\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.router.navigate(['/order-confirmation'], { state: { orderId: response.orderId } });\n      },\n      error: (error) => {\n        console.error('Ошибка при оформлении заказа:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Ошибка оформления заказа!')\n          .subscribe();\n        this.alertService.open('Не удалось оформить заказ. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  private updateCartItemQuantity(item: CartItem, newQuantity: number): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    \n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Тест-кейс: ошибка обновления количества товара!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось обновить количество (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    \n    const request: IUpdateCartRequest = {\n      productId: item.productId,\n      quantity: newQuantity,\n      sizeId: item.sizeId\n    };\n\n    this.cartItems = this.cartItems.map(cartItem =>\n      cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n        ? { ...cartItem, quantity: newQuantity }\n        : cartItem\n    );\n    this.cdr.markForCheck();\n\n    this.cartService.updateCart(request).subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantitySuccess, 'Количество товара успешно обновлено!')\n            .subscribe();\n          this.alertService.open('Количество товара успешно обновлено', { appearance: 'success' }).subscribe();\n        } else {\n          this.cartItems = this.cartItems.map(cartItem =>\n            cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n              ? { ...cartItem, quantity: item.quantity }\n              : cartItem\n          );\n          this.cdr.markForCheck();\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n            .subscribe();\n          this.alertService.open('Не удалось обновить количество. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        }\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        this.cartItems = this.cartItems.map(cartItem =>\n          cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n            ? { ...cartItem, quantity: item.quantity }\n            : cartItem\n        );\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n          .subscribe();\n        this.alertService.open('Ошибка при обновлении количества. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected onValueChange(\n    value: CartItem[K],\n    key: K,\n    current: CartItem\n  ): void {\n    const updated = { ...current, [key]: value };\n    this.cartItems = this.cartItems.map((item) => (item === current ? updated : item));\n    this.cdr.markForCheck();\n  }\n\n  protected onSortChange(event: any): void {\n    // Логика сортировки, если нужна\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для хранения глобальных констант и конфигураций приложения.\nСодержит идентификаторы достижений, API endpoints и коды HTTP-статусов, используемые во всём приложении.\nExample :const id = this.configService.achievementIds.loginSuccess;\nconst url = this.configService.apiEndpoints.login;\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                achievementIds\n                            \n                            \n                                    Readonly\n                                apiEndpoints\n                            \n                            \n                                    Readonly\n                                httpStatusCodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        achievementIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    loginSuccess: 1,             // Успешный вход\n    registerSuccess: 2,          // Успешная регистрация\n    addToCartSuccess: 3,         // Добавление в корзину\n    checkoutSuccess: 4,          // Оформление заказа\n    viewProductSuccess: 5,       // Просмотр продукта\n    createProductSuccess: 6,     // Создание продукта\n    updateProfileSuccess: 7,     // Обновление профиля\n    addImageSuccess: 8,          // Добавление изображения\n    addCategorySuccess: 9,       // Добавление категории\n    switchToLightThemeSuccess: 10, // Светлая тема\n    switchToDarkThemeSuccess: 11, // Тёмная тема\n    removeFromCartSuccess: 12,   // Удаление из корзины\n    updateCartQuantitySuccess: 13, // Обновление количества\n    loadProductsSuccess: 14,     // Загрузка продуктов\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\n    navigateToProductSuccess: 16, // Навигация к продукту\n    toggleThemeSuccess: 17,      // Переключение темы\n    resetThemeSuccess: 18,       // Сброс темы\n    openProductDialogSuccess: 19, // Открытие диалога продукта\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\n    logoutProjSuccess: 22,       // Выход из системы\n    updateCategorySuccess: 23,   // Обновление категории\n    updateImageSuccess: 24,      // Обновление изображения\n    updateProductSuccess: 25,    // Обновление продукта\n    // Отрицательные тест-кейсы\n    loginFailed: 26,             // Ошибка входа\n    registerFailed: 27,          // Ошибка регистрации\n    addToCartFailed: 28,         // Ошибка добавления в корзину\n    checkoutFailed: 29,          // Ошибка оформления заказа\n    viewProductFailed: 30,       // Ошибка просмотра продукта\n    createProductFailed: 31,     // Ошибка создания продукта\n    updateProfileFailed: 32,     // Ошибка обновления профиля\n    addImageFailed: 33,          // Ошибка добавления изображения\n    addCategoryFailed: 34,       // Ошибка добавления категории\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\n    failedToLoad: 37,            // Ошибка загрузки\n    buttonNotWorking: 38,        // Ошибка кнопки\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\n    logoutProjFailed: 44,        // Ошибка выхода\n    updateCategoryFailed: 45,    // Ошибка обновления категории\n    updateImageFailed: 46,       // Ошибка обновления изображения\n    updateProductFailed: 47,     // Ошибка обновления продукта\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:23\n                        \n                    \n\n            \n                \n                    Идентификаторы достижений (успешные и неуспешные сценарии).\nExample :this.configService.achievementIds.addToCartSuccess\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        apiEndpoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    login: '/api/login',\n    register: '/api/register',\n    addToCart: '/api/cart/add',\n    checkout: '/api/checkout',\n    viewProduct: '/api/products',\n    createProduct: '/api/products/create',\n    updateProfile: '/api/profile/update',\n    addImage: '/api/products/add-image',\n    addCategory: '/api/categories/add',\n    switchTheme: '/api/settings/switch-theme',\n    removeFromCart: '/api/cart/remove',\n    updateCartQuantity: '/api/cart/update',\n    loadProducts: '/api/products/all',\n    loadProductInfo: '/api/products/info',\n    toggleTheme: '/api/settings/toggle-theme',\n    resetTheme: '/api/settings/reset-theme',\n    logoutProj: '/api/auth/logout-proj'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:81\n                        \n                    \n\n            \n                \n                    Пути к API endpoint'ам.\nExample :this.configService.apiEndpoints.login\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        httpStatusCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    // 2xx: Успешные\n    success: 200,          // Успешный запрос\n    created: 201,          // Ресурс создан\n    noContent: 204,        // Успешно, но нет содержимого\n\n    // 3xx: Перенаправления\n    movedPermanently: 301, // Ресурс перемещён навсегда\n    found: 302,            // Ресурс временно перемещён\n\n    // 4xx: Ошибки клиента\n    badRequest: 400,       // Неверный запрос\n    unauthorized: 401,     // Неавторизован\n    forbidden: 403,        // Доступ запрещён\n    notFound: 404,         // Ресурс не найден\n    conflict: 409,         // Конфликт (например, дубликат)\n\n    // 5xx: Ошибки сервера\n    serverError: 500,      // Внутренняя ошибка сервера\n    serviceUnavailable: 503 // Сервис недоступен\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:107\n                        \n                    \n\n            \n                \n                    Коды HTTP-статусов для обработки ответов сервера.\nExample :if (response.status === this.configService.httpStatusCodes.success) { ... }\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Сервис для хранения глобальных констант и конфигураций приложения.\n *\n * @remarks\n * Содержит идентификаторы достижений, API endpoints и коды HTTP-статусов, используемые во всём приложении.\n *\n * @example\n * const id = this.configService.achievementIds.loginSuccess;\n * const url = this.configService.apiEndpoints.login;\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n  /**\n   * Идентификаторы достижений (успешные и неуспешные сценарии).\n   *\n   * @example\n   * this.configService.achievementIds.addToCartSuccess\n   */\n  readonly achievementIds = {\n    loginSuccess: 1,             // Успешный вход\n    registerSuccess: 2,          // Успешная регистрация\n    addToCartSuccess: 3,         // Добавление в корзину\n    checkoutSuccess: 4,          // Оформление заказа\n    viewProductSuccess: 5,       // Просмотр продукта\n    createProductSuccess: 6,     // Создание продукта\n    updateProfileSuccess: 7,     // Обновление профиля\n    addImageSuccess: 8,          // Добавление изображения\n    addCategorySuccess: 9,       // Добавление категории\n    switchToLightThemeSuccess: 10, // Светлая тема\n    switchToDarkThemeSuccess: 11, // Тёмная тема\n    removeFromCartSuccess: 12,   // Удаление из корзины\n    updateCartQuantitySuccess: 13, // Обновление количества\n    loadProductsSuccess: 14,     // Загрузка продуктов\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\n    navigateToProductSuccess: 16, // Навигация к продукту\n    toggleThemeSuccess: 17,      // Переключение темы\n    resetThemeSuccess: 18,       // Сброс темы\n    openProductDialogSuccess: 19, // Открытие диалога продукта\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\n    logoutProjSuccess: 22,       // Выход из системы\n    updateCategorySuccess: 23,   // Обновление категории\n    updateImageSuccess: 24,      // Обновление изображения\n    updateProductSuccess: 25,    // Обновление продукта\n    // Отрицательные тест-кейсы\n    loginFailed: 26,             // Ошибка входа\n    registerFailed: 27,          // Ошибка регистрации\n    addToCartFailed: 28,         // Ошибка добавления в корзину\n    checkoutFailed: 29,          // Ошибка оформления заказа\n    viewProductFailed: 30,       // Ошибка просмотра продукта\n    createProductFailed: 31,     // Ошибка создания продукта\n    updateProfileFailed: 32,     // Ошибка обновления профиля\n    addImageFailed: 33,          // Ошибка добавления изображения\n    addCategoryFailed: 34,       // Ошибка добавления категории\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\n    failedToLoad: 37,            // Ошибка загрузки\n    buttonNotWorking: 38,        // Ошибка кнопки\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\n    logoutProjFailed: 44,        // Ошибка выхода\n    updateCategoryFailed: 45,    // Ошибка обновления категории\n    updateImageFailed: 46,       // Ошибка обновления изображения\n    updateProductFailed: 47,     // Ошибка обновления продукта\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\n  };\n\n  /**\n   * Пути к API endpoint'ам.\n   *\n   * @example\n   * this.configService.apiEndpoints.login\n   */\n  readonly apiEndpoints = {\n    login: '/api/login',\n    register: '/api/register',\n    addToCart: '/api/cart/add',\n    checkout: '/api/checkout',\n    viewProduct: '/api/products',\n    createProduct: '/api/products/create',\n    updateProfile: '/api/profile/update',\n    addImage: '/api/products/add-image',\n    addCategory: '/api/categories/add',\n    switchTheme: '/api/settings/switch-theme',\n    removeFromCart: '/api/cart/remove',\n    updateCartQuantity: '/api/cart/update',\n    loadProducts: '/api/products/all',\n    loadProductInfo: '/api/products/info',\n    toggleTheme: '/api/settings/toggle-theme',\n    resetTheme: '/api/settings/reset-theme',\n    logoutProj: '/api/auth/logout-proj'\n  };\n\n  /**\n   * Коды HTTP-статусов для обработки ответов сервера.\n   *\n   * @example\n   * if (response.status === this.configService.httpStatusCodes.success) { ... }\n   */\n  readonly httpStatusCodes = {\n    // 2xx: Успешные\n    success: 200,          // Успешный запрос\n    created: 201,          // Ресурс создан\n    noContent: 204,        // Успешно, но нет содержимого\n\n    // 3xx: Перенаправления\n    movedPermanently: 301, // Ресурс перемещён навсегда\n    found: 302,            // Ресурс временно перемещён\n\n    // 4xx: Ошибки клиента\n    badRequest: 400,       // Неверный запрос\n    unauthorized: 401,     // Неавторизован\n    forbidden: 403,        // Доступ запрещён\n    notFound: 404,         // Ресурс не найден\n    conflict: 409,         // Конфликт (например, дубликат)\n\n    // 5xx: Ошибки сервера\n    serverError: 500,      // Внутренняя ошибка сервера\n    serviceUnavailable: 503 // Сервис недоступен\n  };\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DialogCategoryComponent.html":{"url":"components/DialogCategoryComponent.html","title":"component - DialogCategoryComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DialogCategoryComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/dialog-category/dialog-category.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dialog-category\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            TuiAutoFocus\n                            TuiButton\n                            TuiDataListWrapper\n                            TuiInputModule\n                            TuiSelectModule\n                            TuiSlider\n                            TuiTextfield\n                            TuiTextfieldControllerModule\n                            CommonModule\n                \n            \n\n            \n                styleUrls\n                ./dialog-category.component.css\n            \n\n\n\n            \n                templateUrl\n                ./dialog-category.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                alerts\n                            \n                            \n                                    Private\n                                    Readonly\n                                categoriesRepositoryService\n                            \n                            \n                                    Protected\n                                    Readonly\n                                categoryForm\n                            \n                            \n                                    \n                                categoryNameInputRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                configService\n                            \n                            \n                                    Public\n                                    Readonly\n                                context\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogs\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsRepository\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkLengthAndWarn\n                            \n                            \n                                    Private\n                                createCategory\n                            \n                            \n                                    Protected\n                                moveFocus\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onInput\n                            \n                            \n                                    Private\n                                showError\n                            \n                            \n                                    Private\n                                showSuccess\n                            \n                            \n                                    Private\n                                showWarning\n                            \n                            \n                                    Protected\n                                submit\n                            \n                            \n                                    Private\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasValue\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkLengthAndWarn\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkLengthAndWarn(value: string, maxLength: number, warningThreshold: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:191\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                maxLength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                warningThreshold\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    15\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    createCategory(categoryData: IDpCategory, userProjId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryData\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        moveFocus\n                        \n                    \n                \n            \n            \n                \n                        \n                    moveFocus(targetInput: ElementRef)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:201\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                targetInput\n                                            \n                                                        ElementRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onInput\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInput(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showError\n                        \n                    \n                \n            \n            \n                \n                        \n                    showError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:161\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showSuccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    showSuccess(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:171\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showWarning\n                        \n                    \n                \n            \n            \n                \n                        \n                    showWarning(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:205\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        submit\n                        \n                    \n                \n            \n            \n                \n                        \n                    submit(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCategory(categoryData: IDpCategory, userProjId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-category/dialog-category.component.ts:130\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                categoryData\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        alerts\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiAlertService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        categoriesRepositoryService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(CategoriesRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        categoryForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    dpCategoryTitle: new FormControl('', Validators.required),\n    sizeId: new FormControl(null)\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        categoryNameInputRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('categoryNameInput', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ConfigService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : injectContext>()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiDialogService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-category/dialog-category.component.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        hasValue\n                    \n                \n\n                \n                    \n                        gethasValue()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/dialog-category/dialog-category.component.ts:51\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/dialog-category/dialog-category.component.ts:55\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, inject, ViewChild, ElementRef, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\nimport { TuiAlertService, TuiButton, TuiDialogContext, TuiDialogService, TuiTextfield } from '@taiga-ui/core';\nimport { TuiDataListWrapper, TuiSlider } from '@taiga-ui/kit';\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\nimport { injectContext } from '@taiga-ui/polymorpheus';\nimport { IDpCategory } from '../../../interface/IDpCategory';\nimport { CategoriesRepositoryService } from '../../../repositories/categories-repository.service';\nimport { CommonModule } from '@angular/common';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-dialog-category',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    TuiAutoFocus,\n    TuiButton,\n    TuiDataListWrapper,\n    TuiInputModule,\n    TuiSelectModule,\n    TuiSlider,\n    TuiTextfield,\n    TuiTextfieldControllerModule,\n    CommonModule\n  ],\n  templateUrl: './dialog-category.component.html',\n  styleUrls: ['./dialog-category.component.css']\n})\nexport class DialogCategoryComponent implements OnInit {\n  @ViewChild('categoryNameInput', { read: ElementRef }) categoryNameInputRef!: ElementRef;\n\n  private readonly alerts = inject(TuiAlertService);\n  private readonly dialogs = inject(TuiDialogService);\n  private readonly categoriesRepositoryService = inject(CategoriesRepositoryService);\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\n  private readonly configService = inject(ConfigService);\n  private readonly userAchievementsService = inject(UserAchievementsService);\n\n  public readonly context = injectContext>();\n\n  protected readonly categoryForm = new FormGroup({\n    dpCategoryTitle: new FormControl('', Validators.required),\n    sizeId: new FormControl(null)\n  });\n\n  protected get hasValue(): boolean {\n    return this.categoryForm.valid;\n  }\n\n  protected get data(): IDpCategory {\n    return this.context.data;\n  }\n\n  ngOnInit(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.userAchievementsRepository\n      .handleAchievement(\n        userProjId,\n        this.configService.achievementIds.openCategoryDialogSuccess,\n        'Достижение: диалог категории открыт!'\n      )\n      .subscribe();\n    if (this.data) {\n      this.categoryForm.patchValue(this.data);\n    }\n  }\n\n  protected submit(event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.hasValue) {\n      const categoryData = this.categoryForm.value;\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n\n      if (this.data.dpCategoryId) {\n        this.updateCategory({ ...categoryData, dpCategoryId: this.data.dpCategoryId } as IDpCategory, userProjId);\n      } else {\n        this.createCategory(categoryData as IDpCategory, userProjId);\n      }\n    } else {\n      this.showError('Форма заполнена некорректно.');\n    }\n  }\n\n  private createCategory(categoryData: IDpCategory, userProjId: number): void {\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(\n          userProjId,\n          this.configService.achievementIds.addCategoryFailed,\n          'Тест-кейс: ошибка создания категории!'\n        )\n        .subscribe();\n      this.showError('Тест-кейс: ошибка создания категории!');\n      return;\n    }\n    this.categoriesRepositoryService.createDpCategory(categoryData).subscribe({\n      next: (createdCategory) => {\n        this.context.completeWith(createdCategory);\n        this.showSuccess('Категория успешно создана.');\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.addCategorySuccess,\n            'Достижение: категория успешно создана!'\n          )\n          .subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при создании категории:', error);\n        this.showError('Ошибка при создании категории.');\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.addCategoryFailed, // Исправляем\n            'Достижения: ошибка создания категории!'\n          )\n          .subscribe();\n      }\n    });\n  }\n\n  private updateCategory(categoryData: IDpCategory, userProjId: number): void {\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(\n          userProjId,\n          this.configService.achievementIds.addCategoryFailed,\n          'Тест-кейс: ошибка создания категории!'\n        )\n        .subscribe();\n      this.showError('Тест-кейс: ошибка создания категории!');\n      return;\n    }\n    this.categoriesRepositoryService.updateDpCategory(categoryData.dpCategoryId, categoryData).subscribe({\n      next: () => {\n        this.context.completeWith(categoryData);\n        this.showSuccess('Категория успешно обновлена.');\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCategorySuccess, 'Достижение: категория успешно обновлена!')\n          .subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при обновлении категории:', error);\n        this.showError('Ошибка при обновлении категории.');\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCategoryFailed, 'Достижение: ошибка обновления категории!')\n          .subscribe();\n      }\n    });\n  }\n\n  private showError(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Ошибка',\n        appearance: 'negative',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n\n  private showSuccess(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Успех',\n        appearance: 'success',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n\n  protected onInput(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    const cleanedValue = input.value.replace(/[^a-zA-Z0-9]/g, '');\n    const maxLength = 200;\n    const finalValue = this.checkLengthAndWarn(cleanedValue, maxLength);\n\n    input.value = finalValue;\n    this.categoryForm.get('dpCategoryTitle')?.setValue(finalValue);\n  }\n\n  private checkLengthAndWarn(value: string, maxLength: number, warningThreshold: number = 15): string {\n    if (value.length > maxLength) {\n      this.showError(`Вы превысили максимальную длину в ${maxLength} символов.`);\n      return value.slice(0, maxLength);\n    } else if (value.length > maxLength - warningThreshold) {\n      this.showWarning(`Вы приближаетесь к лимиту символов. Осталось ${maxLength - value.length} символов.`);\n    }\n    return value;\n  }\n\n  protected moveFocus(targetInput: ElementRef): void {\n    targetInput.nativeElement.querySelector('input').focus();\n  }\n\n  private showWarning(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Предупреждение',\n        appearance: 'warning',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n}\n    \n\n    \n        \n  \n    название категории\n  \n  \n  Добавить категорию\n\n\n    \n\n    \n                \n                    ./dialog-category.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      название категории      Добавить категорию'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DialogCategoryComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DialogImageComponent.html":{"url":"components/DialogImageComponent.html","title":"component - DialogImageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DialogImageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/dialog-image/dialog-image.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dialog-image\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            AsyncPipe\n                            ReactiveFormsModule\n                            TuiAutoFocus\n                            TuiButton\n                            TuiDataListWrapper\n                            TuiFiles\n                            TuiInputModule\n                            TuiSelectModule\n                            TuiSlider\n                            TuiTextfield\n                            TuiTextfieldControllerModule\n                            NgIf\n                \n            \n\n            \n                styleUrls\n                ./dialog-image.component.css\n            \n\n\n\n            \n                templateUrl\n                ./dialog-image.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                alerts\n                            \n                            \n                                    Private\n                                    Readonly\n                                allowedTypes\n                            \n                            \n                                    Private\n                                    Readonly\n                                configService\n                            \n                            \n                                    Public\n                                    Readonly\n                                context\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogs\n                            \n                            \n                                    Protected\n                                    Readonly\n                                failedImage$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                imageControl\n                            \n                            \n                                    Protected\n                                    Readonly\n                                imageForm\n                            \n                            \n                                    Private\n                                    Readonly\n                                imagesRepositoryService\n                            \n                            \n                                    Protected\n                                    Readonly\n                                loadedImage$\n                            \n                            \n                                    Protected\n                                    Readonly\n                                loadingImage$\n                            \n                            \n                                    Private\n                                    Readonly\n                                maxFileSize\n                            \n                            \n                                    \n                                productNameInputRef\n                            \n                            \n                                selectedFile\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsRepository\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createImage\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onFileChange\n                            \n                            \n                                    Protected\n                                removeImage\n                            \n                            \n                                    Private\n                                showError\n                            \n                            \n                                    Private\n                                showSuccess\n                            \n                            \n                                    Protected\n                                submit\n                            \n                            \n                                    Private\n                                updateImage\n                            \n                            \n                                    Private\n                                validateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasValue\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    createImage(imageData: ICreateDpImageRequest, userProjId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:151\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                imageData\n                                            \n                                                            ICreateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:73\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onFileChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFileChange(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        removeImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    removeImage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:86\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showError\n                        \n                    \n                \n            \n            \n                \n                        \n                    showError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:233\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showSuccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    showSuccess(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:243\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        submit\n                        \n                    \n                \n            \n            \n                \n                        \n                    submit(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateImage\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateImage(imageData: IUpdateDpImageRequest, userProjId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:197\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                imageData\n                                            \n                                                            IUpdateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateFile\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateFile(file: File)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-image/dialog-image.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                file\n                                            \n                                                        File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        alerts\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiAlertService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        allowedTypes\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['image/jpeg', 'image/png']\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ConfigService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : injectContext>()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiDialogService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        failedImage$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        imageControl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormControl(null, Validators.required)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        imageForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    dpProductId: new FormControl(null, Validators.required),\n    dpImageTitle: new FormControl('', [Validators.required, Validators.maxLength(200)])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imagesRepositoryService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ImagesRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        loadedImage$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        loadingImage$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subject()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        maxFileSize\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 5 * 1024 * 1024\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productNameInputRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('productNameInput', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedFile\n                        \n                    \n                \n            \n                \n                    \n                        Type :     File | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-image/dialog-image.component.ts:47\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        hasValue\n                    \n                \n\n                \n                    \n                        gethasValue()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/dialog-image/dialog-image.component.ts:65\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/dialog-image/dialog-image.component.ts:69\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, inject, ViewChild, ElementRef, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { AsyncPipe, NgIf } from '@angular/common';\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\nimport { TuiAlertService, TuiButton, TuiDialogContext, TuiDialogService, TuiTextfield } from '@taiga-ui/core';\nimport { TuiDataListWrapper, TuiFileLike, TuiFiles, TuiSlider } from '@taiga-ui/kit';\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\nimport { injectContext } from '@taiga-ui/polymorpheus';\nimport { Subject, Observable, of } from 'rxjs';\nimport { ICreateDpImageRequest } from '../../../interface/ICreateDpImageRequest';\nimport { ImagesRepositoryService } from '../../../repositories/images-repository.service';\nimport { IDpImage } from '../../../interface/IDpImage';\nimport { IUpdateDpImageRequest } from '../../../interface/IUpdateDpImageRequest';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-dialog-image',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    ReactiveFormsModule,\n    TuiAutoFocus,\n    TuiButton,\n    TuiDataListWrapper,\n    TuiFiles,\n    TuiInputModule,\n    TuiSelectModule,\n    TuiSlider,\n    TuiTextfield,\n    TuiTextfieldControllerModule,\n    NgIf\n  ],\n  templateUrl: './dialog-image.component.html',\n  styleUrls: ['./dialog-image.component.css']\n})\nexport class DialogImageComponent implements OnInit {\n  @ViewChild('productNameInput', { read: ElementRef }) productNameInputRef!: ElementRef;\n\n  private readonly alerts = inject(TuiAlertService);\n  private readonly dialogs = inject(TuiDialogService);\n  private readonly imagesRepositoryService = inject(ImagesRepositoryService);\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\n  private readonly configService = inject(ConfigService);\n  private readonly userAchievementsService = inject(UserAchievementsService);\n\n  public readonly context = injectContext>();\n\n  protected readonly imageControl = new FormControl(null, Validators.required);\n  protected readonly failedImage$ = new Subject();\n  protected readonly loadingImage$ = new Subject();\n  protected readonly loadedImage$ = new Subject();\n\n  protected readonly imageForm = new FormGroup({\n    dpProductId: new FormControl(null, Validators.required),\n    dpImageTitle: new FormControl('', [Validators.required, Validators.maxLength(200)])\n  });\n\n  selectedFile: File | null = null;\n  private readonly maxFileSize = 5 * 1024 * 1024; // 5MB\n  private readonly allowedTypes = ['image/jpeg', 'image/png'];\n\n  protected get hasValue(): boolean {\n    return this.imageForm.valid && !!this.selectedFile;\n  }\n\n  protected get data(): IDpImage {\n    return this.context.data;\n  }\n\n  ngOnInit(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.userAchievementsRepository\n      .handleAchievement(userProjId, this.configService.achievementIds.openImageDialogSuccess, 'тест-кейс: диалог изображения открыт!')\n      .subscribe();\n    if (this.data) {\n      this.imageForm.patchValue({\n        dpProductId: this.data.dpProductId,\n        dpImageTitle: this.data.dpImageTitle\n      });\n    }\n  }\n\n  protected removeImage(): void {\n    this.imageControl.setValue(null);\n    this.selectedFile = null;\n    this.loadedImage$.next(null);\n    this.failedImage$.next(null);\n    this.loadingImage$.next(null);\n  }\n\n  protected onFileChange(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    if (input.files && input.files.length > 0) {\n      const file = input.files[0];\n      const validationError = this.validateFile(file);\n      if (validationError) {\n        this.showError(validationError);\n        this.failedImage$.next(file);\n        this.imageControl.setValue(null);\n        this.selectedFile = null;\n        return;\n      }\n      this.selectedFile = file;\n      this.imageControl.setValue(file);\n      this.loadedImage$.next(file);\n    }\n  }\n\n  private validateFile(file: File): string | null {\n    if (file.size > this.maxFileSize) {\n      return `Файл слишком большой (максимум ${this.maxFileSize / 1024 / 1024}MB).`;\n    }\n    if (!this.allowedTypes.includes(file.type)) {\n      return 'Поддерживаются только JPEG и PNG.';\n    }\n    return null;\n  }\n\n  protected submit(event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.hasValue) {\n      const imageData = this.imageForm.value;\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n      this.loadingImage$.next(this.selectedFile);\n\n      if (this.data.dpImagesId) {\n        const updateRequest: IUpdateDpImageRequest = {\n          dpProductId: imageData.dpProductId!,\n          dpImageTitle: imageData.dpImageTitle!,\n          file: this.selectedFile!\n        };\n        this.updateImage(updateRequest, userProjId);\n      } else {\n        const createRequest: ICreateDpImageRequest = {\n          dpProductId: imageData.dpProductId!,\n          dpImageTitle: imageData.dpImageTitle!,\n          file: this.selectedFile!\n        };\n        this.createImage(createRequest, userProjId);\n      }\n    } else {\n      this.showError('Форма заполнена некорректно.');\n    }\n  }\n\n  private createImage(imageData: ICreateDpImageRequest, userProjId: number): void {\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(\n          userProjId,\n          this.configService.achievementIds.addImageFailed,\n          'тест-кейс: ошибка добавления изображения!'\n        )\n        .subscribe();\n      this.showError('Тест-кейс: ошибка добавления изображения!');\n      this.failedImage$.next(this.selectedFile);\n      this.loadingImage$.next(null);\n      return;\n    }\n\n    // Обычная логика\n    this.imagesRepositoryService.createDpImage(imageData).subscribe({\n      next: (createdImage) => {\n        this.context.completeWith(createdImage);\n        this.showSuccess('Изображение успешно загружено.');\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.addImageSuccess,\n            'тест-кейс: изображение успешно добавлено!'\n          )\n          .subscribe();\n        this.loadingImage$.next(null);\n      },\n      error: (error) => {\n        console.error('Ошибка при загрузке изображения:', error);\n        this.showError(`Ошибка при загрузке изображения: ${error.message || 'неизвестная ошибка'}`);\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.addImageFailed,\n            'тест-кейс: ошибка добавления изображения!'\n          )\n          .subscribe();\n        this.failedImage$.next(this.selectedFile);\n        this.loadingImage$.next(null);\n      }\n    });\n  }\n\n  private updateImage(imageData: IUpdateDpImageRequest, userProjId: number): void {\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(\n          userProjId,\n          this.configService.achievementIds.updateImageFailed,\n          'тест-кейс: ошибка обновления изображения!'\n        )\n        .subscribe();\n      this.showError('Тест-кейс: ошибка обновления изображения!');\n      return;\n    }\n\n    // Обычная логика обновления изображения\n    this.imagesRepositoryService.updateDpImage(this.data.dpImagesId, imageData).subscribe({\n      next: () => {\n        this.context.completeWith(this.data);\n        this.showSuccess('Изображение успешно обновлено.');\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateImageSuccess, 'тест-кейс: изображение успешно обновлено!')\n          .subscribe();\n        this.loadingImage$.next(null);\n      },\n      error: (error) => {\n        console.error('Ошибка при обновлении изображения:', error);\n        this.showError(`Ошибка при обновлении изображения: ${error.message || 'неизвестная ошибка'}`);\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateImageFailed, 'тест-кейс: ошибка обновления изображения!')\n          .subscribe();\n        this.failedImage$.next(this.selectedFile);\n        this.loadingImage$.next(null);\n      }\n    });\n  }\n\n  private showError(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Ошибка',\n        appearance: 'negative',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n\n  private showSuccess(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Успех',\n        appearance: 'success',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n}\n    \n\n    \n        \n  \n    \n      ID продукта\n    \n    \n    \n      Название изображения\n    \n    \n    \n      \n    \n    \n    Загрузить изображение\n  \n\n  \n    \n\n    \n\n    \n\n    \n  \n\n\n    \n\n    \n                \n                    ./dialog-image.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            ID продукта                  Название изображения                              Загрузить изображение                      '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DialogImageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DialogProductComponent.html":{"url":"components/DialogProductComponent.html","title":"component - DialogProductComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DialogProductComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/dialog-product/dialog-product.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-dialog-product\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            TuiAutoFocus\n                            TuiButton\n                            TuiDataListWrapper\n                            TuiInputModule\n                            TuiSelectModule\n                            TuiSlider\n                            TuiTextfield\n                            TuiTextfieldControllerModule\n                            AsyncPipe\n                            NgIf\n                \n            \n\n            \n                styleUrls\n                ./dialog-product.component.css\n            \n\n\n\n            \n                templateUrl\n                ./dialog-product.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                alerts\n                            \n                            \n                                    Private\n                                    Readonly\n                                configService\n                            \n                            \n                                    Public\n                                    Readonly\n                                context\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogs\n                            \n                            \n                                    Protected\n                                    Readonly\n                                productForm\n                            \n                            \n                                    \n                                productNameInputRef\n                            \n                            \n                                    Private\n                                    Readonly\n                                productsRepositoryService\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsRepository\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                checkLengthAndWarn\n                            \n                            \n                                    Private\n                                createProduct\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onInput\n                            \n                            \n                                    Private\n                                showError\n                            \n                            \n                                    Private\n                                showSuccess\n                            \n                            \n                                    Private\n                                showWarning\n                            \n                            \n                                    Protected\n                                submit\n                            \n                            \n                                    Private\n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasValue\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        checkLengthAndWarn\n                        \n                    \n                \n            \n            \n                \n                        \n                    checkLengthAndWarn(value: string, maxLength: number, controlName: string, warningThreshold: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:204\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                maxLength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                warningThreshold\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    15\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        createProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    createProduct(productData: IDpProduct, userProjId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:94\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productData\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:66\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onInput\n                        \n                    \n                \n            \n            \n                \n                        \n                    onInput(event: Event, controlName: string, maxLength: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                controlName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                maxLength\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showError\n                        \n                    \n                \n            \n            \n                \n                        \n                    showError(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:176\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showSuccess\n                        \n                    \n                \n            \n            \n                \n                        \n                    showSuccess(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        showWarning\n                        \n                    \n                \n            \n            \n                \n                        \n                    showWarning(message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:214\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        submit\n                        \n                    \n                \n            \n            \n                \n                        \n                    submit(event?: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateProduct\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProduct(productData: IDpProduct, userProjId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/dialog-product/dialog-product.component.ts:135\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                productData\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        alerts\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiAlertService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ConfigService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        context\n                        \n                    \n                \n            \n                \n                    \n                        Default value : injectContext>()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogs\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiDialogService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        productForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    dpTitle: new FormControl('', Validators.required),\n    dpDescription: new FormControl(''),\n    dpPrice: new FormControl(0, [Validators.required, Validators.min(0)]),\n    dpPurchasePrice: new FormControl(0, [Validators.required, Validators.min(0)]),\n    dpCategoryId: new FormControl(0),\n    dpDiscountPercent: new FormControl(0, [Validators.min(0), Validators.max(100)])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productNameInputRef\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ElementRef\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('productNameInput', {read: ElementRef})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        productsRepositoryService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ProductsRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/dialog-product/dialog-product.component.ts:45\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        hasValue\n                    \n                \n\n                \n                    \n                        gethasValue()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/dialog-product/dialog-product.component.ts:58\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n                \n                    \n                        getdata()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/dialog-product/dialog-product.component.ts:62\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, inject, ViewChild, ElementRef, OnInit, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\nimport { TuiAlertService, TuiButton, TuiDialogContext, TuiDialogService, TuiTextfield } from '@taiga-ui/core';\nimport { TuiDataListWrapper, TuiSlider } from '@taiga-ui/kit';\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\nimport { injectContext } from '@taiga-ui/polymorpheus';\nimport { IDpProduct } from '../../../interface/IDpProduct';\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\nimport { AsyncPipe, CommonModule, NgIf } from '@angular/common';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-dialog-product',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TuiAutoFocus,\n    TuiButton,\n    TuiDataListWrapper,\n    TuiInputModule,\n    TuiSelectModule,\n    TuiSlider,\n    TuiTextfield,\n    TuiTextfieldControllerModule,\n    AsyncPipe,\n    NgIf\n  ],\n  templateUrl: './dialog-product.component.html',\n  styleUrls: ['./dialog-product.component.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class DialogProductComponent implements OnInit {\n  @ViewChild('productNameInput', { read: ElementRef }) productNameInputRef!: ElementRef;\n\n  private readonly alerts = inject(TuiAlertService);\n  private readonly dialogs = inject(TuiDialogService);\n  private readonly productsRepositoryService = inject(ProductsRepositoryService);\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\n  private readonly configService = inject(ConfigService);\n  private readonly userAchievementsService = inject(UserAchievementsService);\n\n  public readonly context = injectContext>();\n\n  protected readonly productForm = new FormGroup({\n    dpTitle: new FormControl('', Validators.required),\n    dpDescription: new FormControl(''),\n    dpPrice: new FormControl(0, [Validators.required, Validators.min(0)]),\n    dpPurchasePrice: new FormControl(0, [Validators.required, Validators.min(0)]),\n    dpCategoryId: new FormControl(0),\n    dpDiscountPercent: new FormControl(0, [Validators.min(0), Validators.max(100)])\n  });\n\n  protected get hasValue(): boolean {\n    return this.productForm.valid;\n  }\n\n  protected get data(): IDpProduct {\n    return this.context.data;\n  }\n\n  ngOnInit(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.userAchievementsRepository\n      .handleAchievement(userProjId, this.configService.achievementIds.openProductDialogSuccess, 'тест-кейс: диалог продукта открыт!')\n      .subscribe();\n    if (this.data) {\n      this.productForm.patchValue(this.data);\n    }\n  }\n\n  protected submit(event?: Event): void {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.hasValue) {\n      const productData = this.productForm.value;\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n\n      if (this.data.dpProductId) {\n        this.updateProduct({ ...productData, dpProductId: this.data.dpProductId } as IDpProduct, userProjId);\n      } else {\n        this.createProduct(productData as IDpProduct, userProjId);\n      }\n    } else {\n      this.showError('Форма заполнена некорректно.');\n    }\n  }\n\n  private createProduct(productData: IDpProduct, userProjId: number): void {\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(\n          userProjId,\n          this.configService.achievementIds.createProductFailed,\n          'тест-кейс: ошибка создания продукта!'\n        )\n        .subscribe();\n      this.showError('Тест-кейс: ошибка создания продукта!');\n      return;\n    }\n\n    // Обычная логика создания продукта\n    this.productsRepositoryService.createProduct(productData).subscribe({\n      next: (createdProduct) => {\n        this.context.completeWith(createdProduct);\n        this.showSuccess('Продукт успешно создан.');\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.createProductSuccess,\n            'тест-кейс: продукт успешно создан!'\n          )\n          .subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при создании продукта:', error);\n        this.showError('Ошибка при создании продукта.');\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.createProductFailed,\n            'тест-кейс: ошибка создания продукта!'\n          )\n          .subscribe();\n      }\n    });\n  }\n\n  private updateProduct(productData: IDpProduct, userProjId: number): void {\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(\n          userProjId,\n          this.configService.achievementIds.updateProductFailed,\n          'тест-кейс: ошибка обновления продукта!'\n        )\n        .subscribe();\n      this.showError('Тест-кейс: ошибка обновления продукта!');\n      return;\n    }\n\n    // Обычная логика обновления продукта\n    this.productsRepositoryService.updateProduct(productData.dpProductId, productData).subscribe({\n      next: () => {\n        this.context.completeWith(productData);\n        this.showSuccess('Продукт успешно обновлён.');\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.updateProductSuccess,\n            'тест-кейс: продукт успешно обновлён!'\n          )\n          .subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при обновлении продукта:', error);\n        this.showError('Ошибка при обновлении продукта.');\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.updateProductFailed,\n            'тест-кейс: ошибка обновления продукта!'\n          )\n          .subscribe();\n      }\n    });\n  }\n\n  private showError(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Ошибка',\n        appearance: 'negative',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n\n  private showSuccess(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Успех',\n        appearance: 'success',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n\n  protected onInput(event: Event, controlName: string, maxLength: number): void {\n    const input = event.target as HTMLInputElement;\n    const cleanedValue = input.value;\n    const finalValue = this.checkLengthAndWarn(cleanedValue, maxLength, controlName);\n    input.value = finalValue;\n    this.productForm.patchValue({ [controlName]: finalValue });\n  }\n\n  private checkLengthAndWarn(value: string, maxLength: number, controlName: string, warningThreshold: number = 15): string {\n    if (value.length > maxLength) {\n      this.showError(`Вы превысили максимальную длину в ${maxLength} символов для ${controlName}.`);\n      return value.slice(0, maxLength);\n    } else if (value.length > maxLength - warningThreshold) {\n      this.showWarning(`Вы приближаетесь к лимиту символов для ${controlName}. Осталось ${maxLength - value.length} символов.`);\n    }\n    return value;\n  }\n\n  private showWarning(message: string): void {\n    this.alerts\n      .open(message, {\n        label: 'Предупреждение',\n        appearance: 'warning',\n        autoClose: 5000\n      })\n      .subscribe();\n  }\n}\n    \n\n    \n        \n  \n    \n      Название продукта\n    \n    \n    \n      Описание продукта\n    \n    \n    \n      Цена продукта\n    \n    \n    \n      Закупочная цена\n    \n    \n    \n      ID категории\n    \n    \n    \n      Процент скидки\n    \n    \n    Добавить продукт\n  \n\n\n    \n\n    \n                \n                    ./dialog-product.component.css\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Название продукта                  Описание продукта                  Цена продукта                  Закупочная цена                  ID категории                  Процент скидки            Добавить продукт  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'DialogProductComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpCategoriesService.html":{"url":"injectables/DpCategoriesService.html","title":"injectable - DpCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-categories.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с категориями товаров.\nПозволяет получать, создавать, обновлять и удалять категории товаров через API.\nExample :// Получить все категории (GET):\n// URL: /api/DpCategories\nthis.dpCategoriesService.getAllDpCategories().subscribe(categories => console.log(categories));// Получить категорию по id (GET):\n// URL: /api/DpCategories/1\nthis.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n// Создать категорию (POST):\n// URL: /api/DpCategories\n// Body:\n// {\n//   \"dpCategoryId\": 0,\n//   \"dpCategoryTitle\": \"Одежда\",\n//   \"dpCategoryDescription\": \"Вся одежда\"\n// }\nthis.dpCategoriesService.createDpCategory({\n  dpCategoryId: 0,\n  dpCategoryTitle: 'Одежда',\n  dpCategoryDescription: 'Вся одежда'\n}).subscribe(newCategory => ...);\n// Обновить категорию (PUT):\n// URL: /api/DpCategories/1\n// Body:\n// {\n//   \"dpCategoryId\": 1,\n//   \"dpCategoryTitle\": \"Обновлённая категория\",\n//   \"dpCategoryDescription\": \"Новое описание\"\n// }\nthis.dpCategoriesService.updateDpCategory(1, {\n  dpCategoryId: 1,\n  dpCategoryTitle: 'Обновлённая категория',\n  dpCategoryDescription: 'Новое описание'\n}).subscribe(() => ...);\n// Удалить категорию (DELETE):\n// URL: /api/DpCategories/1\nthis.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpCategory\n                            \n                            \n                                deleteDpCategory\n                            \n                            \n                                getAllDpCategories\n                            \n                            \n                                getDpCategoryById\n                            \n                            \n                                updateDpCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-categories.service.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpCategory\n                        \n                    \n                \n            \n            \n                \ncreateDpCategory(dpCategory: IDpCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Создаёт новую категорию.\nExample :// POST /api/DpCategories\n// Body:\n// {\n//   \"dpCategoryId\": 0,\n//   \"dpCategoryTitle\": \"Одежда\",\n//   \"dpCategoryDescription\": \"Вся одежда\"\n// }\nthis.dpCategoriesService.createDpCategory({\n  dpCategoryId: 0,\n  dpCategoryTitle: 'Одежда',\n  dpCategoryDescription: 'Вся одежда'\n}).subscribe(newCategory => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpCategory\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданная категория.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpCategory\n                        \n                    \n                \n            \n            \n                \ndeleteDpCategory(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Удаляет категорию по идентификатору.\nExample :// DELETE /api/DpCategories/1\nthis.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpCategories\n                        \n                    \n                \n            \n            \n                \ngetAllDpCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Получает список всех категорий.\nExample :// GET /api/DpCategories\nthis.dpCategoriesService.getAllDpCategories().subscribe(categories => ...);\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список категорий.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpCategoryById\n                        \n                    \n                \n            \n            \n                \ngetDpCategoryById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получает категорию по её идентификатору.\nExample :// GET /api/DpCategories/1\nthis.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Категория.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpCategory\n                        \n                    \n                \n            \n            \n                \nupdateDpCategory(id: number, dpCategory: IDpCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Обновляет существующую категорию.\nExample :// PUT /api/DpCategories/1\n// Body:\n// {\n//   \"dpCategoryId\": 1,\n//   \"dpCategoryTitle\": \"Обновлённая категория\",\n//   \"dpCategoryDescription\": \"Новое описание\"\n// }\nthis.dpCategoriesService.updateDpCategory(1, {\n  dpCategoryId: 1,\n  dpCategoryTitle: 'Обновлённая категория',\n  dpCategoryDescription: 'Новое описание'\n}).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                        \n                                                dpCategory\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённая категория.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpCategories`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-categories.service.ts:57\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpCategory } from '../interface/IDpCategory';\n\n/**\n * Сервис для работы с категориями товаров.\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять категории товаров через API.\n *\n * @example\n * // Получить все категории (GET):\n * // URL: /api/DpCategories\n * this.dpCategoriesService.getAllDpCategories().subscribe(categories => console.log(categories));\n *\n * // Получить категорию по id (GET):\n * // URL: /api/DpCategories/1\n * this.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n *\n * // Создать категорию (POST):\n * // URL: /api/DpCategories\n * // Body:\n * // {\n * //   \"dpCategoryId\": 0,\n * //   \"dpCategoryTitle\": \"Одежда\",\n * //   \"dpCategoryDescription\": \"Вся одежда\"\n * // }\n * this.dpCategoriesService.createDpCategory({\n *   dpCategoryId: 0,\n *   dpCategoryTitle: 'Одежда',\n *   dpCategoryDescription: 'Вся одежда'\n * }).subscribe(newCategory => ...);\n *\n * // Обновить категорию (PUT):\n * // URL: /api/DpCategories/1\n * // Body:\n * // {\n * //   \"dpCategoryId\": 1,\n * //   \"dpCategoryTitle\": \"Обновлённая категория\",\n * //   \"dpCategoryDescription\": \"Новое описание\"\n * // }\n * this.dpCategoriesService.updateDpCategory(1, {\n *   dpCategoryId: 1,\n *   dpCategoryTitle: 'Обновлённая категория',\n *   dpCategoryDescription: 'Новое описание'\n * }).subscribe(() => ...);\n *\n * // Удалить категорию (DELETE):\n * // URL: /api/DpCategories/1\n * this.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpCategoriesService {\n  private baseUrl = `${window.location.origin}/api/DpCategories`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех категорий.\n   *\n   * @returns {Observable} Список категорий.\n   * @example\n   * // GET /api/DpCategories\n   * this.dpCategoriesService.getAllDpCategories().subscribe(categories => ...);\n   */\n  getAllDpCategories(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает категорию по её идентификатору.\n   *\n   * @param {number} id Идентификатор категории.\n   * @returns {Observable} Категория.\n   * @example\n   * // GET /api/DpCategories/1\n   * this.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n   */\n  getDpCategoryById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новую категорию.\n   *\n   * @param {IDpCategory} dpCategory Объект категории.\n   * @returns {Observable} Созданная категория.\n   * @example\n   * // POST /api/DpCategories\n   * // Body:\n   * // {\n   * //   \"dpCategoryId\": 0,\n   * //   \"dpCategoryTitle\": \"Одежда\",\n   * //   \"dpCategoryDescription\": \"Вся одежда\"\n   * // }\n   * this.dpCategoriesService.createDpCategory({\n   *   dpCategoryId: 0,\n   *   dpCategoryTitle: 'Одежда',\n   *   dpCategoryDescription: 'Вся одежда'\n   * }).subscribe(newCategory => ...);\n   */\n  createDpCategory(dpCategory: IDpCategory): Observable {\n    return this.http.post(this.baseUrl, dpCategory);\n  }\n\n  /**\n   * Обновляет существующую категорию.\n   *\n   * @param {number} id Идентификатор категории.\n   * @param {IDpCategory} dpCategory Обновлённая категория.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpCategories/1\n   * // Body:\n   * // {\n   * //   \"dpCategoryId\": 1,\n   * //   \"dpCategoryTitle\": \"Обновлённая категория\",\n   * //   \"dpCategoryDescription\": \"Новое описание\"\n   * // }\n   * this.dpCategoriesService.updateDpCategory(1, {\n   *   dpCategoryId: 1,\n   *   dpCategoryTitle: 'Обновлённая категория',\n   *   dpCategoryDescription: 'Новое описание'\n   * }).subscribe(() => ...);\n   */\n  updateDpCategory(id: number, dpCategory: IDpCategory): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpCategory);\n  }\n\n  /**\n   * Удаляет категорию по идентификатору.\n   *\n   * @param {number} id Идентификатор категории.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpCategories/1\n   * this.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n   */\n  deleteDpCategory(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpImagesService.html":{"url":"injectables/DpImagesService.html","title":"injectable - DpImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-images.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с изображениями товаров.\nПозволяет получать, создавать, обновлять и удалять изображения, а также получать бинарные данные изображения.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpImage\n                            \n                            \n                                deleteDpImage\n                            \n                            \n                                getAllDpImages\n                            \n                            \n                                getDpImageById\n                            \n                            \n                                getDpImageData\n                            \n                            \n                                getDpImagesByProductId\n                            \n                            \n                                updateDpImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-images.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpImage\n                        \n                    \n                \n            \n            \n                \ncreateDpImage(request: ICreateDpImageRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Создаёт новое изображение для товара.\nExample :// POST /api/DpImages (multipart/form-data)\n// FormData:\n// DpProductId: 5\n// DpImageTitle: \"Фото товара\"\n// File: (binary image file)\nconst file = ...; // File из input[type=\"file\"]\nconst formData = new FormData();\nformData.append('DpProductId', '5');\nformData.append('DpImageTitle', 'Фото товара');\nformData.append('File', file);\nthis.http.post('/api/DpImages', formData).subscribe(image => {\n  // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n});// Или через сервис:\nthis.dpImagesService.createDpImage({\n  dpProductId: 5,\n  dpImageTitle: 'Фото товара',\n  file\n}).subscribe(image => console.log(image));\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            ICreateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для создания изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданное изображение.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpImage\n                        \n                    \n                \n            \n            \n                \ndeleteDpImage(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Удаляет изображение по идентификатору.\nExample :this.dpImagesService.deleteDpImage(10).subscribe(() => console.log('Удалено'));\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpImages\n                        \n                    \n                \n            \n            \n                \ngetAllDpImages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Получает список всех изображений.\nExample :// GET /api/DpImages\nthis.dpImagesService.getAllDpImages().subscribe(images => {\n  // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n  console.log(images);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список всех изображений.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImageById\n                        \n                    \n                \n            \n            \n                \ngetDpImageById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Получает изображение по его идентификатору.\nExample :// GET /api/DpImages/10\nthis.dpImagesService.getDpImageById(10).subscribe(image => {\n  // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Объект изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImageData\n                        \n                    \n                \n            \n            \n                \ngetDpImageData(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Получает бинарные данные изображения (Blob) по идентификатору.\nExample :// GET /api/DpImages/10/image\nthis.dpImagesService.getDpImageData(10).subscribe(blob => {\n  const url = URL.createObjectURL(blob);\n  window.open(url);\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Бинарные данные изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImagesByProductId\n                        \n                    \n                \n            \n            \n                \ngetDpImagesByProductId(productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Получает изображения по идентификатору товара.\nExample :// GET /api/DpImages/ByProduct/5\nthis.dpImagesService.getDpImagesByProductId(5).subscribe(images => {\n  // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список изображений для товара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpImage\n                        \n                    \n                \n            \n            \n                \nupdateDpImage(id: number, request: IUpdateDpImageRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Обновляет существующее изображение.\nExample :// PUT /api/DpImages/10 (multipart/form-data)\n// FormData:\n// DpProductId: 5\n// DpImageTitle: \"Новое название\"\n// File: (binary image file, опционально)\nconst file = ...; // Новый файл или undefined\nconst formData = new FormData();\nformData.append('DpProductId', '5');\nformData.append('DpImageTitle', 'Новое название');\nif (file) formData.append('File', file);\nthis.http.put('/api/DpImages/10', formData).subscribe(() => {\n  console.log('Изображение обновлено');\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                        \n                                                request\n                                            \n                                                            IUpdateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для обновления изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpImages`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-images.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpImage } from '../interface/IDpImage';\nimport { ICreateDpImageRequest } from '../interface/ICreateDpImageRequest';\nimport { IUpdateDpImageRequest } from '../interface/IUpdateDpImageRequest';\n\n/**\n * Сервис для работы с изображениями товаров.\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять изображения, а также получать бинарные данные изображения.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpImagesService {\n  private baseUrl = `${window.location.origin}/api/DpImages`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех изображений.\n   *\n   * @returns {Observable} Список всех изображений.\n   * @example\n   * // GET /api/DpImages\n   * this.dpImagesService.getAllDpImages().subscribe(images => {\n   *   // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n   *   console.log(images);\n   * });\n   */\n  getAllDpImages(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает изображения по идентификатору товара.\n   *\n   * @param {number} productId Идентификатор товара.\n   * @returns {Observable} Список изображений для товара.\n   * @example\n   * // GET /api/DpImages/ByProduct/5\n   * this.dpImagesService.getDpImagesByProductId(5).subscribe(images => {\n   *   // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n   * });\n   */\n  getDpImagesByProductId(productId: number): Observable {\n    return this.http.get(`${this.baseUrl}/ByProduct/${productId}`);\n  }\n\n  /**\n   * Получает изображение по его идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Объект изображения.\n   * @example\n   * // GET /api/DpImages/10\n   * this.dpImagesService.getDpImageById(10).subscribe(image => {\n   *   // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n   * });\n   */\n  getDpImageById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Получает бинарные данные изображения (Blob) по идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Бинарные данные изображения.\n   * @example\n   * // GET /api/DpImages/10/image\n   * this.dpImagesService.getDpImageData(10).subscribe(blob => {\n   *   const url = URL.createObjectURL(blob);\n   *   window.open(url);\n   * });\n   */\n  getDpImageData(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}/image`, { responseType: 'blob' });\n  }\n\n  /**\n   * Создаёт новое изображение для товара.\n   *\n   * @param {ICreateDpImageRequest} request Данные для создания изображения.\n   * @returns {Observable} Созданное изображение.\n   * @example\n   * // POST /api/DpImages (multipart/form-data)\n   * // FormData:\n   * // DpProductId: 5\n   * // DpImageTitle: \"Фото товара\"\n   * // File: (binary image file)\n   * const file = ...; // File из input[type=\"file\"]\n   * const formData = new FormData();\n   * formData.append('DpProductId', '5');\n   * formData.append('DpImageTitle', 'Фото товара');\n   * formData.append('File', file);\n   * this.http.post('/api/DpImages', formData).subscribe(image => {\n   *   // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n   * });\n   *\n   * // Или через сервис:\n   * this.dpImagesService.createDpImage({\n   *   dpProductId: 5,\n   *   dpImageTitle: 'Фото товара',\n   *   file\n   * }).subscribe(image => console.log(image));\n   */\n  createDpImage(request: ICreateDpImageRequest): Observable {\n    const formData = new FormData();\n    formData.append('DpProductId', request.dpProductId.toString());\n    formData.append('DpImageTitle', request.dpImageTitle);\n    formData.append('File', request.file);\n\n    return this.http.post(this.baseUrl, formData);\n  }\n\n  /**\n   * Обновляет существующее изображение.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @param {IUpdateDpImageRequest} request Данные для обновления изображения.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpImages/10 (multipart/form-data)\n   * // FormData:\n   * // DpProductId: 5\n   * // DpImageTitle: \"Новое название\"\n   * // File: (binary image file, опционально)\n   * const file = ...; // Новый файл или undefined\n   * const formData = new FormData();\n   * formData.append('DpProductId', '5');\n   * formData.append('DpImageTitle', 'Новое название');\n   * if (file) formData.append('File', file);\n   * this.http.put('/api/DpImages/10', formData).subscribe(() => {\n   *   console.log('Изображение обновлено');\n   * });\n   */\n  updateDpImage(id: number, request: IUpdateDpImageRequest): Observable {\n    const formData = new FormData();\n    formData.append('DpProductId', request.dpProductId.toString());\n    formData.append('DpImageTitle', request.dpImageTitle);\n    if (request.file) {\n      formData.append('File', request.file);\n    }\n\n    return this.http.put(`${this.baseUrl}/${id}`, formData);\n  }\n\n  /**\n   * Удаляет изображение по идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * this.dpImagesService.deleteDpImage(10).subscribe(() => console.log('Удалено'));\n   */\n  deleteDpImage(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpOrderCompositionsService.html":{"url":"injectables/DpOrderCompositionsService.html","title":"injectable - DpOrderCompositionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpOrderCompositionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-order-compositions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с составами заказов (Order Compositions).\nПозволяет получать, создавать, обновлять и удалять составы заказов через API.\nExample :// Получить все составы заказов (GET):\n// URL: /api/DpOrderCompositions\nthis.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => console.log(compositions));// Получить состав заказа по id (GET):\n// URL: /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n  // composition: { dpOrderId, dpProductId, quantity, dpAttributes, dpOrder }\n});\n// Создать состав заказа (POST):\n// URL: /api/DpOrderCompositions\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 3,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.createDpOrderComposition({\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 3,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(newComp => {\n  // newComp: { dpOrderId, dpProductId, quantity, ... }\n});\n// Обновить состав заказа (PUT):\n// URL: /api/DpOrderCompositions/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 5,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.updateDpOrderComposition(1, {\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 5,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(() => {\n  // Состав заказа обновлён\n});\n// Удалить состав заказа (DELETE):\n// URL: /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n  // Состав заказа удалён\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpOrderComposition\n                            \n                            \n                                deleteDpOrderComposition\n                            \n                            \n                                getAllDpOrderCompositions\n                            \n                            \n                                getDpOrderCompositionById\n                            \n                            \n                                updateDpOrderComposition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-order-compositions.service.ts:73\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpOrderComposition\n                        \n                    \n                \n            \n            \n                \ncreateDpOrderComposition(dpOrderComposition: IDpOrderComposition)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Создаёт новый состав заказа.\nExample :// POST /api/DpOrderCompositions\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 3,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.createDpOrderComposition({\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 3,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(newComp => {\n  // newComp: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpOrderComposition\n                                            \n                                                            IDpOrderComposition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный состав заказа.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpOrderComposition\n                        \n                    \n                \n            \n            \n                \ndeleteDpOrderComposition(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Удаляет состав заказа по идентификатору.\nExample :// DELETE /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n  // Состав заказа удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpOrderCompositions\n                        \n                    \n                \n            \n            \n                \ngetAllDpOrderCompositions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Получает список всех составов заказов.\nExample :// GET /api/DpOrderCompositions\nthis.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => {\n  // compositions: [{ ... }]\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список составов заказов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpOrderCompositionById\n                        \n                    \n                \n            \n            \n                \ngetDpOrderCompositionById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Получает состав заказа по его идентификатору.\nExample :// GET /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n  // composition: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Состав заказа.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpOrderComposition\n                        \n                    \n                \n            \n            \n                \nupdateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий состав заказа.\nExample :// PUT /api/DpOrderCompositions/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 5,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.updateDpOrderComposition(1, {\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 5,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(() => {\n  // Состав заказа обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                        \n                                                dpOrderComposition\n                                            \n                                                            IDpOrderComposition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpOrderCompositions`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-order-compositions.service.ts:73\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpOrderComposition } from '../interface/IDpOrderComposition';\n\n/**\n * Сервис для работы с составами заказов (Order Compositions).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять составы заказов через API.\n *\n * @example\n * // Получить все составы заказов (GET):\n * // URL: /api/DpOrderCompositions\n * this.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => console.log(compositions));\n *\n * // Получить состав заказа по id (GET):\n * // URL: /api/DpOrderCompositions/1\n * this.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n *   // composition: { dpOrderId, dpProductId, quantity, dpAttributes, dpOrder }\n * });\n *\n * // Создать состав заказа (POST):\n * // URL: /api/DpOrderCompositions\n * // Body:\n * // {\n * //   \"dpOrderId\": 1,\n * //   \"dpProductId\": 2,\n * //   \"quantity\": 3,\n * //   \"dpAttributes\": [],\n * //   \"dpOrder\": null\n * // }\n * this.dpOrderCompositionsService.createDpOrderComposition({\n *   dpOrderId: 1,\n *   dpProductId: 2,\n *   quantity: 3,\n *   dpAttributes: [],\n *   dpOrder: null\n * }).subscribe(newComp => {\n *   // newComp: { dpOrderId, dpProductId, quantity, ... }\n * });\n *\n * // Обновить состав заказа (PUT):\n * // URL: /api/DpOrderCompositions/1\n * // Body:\n * // {\n * //   \"dpOrderId\": 1,\n * //   \"dpProductId\": 2,\n * //   \"quantity\": 5,\n * //   \"dpAttributes\": [],\n * //   \"dpOrder\": null\n * // }\n * this.dpOrderCompositionsService.updateDpOrderComposition(1, {\n *   dpOrderId: 1,\n *   dpProductId: 2,\n *   quantity: 5,\n *   dpAttributes: [],\n *   dpOrder: null\n * }).subscribe(() => {\n *   // Состав заказа обновлён\n * });\n *\n * // Удалить состав заказа (DELETE):\n * // URL: /api/DpOrderCompositions/1\n * this.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n *   // Состав заказа удалён\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpOrderCompositionsService {\n  private baseUrl = `${window.location.origin}/api/DpOrderCompositions`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех составов заказов.\n   *\n   * @returns {Observable} Список составов заказов.\n   * @example\n   * // GET /api/DpOrderCompositions\n   * this.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => {\n   *   // compositions: [{ ... }]\n   * });\n   */\n  getAllDpOrderCompositions(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает состав заказа по его идентификатору.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @returns {Observable} Состав заказа.\n   * @example\n   * // GET /api/DpOrderCompositions/1\n   * this.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n   *   // composition: { ... }\n   * });\n   */\n  getDpOrderCompositionById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый состав заказа.\n   *\n   * @param {IDpOrderComposition} dpOrderComposition Объект состава заказа.\n   * @returns {Observable} Созданный состав заказа.\n   * @example\n   * // POST /api/DpOrderCompositions\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpProductId\": 2,\n   * //   \"quantity\": 3,\n   * //   \"dpAttributes\": [],\n   * //   \"dpOrder\": null\n   * // }\n   * this.dpOrderCompositionsService.createDpOrderComposition({\n   *   dpOrderId: 1,\n   *   dpProductId: 2,\n   *   quantity: 3,\n   *   dpAttributes: [],\n   *   dpOrder: null\n   * }).subscribe(newComp => {\n   *   // newComp: { ... }\n   * });\n   */\n  createDpOrderComposition(dpOrderComposition: IDpOrderComposition): Observable {\n    return this.http.post(this.baseUrl, dpOrderComposition);\n  }\n\n  /**\n   * Обновляет существующий состав заказа.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @param {IDpOrderComposition} dpOrderComposition Обновлённый объект состава заказа.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpOrderCompositions/1\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpProductId\": 2,\n   * //   \"quantity\": 5,\n   * //   \"dpAttributes\": [],\n   * //   \"dpOrder\": null\n   * // }\n   * this.dpOrderCompositionsService.updateDpOrderComposition(1, {\n   *   dpOrderId: 1,\n   *   dpProductId: 2,\n   *   quantity: 5,\n   *   dpAttributes: [],\n   *   dpOrder: null\n   * }).subscribe(() => {\n   *   // Состав заказа обновлён\n   * });\n   */\n  updateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpOrderComposition);\n  }\n\n  /**\n   * Удаляет состав заказа по идентификатору.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpOrderCompositions/1\n   * this.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n   *   // Состав заказа удалён\n   * });\n   */\n  deleteDpOrderComposition(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpOrdersService.html":{"url":"injectables/DpOrdersService.html","title":"injectable - DpOrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpOrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-orders.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с заказами (Orders).\nПозволяет получать, создавать, обновлять и удалять заказы через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpOrder\n                            \n                            \n                                deleteDpOrder\n                            \n                            \n                                getAllDpOrders\n                            \n                            \n                                getDpOrderById\n                            \n                            \n                                updateDpOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-orders.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpOrder\n                        \n                    \n                \n            \n            \n                \ncreateDpOrder(dpOrder: IDpOrder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Создаёт новый заказ.\nExample :// POST /api/DpOrders\n// Body:\n// {\n//   \"dpOrderId\": 0,\n//   \"dpUserId\": 1,\n//   \"orderDate\": \"2025-06-22T12:00:00\",\n//   \"orderStatus\": \"Новый\"\n// }\nthis.dpOrdersService.createDpOrder({\n  dpOrderId: 0,\n  dpUserId: 1,\n  orderDate: new Date().toISOString(),\n  orderStatus: 'Новый'\n}).subscribe(newOrder => {\n  // newOrder: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpOrder\n                                            \n                                                            IDpOrder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный заказ.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpOrder\n                        \n                    \n                \n            \n            \n                \ndeleteDpOrder(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Удаляет заказ по идентификатору.\nExample :// DELETE /api/DpOrders/1\nthis.dpOrdersService.deleteDpOrder(1).subscribe(() => {\n  // Заказ удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpOrders\n                        \n                    \n                \n            \n            \n                \ngetAllDpOrders()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех заказов.\nExample :// GET /api/DpOrders\nthis.dpOrdersService.getAllDpOrders().subscribe(orders => {\n  // orders: [{ dpOrderId, dpUserId, orderDate, orderStatus, ... }]\n  console.log(orders);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список заказов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpOrderById\n                        \n                    \n                \n            \n            \n                \ngetDpOrderById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает заказ по его идентификатору.\nExample :// GET /api/DpOrders/1\nthis.dpOrdersService.getDpOrderById(1).subscribe(order => {\n  // order: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Заказ.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpOrder\n                        \n                    \n                \n            \n            \n                \nupdateDpOrder(id: number, dpOrder: IDpOrder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий заказ.\nExample :// PUT /api/DpOrders/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpUserId\": 1,\n//   \"orderDate\": \"2025-06-22T12:00:00\",\n//   \"orderStatus\": \"Обновлён\"\n// }\nthis.dpOrdersService.updateDpOrder(1, {\n  dpOrderId: 1,\n  dpUserId: 1,\n  orderDate: new Date().toISOString(),\n  orderStatus: 'Обновлён'\n}).subscribe(() => {\n  // Заказ обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                        \n                                                dpOrder\n                                            \n                                                            IDpOrder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpOrders`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-orders.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpOrder } from '../interface/IDpOrder';\n\n/**\n * Сервис для работы с заказами (Orders).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять заказы через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpOrdersService {\n  private baseUrl = `${window.location.origin}/api/DpOrders`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех заказов.\n   *\n   * @returns {Observable} Список заказов.\n   * @example\n   * // GET /api/DpOrders\n   * this.dpOrdersService.getAllDpOrders().subscribe(orders => {\n   *   // orders: [{ dpOrderId, dpUserId, orderDate, orderStatus, ... }]\n   *   console.log(orders);\n   * });\n   */\n  getAllDpOrders(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает заказ по его идентификатору.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @returns {Observable} Заказ.\n   * @example\n   * // GET /api/DpOrders/1\n   * this.dpOrdersService.getDpOrderById(1).subscribe(order => {\n   *   // order: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n   * });\n   */\n  getDpOrderById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый заказ.\n   *\n   * @param {IDpOrder} dpOrder Объект заказа.\n   * @returns {Observable} Созданный заказ.\n   * @example\n   * // POST /api/DpOrders\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 0,\n   * //   \"dpUserId\": 1,\n   * //   \"orderDate\": \"2025-06-22T12:00:00\",\n   * //   \"orderStatus\": \"Новый\"\n   * // }\n   * this.dpOrdersService.createDpOrder({\n   *   dpOrderId: 0,\n   *   dpUserId: 1,\n   *   orderDate: new Date().toISOString(),\n   *   orderStatus: 'Новый'\n   * }).subscribe(newOrder => {\n   *   // newOrder: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n   * });\n   */\n  createDpOrder(dpOrder: IDpOrder): Observable {\n    return this.http.post(this.baseUrl, dpOrder);\n  }\n\n  /**\n   * Обновляет существующий заказ.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @param {IDpOrder} dpOrder Обновлённый объект заказа.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpOrders/1\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpUserId\": 1,\n   * //   \"orderDate\": \"2025-06-22T12:00:00\",\n   * //   \"orderStatus\": \"Обновлён\"\n   * // }\n   * this.dpOrdersService.updateDpOrder(1, {\n   *   dpOrderId: 1,\n   *   dpUserId: 1,\n   *   orderDate: new Date().toISOString(),\n   *   orderStatus: 'Обновлён'\n   * }).subscribe(() => {\n   *   // Заказ обновлён\n   * });\n   */\n  updateDpOrder(id: number, dpOrder: IDpOrder): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpOrder);\n  }\n\n  /**\n   * Удаляет заказ по идентификатору.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpOrders/1\n   * this.dpOrdersService.deleteDpOrder(1).subscribe(() => {\n   *   // Заказ удалён\n   * });\n   */\n  deleteDpOrder(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpProductAttributesService.html":{"url":"injectables/DpProductAttributesService.html","title":"injectable - DpProductAttributesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpProductAttributesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-product-attributes.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с атрибутами товаров (Product Attributes).\nПозволяет получать, создавать, обновлять и удалять атрибуты товаров через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpProductAttribute\n                            \n                            \n                                deleteDpProductAttribute\n                            \n                            \n                                getAllDpProductAttributes\n                            \n                            \n                                getDpProductAttributeById\n                            \n                            \n                                updateDpProductAttribute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-product-attributes.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpProductAttribute\n                        \n                    \n                \n            \n            \n                \ncreateDpProductAttribute(dpProductAttribute: IDpProductAttribute)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Создаёт новый атрибут товара.\nExample :// POST /api/DpProductAttributes\n// Body:\n// {\n//   \"dpAttributesId\": 0,\n//   \"dpProductId\": 1,\n//   \"dpSize\": \"M\",\n//   \"dpColor\": \"Red\",\n//   ...другие поля...\n// }\nthis.dpProductAttributesService.createDpProductAttribute({\n  dpAttributesId: 0,\n  dpProductId: 1,\n  dpSize: 'M',\n  dpColor: 'Red'\n}).subscribe(attr => {\n  // attr: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpProductAttribute\n                                            \n                                                            IDpProductAttribute\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный атрибут.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpProductAttribute\n                        \n                    \n                \n            \n            \n                \ndeleteDpProductAttribute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Удаляет атрибут товара по идентификатору.\nExample :// DELETE /api/DpProductAttributes/1\nthis.dpProductAttributesService.deleteDpProductAttribute(1).subscribe(() => {\n  // Атрибут удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpProductAttributes\n                        \n                    \n                \n            \n            \n                \ngetAllDpProductAttributes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех атрибутов товаров.\nExample :// GET /api/DpProductAttributes\nthis.dpProductAttributesService.getAllDpProductAttributes().subscribe(attrs => {\n  // attrs: [{ dpAttributesId, dpProductId, dpSize, ... }]\n  console.log(attrs);\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список атрибутов товаров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpProductAttributeById\n                        \n                    \n                \n            \n            \n                \ngetDpProductAttributeById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает атрибут товара по его идентификатору.\nExample :// GET /api/DpProductAttributes/1\nthis.dpProductAttributesService.getDpProductAttributeById(1).subscribe(attr => {\n  // attr: { dpAttributesId, dpProductId, dpSize, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Атрибут товара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpProductAttribute\n                        \n                    \n                \n            \n            \n                \nupdateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий атрибут товара.\nExample :// PUT /api/DpProductAttributes/1\n// Body:\n// {\n//   \"dpAttributesId\": 1,\n//   \"dpProductId\": 1,\n//   \"dpSize\": \"L\",\n//   \"dpColor\": \"Blue\",\n//   ...другие поля...\n// }\nthis.dpProductAttributesService.updateDpProductAttribute(1, {\n  dpAttributesId: 1,\n  dpProductId: 1,\n  dpSize: 'L',\n  dpColor: 'Blue'\n}).subscribe(() => {\n  // Атрибут обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                        \n                                                dpProductAttribute\n                                            \n                                                            IDpProductAttribute\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpProductAttributes`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-product-attributes.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpProductAttribute } from '../interface/IDpProductAttribute';\n\n/**\n * Сервис для работы с атрибутами товаров (Product Attributes).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять атрибуты товаров через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpProductAttributesService {\n  private baseUrl = `${window.location.origin}/api/DpProductAttributes`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех атрибутов товаров.\n   *\n   * @returns {Observable} Список атрибутов товаров.\n   * @example\n   * // GET /api/DpProductAttributes\n   * this.dpProductAttributesService.getAllDpProductAttributes().subscribe(attrs => {\n   *   // attrs: [{ dpAttributesId, dpProductId, dpSize, ... }]\n   *   console.log(attrs);\n   * });\n   */\n  getAllDpProductAttributes(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает атрибут товара по его идентификатору.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @returns {Observable} Атрибут товара.\n   * @example\n   * // GET /api/DpProductAttributes/1\n   * this.dpProductAttributesService.getDpProductAttributeById(1).subscribe(attr => {\n   *   // attr: { dpAttributesId, dpProductId, dpSize, ... }\n   * });\n   */\n  getDpProductAttributeById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый атрибут товара.\n   *\n   * @param {IDpProductAttribute} dpProductAttribute Объект атрибута.\n   * @returns {Observable} Созданный атрибут.\n   * @example\n   * // POST /api/DpProductAttributes\n   * // Body:\n   * // {\n   * //   \"dpAttributesId\": 0,\n   * //   \"dpProductId\": 1,\n   * //   \"dpSize\": \"M\",\n   * //   \"dpColor\": \"Red\",\n   * //   ...другие поля...\n   * // }\n   * this.dpProductAttributesService.createDpProductAttribute({\n   *   dpAttributesId: 0,\n   *   dpProductId: 1,\n   *   dpSize: 'M',\n   *   dpColor: 'Red'\n   * }).subscribe(attr => {\n   *   // attr: { ... }\n   * });\n   */\n  createDpProductAttribute(dpProductAttribute: IDpProductAttribute): Observable {\n    return this.http.post(this.baseUrl, dpProductAttribute);\n  }\n\n  /**\n   * Обновляет существующий атрибут товара.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @param {IDpProductAttribute} dpProductAttribute Обновлённый объект атрибута.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpProductAttributes/1\n   * // Body:\n   * // {\n   * //   \"dpAttributesId\": 1,\n   * //   \"dpProductId\": 1,\n   * //   \"dpSize\": \"L\",\n   * //   \"dpColor\": \"Blue\",\n   * //   ...другие поля...\n   * // }\n   * this.dpProductAttributesService.updateDpProductAttribute(1, {\n   *   dpAttributesId: 1,\n   *   dpProductId: 1,\n   *   dpSize: 'L',\n   *   dpColor: 'Blue'\n   * }).subscribe(() => {\n   *   // Атрибут обновлён\n   * });\n   */\n  updateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpProductAttribute);\n  }\n\n  /**\n   * Удаляет атрибут товара по идентификатору.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpProductAttributes/1\n   * this.dpProductAttributesService.deleteDpProductAttribute(1).subscribe(() => {\n   *   // Атрибут удалён\n   * });\n   */\n  deleteDpProductAttribute(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpSizesService.html":{"url":"injectables/DpSizesService.html","title":"injectable - DpSizesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpSizesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-sizes.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с размерами товаров (Sizes).\nПозволяет получать, создавать, обновлять и удалять размеры товаров через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpSize\n                            \n                            \n                                deleteDpSize\n                            \n                            \n                                getAllDpSizes\n                            \n                            \n                                getDpSizeById\n                            \n                            \n                                updateDpSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-sizes.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpSize\n                        \n                    \n                \n            \n            \n                \ncreateDpSize(dpSize: IDpSize)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Создаёт новый размер.\nExample :// POST /api/DpSizes\n// Body:\n// {\n//   \"sizeId\": 0,\n//   \"size\": \"XL\"\n// }\nthis.dpSizesService.createDpSize({\n  sizeId: 0,\n  size: 'XL'\n}).subscribe(newSize => {\n  // newSize: { sizeId, size }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpSize\n                                            \n                                                            IDpSize\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный размер.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpSize\n                        \n                    \n                \n            \n            \n                \ndeleteDpSize(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Удаляет размер по идентификатору.\nExample :// DELETE /api/DpSizes/1\nthis.dpSizesService.deleteDpSize(1).subscribe(() => {\n  // Размер удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpSizes\n                        \n                    \n                \n            \n            \n                \ngetAllDpSizes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех размеров.\nExample :// GET /api/DpSizes\nthis.dpSizesService.getAllDpSizes().subscribe(sizes => {\n  // sizes: [{ sizeId, size, ... }]\n  console.log(sizes);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список размеров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpSizeById\n                        \n                    \n                \n            \n            \n                \ngetDpSizeById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает размер по его идентификатору.\nExample :// GET /api/DpSizes/1\nthis.dpSizesService.getDpSizeById(1).subscribe(size => {\n  // size: { sizeId, size, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Размер.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpSize\n                        \n                    \n                \n            \n            \n                \nupdateDpSize(id: number, dpSize: IDpSize)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий размер.\nExample :// PUT /api/DpSizes/1\n// Body:\n// {\n//   \"sizeId\": 1,\n//   \"size\": \"XXL\"\n// }\nthis.dpSizesService.updateDpSize(1, {\n  sizeId: 1,\n  size: 'XXL'\n}).subscribe(() => {\n  // Размер обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                        \n                                                dpSize\n                                            \n                                                            IDpSize\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpSizes`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-sizes.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpSize } from '../interface/IDpSize';\n\n/**\n * Сервис для работы с размерами товаров (Sizes).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять размеры товаров через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpSizesService {\n  private baseUrl = `${window.location.origin}/api/DpSizes`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех размеров.\n   *\n   * @returns {Observable} Список размеров.\n   * @example\n   * // GET /api/DpSizes\n   * this.dpSizesService.getAllDpSizes().subscribe(sizes => {\n   *   // sizes: [{ sizeId, size, ... }]\n   *   console.log(sizes);\n   * });\n   */\n  getAllDpSizes(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает размер по его идентификатору.\n   *\n   * @param {number} id Идентификатор размера.\n   * @returns {Observable} Размер.\n   * @example\n   * // GET /api/DpSizes/1\n   * this.dpSizesService.getDpSizeById(1).subscribe(size => {\n   *   // size: { sizeId, size, ... }\n   * });\n   */\n  getDpSizeById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый размер.\n   *\n   * @param {IDpSize} dpSize Объект размера.\n   * @returns {Observable} Созданный размер.\n   * @example\n   * // POST /api/DpSizes\n   * // Body:\n   * // {\n   * //   \"sizeId\": 0,\n   * //   \"size\": \"XL\"\n   * // }\n   * this.dpSizesService.createDpSize({\n   *   sizeId: 0,\n   *   size: 'XL'\n   * }).subscribe(newSize => {\n   *   // newSize: { sizeId, size }\n   * });\n   */\ncreateDpSize(dpSize: IDpSize): Observable {\n    return this.http.post(this.baseUrl, dpSize);\n  }\n\n  /**\n   * Обновляет существующий размер.\n   *\n   * @param {number} id Идентификатор размера.\n   * @param {IDpSize} dpSize Обновлённый объект размера.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpSizes/1\n   * // Body:\n   * // {\n   * //   \"sizeId\": 1,\n   * //   \"size\": \"XXL\"\n   * // }\n   * this.dpSizesService.updateDpSize(1, {\n   *   sizeId: 1,\n   *   size: 'XXL'\n   * }).subscribe(() => {\n   *   // Размер обновлён\n   * });\n   */\n  updateDpSize(id: number, dpSize: IDpSize): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpSize);\n  }\n\n  /**\n   * Удаляет размер по идентификатору.\n   *\n   * @param {number} id Идентификатор размера.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpSizes/1\n   * this.dpSizesService.deleteDpSize(1).subscribe(() => {\n   *   // Размер удалён\n   * });\n   */\n  deleteDpSize(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpUserProjsService.html":{"url":"injectables/DpUserProjsService.html","title":"injectable - DpUserProjsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpUserProjsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-user-projs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с пользователями проектов (UserProjs).\nПозволяет получать, создавать, обновлять и удалять пользователей проектов через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpUserProj\n                            \n                            \n                                deleteDpUserProj\n                            \n                            \n                                getAllDpUserProjs\n                            \n                            \n                                getDpUserProjById\n                            \n                            \n                                updateDpUserProj\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-user-projs.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpUserProj\n                        \n                    \n                \n            \n            \n                \ncreateDpUserProj(dpUserProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Создаёт нового пользователя проекта.\nExample :// POST /api/DpUserProjs\n// Body:\n// {\n//   \"dpUserProjId\": 0,\n//   \"userName\": \"Иван\",\n//   ...другие поля...\n// }\nthis.dpUserProjsService.createDpUserProj({\n  dpUserProjId: 0,\n  userName: 'Иван'\n}).subscribe(newUser => {\n  // newUser: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpUserProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный пользователь проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpUserProj\n                        \n                    \n                \n            \n            \n                \ndeleteDpUserProj(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Удаляет пользователя проекта по идентификатору.\nExample :// DELETE /api/DpUserProjs/1\nthis.dpUserProjsService.deleteDpUserProj(1).subscribe(() => {\n  // Пользователь удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpUserProjs\n                        \n                    \n                \n            \n            \n                \ngetAllDpUserProjs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех пользователей проектов.\nExample :// GET /api/DpUserProjs\nthis.dpUserProjsService.getAllDpUserProjs().subscribe(users => {\n  // users: [{ dpUserProjId, userName, ... }]\n  console.log(users);\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список пользователей проектов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpUserProjById\n                        \n                    \n                \n            \n            \n                \ngetDpUserProjById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает пользователя проекта по его идентификатору.\nExample :// GET /api/DpUserProjs/1\nthis.dpUserProjsService.getDpUserProjById(1).subscribe(user => {\n  // user: { dpUserProjId, userName, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Пользователь проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpUserProj\n                        \n                    \n                \n            \n            \n                \nupdateDpUserProj(id: number, dpUserProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Обновляет существующего пользователя проекта.\nExample :// PUT /api/DpUserProjs/1\n// Body:\n// {\n//   \"dpUserProjId\": 1,\n//   \"userName\": \"Пётр\",\n//   ...другие поля...\n// }\nthis.dpUserProjsService.updateDpUserProj(1, {\n  dpUserProjId: 1,\n  userName: 'Пётр'\n}).subscribe(() => {\n  // Пользователь обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                        \n                                                dpUserProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpUserProjs`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-user-projs.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpUserProj } from '../interface/IDpUserProj';\n\n/**\n * Сервис для работы с пользователями проектов (UserProjs).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять пользователей проектов через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpUserProjsService {\n  private baseUrl = `${window.location.origin}/api/DpUserProjs`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех пользователей проектов.\n   *\n   * @returns {Observable} Список пользователей проектов.\n   * @example\n   * // GET /api/DpUserProjs\n   * this.dpUserProjsService.getAllDpUserProjs().subscribe(users => {\n   *   // users: [{ dpUserProjId, userName, ... }]\n   *   console.log(users);\n   * });\n   */\n  getAllDpUserProjs(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает пользователя проекта по его идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @returns {Observable} Пользователь проекта.\n   * @example\n   * // GET /api/DpUserProjs/1\n   * this.dpUserProjsService.getDpUserProjById(1).subscribe(user => {\n   *   // user: { dpUserProjId, userName, ... }\n   * });\n   */\n  getDpUserProjById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт нового пользователя проекта.\n   *\n   * @param {IDpUserProj} dpUserProj Объект пользователя проекта.\n   * @returns {Observable} Созданный пользователь проекта.\n   * @example\n   * // POST /api/DpUserProjs\n   * // Body:\n   * // {\n   * //   \"dpUserProjId\": 0,\n   * //   \"userName\": \"Иван\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUserProjsService.createDpUserProj({\n   *   dpUserProjId: 0,\n   *   userName: 'Иван'\n   * }).subscribe(newUser => {\n   *   // newUser: { ... }\n   * });\n   */\n  createDpUserProj(dpUserProj: IDpUserProj): Observable {\n    return this.http.post(this.baseUrl, dpUserProj);\n  }\n\n  /**\n   * Обновляет существующего пользователя проекта.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @param {IDpUserProj} dpUserProj Обновлённый объект пользователя проекта.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpUserProjs/1\n   * // Body:\n   * // {\n   * //   \"dpUserProjId\": 1,\n   * //   \"userName\": \"Пётр\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUserProjsService.updateDpUserProj(1, {\n   *   dpUserProjId: 1,\n   *   userName: 'Пётр'\n   * }).subscribe(() => {\n   *   // Пользователь обновлён\n   * });\n   */\n  updateDpUserProj(id: number, dpUserProj: IDpUserProj): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpUserProj);\n  }\n\n  /**\n   * Удаляет пользователя проекта по идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpUserProjs/1\n   * this.dpUserProjsService.deleteDpUserProj(1).subscribe(() => {\n   *   // Пользователь удалён\n   * });\n   */\n  deleteDpUserProj(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpUsersService.html":{"url":"injectables/DpUsersService.html","title":"injectable - DpUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с пользователями (Users).\nПозволяет получать, создавать, обновлять и удалять пользователей через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpUser\n                            \n                            \n                                deleteDpUser\n                            \n                            \n                                getAllDpUsers\n                            \n                            \n                                getDpUserById\n                            \n                            \n                                updateDpUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpUser\n                        \n                    \n                \n            \n            \n                \ncreateDpUser(dpUser: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Создаёт нового пользователя.\nExample :// POST /api/DpUsers\n// Body:\n// {\n//   \"dpUserId\": 0,\n//   \"userName\": \"Иван\",\n//   ...другие поля...\n// }\nthis.dpUsersService.createDpUser({\n  dpUserId: 0,\n  userName: 'Иван'\n}).subscribe(newUser => {\n  // newUser: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpUser\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный пользователь.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpUser\n                        \n                    \n                \n            \n            \n                \ndeleteDpUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Удаляет пользователя по идентификатору.\nExample :// DELETE /api/DpUsers/1\nthis.dpUsersService.deleteDpUser(1).subscribe(() => {\n  // Пользователь удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpUsers\n                        \n                    \n                \n            \n            \n                \ngetAllDpUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех пользователей.\nExample :// GET /api/DpUsers\nthis.dpUsersService.getAllDpUsers().subscribe(users => {\n  // users: [{ dpUserId, userName, ... }]\n  console.log(users);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список пользователей.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpUserById\n                        \n                    \n                \n            \n            \n                \ngetDpUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает пользователя по его идентификатору.\nExample :// GET /api/DpUsers/1\nthis.dpUsersService.getDpUserById(1).subscribe(user => {\n  // user: { dpUserId, userName, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Пользователь.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpUser\n                        \n                    \n                \n            \n            \n                \nupdateDpUser(id: number, dpUser: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Обновляет существующего пользователя.\nExample :// PUT /api/DpUsers/1\n// Body:\n// {\n//   \"dpUserId\": 1,\n//   \"userName\": \"Пётр\",\n//   ...другие поля...\n// }\nthis.dpUsersService.updateDpUser(1, {\n  dpUserId: 1,\n  userName: 'Пётр'\n}).subscribe(() => {\n  // Пользователь обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                dpUser\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpUsers`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-users.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpUser } from '../interface/IDpUser';\n\n/**\n * Сервис для работы с пользователями (Users).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять пользователей через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpUsersService {\n  private baseUrl = `${window.location.origin}/api/DpUsers`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех пользователей.\n   *\n   * @returns {Observable} Список пользователей.\n   * @example\n   * // GET /api/DpUsers\n   * this.dpUsersService.getAllDpUsers().subscribe(users => {\n   *   // users: [{ dpUserId, userName, ... }]\n   *   console.log(users);\n   * });\n   */\n  getAllDpUsers(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает пользователя по его идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @returns {Observable} Пользователь.\n   * @example\n   * // GET /api/DpUsers/1\n   * this.dpUsersService.getDpUserById(1).subscribe(user => {\n   *   // user: { dpUserId, userName, ... }\n   * });\n   */\n  getDpUserById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт нового пользователя.\n   *\n   * @param {IDpUser} dpUser Объект пользователя.\n   * @returns {Observable} Созданный пользователь.\n   * @example\n   * // POST /api/DpUsers\n   * // Body:\n   * // {\n   * //   \"dpUserId\": 0,\n   * //   \"userName\": \"Иван\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUsersService.createDpUser({\n   *   dpUserId: 0,\n   *   userName: 'Иван'\n   * }).subscribe(newUser => {\n   *   // newUser: { ... }\n   * });\n   */\n  createDpUser(dpUser: IDpUser): Observable {\n    return this.http.post(this.baseUrl, dpUser);\n  }\n\n  /**\n   * Обновляет существующего пользователя.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @param {IDpUser} dpUser Обновлённый объект пользователя.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpUsers/1\n   * // Body:\n   * // {\n   * //   \"dpUserId\": 1,\n   * //   \"userName\": \"Пётр\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUsersService.updateDpUser(1, {\n   *   dpUserId: 1,\n   *   userName: 'Пётр'\n   * }).subscribe(() => {\n   *   // Пользователь обновлён\n   * });\n   */\n  updateDpUser(id: number, dpUser: IDpUser): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpUser);\n  }\n\n  /**\n   * Удаляет пользователя по идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpUsers/1\n   * this.dpUsersService.deleteDpUser(1).subscribe(() => {\n   *   // Пользователь удалён\n   * });\n   */\n  deleteDpUser(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FilterByInputComponent.html":{"url":"components/FilterByInputComponent.html","title":"component - FilterByInputComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FilterByInputComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/filter-by-input/filter-by-input.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                ControlValueAccessor\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FilterByInputComponent), multi: true\n}\n                \n            \n\n\n            \n                selector\n                app-filter-by-input\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            ReactiveFormsModule\n                            TuiDataListWrapper\n                            TuiInputModule\n                \n            \n\n            \n                styleUrls\n                ./filter-by-input.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./filter-by-input.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                form\n                            \n                            \n                                    Private\n                                innerValue\n                            \n                            \n                                onChange\n                            \n                            \n                                onTouched\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onKeyPress\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                    Optional\n                                setDisabledState\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                items\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                searchQuery\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    filteredItems\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:41\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        items\n                    \n                \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:28\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        label\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Search'\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:27\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        searchQuery\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:29\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onKeyPress\n                        \n                    \n                \n            \n            \n                \nonKeyPress(event: KeyboardEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        KeyboardEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnChange\n                        \n                    \n                \n            \n            \n                \nregisterOnChange(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnTouched\n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        setDisabledState\n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                isDisabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeValue\n                        \n                    \n                \n            \n            \n                \nwriteValue(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    search: new FormControl('', [Validators.pattern('^[a-zA-Zа-яА-Я0-9]*$')]),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        innerValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onChange\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTouched\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:81\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        filteredItems\n                    \n                \n\n                \n                    \n                        getfilteredItems()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/components/filter-by-input/filter-by-input.component.ts:37\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\nimport { ControlValueAccessor, FormControl, FormGroup, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiDataListWrapper } from '@taiga-ui/kit';\nimport {TuiInputModule} from '@taiga-ui/legacy';\n\n@Component({\n  selector: 'app-filter-by-input',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    TuiDataListWrapper,\n    TuiInputModule\n  ],\n  templateUrl: './filter-by-input.component.html',\n  styleUrls: ['./filter-by-input.component.css',\n    '../../../styles/root.css',],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FilterByInputComponent),\n      multi: true\n    }\n  ]\n})\nexport class FilterByInputComponent implements ControlValueAccessor {\n  @Input() label: string = 'Search';\n  @Input() items: string[] = [];\n  @Output() searchQuery = new EventEmitter();\n\n  form = new FormGroup({\n    search: new FormControl('', [Validators.pattern('^[a-zA-Zа-яА-Я0-9]*$')]),\n  });\n\n  private innerValue: string = '';\n\n  get filteredItems() {\n    const value = this.form.get('search')?.value ?? '';\n    this.searchQuery.emit(value);\n    return this.items.filter(item => item.includes(value));\n  }\n\n  constructor() {\n    this.form.controls['search'].valueChanges.subscribe(value => {\n      const safeValue = value ?? '';\n      this.searchQuery.emit(safeValue);\n      this.onChange(safeValue);\n    });\n  }\n\n  onKeyPress(event: KeyboardEvent): void {\n    const inputChar = event.key;\n    const allowedChars = /^[a-zA-Zа-яА-Я0-9]$/;\n    if (!allowedChars.test(inputChar) && !event.ctrlKey && !event.metaKey) {\n      event.preventDefault();\n    }\n  }\n\n  writeValue(value: string): void {\n    this.innerValue = value;\n    this.form.controls['search'].setValue(value, { emitEvent: false });\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    if (isDisabled) {\n      this.form.disable();\n    } else {\n      this.form.enable();\n    }\n  }\n\n  onChange = (value: string) => {};\n  onTouched = () => {};\n}\n\n    \n\n    \n        \n  \n    {{ label }}\n    \n  \n\n\n    \n\n    \n                \n                    ./filter-by-input.component.css\n                \n                \n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ label }}      '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'FilterByInputComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAchievement.html":{"url":"interfaces/IAchievement.html","title":"interface - IAchievement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAchievement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IAchievement.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            achievementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpUserProjs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            textAchievement\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievementId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjs:     IDpUserProj[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpUserProj[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textAchievement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        textAchievement:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpUserProj } from \"./IDpUserProj\";\n\n// Achievement.ts\nexport interface IAchievement {\n    achievementId: number;\n    title: string;\n    textAchievement?: string;\n    dpUserProjs?: IDpUserProj[];\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAddToCartRequest.html":{"url":"interfaces/IAddToCartRequest.html","title":"interface - IAddToCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAddToCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IAddToCartRequest.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IAddToCartRequest {\n    productId: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICartItem.html":{"url":"interfaces/ICartItem.html","title":"interface - ICartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICartItem.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            price\n                                        \n                                \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            productTitle\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICartItem {\n    productId: number;\n    productTitle: string;\n    price: number;\n    quantity: number;\n    sizeId?: number; // Add sizeId property\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICartViewModel.html":{"url":"interfaces/ICartViewModel.html","title":"interface - ICartViewModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICartViewModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICartViewModel.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cartItems\n                                        \n                                \n                                \n                                        \n                                            products\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cartItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartItems:     ICartItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ICartItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        products\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        products:         IDpProduct[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProduct } from \"./IDpProduct\";\nimport { ICartItem } from \"./ICartItem\";\n\n// CartViewModel.ts\n\nexport interface ICartViewModel {\n    cartItems: ICartItem[];\n    products: IDpProduct[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICreateDpImageRequest.html":{"url":"interfaces/ICreateDpImageRequest.html","title":"interface - ICreateDpImageRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateDpImageRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICreateDpImageRequest.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                        \n                                            file\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     File\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     File\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICreateDpImageRequest {\n    dpProductId: number;\n    dpImageTitle: string;\n    file: File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpCategory.html":{"url":"interfaces/IDpCategory.html","title":"interface - IDpCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpCategory.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpCategoryId\n                                        \n                                \n                                \n                                        \n                                            dpCategoryTitle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProducts\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProducts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProducts:         IDpProduct[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         IDpSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpSize\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpSize } from \"./IDpSize\";\nimport { IDpProduct } from \"./IDpProduct\";\n\n// DpCategory.ts\n\nexport interface IDpCategory {\n    dpCategoryId: number;\n    dpCategoryTitle: string;\n    sizeId: number;\n    size: IDpSize;\n    dpProducts?: IDpProduct[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpImage.html":{"url":"interfaces/IDpImage.html","title":"interface - IDpImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpImage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImagesId\n                                        \n                                \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProduct\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImagesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImagesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProduct\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProduct:         IDpProduct\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProduct } from \"./IDpProduct\";\n\n// DpImage.ts\n\nexport interface IDpImage {\n    dpImagesId: number;\n    dpProductId: number;\n    dpImageTitle: string;\n    imagesData?: Uint8Array;\n    dpProduct: IDpProduct;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrder.html":{"url":"interfaces/IDpOrder.html","title":"interface - IDpOrder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrder.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpDateTimeOrder\n                                        \n                                \n                                \n                                        \n                                            dpOrderId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpTypeOrder\n                                        \n                                \n                                \n                                        \n                                            dpUser\n                                        \n                                \n                                \n                                        \n                                            dpUserId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpDateTimeOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDateTimeOrder:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpTypeOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpTypeOrder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUser:         IDpUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpUser } from \"./IDpUser\";\n\n// DpOrder.ts\n\nexport interface IDpOrder {\n    dpOrderId: number;\n    dpUserId: number;\n    dpDateTimeOrder: Date;\n    dpTypeOrder?: string;\n    dpUser: IDpUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrderComposition.html":{"url":"interfaces/IDpOrderComposition.html","title":"interface - IDpOrderComposition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrderComposition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrderComposition.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpAttributes\n                                        \n                                \n                                \n                                        \n                                            dpAttributesId\n                                        \n                                \n                                \n                                        \n                                            dpCost\n                                        \n                                \n                                \n                                        \n                                            dpOrder\n                                        \n                                \n                                \n                                        \n                                            dpOrderId\n                                        \n                                \n                                \n                                        \n                                            dpQuantity\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributes:         IDpProductAttribute\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProductAttribute\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrder:         IDpOrder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpOrder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpQuantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpQuantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProductAttribute } from \"./IDpProductAttribute\";\nimport { IDpOrder } from \"./IDpOrder\";\n\n// DpOrderComposition.ts\n\nexport interface IDpOrderComposition {\n    dpOrderId: number;\n    dpAttributesId: number;\n    dpQuantity: number;\n    dpCost: number;\n    dpAttributes: IDpProductAttribute;\n    dpOrder: IDpOrder;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrderDetail.html":{"url":"interfaces/IDpOrderDetail.html","title":"interface - IDpOrderDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrderDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrderDetail.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            productTitle\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                                \n                                        \n                                            sizeName\n                                        \n                                \n                                \n                                        \n                                            totalPrice\n                                        \n                                \n                                \n                                        \n                                            unitPrice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unitPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDpOrderDetail {\n    productTitle?: string;\n    quantity: number;\n    sizeId?: number;\n    sizeName: string;\n    unitPrice: number;\n    totalPrice: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpProduct.html":{"url":"interfaces/IDpProduct.html","title":"interface - IDpProduct","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpProduct\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpProduct.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpCategory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpCategoryId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpDescription\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpDiscountPercent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpImages\n                                        \n                                \n                                \n                                        \n                                            dpPrice\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProductAttributes\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                        \n                                            dpPurchasePrice\n                                        \n                                \n                                \n                                        \n                                            dpTitle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategory:         IDpCategory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpCategory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpDescription\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDescription:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpDiscountPercent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDiscountPercent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpImages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImages:         IDpImage[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpImage[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductAttributes:     IDpProductAttribute[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpProductAttribute[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPurchasePrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPurchasePrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProductAttribute } from \"./IDpProductAttribute\";\nimport { IDpCategory } from \"./IDpCategory\";\nimport { IDpImage } from \"./IDpImage\";\n\n// DpProduct.ts\n\nexport interface IDpProduct {\n    dpProductId: number;\n    dpPrice: number;\n    dpTitle: string;\n    dpDiscountPercent?: number;\n    dpDescription?: string;\n    dpCategoryId?: number;\n    dpPurchasePrice: number;\n    dpCategory?: IDpCategory;\n    dpImages?: IDpImage[];\n    dpProductAttributes?: IDpProductAttribute[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpProductAttribute.html":{"url":"interfaces/IDpProductAttribute.html","title":"interface - IDpProductAttribute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpProductAttribute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpProductAttribute.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpAttributesId\n                                        \n                                \n                                \n                                        \n                                            dpCount\n                                        \n                                \n                                \n                                        \n                                            dpProduct\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpSizeNavigation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProduct\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProduct:         IDpProduct\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpSizeNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpSizeNavigation:         IDpSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpSize } from \"./IDpSize\";\nimport { IDpProduct } from \"./IDpProduct\";\n\n// DpProductAttribute.ts\n\nexport interface IDpProductAttribute {\n    dpAttributesId: number;\n    dpProductId: number;\n    dpCount: number;\n    dpSize?: number;\n    dpProduct: IDpProduct;\n    dpSizeNavigation?: IDpSize;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpSize.html":{"url":"interfaces/IDpSize.html","title":"interface - IDpSize","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpSize\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpSize.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpCategories\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProductAttributes\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategories:         IDpCategory[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpCategory[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductAttributes:     IDpProductAttribute[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpProductAttribute[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpCategory } from \"./IDpCategory\";\nimport { IDpProductAttribute } from \"./IDpProductAttribute\";\n\n// DpSize.ts\n\nexport interface IDpSize {\n    sizeId: number;\n    size: string;\n    dpProductAttributes?: IDpProductAttribute[];\n    dpCategories?: IDpCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpUser.html":{"url":"interfaces/IDpUser.html","title":"interface - IDpUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpUser.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpEmail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpFullName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpOrders\n                                        \n                                \n                                \n                                        \n                                            dpPassword\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpPhoneNumber\n                                        \n                                \n                                \n                                        \n                                            dpRegistrationDate\n                                        \n                                \n                                \n                                        \n                                            dpUserId\n                                        \n                                \n                                \n                                        \n                                            dpUsername\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpEmail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpFullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpFullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrders:         IDpOrder[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpOrder[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPassword\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPassword:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPhoneNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPhoneNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpRegistrationDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpRegistrationDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUsername\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUsername:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpOrder } from \"./IDpOrder\";\n\n// DpUser.ts\n\nexport interface IDpUser {\n    dpUserId: number;\n    dpUsername: string;\n    dpPassword: string;\n    dpEmail?: string;\n    dpFullName?: string;\n    dpRegistrationDate: Date;\n    dpPhoneNumber?: string;\n    dpOrders?: IDpOrder[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpUserProj.html":{"url":"interfaces/IDpUserProj.html","title":"interface - IDpUserProj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpUserProj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpUserProj.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            achievements\n                                        \n                                \n                                \n                                        \n                                            dpUserProjId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievements:         IAchievement[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAchievement[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IAchievement } from \"./IAchievement\";\n\nexport interface IDpUserProj {\n    dpUserProjId: number;\n    email?: string;\n    password: string;\n    login: string;\n    achievements?: IAchievement[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRemoveFromCartRequest.html":{"url":"interfaces/IRemoveFromCartRequest.html","title":"interface - IRemoveFromCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRemoveFromCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IRemoveFromCartRequest.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IRemoveFromCartRequest {\n    productId: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUpdateCartRequest.html":{"url":"interfaces/IUpdateCartRequest.html","title":"interface - IUpdateCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUpdateCartRequest.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUpdateCartRequest {\n    productId: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUpdateDpImageRequest.html":{"url":"interfaces/IUpdateDpImageRequest.html","title":"interface - IUpdateDpImageRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateDpImageRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUpdateDpImageRequest.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            file\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     File\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     File\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUpdateDpImageRequest {\n    dpProductId: number;\n    dpImageTitle: string;\n    file?: File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserHasAchievement.html":{"url":"interfaces/IUserHasAchievement.html","title":"interface - IUserHasAchievement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserHasAchievement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUserHasAchievement.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            achievement\n                                        \n                                \n                                \n                                        \n                                            achievementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpUserProj\n                                        \n                                \n                                \n                                        \n                                            dpUserProjId\n                                        \n                                \n                                \n                                        \n                                            isObtained\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievement:         IAchievement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAchievement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        achievementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievementId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProj\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProj:         IDpUserProj\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpUserProj\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isObtained\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isObtained:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IAchievement } from './IAchievement';\nimport { IDpUserProj } from \"./IDpUserProj\";\n\n\nexport interface IUserHasAchievement {\n  dpUserProjId: number; // Внешний ключ на IDpUserProj\n  achievementId: number; // Внешний ключ на IAchievement\n  isObtained: boolean; // Флаг, указывающий, получено ли достижение\n  dpUserProj?: IDpUserProj; // Навигационное свойство к IDpUserProj\n  achievement?: IAchievement; // Навигационное свойство к IAchievement\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/IconTrashComponent.html":{"url":"components/IconTrashComponent.html","title":"component - IconTrashComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  IconTrashComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/icon-trash/icon-trash.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-icon-trash\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            TuiIcon\n                            TuiIconPipe\n                \n            \n\n            \n                styleUrls\n                ./icon-trash.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./icon-trash.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                showNotification\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                item\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                responseAlert\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(alerts: TuiAlertService, router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/icon-trash/icon-trash.component.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        alerts\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        item\n                    \n                \n                \n                    \n                        Type :         ICartItem\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/icon-trash/icon-trash.component.ts:19\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        responseAlert\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/data/components/icon-trash/icon-trash.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        showNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    showNotification()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/icon-trash/icon-trash.component.ts:28\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output, } from '@angular/core';\nimport { TuiAlertService, TuiIcon, TuiIconPipe } from '@taiga-ui/core';\nimport { switchMap, takeUntil } from 'rxjs';\nimport { Router,  } from '@angular/router';\nimport { PolymorpheusComponent } from '@taiga-ui/polymorpheus';\nimport { AlertDeleteComponent } from '../alert-delete/alert-delete.component';\nimport { CommonModule } from '@angular/common';\nimport { ICartItem } from '../../../interface/ICartItem';\n\n@Component({\n  selector: 'app-icon-trash',\n  imports: [ CommonModule,\n    TuiIcon, TuiIconPipe,],\n  templateUrl: './icon-trash.component.html',\n  styleUrls: ['./icon-trash.component.css', \n    '../../../styles/root.css',],\n})\nexport class IconTrashComponent {\n  @Input() item!: ICartItem;\n  \n\n  @Output() responseAlert = new EventEmitter();\n  constructor(\n    private alerts: TuiAlertService,\n    private router: Router,\n  ) { }\n\n  protected showNotification(): void {\n    const notification = this.alerts\n      .open(new PolymorpheusComponent(AlertDeleteComponent), {\n        label: 'Вы уверены, что хотите удалить?',\n        appearance: 'negative',\n        autoClose: 0,\n      })\n      .pipe(\n        switchMap((response) => {\n          if (response) {\n            this.responseAlert.emit(true);\n            console.log(`Удаление товара: ${this.item.productId}`);\n            return this.alerts.open(`Товар \"${this.item.productId}\" удален.`, { label: 'Успех' });\n          } else {\n            return this.alerts.open(`Удаление товара \"${this.item.productId}\" отменено.`, { label: 'Информация' });\n          }\n        }),\n        takeUntil(this.router.events),\n      );\n    notification.subscribe();\n  }\n}\n\n    \n\n    \n        \n\n    \n\n    \n                \n                    ./icon-trash.component.css\n                \n                \n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'IconTrashComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoadingComponent.html":{"url":"components/LoadingComponent.html","title":"component - LoadingComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoadingComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/loading/loading.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-loading\n            \n\n\n\n\n\n\n            \n                templateUrl\n                ./loading.component.html\n            \n\n\n\n            \n                styleUrl\n                ./loading.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                path\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"loading.gif\"\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/loading/loading.component.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-loading',\n  imports: [],\n  templateUrl: './loading.component.html',\n  styleUrl: './loading.component.css'\n})\nexport class LoadingComponent {\n  path: string = \"loading.gif\";\n}\n\n    \n\n    \n        \n    \n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoadingComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginComponent.html":{"url":"components/LoginComponent.html","title":"component - LoginComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/login/login.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            TuiAppearance\n                            TuiButton\n                            TuiCardLarge\n                            TuiError\n                            TuiFieldErrorPipe\n                            TuiForm\n                            TuiHeader\n                            TuiNotification\n                            TuiTextfield\n                            TuiTitle\n                \n            \n\n            \n                styleUrls\n                ./login.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./login.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                form\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToRegister\n                            \n                            \n                                onLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepositoryService, userAchievementsRepository: UserAchievementsRepositoryService, userAchievementsService: UserAchievementsService, router: Router, authService: AuthService, alertService: TuiAlertService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/login/login.component.ts:41\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                    AuthRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsRepository\n                                                  \n                                                        \n                                                                    UserAchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsService\n                                                  \n                                                        \n                                                                        UserAchievementsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToRegister\n                        \n                    \n                \n            \n            \n                \nnavigateToRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/login/login.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLogin\n                        \n                    \n                \n            \n            \n                \nonLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/login/login.component.ts:53\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/login/login.component.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject } from '@angular/core';\nimport { AuthRepositoryService } from '../../../repositories/auth-repository.service';\nimport { IDpUser } from '../../../interface/IDpUser';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\nimport { AuthService } from '../../../services/auth.service';\nimport { TuiAlertService } from '@taiga-ui/core';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-login',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TuiAppearance,\n    TuiButton,\n    TuiCardLarge,\n    TuiError,\n    TuiFieldErrorPipe,\n    TuiForm,\n    TuiHeader,\n    TuiNotification,\n    TuiTextfield,\n    TuiTitle,\n  ],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class LoginComponent {\n  protected readonly form = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n  });\n\n  constructor(\n    private authRepository: AuthRepositoryService,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService),\n    private router: Router,\n    private authService: AuthService,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService,\n    private configService: ConfigService\n  ) { }\n\n  onLogin() {\n    if (this.form.valid) {\n      const user: IDpUser = {\n        dpUserId: 0,\n        dpUsername: this.form.value.username || '',\n        dpPassword: this.form.value.password || '',\n        dpRegistrationDate: new Date(),\n        dpPhoneNumber: '0000000000'\n      };\n      // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n      if (this.userAchievementsService.getAlwaysFailMode()) {\n        const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.loginFailed, 'тест-кейс неудачного входа разблокировано!')\n          .subscribe();\n        this.alertService.open('Тест-кейс: ошибка входа (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n        return;\n      }\n      \n      this.authRepository.login(user).subscribe({\n        next: (response) => {\n          if (response && response.token) {\n            this.alertService.open('Успешный вход!', { appearance: 'success' }).subscribe();\n            localStorage.setItem('token', response.token);\n\n            const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n            this.userAchievementsRepository\n              .handleAchievement(userProjId, this.configService.achievementIds.loginSuccess, 'тест-кейс входа разблокировано!')\n              .subscribe({\n                complete: () => this.router.navigate(['/'])\n              });\n          }\n        },\n        error: (error) => {\n          const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.loginFailed, 'тест-кейс неудачного входа разблокировано!')\n            .subscribe();\n\n          let errorMessage = 'Ошибка входа: неверное имя пользователя или пароль';\n          if (error.status === this.configService.httpStatusCodes.unauthorized) {\n            errorMessage = 'Ошибка: неверные учетные данные';\n          } else if (error.status === this.configService.httpStatusCodes.serverError) {\n            errorMessage = 'Ошибка сервера, попробуйте позже';\n          }\n\n          this.alertService.open(errorMessage, { appearance: 'error' }).subscribe();\n        }\n      });\n    }\n  }\n\n  navigateToRegister() {\n    this.router.navigate(['/register']);\n  }\n}\n    \n\n    \n        \n    \n        \n            Форма авторизации\n        \n\n        \n            Логин пользователя\n            \n        \n        \n        \n            Пароль\n            \n        \n        \n        \n            \n                Регистрация\n            \n            Войти\n        \n    \n\n    \n\n    \n                \n                    ./login.component.css\n                \n                .form-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: var(--tui-base-01);\n  padding: 1rem;\n  box-sizing: border-box;\n}\n\nform[tuiCardLarge] {\n  width: 100%;\n  max-width: 32rem;\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\n  border-radius: 0.5rem;\n}\n\n@media (max-width: 47.9375rem) {\n  .form-container {\n    padding: 0.5rem;\n  }\n\n  form[tuiCardLarge] {\n    max-width: 90%;\n  }\n}\n\nbody.dark-theme .form-container {\n  background: var(--tui-base-02-dark);\n}\n\nbody.dark-theme form[tuiCardLarge] {\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Форма авторизации                            Логин пользователя                                                Пароль                                                                Регистрация                        Войти            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginProjComponent.html":{"url":"components/LoginProjComponent.html","title":"component - LoginProjComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginProjComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/login-proj/login-proj.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login-proj\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            TuiAppearance\n                            TuiButton\n                            TuiCardLarge\n                            TuiError\n                            TuiFieldErrorPipe\n                            TuiForm\n                            TuiHeader\n                            TuiNotification\n                            TuiTextfield\n                            TuiTitle\n                \n            \n\n            \n                styleUrls\n                ./login-proj.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./login-proj.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                form\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToRegister\n                            \n                            \n                                onLogin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authProjRepository: AuthProjRepositoryService, router: Router, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/login-proj/login-proj.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authProjRepository\n                                                  \n                                                        \n                                                                    AuthProjRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToRegister\n                        \n                    \n                \n            \n            \n                \nnavigateToRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/login-proj/login-proj.component.ts:69\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onLogin\n                        \n                    \n                \n            \n            \n                \nonLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/login-proj/login-proj.component.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    login: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required]),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/login-proj/login-proj.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, Inject } from '@angular/core';\nimport { AuthProjService } from '../../../services/auth-proj.service';\nimport { IDpUserProj } from '../../../interface/IDpUserProj';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\nimport { TuiAlertService } from '@taiga-ui/core';\nimport { AuthProjRepositoryService } from '../../../repositories/auth-proj-repository.service';\n\n@Component({\n  selector: 'app-login-proj',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TuiAppearance,\n    TuiButton,\n    TuiCardLarge,\n    TuiError,\n    TuiFieldErrorPipe,\n    TuiForm,\n    TuiHeader,\n    TuiNotification,\n    TuiTextfield,\n    TuiTitle,\n  ],\n  templateUrl: './login-proj.component.html',\n  styleUrls: ['./login-proj.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class LoginProjComponent {\n  protected readonly form = new FormGroup({\n    login: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required]),\n  });\n\n  constructor(\n    private authProjRepository: AuthProjRepositoryService,\n    private router: Router,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) { }\n\n  onLogin() {\n    if (this.form.valid) {\n      const userProj: IDpUserProj = {\n        dpUserProjId: 0,\n        login: this.form.value.login || '',\n        password: this.form.value.password || '',\n      };\n\n      this.authProjRepository.login(userProj).subscribe({\n        next: (response) => {\n          console.log('Login successful:', response);\n          if (response && response.token) {\n            this.alertService.open('Успешный вход!', { appearance: 'success' }).subscribe();\n            this.router.navigate(['/']);\n          }\n        },\n        error: (error) => {\n          console.error('Login failed:', error);\n          this.alertService.open('Ошибка входа: неверный логин или пароль', { appearance: 'error' }).subscribe();\n        }\n      });\n    }\n  }\n\n  navigateToRegister() {\n    this.router.navigate(['/register-proj']);\n  }\n}\n    \n\n    \n        \n    \n        \n            Форма авторизации для пользователя с тестами\n        \n\n        \n            Логин\n            \n        \n        \n        \n            Пароль\n            \n        \n        \n        \n            \n                Регистрация\n            \n            Войти\n        \n    \n\n    \n\n    \n                \n                    ./login-proj.component.css\n                \n                .form-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: var(--tui-base-01);\n  padding: 1rem;\n  box-sizing: border-box;\n}\n\nform[tuiCardLarge] {\n  width: 100%;\n  max-width: 32rem;\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\n  border-radius: 0.5rem;\n}\n\n@media (max-width: 47.9375rem) {\n  .form-container {\n    padding: 0.5rem;\n  }\n\n  form[tuiCardLarge] {\n    max-width: 90%;\n  }\n}\n\nbody.dark-theme .form-container {\n  background: var(--tui-base-02-dark);\n}\n\nbody.dark-theme form[tuiCardLarge] {\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Форма авторизации для пользователя с тестами                            Логин                                                Пароль                                                                Регистрация                        Войти            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'LoginProjComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/NavbarComponent.html":{"url":"components/NavbarComponent.html","title":"component - NavbarComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  NavbarComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/navbar/navbar.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-navbar\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                            TuiLink\n                            TuiIcon\n                            TuiButton\n                                ThemeToggleComponent\n                                BackButtonComponent\n                            TuiAvatar\n                            AsyncPipe\n                            TuiIconPipe\n                            NgIf\n                \n            \n\n            \n                styleUrls\n                ./navbar.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./navbar.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alwaysFailMode\n                            \n                            \n                                isAuthenticated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAuthStatus\n                            \n                            \n                                logout\n                            \n                            \n                                navigateTo\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleAlwaysFail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, authService: AuthService, userAchievementsService: UserAchievementsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/navbar/navbar.component.ts:33\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsService\n                                                  \n                                                        \n                                                                        UserAchievementsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAuthStatus\n                        \n                    \n                \n            \n            \n                \ncheckAuthStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/navbar/navbar.component.ts:62\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/navbar/navbar.component.ts:57\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigateTo\n                        \n                    \n                \n            \n            \n                \nnavigateTo(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/navbar/navbar.component.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/navbar/navbar.component.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleAlwaysFail\n                        \n                    \n                \n            \n            \n                \ntoggleAlwaysFail()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/navbar/navbar.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alwaysFailMode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/navbar/navbar.component.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/navbar/navbar.component.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, inject } from '@angular/core';\nimport { AsyncPipe, CommonModule, NgIf } from '@angular/common';\nimport { BackButtonComponent } from '../back-button/back-button.component';\nimport { ThemeToggleComponent } from '../theme-toggle/theme-toggle.component';\nimport { TuiLink, TuiIcon, TuiButton, TuiIconPipe } from '@taiga-ui/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../services/auth.service';\nimport { TuiAvatar } from '@taiga-ui/kit';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-navbar',\n  imports: [\n    CommonModule,\n    FormsModule,\n    TuiLink,\n    TuiIcon,\n    TuiButton,\n    ThemeToggleComponent,\n    BackButtonComponent,\n    TuiAvatar,\n    AsyncPipe,\n    TuiIconPipe,\n    NgIf\n  ],\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class NavbarComponent {\n  isAuthenticated: boolean = false;\n  alwaysFailMode = false;\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService)\n  ) {}\n\n  ngOnInit(): void {\n    this.authService.isAuthenticated$.subscribe(isAuthenticated => {\n      this.isAuthenticated = isAuthenticated;\n    });\n    this.checkAuthStatus();\n    this.alwaysFailMode = this.userAchievementsService.getAlwaysFailMode();\n  }\n\n    toggleAlwaysFail() {\n    this.userAchievementsService.setAlwaysFailMode(this.alwaysFailMode);\n  }\n\n  navigateTo(path: string): void {\n    this.router.navigate([path]);\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    this.authService.setAuthenticated(false);\n    this.router.navigate(['/']);\n  }\n  checkAuthStatus(): void {\n    const token = localStorage.getItem('token');\n    this.isAuthenticated = !!token;\n    this.authService.setAuthenticated(this.isAuthenticated);\n  }\n}\n    \n\n    \n        \n  \n    О приложении\n    Каталог\n    Перейти в корзину\n  \n  \n\n  \n  Всегда имитировать ошибку тест-кейсов\n\n    \n    Войти\n    Выйти\n  \n\n    \n\n    \n                \n                    ./navbar.component.css\n                \n                .user-avatar tui-svg,\n.user-avatar svg {\n    color: var(--avatar-color, #212529);\n    fill: var(--avatar-color, #212529);\n}\n[data-theme=\"dark\"] .user-avatar tui-svg,\n[data-theme=\"dark\"] .user-avatar svg {\n    color: #fff;\n    fill: #fff;\n}\nlabel.always-fail-label {\n    color: #fff;\n}\n\n[data-theme=\"dark\"] label.always-fail-label {\n    color: #fff;\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      О приложении    Каталог    Перейти в корзину        Всегда имитировать ошибку тест-кейсов        Войти    Выйти  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'NavbarComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageCartComponent.html":{"url":"components/PageCartComponent.html","title":"component - PageCartComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PageCartComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/page-cart/page-cart.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-page-cart\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            AsyncPipe\n                            CurrencyPipe\n                            FormsModule\n                            NgForOf\n                            NgIf\n                            TuiButton\n                            TuiTable\n                            CommonModule\n                            TuiScrollbar\n                            TuiIcon\n                \n            \n\n            \n                styleUrls\n                ./page-cart.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./page-cart.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                cartItems\n                            \n                            \n                                    Protected\n                                    Readonly\n                                columns\n                            \n                            \n                                    Protected\n                                isLoading\n                            \n                            \n                                    Protected\n                                    Readonly\n                                options\n                            \n                            \n                                    Public\n                                router\n                            \n                            \n                                    Protected\n                                    Readonly\n                                totalSorter\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkout\n                            \n                            \n                                decreaseQuantity\n                            \n                            \n                                    Protected\n                                getTotal\n                            \n                            \n                                    Protected\n                                getTotalAmount\n                            \n                            \n                                increaseQuantity\n                            \n                            \n                                    Private\n                                loadCartItems\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Protected\n                                onSortChange\n                            \n                            \n                                    Protected\n                                onValueChange\n                            \n                            \n                                removeFromCart\n                            \n                            \n                                    Protected\n                                trackByIndex\n                            \n                            \n                                    Private\n                                updateCartItemQuantity\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(cartService: ShopCartRepositoryService, cdr: ChangeDetectorRef, router: Router, userAchievementsRepository: UserAchievementsRepositoryService, configService: ConfigService, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:48\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                    ShopCartRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsRepository\n                                                  \n                                                        \n                                                                    UserAchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkout\n                        \n                    \n                \n            \n            \n                \ncheckout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:142\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decreaseQuantity\n                        \n                    \n                \n            \n            \n                \ndecreaseQuantity(item: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getTotal\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTotal(undefined: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getTotalAmount\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTotalAmount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        increaseQuantity\n                        \n                    \n                \n            \n            \n                \nincreaseQuantity(item: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadCartItems\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadCartItems()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onSortChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    onSortChange(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:260\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        onValueChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    onValueChange(value: CartItem, key: K, current: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:250\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    K\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                key\n                                            \n                                                        K\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \nremoveFromCart(item: CartItem)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:107\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        trackByIndex\n                        \n                    \n                \n            \n            \n                \n                        \n                    trackByIndex(index: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateCartItemQuantity\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateCartItemQuantity(item: CartItem, newQuantity: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-cart/page-cart.component.ts:186\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                item\n                                            \n                                                            CartItem\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newQuantity\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        cartItems\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CartItem[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        columns\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Default value : { updateOn: 'blur' } as const\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Router\n\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        totalSorter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TuiComparator\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-cart/page-cart.component.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { AsyncPipe, CommonModule, CurrencyPipe, NgForOf, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TuiButton, TuiAppearance, TuiAlertService, TuiScrollbar, TuiIcon } from '@taiga-ui/core';\nimport { TuiTable, TuiComparator } from '@taiga-ui/addon-table';\nimport { TuiDay, tuiDefaultSort } from '@taiga-ui/cdk';\nimport { ICartItem } from '../../../interface/ICartItem';\nimport { ICartViewModel } from '../../../interface/ICartViewModel';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IUpdateCartRequest } from '../../../interface/IUpdateCartRequest';\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\ninterface CartItem extends ICartItem {\n  readonly date: TuiDay;\n}\n\n@Component({\n  selector: 'app-page-cart',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    CurrencyPipe,\n    FormsModule,\n    NgForOf,\n    NgIf,\n    TuiButton,\n    TuiTable,\n    CommonModule,\n    TuiScrollbar,\n    TuiIcon\n  ],\n  templateUrl: './page-cart.component.html',\n  styleUrls: ['./page-cart.component.css', '../../../styles/root.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PageCartComponent implements OnInit {\n  protected readonly options = { updateOn: 'blur' } as const;\n  protected cartItems: CartItem[] = [];\n  protected readonly columns = ['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const;\n  protected isLoading = false;\n  private readonly userAchievementsService = inject(UserAchievementsService);\n  protected readonly totalSorter: TuiComparator = (a, b) =>\n    tuiDefaultSort(a.price * a.quantity, b.price * b.quantity);\n\n  constructor(\n    private cartService: ShopCartRepositoryService,\n    private cdr: ChangeDetectorRef,\n    public router: Router,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private configService: ConfigService,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadCartItems();\n  }\n\n  private loadCartItems(): void {\n    this.cartService.getCart().subscribe({\n      next: (cartViewModel: ICartViewModel) => {\n        console.log(cartViewModel);\n        this.cartItems = cartViewModel.cartItems.map(item => ({\n          ...item,\n          date: TuiDay.currentLocal(),\n        }));\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        console.error('Ошибка при загрузке корзины:', error);\n        this.alertService.open('Не удалось загрузить корзину. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected trackByIndex(index: number): number {\n    return index;\n  }\n\n  protected getTotal({ price, quantity }: CartItem): number {\n    return price * quantity;\n  }\n\n  protected getTotalAmount(): number {\n    return this.cartItems.reduce((sum, item) => sum + this.getTotal(item), 0);\n  }\n\n  increaseQuantity(item: CartItem): void {\n    const newQuantity = item.quantity + 1;\n    this.updateCartItemQuantity(item, newQuantity);\n  }\n\n  decreaseQuantity(item: CartItem): void {\n    if (item.quantity > 1) {\n      const newQuantity = item.quantity - 1;\n      this.updateCartItemQuantity(item, newQuantity);\n    }\n  }\n\n  removeFromCart(item: CartItem): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Тест-кейс: ошибка удаления товара из корзины!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось удалить товар (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.removeFromCart({ productId: item.productId, sizeId: item.sizeId }).subscribe({\n      next: () => {\n        this.cartItems = this.cartItems.filter(cartItem =>\n          !(cartItem.productId === item.productId && cartItem.sizeId === item.sizeId)\n        );\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartSuccess, 'Товар успешно удалён из корзины!')\n          .subscribe();\n        this.alertService.open('Товар удалён из корзины', { appearance: 'success' }).subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при удалении товара из корзины:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Ошибка удаления товара из корзины!')\n          .subscribe();\n        this.alertService.open('Не удалось удалить товар. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  checkout(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n\n    if (this.cartItems.length === 0) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutEmptyCart, 'Тест-кейс: Попытка оформления пустой корзины!')\n        .subscribe();\n      this.alertService.open('Корзина пуста, добавьте товары перед оформлением', { appearance: 'error' }).subscribe();\n      return;\n    }\n\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Тест-кейс: ошибка оформления заказа!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось оформить заказ (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.checkout().subscribe({\n      next: (response) => {\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutSuccess, 'Заказ успешно оформлен!')\n          .subscribe();\n        this.alertService.open('Заказ успешно оформлен!', { appearance: 'success' }).subscribe();\n        this.cartService.clearCart();\n        this.cartItems = [];\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.router.navigate(['/order-confirmation'], { state: { orderId: response.orderId } });\n      },\n      error: (error) => {\n        console.error('Ошибка при оформлении заказа:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Ошибка оформления заказа!')\n          .subscribe();\n        this.alertService.open('Не удалось оформить заказ. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  private updateCartItemQuantity(item: CartItem, newQuantity: number): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    \n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Тест-кейс: ошибка обновления количества товара!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось обновить количество (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    \n    const request: IUpdateCartRequest = {\n      productId: item.productId,\n      quantity: newQuantity,\n      sizeId: item.sizeId\n    };\n\n    this.cartItems = this.cartItems.map(cartItem =>\n      cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n        ? { ...cartItem, quantity: newQuantity }\n        : cartItem\n    );\n    this.cdr.markForCheck();\n\n    this.cartService.updateCart(request).subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantitySuccess, 'Количество товара успешно обновлено!')\n            .subscribe();\n          this.alertService.open('Количество товара успешно обновлено', { appearance: 'success' }).subscribe();\n        } else {\n          this.cartItems = this.cartItems.map(cartItem =>\n            cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n              ? { ...cartItem, quantity: item.quantity }\n              : cartItem\n          );\n          this.cdr.markForCheck();\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n            .subscribe();\n          this.alertService.open('Не удалось обновить количество. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        }\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        this.cartItems = this.cartItems.map(cartItem =>\n          cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n            ? { ...cartItem, quantity: item.quantity }\n            : cartItem\n        );\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n          .subscribe();\n        this.alertService.open('Ошибка при обновлении количества. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected onValueChange(\n    value: CartItem[K],\n    key: K,\n    current: CartItem\n  ): void {\n    const updated = { ...current, [key]: value };\n    this.cartItems = this.cartItems.map((item) => (item === current ? updated : item));\n    this.cdr.markForCheck();\n  }\n\n  protected onSortChange(event: any): void {\n    // Логика сортировки, если нужна\n  }\n}\n\n    \n\n    \n        \n  \n    Корзина\n  \n  \n    Корзина пуста\n    Добавьте товары, чтобы продолжить\n    \n      Оформить заказ\n    \n    \n      Перейти к товарам\n    \n  \n   0\">\n    \n      \n        \n          \n            Название товара\n            Цена\n            Количество\n            Итого\n            Действия\n          \n        \n        \n          \n            {{ item.productTitle }}\n            {{ item.price | currency:'RUB' }}\n            \n              \n                \n                 -\n                \n                \n                \n                  + \n                \n              \n            \n            {{ getTotal(item) | currency:'RUB ' }}\n            \n              \n                Удалить\n              \n            \n          \n        \n        \n          \n            Общая сумма:\n            {{ getTotalAmount() | currency:'RUB ' }}\n            \n              \n                Оформить заказ\n              \n            \n          \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./page-cart.component.css\n                \n                 .container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 1rem;\n}\n\n.header-section {\n  text-align: center;\n  margin-bottom: 2rem;\n}\n\n.empty-cart {\n  text-align: center;\n  padding: 2rem;\n  background-color: var(--tui-base-01);\n  border-radius: 8px;\n  box-shadow: var(--tui-shadow);\n}\n\n.empty-cart h3 {\n  color: var(--tui-text-01);\n  margin-bottom: 1rem;\n}\n\n.quantity-container {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n}\n\n.quantity-input {\n  width: 60px;\n  text-align: center;\n}\n\n.total-label {\n  font-weight: bold;\n  text-align: right;\n}\n\n.number {\n  text-align: right;\n}\n\n\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Корзина        Корзина пуста    Добавьте товары, чтобы продолжить          Оформить заказ              Перейти к товарам         0\">                                        Название товара            Цена            Количество            Итого            Действия                                                {{ item.productTitle }}            {{ item.price | currency:\\'RUB\\' }}                                                           -                                                                  +                                                       {{ getTotal(item) | currency:\\'RUB \\' }}                                          Удалить                                                                          Общая сумма:            {{ getTotalAmount() | currency:\\'RUB \\' }}                                          Оформить заказ                                                        '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PageCartComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageCatalogItemComponent.html":{"url":"components/PageCatalogItemComponent.html","title":"component - PageCatalogItemComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PageCatalogItemComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/page-catalog-item/page-catalog-item.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-page-catalog-item\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                                CardItemComponent\n                            CommonModule\n                            AsyncPipe\n                \n            \n\n            \n                styleUrls\n                ./page-catalog-item.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./page-catalog-item.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isLoading\n                            \n                            \n                                products$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                loadProducts\n                            \n                            \n                                loadProductsOrFail\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                trackByProductId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: ProductsRepositoryService, userAchievementsRepository: UserAchievementsRepositoryService, userAchievementsService: UserAchievementsService, configService: ConfigService, cd: ChangeDetectorRef, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/page-catalog-item/page-catalog-item.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                    ProductsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsRepository\n                                                  \n                                                        \n                                                                    UserAchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsService\n                                                  \n                                                        \n                                                                        UserAchievementsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cd\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadProducts(userProjId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-catalog-item/page-catalog-item.component.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadProductsOrFail\n                        \n                    \n                \n            \n            \n                \nloadProductsOrFail()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-catalog-item/page-catalog-item.component.ts:38\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-catalog-item/page-catalog-item.component.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        trackByProductId\n                        \n                    \n                \n            \n            \n                \ntrackByProductId(index: number, product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-catalog-item/page-catalog-item.component.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                index\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isLoading\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-catalog-item/page-catalog-item.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        products$\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-catalog-item/page-catalog-item.component.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { IDpProduct } from '../../../interface/IDpProduct';\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\nimport { CardItemComponent } from '../../components/card-item/card-item.component';\nimport { CommonModule, AsyncPipe } from '@angular/common';\nimport { ConfigService } from '../../../services/config.service';\nimport { TuiAlertService } from '@taiga-ui/core';\nimport { Inject } from '@angular/core';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\nimport { Observable, of } from 'rxjs';\n\n@Component({\n  selector: 'app-page-catalog-item',\n  standalone: true,\n  imports: [CardItemComponent, CommonModule, AsyncPipe],\n  templateUrl: './page-catalog-item.component.html',\n  styleUrls: ['./page-catalog-item.component.css', '../../../styles/root.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PageCatalogItemComponent implements OnInit {\n  products$!: Observable; // Используем ! для строгой типизации\n  isLoading = false;\n\n  constructor(\n    private productsRepository: ProductsRepositoryService,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private userAchievementsService: UserAchievementsService,\n    private configService: ConfigService,\n    private cd: ChangeDetectorRef,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) {}\n\n  ngOnInit(): void {\n    this.loadProductsOrFail();\n  }\n\n  loadProductsOrFail(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.isLoading = true;\n    this.cd.markForCheck();\n\n    if (this.userAchievementsService.getAlwaysFailMode() && Math.random()  {\n          this.isLoading = false;\n          this.products$ = of([]); // Пустой список при ошибке\n          this.cd.markForCheck();\n        });\n      return;\n    }\n\n    this.loadProducts(userProjId);\n  }\n\n  private loadProducts(userProjId: number): void {\n    this.products$ = this.productsRepository.getAllProducts();\n    this.products$.subscribe({\n      next: (productList: IDpProduct[]) => {\n        const imagesCount = productList.reduce((sum, p) => sum + (p.dpImages?.length || 0), 0);\n        console.log(`[Catalog] Загружено товаров: ${productList.length}`);\n        console.log(`[Catalog] Всего изображений у товаров: ${imagesCount}`);\n        this.isLoading = false;\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.loadProductsSuccess,\n            'тест-кейс: каталог продуктов успешно загружен!'\n          )\n          .subscribe();\n        this.cd.markForCheck();\n      },\n      error: (error) => {\n        console.error('Ошибка при загрузке товаров:', error);\n        this.isLoading = false;\n        this.products$ = of([]);\n        this.userAchievementsRepository\n          .handleAchievement(\n            userProjId,\n            this.configService.achievementIds.loadProductsFailed,\n            'тест-кейс: ошибка загрузки каталога продуктов!'\n          )\n          .subscribe();\n        this.alertService.open('Не удалось загрузить каталог продуктов', { appearance: 'error' }).subscribe();\n        this.cd.markForCheck();\n      }\n    });\n  }\n\n  trackByProductId(index: number, product: IDpProduct): number {\n    return product.dpProductId;\n  }\n}\n    \n\n    \n        \n  \n    \n      \n      \n      Загрузка каталога...\n    \n    \n      Товары не найдены.\n    \n    \n      \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./page-catalog-item.component.css\n                \n                \n.loading-animation {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    min-height: 300px;\n    font-size: 1.2rem;\n    color: #888;\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Загрузка каталога...              Товары не найдены.                                  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PageCatalogItemComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/PageItemFromCatalogComponent.html":{"url":"components/PageItemFromCatalogComponent.html","title":"component - PageItemFromCatalogComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  PageItemFromCatalogComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-page-item-from-catalog\n            \n\n\n            \n                imports\n                \n                                CarouselImgComponent\n                            CommonModule\n                            TuiAppearance\n                            TuiButton\n                            FormsModule\n                \n            \n\n            \n                styleUrls\n                ./page-item-from-catalog.component.css\n            \n\n\n\n            \n                templateUrl\n                ./page-item-from-catalog.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                productInfo\n                            \n                            \n                                quantity\n                            \n                            \n                                selectedSizeId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToCart\n                            \n                            \n                                    Private\n                                loadProductInfo\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onImageClick\n                            \n                            \n                                openImageInFullscreen\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    images\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(route: ActivatedRoute, productsRepositoryService: ProductsRepositoryService, sanitizer: DomSanitizer, cartService: ShopCartRepositoryService, userAchievementsRepository: UserAchievementsRepositoryService, userAchievementsService: UserAchievementsService, configService: ConfigService, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        route\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        productsRepositoryService\n                                                  \n                                                        \n                                                                    ProductsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sanitizer\n                                                  \n                                                        \n                                                                    DomSanitizer\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cartService\n                                                  \n                                                        \n                                                                    ShopCartRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsRepository\n                                                  \n                                                        \n                                                                    UserAchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsService\n                                                  \n                                                        \n                                                                        UserAchievementsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToCart\n                        \n                    \n                \n            \n            \n                \naddToCart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadProductInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadProductInfo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:43\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onImageClick\n                        \n                    \n                \n            \n            \n                \nonImageClick(imageUrl: SafeUrl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:142\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                imageUrl\n                                            \n                                                        SafeUrl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openImageInFullscreen\n                        \n                    \n                \n            \n            \n                \nopenImageInFullscreen(imageUrl: SafeUrl)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:113\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                imageUrl\n                                            \n                                                        SafeUrl\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        productInfo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IDpProduct\n\n                    \n                \n                \n                    \n                        Default value : {} as IDpProduct\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedSizeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:27\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        images\n                    \n                \n\n                \n                    \n                        getimages()\n                    \n                \n                            \n                                \n                                    Defined in src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts:39\n                                \n                            \n\n            \n        \n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, Inject, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IDpProduct } from '../../../interface/IDpProduct';\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\nimport { CarouselImgComponent } from '../../components/carousel-img/carousel-img.component';\nimport { CommonModule } from '@angular/common';\nimport { TuiAlertService, TuiAppearance, TuiButton } from '@taiga-ui/core';\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\nimport { SecurityContext } from '@angular/core';\nimport { IDpImage } from '../../../interface/IDpImage';\nimport { FormsModule } from '@angular/forms';\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-page-item-from-catalog',\n  imports: [CarouselImgComponent, CommonModule, TuiAppearance, TuiButton, FormsModule,],\n  templateUrl: './page-item-from-catalog.component.html',\n  styleUrls: ['./page-item-from-catalog.component.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PageItemFromCatalogComponent implements OnInit {\n  productInfo: IDpProduct = {} as IDpProduct;\n  quantity: number = 1;\n  selectedSizeId: number | undefined;\n\n  constructor(\n    private route: ActivatedRoute,\n    private productsRepositoryService: ProductsRepositoryService,\n    private sanitizer: DomSanitizer,\n    private cartService: ShopCartRepositoryService,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private userAchievementsService: UserAchievementsService,\n    private configService: ConfigService,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) { }\n  get images(): IDpImage[] {\n    return this.productInfo?.dpImages || [];\n  }\n\n  ngOnInit(): void {\n    this.loadProductInfo();\n  }\n\n  private loadProductInfo(): void {\n    const dpProductId = this.route.snapshot.paramMap.get('dpProductId');\n    if (dpProductId) {\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n      this.productsRepositoryService.getProductById(+dpProductId).subscribe({\n        next: (product: IDpProduct) => {\n          this.productInfo = product;\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.viewProductSuccess, 'тест-кейс: просмотр продукта разблокировано!')\n            .subscribe();\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.loadProductInfoSuccess, 'тест-кейс: загрузка информации о продукте разблокирована!')\n            .subscribe();\n        },\n        error: (error) => {\n          console.error('Ошибка при загрузке информации о продукте:', error);\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.viewProductFailed, 'тест-кейс: ошибка просмотра продукта разблокирована!')\n            .subscribe();\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.loadProductInfoFailed, 'тест-кейс: ошибка загрузки информации о продукте разблокирована!')\n            .subscribe();\n          this.alertService.open('Не удалось загрузить информацию о продукте', { appearance: 'error' }).subscribe();\n        }\n      });\n    }\n  }\n\n  addToCart(): void {\n    if (this.productInfo) {\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n       // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n      if (this.userAchievementsService.getAlwaysFailMode()) {\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.addToCartFailed, 'Тест-кейс: ошибка добавления товара в корзину!')\n          .subscribe();\n        this.alertService.open('Тест-кейс: ошибка добавления товара в корзину (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n        return;\n      }\n\n\n      const request = {\n        productId: this.productInfo.dpProductId,\n        quantity: this.quantity,\n        sizeId: this.selectedSizeId\n      };\n      this.cartService.addToCart(request).subscribe({\n        next: (response) => {\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.addToCartSuccess, 'тест-кейс: товар успешно добавлен в корзину!')\n            .subscribe();\n          this.alertService.open(response.message || 'Товар добавлен в корзину!', { appearance: 'success' }).subscribe();\n\n        },\n        error: (error) => {\n          this.alertService.open('Ошибка при добавлении товара в корзину', { appearance: 'error' }).subscribe();\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.addToCartFailed, 'тест-кейс: ошибка добавления товара в корзину!')\n            .subscribe();\n        }\n      });\n    } else {\n      this.alertService.open('Ошибка: информация о продукте недоступна', { appearance: 'error' }).subscribe();\n    }\n  }\n\n  openImageInFullscreen(imageUrl: SafeUrl): void {\n    const url = this.sanitizer.sanitize(SecurityContext.URL, imageUrl);\n    if (url) {\n      const fullscreenDiv = document.createElement('div');\n      fullscreenDiv.style.position = 'fixed';\n      fullscreenDiv.style.top = '0';\n      fullscreenDiv.style.left = '0';\n      fullscreenDiv.style.width = '100%';\n      fullscreenDiv.style.height = '100%';\n      fullscreenDiv.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\n      fullscreenDiv.style.display = 'flex';\n      fullscreenDiv.style.justifyContent = 'center';\n      fullscreenDiv.style.alignItems = 'center';\n      fullscreenDiv.style.zIndex = '1000';\n\n      const img = document.createElement('img');\n      img.src = url;\n      img.style.maxWidth = '90%';\n      img.style.maxHeight = '90%';\n\n      fullscreenDiv.appendChild(img);\n      fullscreenDiv.addEventListener('click', () => {\n        document.body.removeChild(fullscreenDiv);\n      });\n\n      document.body.appendChild(fullscreenDiv);\n    }\n  }\n\n  onImageClick(imageUrl: SafeUrl): void {\n    this.openImageInFullscreen(imageUrl);\n  }\n}\n    \n\n    \n        \n  \n    \n      \n    \n    \n      {{ productInfo?.dpTitle }}\n      {{ productInfo?.dpPrice | currency:'RUB ' }}\n      {{ productInfo?.dpDescription }}\n      {{ productInfo?.dpCategory?.dpCategoryTitle }}\n      \n        \n           \n        \n       \n        \n          Добавить в корзину\n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./page-item-from-catalog.component.css\n                \n                @import '../../../styles/variables.css';\n\n/* Карточка товара */\n.product-card {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid var(--border-color);\n  border-radius: var(--button-border-radius);\n  overflow: hidden;\n  margin-bottom: 1.5rem;\n  box-shadow: var(--card-shadow);\n  background: var(--card-background-color);\n  color: var(--tui-text-01);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.product-card:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\n}\n\n.product-row {\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  align-items: stretch;\n}\n\n.product-image-container {\n  flex: 1;\n  position: relative;\n  aspect-ratio: 4 / 3;\n  min-width: 280px;\n  max-width: 400px;\n  overflow: hidden;\n  background: var(--tui-base-02);\n}\n\n.product-image {\n  width: 100%;\n  height: 100%;\n  border-radius: var(--button-border-radius) 0 0 var(--button-border-radius);\n}\n\n.product-image app-carousel-img {\n  width: 100%;\n  height: 100%;\n  display: block;\n}\n\n/* Карусель */\n.carousel {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  overflow: hidden;\n  background: transparent;\n}\n\n.wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  align-items: center;\n  box-sizing: border-box;\n}\n\n.item {\n  width: 100%;\n  height: 100%;\n  aspect-ratio: 4 / 3;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  overflow: hidden;\n  transition: opacity 0.5s ease;\n}\n\n.item img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  transition: transform 0.3s ease;\n}\n\n.item img:hover {\n  transform: translate(-50%, -50%) scale(1.05);\n}\n\n.pagination {\n  margin: 0.75rem auto;\n  display: flex;\n  justify-content: center;\n}\n\n/* Детали товара */\n.product-details-container {\n  flex: 1;\n  padding: 1rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n\n.product-title {\n  font-size: 1.5rem;\n  margin: 0.5rem 0;\n  color: var(--tui-primary);\n  font-weight: 600;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width: 90%;\n}\n\n.product-price {\n  font-size: 1.25rem;\n  color: var(--tui-error-fill);\n  margin: 0.5rem 0;\n  font-weight: 600;\n}\n\n.product-description {\n  font-size: 1rem;\n  color: var(--tui-text-01);\n  margin: 0.5rem 0;\n  line-height: 1.5;\n  max-height: calc(1.5rem * 3);\n  overflow-y: auto;\n}\n\n.product-category {\n  font-size: 0.875rem;\n  color: var(--text-color-secondary);\n  margin: 0.5rem 0;\n}\n\n.product-actions {\n  display: flex;\n  gap: 1rem;\n  align-items: center;\n  flex-wrap: wrap;\n  margin-top: 1rem;\n}\n\n.quantity-input {\n  max-width: 6rem;\n}\n\n.btn-add-to-cart {\n  padding: 0.5rem 1rem;\n}\n\n/* Темная тема */\n[data-theme=\"dark\"] .product-card {\n  background: var(--card-background-color);\n  border-color: var(--border-color);\n  box-shadow: var(--card-shadow);\n}\n\n[data-theme=\"dark\"] .product-card:hover {\n  box-shadow: 0 8px 24px rgba(255, 255, 255, 0.15);\n}\n\n[data-theme=\"dark\"] .product-image-container,\n[data-theme=\"dark\"] .item img {\n  background: var(--tui-base-02);\n}\n\n[data-theme=\"dark\"] .product-title {\n  color: var(--tui-primary);\n}\n\n[data-theme=\"dark\"] .product-price {\n  color: var(--tui-error-fill);\n}\n\n[data-theme=\"dark\"] .product-description,\n[data-theme=\"dark\"] .product-category {\n  color: var(--tui-text-01);\n}\n\n/* Адаптивность */\n@media (max-width: 768px) {\n  .product-row {\n    flex-direction: column;\n  }\n\n  .product-image-container {\n    flex: none;\n    width: 100%;\n    min-width: 100%;\n    max-width: 100%;\n    min-height: 200px;\n  }\n\n  .product-image,\n  .carousel,\n  .item {\n    border-radius: var(--button-border-radius) var(--button-border-radius) 0 0;\n  }\n\n  .product-title {\n    max-width: 100%;\n    font-size: 1.25rem;\n  }\n\n  .product-price {\n    font-size: 1.125rem;\n  }\n\n  .product-description,\n  .product-category {\n    font-size: 0.875rem;\n  }\n\n  .product-actions {\n    flex-direction: column;\n    align-items: stretch;\n    gap: 0.5rem;\n  }\n\n  .quantity-input,\n  .btn-add-to-cart {\n    width: 100%;\n  }\n}\n\n@media (max-width: 480px) {\n  .product-details-container {\n    padding: 0.75rem;\n  }\n\n  .product-title {\n    font-size: 1.125rem;\n  }\n\n  .product-price {\n    font-size: 1rem;\n  }\n}\n\n/* Анимации */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.5s ease-out;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                          {{ productInfo?.dpTitle }}      {{ productInfo?.dpPrice | currency:\\'RUB \\' }}      {{ productInfo?.dpDescription }}      {{ productInfo?.dpCategory?.dpCategoryTitle }}                                                          Добавить в корзину                    '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'PageItemFromCatalogComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-products.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с товарами (Products).\nПозволяет получать, создавать, обновлять, удалять товары, а также добавлять товары в корзину через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToCart\n                            \n                            \n                                createProduct\n                            \n                            \n                                deleteProduct\n                            \n                            \n                                getAllProducts\n                            \n                            \n                                getProductById\n                            \n                            \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-products.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToCart\n                        \n                    \n                \n            \n            \n                \naddToCart(request: IAddToCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Добавляет товар в корзину.\nExample :// POST /api/Products/AddToCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 2,\n//   \"sizeId\": 3\n// }\nthis.productsService.addToCart({\n  productId: 1,\n  quantity: 2,\n  sizeId: 3\n}).subscribe(res => {\n  // res: { success: true, message: \"Product added to cart.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IAddToCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для добавления в корзину.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат операции.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createProduct\n                        \n                    \n                \n            \n            \n                \ncreateProduct(product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Создаёт новый товар.\nExample :// POST /api/Products\n// Body:\n// {\n//   \"dpProductId\": 0,\n//   \"dpProductTitle\": \"Кроссовки\",\n//   \"dpCategoryId\": 2,\n//   \"dpProductDescription\": \"Описание товара\",\n//   ...другие поля...\n// }\nthis.productsService.createProduct({\n  dpProductId: 0,\n  dpProductTitle: 'Кроссовки',\n  dpCategoryId: 2,\n  dpProductDescription: 'Описание товара'\n}).subscribe(newProduct => {\n  // newProduct: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный товар.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \ndeleteProduct(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Удаляет товар по идентификатору.\nExample :// DELETE /api/Products/1\nthis.productsService.deleteProduct(1).subscribe(() => {\n  // Товар удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Получает список всех товаров.\nExample :// GET /api/Products\nthis.productsService.getAllProducts().subscribe(products => {\n  // products: [{ dpProductId, dpProductTitle, ... }]\n  console.log(products);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список товаров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProductById\n                        \n                    \n                \n            \n            \n                \ngetProductById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Получает товар по его идентификатору.\nExample :// GET /api/Products/1\nthis.productsService.getProductById(1).subscribe(product => {\n  // product: { dpProductId, dpProductTitle, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Товар.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \nupdateProduct(id: number, product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий товар.\nExample :// PUT /api/Products/1\n// Body:\n// {\n//   \"dpProductId\": 1,\n//   \"dpProductTitle\": \"Обновлённый товар\",\n//   \"dpCategoryId\": 2,\n//   ...другие поля...\n// }\nthis.productsService.updateProduct(1, {\n  dpProductId: 1,\n  dpProductTitle: 'Обновлённый товар',\n  dpCategoryId: 2\n}).subscribe(() => {\n  // Товар обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Products`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-products.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpProduct } from '../interface/IDpProduct';\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\n\n/**\n * Сервис для работы с товарами (Products).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять, удалять товары, а также добавлять товары в корзину через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  private baseUrl = `${window.location.origin}/api/Products`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех товаров.\n   *\n   * @returns {Observable} Список товаров.\n   * @example\n   * // GET /api/Products\n   * this.productsService.getAllProducts().subscribe(products => {\n   *   // products: [{ dpProductId, dpProductTitle, ... }]\n   *   console.log(products);\n   * });\n   */\n  getAllProducts(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает товар по его идентификатору.\n   *\n   * @param {number} id Идентификатор товара.\n   * @returns {Observable} Товар.\n   * @example\n   * // GET /api/Products/1\n   * this.productsService.getProductById(1).subscribe(product => {\n   *   // product: { dpProductId, dpProductTitle, ... }\n   * });\n   */\n  getProductById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый товар.\n   *\n   * @param {IDpProduct} product Объект товара.\n   * @returns {Observable} Созданный товар.\n   * @example\n   * // POST /api/Products\n   * // Body:\n   * // {\n   * //   \"dpProductId\": 0,\n   * //   \"dpProductTitle\": \"Кроссовки\",\n   * //   \"dpCategoryId\": 2,\n   * //   \"dpProductDescription\": \"Описание товара\",\n   * //   ...другие поля...\n   * // }\n   * this.productsService.createProduct({\n   *   dpProductId: 0,\n   *   dpProductTitle: 'Кроссовки',\n   *   dpCategoryId: 2,\n   *   dpProductDescription: 'Описание товара'\n   * }).subscribe(newProduct => {\n   *   // newProduct: { ... }\n   * });\n   */\n  createProduct(product: IDpProduct): Observable {\n    return this.http.post(this.baseUrl, product);\n  }\n\n  /**\n   * Обновляет существующий товар.\n   *\n   * @param {number} id Идентификатор товара.\n   * @param {IDpProduct} product Обновлённый объект товара.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/Products/1\n   * // Body:\n   * // {\n   * //   \"dpProductId\": 1,\n   * //   \"dpProductTitle\": \"Обновлённый товар\",\n   * //   \"dpCategoryId\": 2,\n   * //   ...другие поля...\n   * // }\n   * this.productsService.updateProduct(1, {\n   *   dpProductId: 1,\n   *   dpProductTitle: 'Обновлённый товар',\n   *   dpCategoryId: 2\n   * }).subscribe(() => {\n   *   // Товар обновлён\n   * });\n   */\n  updateProduct(id: number, product: IDpProduct): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, product);\n  }\n\n  /**\n   * Удаляет товар по идентификатору.\n   *\n   * @param {number} id Идентификатор товара.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/Products/1\n   * this.productsService.deleteProduct(1).subscribe(() => {\n   *   // Товар удалён\n   * });\n   */\n  deleteProduct(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Добавляет товар в корзину.\n   *\n   * @param {IAddToCartRequest} request Данные для добавления в корзину.\n   * @returns {Observable} Результат операции.\n   * @example\n   * // POST /api/Products/AddToCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 2,\n   * //   \"sizeId\": 3\n   * // }\n   * this.productsService.addToCart({\n   *   productId: 1,\n   *   quantity: 2,\n   *   sizeId: 3\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Product added to cart.\" }\n   * });\n   */\n  addToCart(request: IAddToCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/AddToCart`, request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterComponent.html":{"url":"components/RegisterComponent.html","title":"component - RegisterComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/register/register.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            TuiAppearance\n                            TuiButton\n                            TuiCardLarge\n                            TuiError\n                            TuiFieldErrorPipe\n                            TuiForm\n                            TuiHeader\n                            TuiNotification\n                            TuiTextfield\n                            TuiTitle\n                \n            \n\n            \n                styleUrls\n                ./register.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./register.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                form\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToLogin\n                            \n                            \n                                onRegister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authRepository: AuthRepositoryService, userAchievementsRepository: UserAchievementsRepositoryService, userAchievementsService: UserAchievementsService, router: Router, alertService: TuiAlertService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/register/register.component.ts:40\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authRepository\n                                                  \n                                                        \n                                                                    AuthRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsRepository\n                                                  \n                                                        \n                                                                    UserAchievementsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsService\n                                                  \n                                                        \n                                                                        UserAchievementsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToLogin\n                        \n                    \n                \n            \n            \n                \nnavigateToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/register/register.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onRegister\n                        \n                    \n                \n            \n            \n                \nonRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/register/register.component.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/register/register.component.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject } from '@angular/core';\nimport { AuthRepositoryService } from '../../../repositories/auth-repository.service';\nimport { IDpUser } from '../../../interface/IDpUser';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\nimport { TuiAlertService } from '@taiga-ui/core';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-register',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TuiAppearance,\n    TuiButton,\n    TuiCardLarge,\n    TuiError,\n    TuiFieldErrorPipe,\n    TuiForm,\n    TuiHeader,\n    TuiNotification,\n    TuiTextfield,\n    TuiTitle,\n  ],\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class RegisterComponent {\n  protected readonly form = new FormGroup({\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\n  });\n\n  constructor(\n    private authRepository: AuthRepositoryService,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService),\n    private router: Router,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService,\n    private configService: ConfigService\n  ) {}\n\n  onRegister() {\n    if (this.form.valid) {\n      const user: IDpUser = {\n        dpUserId: 0,\n        dpUsername: this.form.value.username || '',\n        dpPassword: this.form.value.password || '',\n        dpRegistrationDate: new Date(),\n        dpPhoneNumber: '0000000000'\n      };\n      // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\n      if (this.userAchievementsService.getAlwaysFailMode()) {\n        const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.registerFailed, 'тест-кейс неудачной регистрации разблокировано!')\n          .subscribe();\n        this.alertService.open('Тест-кейс: ошибка регистрации (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n        return;\n      }\n      // Галочка выключена — обычная логика\n      // Выполняем регистрацию пользователя\n      this.authRepository.register(user).subscribe({\n        next: (response: { token: string; userProjId?: number }) => {\n          if (response.token) {\n            this.alertService.open('Регистрация успешна! Войдите в аккаунт.', { appearance: 'success' }).subscribe();\n            const userProjId = response.userProjId || parseInt(localStorage.getItem('userProjId') || '0', 10);\n\n            this.userAchievementsRepository\n              .handleAchievement(userProjId, this.configService.achievementIds.registerSuccess, 'тест-кейс регистрации разблокировано!')\n              .subscribe({\n                complete: () => setTimeout(() => this.router.navigate(['/login']), 2000)\n              });\n          } else {\n            this.alertService.open('Ошибка регистрации: некорректный ответ сервера', { appearance: 'error' }).subscribe();\n          }\n        },\n        error: (error) => {\n          const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.registerFailed, 'тест-кейс неудачной регистрации разблокировано!')\n            .subscribe();\n\n          let errorMessage = 'Ошибка регистрации: попробуйте другое имя пользователя';\n          if (error.status === this.configService.httpStatusCodes.conflict) {\n            errorMessage = 'Ошибка: имя пользователя уже занято';\n          } else if (error.status === this.configService.httpStatusCodes.badRequest) {\n            errorMessage = 'Ошибка: неверный формат данных';\n          }\n\n          this.alertService.open(errorMessage, { appearance: 'error' }).subscribe();\n        }\n      });\n    }\n  }\n\n  navigateToLogin() {\n    this.router.navigate(['/login']);\n  }\n}\n    \n\n    \n        \n    \n        \n            Форма регистрации\n        \n\n        \n            Логин\n            \n        \n        \n        \n            Пароль\n            \n        \n        \n        \n            \n                Отмена\n            \n            Зарегистрироваться\n        \n    \n\n    \n\n    \n                \n                    ./register.component.css\n                \n                .form-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: var(--tui-base-01);\n  padding: 1rem;\n  box-sizing: border-box;\n}\n\nform[tuiCardLarge] {\n  width: 100%;\n  max-width: 32rem;\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\n  border-radius: 0.5rem;\n}\n\n@media (max-width: 47.9375rem) {\n  .form-container {\n    padding: 0.5rem;\n  }\n\n  form[tuiCardLarge] {\n    max-width: 90%;\n  }\n}\n\nbody.dark-theme .form-container {\n  background: var(--tui-base-02-dark);\n}\n\nbody.dark-theme form[tuiCardLarge] {\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                        Форма регистрации                            Логин                                                Пароль                                                                Отмена                        Зарегистрироваться            '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterProjComponent.html":{"url":"components/RegisterProjComponent.html","title":"component - RegisterProjComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterProjComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/register-proj/register-proj.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register-proj\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            ReactiveFormsModule\n                            TuiAppearance\n                            TuiButton\n                            TuiCardLarge\n                            TuiError\n                            TuiFieldErrorPipe\n                            TuiForm\n                            TuiHeader\n                            TuiNotification\n                            TuiTextfield\n                            TuiTitle\n                \n            \n\n            \n                styleUrls\n                ./register-proj.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./register-proj.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Protected\n                                    Readonly\n                                form\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateToLogin\n                            \n                            \n                                onRegister\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authProjRepository: AuthProjRepositoryService, router: Router, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/register-proj/register-proj.component.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authProjRepository\n                                                  \n                                                        \n                                                                    AuthProjRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToLogin\n                        \n                    \n                \n            \n            \n                \nnavigateToLogin()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/register-proj/register-proj.component.ts:70\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onRegister\n                        \n                    \n                \n            \n            \n                \nonRegister()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/register-proj/register-proj.component.ts:45\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                            Readonly\n                        form\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    login: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required])\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/register-proj/register-proj.component.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, Inject } from '@angular/core';\nimport { AuthProjService } from '../../../services/auth-proj.service';\nimport { IDpUserProj } from '../../../interface/IDpUserProj';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\nimport { TuiAlertService } from '@taiga-ui/core';\nimport { AuthProjRepositoryService } from '../../../repositories/auth-proj-repository.service';\n\n@Component({\n  selector: 'app-register-proj',\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TuiAppearance,\n    TuiButton,\n    TuiCardLarge,\n    TuiError,\n    TuiFieldErrorPipe,\n    TuiForm,\n    TuiHeader,\n    TuiNotification,\n    TuiTextfield,\n    TuiTitle,\n  ],\n  templateUrl: './register-proj.component.html',\n  styleUrls: ['./register-proj.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class RegisterProjComponent {\n  protected readonly form = new FormGroup({\n    login: new FormControl('', [Validators.required]),\n    password: new FormControl('', [Validators.required])\n  });\n\n  constructor(\n    private authProjRepository: AuthProjRepositoryService,\n    private router: Router,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) {}\n\n  onRegister() {\n    if (this.form.valid) {\n      const userProj: IDpUserProj = {\n        dpUserProjId: 0,\n        login: this.form.value.login || '',\n        password: this.form.value.password || ''\n      };\n\n      this.authProjRepository.register(userProj).subscribe({\n        next: (response) => {\n          console.log('Registration successful:', response);\n          if (response && response.token) {\n            this.alertService.open('Регистрация успешна! Войдите в аккаунт.', { appearance: 'success' }).subscribe();\n            this.router.navigate(['/login-proj']);\n          }\n        },\n        error: (error) => {\n          console.error('Registration failed:', error);\n          const errorMessage = error.error?.message || 'Ошибка регистрации: попробуйте другое имя пользователя';\n          this.alertService.open(errorMessage, { appearance: 'error' }).subscribe();\n        }\n      });\n    }\n  }\n\n  navigateToLogin() {\n    this.router.navigate(['/login-proj']);\n  }\n}\n    \n\n    \n        \n    \n        \n            \n                Форма регистрации для пользователя с тестами\n            \n        \n\n        \n            Логин\n            \n        \n        \n        \n            Пароль\n            \n        \n        \n        \n            \n                Отмена\n            \n            \n                Зарегистрироваться\n            \n        \n    \n\n    \n\n    \n                \n                    ./register-proj.component.css\n                \n                .form-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n  background: var(--tui-base-01);\n  padding: 1rem;\n  box-sizing: border-box;\n}\n\nform[tuiCardLarge] {\n  width: 100%;\n  max-width: 32rem;\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\n  border-radius: 0.5rem;\n}\n\n@media (max-width: 47.9375rem) {\n  .form-container {\n    padding: 0.5rem;\n  }\n\n  form[tuiCardLarge] {\n    max-width: 90%;\n  }\n}\n\nbody.dark-theme .form-container {\n  background: var(--tui-base-02-dark);\n}\n\nbody.dark-theme form[tuiCardLarge] {\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                                        Форма регистрации для пользователя с тестами                                        Логин                                                Пароль                                                                Отмена                                        Зарегистрироваться                        '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'RegisterProjComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShopCartService.html":{"url":"injectables/ShopCartService.html","title":"injectable - ShopCartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShopCartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-shop-cart.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с корзиной покупок (Shop Cart).\nПозволяет получать содержимое корзины, добавлять и удалять товары, обновлять корзину, оформлять заказ и экспортировать заказ в Excel.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToCart\n                            \n                            \n                                checkout\n                            \n                            \n                                exportToExcel\n                            \n                            \n                                getCart\n                            \n                            \n                                getCartQuantity\n                            \n                            \n                                removeFromCart\n                            \n                            \n                                updateCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-shop-cart.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToCart\n                        \n                    \n                \n            \n            \n                \naddToCart(request: IAddToCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Добавляет товар в корзину.\nExample :// POST /api/ShopCart/AddToCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 2,\n//   \"sizeId\": 2\n// }\nthis.shopCartService.addToCart({\n  productId: 1,\n  quantity: 2,\n  sizeId: 2\n}).subscribe(res => {\n  // res: { success: true, message: \"Product added to cart.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IAddToCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для добавления товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат добавления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkout\n                        \n                    \n                \n            \n            \n                \ncheckout(cart: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Оформляет заказ по содержимому корзины.\nExample :// POST /api/ShopCart/Checkout\n// Body:\n// [\n//   { \"productId\": 1, \"quantity\": 2, \"sizeId\": 2 },\n//   { \"productId\": 3, \"quantity\": 1, \"sizeId\": 1 }\n// ]\nthis.shopCartService.checkout([\n  { productId: 1, quantity: 2, sizeId: 2 },\n  { productId: 3, quantity: 1, sizeId: 1 }\n]).subscribe(order => {\n  // order: { orderId: number, orderDetails: [...] }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cart\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Массив товаров для оформления заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Информация о заказе.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exportToExcel\n                        \n                    \n                \n            \n            \n                \nexportToExcel(orderId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Экспортирует заказ в Excel.\nExample :this.shopCartService.exportToExcel(123).subscribe(blob => {\n  const url = URL.createObjectURL(blob);\n  window.open(url);\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Файл Excel.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCart\n                        \n                    \n                \n            \n            \n                \ngetCart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Получает текущее содержимое корзины.\nExample :// GET /api/ShopCart\nthis.shopCartService.getCart().subscribe(cart => {\n  // cart: { cartItems: [...], products: [...] }\n  console.log(cart);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Модель корзины.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCartQuantity\n                        \n                    \n                \n            \n            \n                \ngetCartQuantity(productId: number, sizeId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Получает текущее количество товара определённого размера в корзине.\nExample :// GET /api/ShopCart/quantity?productId=1&sizeId=2\nthis.shopCartService.getCartQuantity(1, 2).subscribe(q => {\n  // q: { currentQuantity: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                        \n                                                sizeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Текущее количество.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \nremoveFromCart(request: IRemoveFromCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Удаляет товар из корзины.\nExample :this.shopCartService.removeFromCart({ productId: 1, sizeId: 2 }).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IRemoveFromCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для удаления товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateCart\n                        \n                    \n                \n            \n            \n                \nupdateCart(request: IUpdateCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Обновляет содержимое корзины.\nExample :// POST /api/ShopCart/UpdateCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 3,\n//   \"sizeId\": 2\n// }\nthis.shopCartService.updateCart({\n  productId: 1,\n  quantity: 3,\n  sizeId: 2\n}).subscribe(res => {\n  // res: { success: true, message: \"Cart updated!\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IUpdateCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для обновления корзины.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/ShopCart`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-shop-cart.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ICartViewModel } from '../interface/ICartViewModel';\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\nimport { IUpdateCartRequest } from '../interface/IUpdateCartRequest';\nimport { IDpOrderDetail } from '../interface/IDpOrderDetail';\nimport { IRemoveFromCartRequest } from '../interface/IRemoveFromCartRequest';\n\n/**\n * Сервис для работы с корзиной покупок (Shop Cart).\n *\n * @remarks\n * Позволяет получать содержимое корзины, добавлять и удалять товары, обновлять корзину, оформлять заказ и экспортировать заказ в Excel.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopCartService {\n  private baseUrl = `${window.location.origin}/api/ShopCart`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает текущее содержимое корзины.\n   *\n   * @returns {Observable} Модель корзины.\n   * @example\n   * // GET /api/ShopCart\n   * this.shopCartService.getCart().subscribe(cart => {\n   *   // cart: { cartItems: [...], products: [...] }\n   *   console.log(cart);\n   * });\n   */\n  getCart(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Обновляет содержимое корзины.\n   *\n   * @param {IUpdateCartRequest} request Данные для обновления корзины.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // POST /api/ShopCart/UpdateCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 3,\n   * //   \"sizeId\": 2\n   * // }\n   * this.shopCartService.updateCart({\n   *   productId: 1,\n   *   quantity: 3,\n   *   sizeId: 2\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Cart updated!\" }\n   * });\n   */\n  updateCart(request: IUpdateCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/UpdateCart`, request);\n  }\n\n  /**\n   * Добавляет товар в корзину.\n   *\n   * @param {IAddToCartRequest} request Данные для добавления товара.\n   * @returns {Observable} Результат добавления.\n   * @example\n   * // POST /api/ShopCart/AddToCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 2,\n   * //   \"sizeId\": 2\n   * // }\n   * this.shopCartService.addToCart({\n   *   productId: 1,\n   *   quantity: 2,\n   *   sizeId: 2\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Product added to cart.\" }\n   * });\n   */\n  addToCart(request: IAddToCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/AddToCart`, request);\n  }\n\n  /**\n   * Получает текущее количество товара определённого размера в корзине.\n   *\n   * @param {number} productId Идентификатор товара.\n   * @param {number} sizeId Идентификатор размера.\n   * @returns {Observable} Текущее количество.\n   * @example\n   * // GET /api/ShopCart/quantity?productId=1&sizeId=2\n   * this.shopCartService.getCartQuantity(1, 2).subscribe(q => {\n   *   // q: { currentQuantity: number }\n   * });\n   */\n  getCartQuantity(productId: number, sizeId: number): Observable {\n    return this.http.get(`${this.baseUrl}/quantity?productId=${productId}&sizeId=${sizeId}`);\n  }\n\n  /**\n   * Оформляет заказ по содержимому корзины.\n   *\n   * @param {any[]} cart Массив товаров для оформления заказа.\n   * @returns {Observable} Информация о заказе.\n   * @example\n   * // POST /api/ShopCart/Checkout\n   * // Body:\n   * // [\n   * //   { \"productId\": 1, \"quantity\": 2, \"sizeId\": 2 },\n   * //   { \"productId\": 3, \"quantity\": 1, \"sizeId\": 1 }\n   * // ]\n   * this.shopCartService.checkout([\n   *   { productId: 1, quantity: 2, sizeId: 2 },\n   *   { productId: 3, quantity: 1, sizeId: 1 }\n   * ]).subscribe(order => {\n   *   // order: { orderId: number, orderDetails: [...] }\n   * });\n   */\n  checkout(cart: any[]): Observable {\n    return this.http.post(`${this.baseUrl}/Checkout`, cart);\n  }\n\n  /**\n   * Удаляет товар из корзины.\n   *\n   * @param {IRemoveFromCartRequest} request Данные для удаления товара.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * this.shopCartService.removeFromCart({ productId: 1, sizeId: 2 }).subscribe(() => ...);\n   */\n  removeFromCart(request: IRemoveFromCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/RemoveFromCart`, request);\n  }\n\n  /**\n   * Экспортирует заказ в Excel.\n   *\n   * @param {number} orderId Идентификатор заказа.\n   * @returns {Observable} Файл Excel.\n   * @example\n   * this.shopCartService.exportToExcel(123).subscribe(blob => {\n   *   const url = URL.createObjectURL(blob);\n   *   window.open(url);\n   * });\n   */\n  exportToExcel(orderId: number): Observable {\n    return this.http.post(`${this.baseUrl}/export?orderId=${orderId}`, {}, { responseType: 'blob' });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ThemeToggleComponent.html":{"url":"components/ThemeToggleComponent.html","title":"component - ThemeToggleComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ThemeToggleComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/components/theme-toggle/theme-toggle.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-theme-toggle\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            CommonModule\n                            TuiSwitch\n                            FormsModule\n                \n            \n\n            \n                styleUrls\n                ./theme-toggle.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./theme-toggle.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                alertService\n                            \n                            \n                                    Private\n                                    Readonly\n                                configService\n                            \n                            \n                                    Private\n                                    Readonly\n                                darkMode\n                            \n                            \n                                    Private\n                                    Readonly\n                                key\n                            \n                            \n                                    Private\n                                    Readonly\n                                media\n                            \n                            \n                                    Private\n                                    Readonly\n                                storage\n                            \n                            \n                                toggle\n                            \n                            \n                                    Private\n                                toggleCount\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsRepository\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                recordAchievement\n                            \n                            \n                                reset\n                            \n                            \n                                toggleTheme\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:30\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        recordAchievement\n                        \n                    \n                \n            \n            \n                \n                        \n                    recordAchievement(userProjId: number, achievementId: number, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reset\n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:80\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleTheme\n                        \n                    \n                \n            \n            \n                \ntoggleTheme()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:42\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        alertService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiAlertService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ConfigService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        darkMode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TUI_DARK_MODE)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TUI_DARK_MODE_KEY)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        media\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(WA_WINDOW).matchMedia('(prefers-color-scheme: dark)')\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        storage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(WA_LOCAL_STORAGE)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.darkMode()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        toggleCount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/components/theme-toggle/theme-toggle.component.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, inject } from '@angular/core';\nimport { TUI_DARK_MODE_KEY, TUI_DARK_MODE, TuiAlertService } from '@taiga-ui/core';\nimport { WA_LOCAL_STORAGE, WA_WINDOW } from '@ng-web-apis/common';\nimport { TuiSwitch } from '@taiga-ui/kit';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-theme-toggle',\n  standalone: true,\n  imports: [CommonModule, TuiSwitch, FormsModule],\n  templateUrl: './theme-toggle.component.html',\n  styleUrls: ['./theme-toggle.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class ThemeToggleComponent {\n  private readonly key = inject(TUI_DARK_MODE_KEY);\n  private readonly storage = inject(WA_LOCAL_STORAGE);\n  private readonly media = inject(WA_WINDOW).matchMedia('(prefers-color-scheme: dark)');\n  private readonly darkMode = inject(TUI_DARK_MODE);\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\n  private readonly userAchievementsService = inject(UserAchievementsService);\n  private readonly alertService = inject(TuiAlertService);\n  private readonly configService = inject(ConfigService);\n\n  toggle = this.darkMode();\n  private toggleCount = 0;\n\n  constructor() {\n    // Инициализация темы из локального хранилища, если она есть\n    const savedTheme = this.storage.getItem(this.key);\n    if (savedTheme) {\n      this.toggle = savedTheme === 'true';\n      this.darkMode.set(this.toggle);\n      document.body.classList.toggle('dark-theme', this.toggle);\n    }\n  }\n\n  toggleTheme(): void {\n    this.toggle = !this.toggle;\n    this.darkMode.set(this.toggle);\n    document.body.classList.add('dark-theme');\n    document.body.classList.toggle('dark-theme', this.toggle);\n    this.storage.setItem(this.key, this.toggle.toString());\n\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.toggleCount++;\n\n    // Если включён режим \"всегда ошибка\" — всегда негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      const achievementId = this.toggle\n        ? this.configService.achievementIds.switchToDarkThemeFailed\n        : this.configService.achievementIds.switchToLightThemeFailed;\n      this.recordAchievement(userProjId, achievementId, `Тест-кейс: ошибка включения ${this.toggle ? 'тёмной' : 'светлой'} темы!`);\n      this.alertService.open(`Тест-кейс: ошибка переключения темы на ${this.toggle ? 'тёмную' : 'светлую'}!`, { appearance: 'error' }).subscribe();\n      return;\n    }\n    \n    // Логика достижений: чередуем успех и ошибку\n    if (this.toggleCount % 2 === 0) {\n      // Успешное переключение темы\n      const achievementId = this.toggle\n        ? this.configService.achievementIds.switchToDarkThemeSuccess\n        : this.configService.achievementIds.switchToLightThemeSuccess;\n      this.recordAchievement(userProjId, achievementId, `Успешно включена ${this.toggle ? 'тёмная' : 'светлая'} тема!`);\n      this.alertService.open(`Тема переключена на ${this.toggle ? 'тёмную' : 'светлую'}!`, { appearance: 'success' }).subscribe();\n    } else {\n      // Ошибка переключения темы\n      const achievementId = this.toggle\n        ? this.configService.achievementIds.switchToDarkThemeFailed\n        : this.configService.achievementIds.switchToLightThemeFailed;\n      this.recordAchievement(userProjId, achievementId, `Ошибка включения ${this.toggle ? 'тёмной' : 'светлой'} темы!`);\n      this.alertService.open(`Ошибка переключения темы на ${this.toggle ? 'тёмную' : 'светлую'}!`, { appearance: 'error' }).subscribe();\n    }\n  }\n\n  reset(): void {\n    const systemTheme = this.media.matches;\n    this.toggle = systemTheme;\n    this.darkMode.set(systemTheme);\n    this.storage.removeItem(this.key);\n    this.toggleCount = 0;\n\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.recordAchievement(\n      userProjId,\n      this.configService.achievementIds.resetThemeSuccess,\n      'Тема сброшена к системной!'\n    );\n    this.alertService.open('Тема сброшена к системной!', { appearance: 'success' }).subscribe();\n  }\n\n  private recordAchievement(userProjId: number, achievementId: number, message: string): void {\n    if (userProjId  {\n        console.error('Ошибка при записи достижения:', err);\n      }\n    });\n  }\n}\n\n    \n\n    \n        \n    \n  \n  \n    \n\n    \n                \n                    ./theme-toggle.component.css\n                \n                \n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'ThemeToggleComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserAchievementsService.html":{"url":"injectables/UserAchievementsService.html","title":"injectable - UserAchievementsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserAchievementsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/user-achievements.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с тест-кейсами пользователя.\nПозволяет получать, создавать, разблокировать тест-кейсы, а также имитировать ошибки тест-кейсов для тестирования UI и логики.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALWAYS_FAIL_KEY\n                            \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkUserAchievementExists\n                            \n                            \n                                createUserAchievement\n                            \n                            \n                                getAllUserAchievements\n                            \n                            \n                                getAlwaysFailMode\n                            \n                            \n                                getCompletedAchievementsByUsername\n                            \n                            \n                                    Private\n                                getFailedAchievementId\n                            \n                            \n                                getUserAchievement\n                            \n                            \n                                handleAchievement\n                            \n                            \n                                setAlwaysFailMode\n                            \n                            \n                                    Private\n                                simulateServerFailure\n                            \n                            \n                                unlockUserAchievement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, configService: ConfigService, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/user-achievements.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkUserAchievementExists\n                        \n                    \n                \n            \n            \n                \ncheckUserAchievementExists(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Проверка существования тест-кейса у пользователя.\nExample :// GET /api/UserAchievements/Exists/1/14\nthis.userAchievementsService.checkUserAchievementExists(1, 14).subscribe(exists => {\n  // exists: true/false\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                true, если тест-кейс уже есть.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUserAchievement\n                        \n                    \n                \n            \n            \n                \ncreateUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Создание тест-кейса для пользователя.\nExample :// POST /api/UserAchievements/Create/1/14\nthis.userAchievementsService.createUserAchievement(1, 14).subscribe(ach => {\n  // ach: { dpUserProjId, achievementId, isObtained, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный тест-кейс.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUserAchievements\n                        \n                    \n                \n            \n            \n                \ngetAllUserAchievements()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Получение всех тест-кейсов пользователя.\nExample :// GET /api/UserAchievements\nthis.userAchievementsService.getAllUserAchievements().subscribe(list => {\n  // list: [{ dpUserProjId, achievementId, isObtained, ... }]\n  console.log(list);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Массив тест-кейсов пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAlwaysFailMode\n                        \n                    \n                \n            \n            \n                \ngetAlwaysFailMode()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Проверяет, включён ли режим имитации ошибок тест-кейсов.\nExample :if (this.userAchievementsService.getAlwaysFailMode()) { ... }\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если режим включён.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedAchievementsByUsername\n                        \n                    \n                \n            \n            \n                \ngetCompletedAchievementsByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Получение завершённых тест-кейсов по имени пользователя.\nExample :// GET /api/UserAchievements/Completed/vasya\nthis.userAchievementsService.getCompletedAchievementsByUsername('vasya').subscribe(list => {\n  // list: [{ achievementId, title, ... }]\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Имя пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Массив завершённых тест-кейсов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFailedAchievementId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFailedAchievementId(successAchievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:288\n                        \n                    \n\n\n            \n                \n                        Получение ID отрицательного тест-кейса на основе положительного.\nExample :const failedId = this.userAchievementsService.getFailedAchievementId(14);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                successAchievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID успешного тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                ID соответствующего отрицательного тест-кейса.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserAchievement\n                        \n                    \n                \n            \n            \n                \ngetUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Получение конкретного тест-кейса пользователя.\nExample :// GET /api/UserAchievements/1/14\nthis.userAchievementsService.getUserAchievement(1, 14).subscribe(ach => {\n  // ach: { dpUserProjId, achievementId, isObtained, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Тест-кейс пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleAchievement\n                        \n                    \n                \n            \n            \n                \nhandleAchievement(userProjId: number, achievementId: number, successMessage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Универсальный метод для обработки тест-кейса (создание, разблокировка, имитация ошибки).\nExample :this.userAchievementsService.handleAchievement(1, 14, 'Каталог успешно загружен!').subscribe();\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                        \n                                                successMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Сообщение для успешного уведомления.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обработки.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAlwaysFailMode\n                        \n                    \n                \n            \n            \n                \nsetAlwaysFailMode(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Включает или выключает режим имитации ошибок тест-кейсов.\nExample :this.userAchievementsService.setAlwaysFailMode(true);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    true — всегда имитировать ошибку, false — обычный режим.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        simulateServerFailure\n                        \n                    \n                \n            \n            \n                \n                        \n                    simulateServerFailure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlockUserAchievement\n                        \n                    \n                \n            \n            \n                \nunlockUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Разблокировка тест-кейса для пользователя.\nExample :// PUT /api/UserAchievements/Unlock/1/14\nthis.userAchievementsService.unlockUserAchievement(1, 14).subscribe(() => {\n  // Тест-кейс разблокирован\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат разблокировки.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALWAYS_FAIL_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'alwaysFailMode'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/user-achievements.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/UserAchievements'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/user-achievements.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, Observable, of, switchMap, tap, throwError } from 'rxjs';\nimport { IAchievement } from '../interface/IAchievement';\nimport { IUserHasAchievement } from '../interface/IUserHasAchievement';\nimport { ConfigService } from './config.service';\nimport { TuiAlertService } from '@taiga-ui/core';\n\n/**\n * Сервис для работы с тест-кейсами пользователя.\n *\n * @remarks\n * Позволяет получать, создавать, разблокировать тест-кейсы, а также имитировать ошибки тест-кейсов для тестирования UI и логики.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAchievementsService {\n  private readonly baseUrl = '/api/UserAchievements'; // Прокси для API\n  private static readonly ALWAYS_FAIL_KEY = 'alwaysFailMode';\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly configService: ConfigService,\n    private readonly alertService: TuiAlertService\n  ) { }\n\n  /**\n   * Включает или выключает режим имитации ошибок тест-кейсов.\n   * @param {boolean} value true — всегда имитировать ошибку, false — обычный режим.\n   * @example\n   * this.userAchievementsService.setAlwaysFailMode(true);\n   */\n  setAlwaysFailMode(value: boolean) {\n    localStorage.setItem(UserAchievementsService.ALWAYS_FAIL_KEY, value ? '1' : '0');\n  }\n\n  /**\n   * Проверяет, включён ли режим имитации ошибок тест-кейсов.\n   * @returns {boolean} true, если режим включён.\n   * @example\n   * if (this.userAchievementsService.getAlwaysFailMode()) { ... }\n   */\n  getAlwaysFailMode(): boolean {\n    return localStorage.getItem(UserAchievementsService.ALWAYS_FAIL_KEY) === '1';\n  }\n\n  private simulateServerFailure(): boolean {\n    return this.getAlwaysFailMode();\n  }\n\n  /**\n   * Получение всех тест-кейсов пользователя.\n   * @returns {Observable} Массив тест-кейсов пользователя.\n   * @example\n   * // GET /api/UserAchievements\n   * this.userAchievementsService.getAllUserAchievements().subscribe(list => {\n   *   // list: [{ dpUserProjId, achievementId, isObtained, ... }]\n   *   console.log(list);\n   * });\n   */\n  getAllUserAchievements(): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получение конкретного тест-кейса пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Тест-кейс пользователя.\n   * @example\n   * // GET /api/UserAchievements/1/14\n   * this.userAchievementsService.getUserAchievement(1, 14).subscribe(ach => {\n   *   // ach: { dpUserProjId, achievementId, isObtained, ... }\n   * });\n   */\n  getUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(`${this.baseUrl}/${userProjId}/${achievementId}`);\n  }\n\n  /**\n   * Создание тест-кейса для пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Созданный тест-кейс.\n   * @example\n   * // POST /api/UserAchievements/Create/1/14\n   * this.userAchievementsService.createUserAchievement(1, 14).subscribe(ach => {\n   *   // ach: { dpUserProjId, achievementId, isObtained, ... }\n   * });\n   */\n  createUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .post(`${this.baseUrl}/Create/${userProjId}/${achievementId}`, {});\n  }\n\n  /**\n   * Разблокировка тест-кейса для пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Результат разблокировки.\n   * @example\n   * // PUT /api/UserAchievements/Unlock/1/14\n   * this.userAchievementsService.unlockUserAchievement(1, 14).subscribe(() => {\n   *   // Тест-кейс разблокирован\n   * });\n   */\n  unlockUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .put(`${this.baseUrl}/Unlock/${userProjId}/${achievementId}`, {});\n  }\n\n  /**\n   * Получение завершённых тест-кейсов по имени пользователя.\n   * @param {string} username Имя пользователя.\n   * @returns {Observable} Массив завершённых тест-кейсов.\n   * @example\n   * // GET /api/UserAchievements/Completed/vasya\n   * this.userAchievementsService.getCompletedAchievementsByUsername('vasya').subscribe(list => {\n   *   // list: [{ achievementId, title, ... }]\n   * });\n   */\n  getCompletedAchievementsByUsername(username: string): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .get(`${this.baseUrl}/Completed/${username}`);\n  }\n\n  /**\n   * Проверка существования тест-кейса у пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} true, если тест-кейс уже есть.\n   * @example\n   * // GET /api/UserAchievements/Exists/1/14\n   * this.userAchievementsService.checkUserAchievementExists(1, 14).subscribe(exists => {\n   *   // exists: true/false\n   * });\n   */\n  checkUserAchievementExists(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(`${this.baseUrl}/Exists/${userProjId}/${achievementId}`).pipe(\n      catchError(error => {\n        if (error.status === this.configService.httpStatusCodes.notFound) {\n          console.warn(`Тест-кейс ${achievementId} или пользователь ${userProjId} не найдены`);\n          return of(false);\n        }\n        console.error('Ошибка при проверке тест-кейса:', error);\n        return of(false);\n      })\n    );\n  }\n\n  /**\n   * Универсальный метод для обработки тест-кейса (создание, разблокировка, имитация ошибки).\n   * @param {number} userProjId Идентификатор пользователя проекта.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @param {string} successMessage Сообщение для успешного уведомления.\n   * @returns {Observable} Результат обработки.\n   * @example\n   * this.userAchievementsService.handleAchievement(1, 14, 'Каталог успешно загружен!').subscribe();\n   */\n  handleAchievement(\n    userProjId: number,\n    achievementId: number,\n    successMessage: string\n  ): Observable {\n    if (userProjId  {\n          if (result === null) {\n            // Тест-кейс уже существует\n            // this.alertService\n            //   .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\n            //   .subscribe();\n            return of(void 0);\n          }\n          return this.unlockUserAchievement(userProjId, failedAchievementId);\n        }),\n        tap(() => {\n          this.alertService\n            .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\n              appearance: 'error'\n            })\n            .subscribe();\n        }),\n        catchError(error => {\n          console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, error);\n          return of(void 0);\n        })\n      );\n    }\n\n    // Нормальная обработка тест-кейса\n    return this.checkUserAchievementExists(userProjId, achievementId).pipe(\n      switchMap(exists => {\n        if (exists) {\n          console.log(`Тест-кейс ${achievementId} уже выполнен для userProjId ${userProjId}`);\n          // this.alertService\n          //   .open('Тест-кейс уже выполнен!', { appearance: 'info' })\n          //   .subscribe();\n          return of(void 0); // Ничего не делаем, если тест-кейс уже есть\n        }\n        return this.createUserAchievement(userProjId, achievementId).pipe(\n          switchMap(result => {\n            if (result === null) {\n              // Тест-кейс уже существует\n              this.alertService\n                .open('Тест-кейс успешно выполнен!', { appearance: 'success' })\n                .subscribe();\n              return of(void 0);\n            }\n            return this.unlockUserAchievement(userProjId, achievementId);\n          }),\n          tap(() => {\n            this.alertService.open(successMessage, { appearance: 'success' }).subscribe();\n          })\n        );\n      }),\n      catchError(error => {\n        console.error(`Ошибка при обработке тест-кейса ${achievementId} для userProjId ${userProjId}:`, error);\n        const failedAchievementId = this.getFailedAchievementId(achievementId);\n        // Регистрируем отрицательный тест-кейс при ошибке\n        return this.createUserAchievement(userProjId, failedAchievementId).pipe(\n          switchMap(result => {\n            if (result === null) {\n              // Ошибочный тест-кейс уже существует\n              // this.alertService\n              //   .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\n              //   .subscribe();\n              return of(void 0);\n            }\n            return this.unlockUserAchievement(userProjId, failedAchievementId);\n          }),\n          tap(() => {\n            this.alertService\n              .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\n                appearance: 'error'\n              })\n              .subscribe();\n          }),\n          catchError(err => {\n            console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, err);\n            return of(void 0);\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Получение ID отрицательного тест-кейса на основе положительного.\n   * @param {number} successAchievementId ID успешного тест-кейса.\n   * @returns {number} ID соответствующего отрицательного тест-кейса.\n   * @example\n   * const failedId = this.userAchievementsService.getFailedAchievementId(14);\n   */\n  private getFailedAchievementId(successAchievementId: number): number {\n    const successToFailedMap: { [key: number]: number } = {\n      [this.configService.achievementIds.loginSuccess]: this.configService.achievementIds.loginFailed,\n      [this.configService.achievementIds.registerSuccess]: this.configService.achievementIds.registerFailed,\n      [this.configService.achievementIds.addToCartSuccess]: this.configService.achievementIds.addToCartFailed,\n      [this.configService.achievementIds.checkoutSuccess]: this.configService.achievementIds.checkoutFailed,\n      [this.configService.achievementIds.viewProductSuccess]: this.configService.achievementIds.viewProductFailed,\n      [this.configService.achievementIds.createProductSuccess]: this.configService.achievementIds.createProductFailed,\n      [this.configService.achievementIds.updateProfileSuccess]: this.configService.achievementIds.updateProfileFailed,\n      [this.configService.achievementIds.addImageSuccess]: this.configService.achievementIds.addImageFailed,\n      [this.configService.achievementIds.addCategorySuccess]: this.configService.achievementIds.addCategoryFailed,\n      [this.configService.achievementIds.switchToLightThemeSuccess]:\n        this.configService.achievementIds.switchToLightThemeFailed,\n      [this.configService.achievementIds.switchToDarkThemeSuccess]:\n        this.configService.achievementIds.switchToDarkThemeFailed,\n      [this.configService.achievementIds.removeFromCartSuccess]:\n        this.configService.achievementIds.removeFromCartFailed,\n      [this.configService.achievementIds.updateCartQuantitySuccess]:\n        this.configService.achievementIds.updateCartQuantityFailed,\n      [this.configService.achievementIds.loadProductsSuccess]: this.configService.achievementIds.loadProductsFailed,\n      [this.configService.achievementIds.loadProductInfoSuccess]:\n        this.configService.achievementIds.loadProductInfoFailed,\n      [this.configService.achievementIds.navigateToProductSuccess]:\n        this.configService.achievementIds.navigateToProductFailed,\n      [this.configService.achievementIds.toggleThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.resetThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openProductDialogSuccess]:\n        this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openCategoryDialogSuccess]:\n        this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openImageDialogSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.logoutProjSuccess]: this.configService.achievementIds.logoutProjFailed,\n      [this.configService.achievementIds.updateCategorySuccess]:\n        this.configService.achievementIds.updateCategoryFailed,\n      [this.configService.achievementIds.updateImageSuccess]: this.configService.achievementIds.updateImageFailed,\n      [this.configService.achievementIds.updateProductSuccess]: this.configService.achievementIds.updateProductFailed,\n    };\n\n    return successToFailedMap[successAchievementId] || this.configService.achievementIds.buttonNotWorking;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UserPageComponent.html":{"url":"components/UserPageComponent.html","title":"component - UserPageComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UserPageComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/user-page/user-page.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-user-page\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                                DialogCategoryComponent\n                                DialogImageComponent\n                                DialogProductComponent\n                            FormsModule\n                            ReactiveFormsModule\n                            TuiAutoFocus\n                            TuiInputModule\n                            TuiSelectModule\n                            TuiSlider\n                            TuiTextfield\n                            TuiTextfieldControllerModule\n                            TuiButton\n                            TuiDataListWrapper\n                            AsyncPipe\n                            NgIf\n                            TuiFiles\n                            TuiLink\n                            TuiIcon\n                            TuiAvatar\n                            TuiIconPipe\n                                ThemeToggleComponent\n                \n            \n\n            \n                styleUrls\n                ./user-page.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./user-page.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                authProjService\n                            \n                            \n                                categories\n                            \n                            \n                                    Private\n                                    Readonly\n                                categoryDialog\n                            \n                            \n                                    Private\n                                    Readonly\n                                dialogService\n                            \n                            \n                                editCategoryForm\n                            \n                            \n                                editImageForm\n                            \n                            \n                                editProductForm\n                            \n                            \n                                    Private\n                                    Readonly\n                                imageDialog\n                            \n                            \n                                images\n                            \n                            \n                                isProjAuthenticated\n                            \n                            \n                                    Private\n                                    Readonly\n                                productDialog\n                            \n                            \n                                products\n                            \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAuthStatus\n                            \n                            \n                                editCategoryById\n                            \n                            \n                                editImageById\n                            \n                            \n                                editProductById\n                            \n                            \n                                logoutProj\n                            \n                            \n                                navigateTo\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openDialog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: ProductsRepositoryService, categoriesRepository: CategoriesRepositoryService, imagesRepository: ImagesRepositoryService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/user-page/user-page.component.ts:89\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                    ProductsRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                    CategoriesRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        imagesRepository\n                                                  \n                                                        \n                                                                    ImagesRepositoryService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAuthStatus\n                        \n                    \n                \n            \n            \n                \ncheckAuthStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:105\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editCategoryById\n                        \n                    \n                \n            \n            \n                \neditCategoryById(id: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:177\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editImageById\n                        \n                    \n                \n            \n            \n                \neditImageById(id: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editProductById\n                        \n                    \n                \n            \n            \n                \neditProductById(id: number | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        number | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoutProj\n                        \n                    \n                \n            \n            \n                \nlogoutProj()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:111\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigateTo\n                        \n                    \n                \n            \n            \n                \nnavigateTo(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:118\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:98\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openDialog\n                        \n                    \n                \n            \n            \n                \nopenDialog(component: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page/user-page.component.ts:122\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                component\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authProjService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthProjService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IDpCategory[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        categoryDialog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : tuiDialog(DialogCategoryComponent, {\n    dismissible: true,\n    label: 'Добавить запись о категории',\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        dialogService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiDialogService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editCategoryForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    id: new FormControl(null, Validators.required)\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editImageForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    id: new FormControl(null, Validators.required)\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editProductForm\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new FormGroup({\n    id: new FormControl(null, Validators.required)\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        imageDialog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : tuiDialog(DialogImageComponent, {\n    dismissible: true,\n    label: 'Загрузить изображение продукта',\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        images\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IDpImage[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isProjAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        productDialog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : tuiDialog(DialogProductComponent, {\n    dismissible: true,\n    label: 'Добавить запись о продукте',\n  })\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IDpProduct[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page/user-page.component.ts:56\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, CUSTOM_ELEMENTS_SCHEMA, inject } from '@angular/core';\nimport { AsyncPipe, CommonModule, NgIf } from '@angular/common';\nimport { DialogCategoryComponent } from \"../../components/dialog-category/dialog-category.component\";\nimport { DialogImageComponent } from \"../../components/dialog-image/dialog-image.component\";\nimport { DialogProductComponent } from \"../../components/dialog-product/dialog-product.component\";\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\nimport { TuiButton, TuiDialogService, TuiIcon, TuiIconPipe, TuiLink, TuiTextfield } from '@taiga-ui/core';\nimport { TuiAvatar, TuiDataListWrapper, TuiFiles, TuiSlider } from '@taiga-ui/kit';\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\nimport { tuiDialog } from '@taiga-ui/core';\nimport { IDpCategory } from '../../../interface/IDpCategory';\nimport { IDpProduct } from '../../../interface/IDpProduct';\nimport { IDpImage } from '../../../interface/IDpImage';\nimport { AuthService } from '../../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { AuthProjService } from '../../../services/auth-proj.service';\nimport { CategoriesRepositoryService } from '../../../repositories/categories-repository.service';\nimport { ImagesRepositoryService } from '../../../repositories/images-repository.service';\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\nimport { ThemeToggleComponent } from '../../components/theme-toggle/theme-toggle.component';\n\n@Component({\n  selector: 'app-user-page',\n  imports: [\n    CommonModule,\n    DialogCategoryComponent,\n    DialogImageComponent,\n    DialogProductComponent,\n    FormsModule,\n    ReactiveFormsModule,\n    TuiAutoFocus,\n    TuiInputModule,\n    TuiSelectModule,\n    TuiSlider,\n    TuiTextfield,\n    TuiTextfieldControllerModule,\n    TuiButton,\n    TuiDataListWrapper,\n    AsyncPipe,\n    NgIf,\n    TuiFiles,\n    TuiLink,\n    TuiIcon,\n    TuiAvatar,\n    TuiIconPipe,\n    ThemeToggleComponent\n  ],\n  templateUrl: './user-page.component.html',\n  styleUrls: ['./user-page.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class UserPageComponent {\n  private readonly dialogService = inject(TuiDialogService);\n  private readonly authProjService = inject(AuthProjService);\n  private readonly router = inject(Router);\n  products: IDpProduct[] = [];\n  categories: IDpCategory[] = [];\n  images: IDpImage[] = [];\n\n  editProductForm = new FormGroup({\n    id: new FormControl(null, Validators.required)\n  });\n\n  editCategoryForm = new FormGroup({\n    id: new FormControl(null, Validators.required)\n  });\n\n  editImageForm = new FormGroup({\n    id: new FormControl(null, Validators.required)\n  });\n\n\n  isProjAuthenticated: boolean = false;\n\n  private readonly productDialog = tuiDialog(DialogProductComponent, {\n    dismissible: true,\n    label: 'Добавить запись о продукте',\n  });\n\n  private readonly categoryDialog = tuiDialog(DialogCategoryComponent, {\n    dismissible: true,\n    label: 'Добавить запись о категории',\n  });\n\n  private readonly imageDialog = tuiDialog(DialogImageComponent, {\n    dismissible: true,\n    label: 'Загрузить изображение продукта',\n  });\n\n  constructor(\n    private productsRepository: ProductsRepositoryService,\n    private categoriesRepository: CategoriesRepositoryService,\n    private imagesRepository: ImagesRepositoryService\n  ) { }\n\n\n  ngOnInit(): void {\n    this.authProjService.isAuthenticated$.subscribe(isAuthenticated => {\n      this.isProjAuthenticated = isAuthenticated;\n    });\n    this.checkAuthStatus();\n  }\n\n  checkAuthStatus(): void {\n    const token = localStorage.getItem('projToken');\n    this.isProjAuthenticated = !!token;\n    this.authProjService.setAuthenticated(this.isProjAuthenticated);\n  }\n\n  logoutProj(): void {\n    localStorage.removeItem('projToken'); // Удаляем 'projToken'\n    localStorage.removeItem('userProjId');\n    this.authProjService.setAuthenticated(false);\n    this.router.navigate(['/']);\n  }\n\n  navigateTo(path: string): void {\n    this.router.navigate([path]);\n  }\n\n  openDialog(component: string): void {\n    switch (component) {\n      case 'product':\n        this.productDialog({} as IDpProduct).subscribe({\n          next: (data) => {\n            console.log('Creating product with data:', JSON.stringify(data, null, 2));\n            this.products.push(data); // Добавить в массив\n          },\n          complete: () => {\n            console.info('Product dialog closed');\n          }\n        });\n        break;\n      case 'category':\n        this.categoryDialog({} as IDpCategory).subscribe({\n          next: (data) => {\n            console.log('Creating category with data:', JSON.stringify(data, null, 2));\n          },\n          complete: () => {\n            console.info('Category dialog closed');\n          }\n        });\n        break;\n      case 'image':\n        this.imageDialog({} as IDpImage).subscribe({\n          next: (data) => {\n            console.log('Uploading image with data:', JSON.stringify(data, null, 2));\n          },\n          complete: () => {\n            console.info('Image dialog closed');\n          }\n        });\n        break;\n    }\n  }\n\n  editProductById(id: number | null): void {\n    if (id == null) return;\n    this.productsRepository.getProductById(id).subscribe({\n      next: (product) => {\n        this.productDialog(product).subscribe({\n          next: (data) => {\n            console.log('Updated product:', data);\n          },\n          complete: () => {\n            console.info('Product edit dialog closed');\n          }\n        });\n      },\n      error: () => {\n        console.warn('Продукт с таким ID не найден');\n      }\n    });\n  }\n\n  editCategoryById(id: number | null): void {\n    if (id == null) return;\n    this.categoriesRepository.getDpCategoryById(id).subscribe({\n      next: (category) => {\n        this.categoryDialog(category).subscribe({\n          next: (data) => {\n            console.log('Updated category:', data);\n          },\n          complete: () => {\n            console.info('Category edit dialog closed');\n          }\n        });\n      },\n      error: () => {\n        console.warn('Категория с таким ID не найдена');\n      }\n    });\n  }\n\n  editImageById(id: number | null): void {\n    if (id == null) return;\n    this.imagesRepository.getDpImageById(id).subscribe({\n      next: (image) => {\n        this.imageDialog(image).subscribe({\n          next: (data) => {\n            console.log('Updated image:', data);\n          },\n          complete: () => {\n            console.info('Image edit dialog closed');\n          }\n        });\n      },\n      error: () => {\n        console.warn('Изображение с таким ID не найдено');\n      }\n    });\n  }\n}\n    \n\n    \n        \n  \n    \n      Экран тест пользователя\n      \n      \n      Переключение темы приложения\n      \n    \n  \n\n  \n    \n      Добавить продукт\n    \n    \n      Добавить категорию\n    \n    \n      Добавить изображение\n    \n  \n\n  \n    \n      ID Продукта\n    \n    \n      Редактировать продукт\n    \n  \n\n  \n    \n      ID Категории\n    \n    \n      Редактировать категорию\n    \n  \n\n  \n    \n      ID Изображения\n    \n    \n      Редактировать изображение\n    \n  \n\n    \n\n    \n                \n                    ./user-page.component.css\n                \n                @import '../../../styles/variables.css';\n\n:host {\n    display: block;\n    padding: 1.5rem 1rem; /* 24px 16px */\n    box-sizing: border-box;\n    min-height: 100vh;\n}\n\n.user-page-content {\n    padding: 1.25rem; /* 20px */\n    margin: 0 auto;\n    max-width: 800px; /* Компактная ширина */\n    border-radius: var(--button-border-radius); /* 6px */\n    display: flex;\n    flex-direction: column;\n    gap: 1.25rem; /* Уменьшен с 1.5rem для компактности */\n}\n\n/* Стили для заголовка */\nh1 {\n    font-size: 1.75rem;\n    color: var(--tui-primary);\n    margin: 0;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    flex-wrap: wrap;\n}\n\n/* Стили для кнопок Taiga UI */\nbutton[tuiButton] {\n    margin: 0;\n    padding: var(--button-padding); /* Из variables.css */\n    color: var(--tui-text-01); /* Текст кнопки */\n}\n\n/* Группа кнопок */\n.user-page-content > div.action-buttons {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.75rem; /* 12px между кнопками */\n}\n\n/* Стили для форм */\nform {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem; /* 12px внутри формы */\n}\n\n/* Стили для инпутов Taiga UI */\ntui-input {\n    max-width: 200px; /* Компактная ширина */\n}\n\n/* Стили для текстовых элементов */\np {\n    margin: 0.5rem 0;\n    color: var(--tui-text-01);\n    font-size: 1rem;\n    line-height: 1.5;\n}\n\n/* Адаптивность */\n@media (max-width: 768px) {\n    :host {\n        padding: 1rem 0.5rem; /* 16px 8px */\n    }\n\n    .user-page-content {\n        padding: 0.75rem; /* 12px */\n        max-width: 100%;\n        border-radius: 0.5rem; /* 8px */\n        gap: 1rem; /* 16px */\n    }\n\n    h1 {\n        font-size: 1.5rem;\n        gap: 0.25rem;\n    }\n\n    tui-input {\n        max-width: 100%; /* Полная ширина */\n    }\n\n    .user-page-content > div.action-buttons {\n        flex-direction: column;\n        gap: 0.5rem; /* 8px */\n    }\n\n    form {\n        gap: 0.5rem; /* 8px */\n    }\n}\n\n/* Темная тема */\n[data-theme=\"dark\"] :host {\n    background: var(--background-color); /* Фон страницы */\n    color: var(--text-color-dark); /* Темный текст */\n}\n\n[data-theme=\"dark\"] .user-page-content {\n    background: var(--card-background-color); /* Фон карточки */\n    box-shadow: var(--card-shadow); /* Тень */\n}\n\n[data-theme=\"dark\"] h1 {\n    color: var(--tui-primary); /* Акцентный цвет */\n}\n\n[data-theme=\"dark\"] p {\n    color: var(--tui-text-01); /* Светлый текст */\n}\n\n[data-theme=\"dark\"] button[tuiButton] {\n    color: var(--tui-text-01); /* Светлый текст для кнопок */\n    background: var(--button-background-color); /* Фон из variables.css */\n}\n\n[data-theme=\"dark\"] button[tuiButton]:hover {\n    background: var(--button-background-color-hover);\n}\n\n[data-theme=\"dark\"] tui-input {\n    color: var(--tui-text-01); /* Светлый текст в инпутах */\n    background: var(--tui-base-01); /* Фон инпута */\n    border-color: var(--tui-base-03); /* Граница */\n}\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            Экран тест пользователя                  Переключение темы приложения                        Добавить продукт              Добавить категорию              Добавить изображение                  ID Продукта              Редактировать продукт                  ID Категории              Редактировать категорию                  ID Изображения              Редактировать изображение      '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'UserPageComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/UserPageProjComponent.html":{"url":"components/UserPageProjComponent.html","title":"component - UserPageProjComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  UserPageProjComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/user-page-proj/user-page-proj.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-user-page-proj\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            FormsModule\n                            ReactiveFormsModule\n                            TuiInputModule\n                            TuiSelectModule\n                            TuiSlider\n                            TuiTextfield\n                            TuiTextfieldControllerModule\n                            TuiButton\n                            TuiDataListWrapper\n                            AsyncPipe\n                            NgIf\n                            TuiFiles\n                            TuiLink\n                                AchievmentsPageForUserComponent\n                \n            \n\n\n\n\n            \n                templateUrl\n                ./user-page-proj.component.html\n            \n\n\n\n            \n                styleUrl\n                ./user-page-proj.component.css\n            \n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                alwaysFailMode\n                            \n                            \n                                    Private\n                                    Readonly\n                                authProjService\n                            \n                            \n                                isProjAuthenticated\n                            \n                            \n                                    Private\n                                logoutAttempt\n                            \n                            \n                                    Private\n                                    Readonly\n                                router\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsRepository\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAuthStatus\n                            \n                            \n                                logoutProj\n                            \n                            \n                                navigateTo\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                toggleAlwaysFail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userAchievementsService: UserAchievementsService)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userAchievementsService\n                                                  \n                                                        \n                                                                        UserAchievementsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAuthStatus\n                        \n                    \n                \n            \n            \n                \ncheckAuthStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logoutProj\n                        \n                    \n                \n            \n            \n                \nlogoutProj()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigateTo\n                        \n                    \n                \n            \n            \n                \nnavigateTo(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toggleAlwaysFail\n                        \n                    \n                \n            \n            \n                \ntoggleAlwaysFail()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:81\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        alwaysFailMode\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        authProjService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(AuthProjService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isProjAuthenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        logoutAttempt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Router)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsRepository\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsRepositoryService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/user-page-proj/user-page-proj.component.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, inject } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthProjService } from '../../../services/auth-proj.service';\nimport { CommonModule, AsyncPipe, NgIf } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TuiTextfield, TuiButton, TuiLink, TuiIcon, TuiIconPipe } from '@taiga-ui/core';\nimport { TuiSlider, TuiDataListWrapper, TuiFiles, TuiAvatar } from '@taiga-ui/kit';\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\nimport { AchievmentsPageForUserComponent } from '../achievments-page-for-user/achievments-page-for-user.component';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\n@Component({\n  selector: 'app-user-page-proj',\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    TuiInputModule,\n    TuiSelectModule,\n    TuiSlider,\n    TuiTextfield,\n    TuiTextfieldControllerModule,\n    TuiButton,\n    TuiDataListWrapper,\n    AsyncPipe,\n    NgIf,\n    TuiFiles,\n    TuiLink,\n    AchievmentsPageForUserComponent\n  ],\n  templateUrl: './user-page-proj.component.html',\n  styleUrl: './user-page-proj.component.css'\n})\nexport class UserPageProjComponent {\n  private readonly authProjService = inject(AuthProjService);\n  private readonly router = inject(Router);\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\n  alwaysFailMode = false;\n  isProjAuthenticated: boolean = false;\n  private logoutAttempt = 0;\n\n  constructor(\n    private readonly configService: ConfigService = inject(ConfigService),\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService)\n  ) { }\n\n  ngOnInit(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    this.alwaysFailMode = this.userAchievementsService.getAlwaysFailMode();\n    // Случайно определяем успех или ошибку (50/50)\n    const isSuccess = Math.random() \n    \n\n    \n         Авторизация пользователя с тестами\n  Выйти из аккаунта пользователя с тестами\n  \n  \n  Всегда имитировать ошибку тест-кейсов\n\n\n    \n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' Авторизация пользователя с тестами  Выйти из аккаунта пользователя с тестами      Всегда имитировать ошибку тест-кейсов'\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'},{'name': 'AchievmentsPageForUserComponent', 'selector': 'app-achievments-page-for-user'},{'name': 'AlertDeleteComponent', 'selector': 'app-alert-on-delete'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'BackButtonComponent', 'selector': 'app-back-button'},{'name': 'CardItemComponent', 'selector': 'app-card-item'},{'name': 'CarouselImgComponent', 'selector': 'app-carousel-img'},{'name': 'DialogCategoryComponent', 'selector': 'app-dialog-category'},{'name': 'DialogImageComponent', 'selector': 'app-dialog-image'},{'name': 'DialogProductComponent', 'selector': 'app-dialog-product'},{'name': 'FilterByInputComponent', 'selector': 'app-filter-by-input'},{'name': 'IconTrashComponent', 'selector': 'app-icon-trash'},{'name': 'LoadingComponent', 'selector': 'app-loading'},{'name': 'LoginComponent', 'selector': 'app-login'},{'name': 'LoginProjComponent', 'selector': 'app-login-proj'},{'name': 'NavbarComponent', 'selector': 'app-navbar'},{'name': 'PageCartComponent', 'selector': 'app-page-cart'},{'name': 'PageCatalogItemComponent', 'selector': 'app-page-catalog-item'},{'name': 'PageItemFromCatalogComponent', 'selector': 'app-page-item-from-catalog'},{'name': 'RegisterComponent', 'selector': 'app-register'},{'name': 'RegisterProjComponent', 'selector': 'app-register-proj'},{'name': 'ThemeToggleComponent', 'selector': 'app-theme-toggle'},{'name': 'UserPageComponent', 'selector': 'app-user-page'},{'name': 'UserPageProjComponent', 'selector': 'app-user-page-proj'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'UserPageProjComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/app/app.config.ts\n            \n            variable\n            appConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/data/components/alert-delete/alert-delete.component.ts\n            \n            component\n            AlertDeleteComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/data/components/back-button/back-button.component.ts\n            \n            component\n            BackButtonComponent\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/data/components/card-item/card-item.component.ts\n            \n            component\n            CardItemComponent\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/data/components/carousel-img/carousel-img.component.ts\n            \n            component\n            CarouselImgComponent\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/app/data/components/dialog-category/dialog-category.component.ts\n            \n            component\n            DialogCategoryComponent\n            \n                0 %\n                (0/20)\n            \n        \n        \n            \n                \n                src/app/data/components/dialog-image/dialog-image.component.ts\n            \n            component\n            DialogImageComponent\n            \n                0 %\n                (0/26)\n            \n        \n        \n            \n                \n                src/app/data/components/dialog-product/dialog-product.component.ts\n            \n            component\n            DialogProductComponent\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/app/data/components/filter-by-input/filter-by-input.component.ts\n            \n            component\n            FilterByInputComponent\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/data/components/icon-trash/icon-trash.component.ts\n            \n            component\n            IconTrashComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/data/components/loading/loading.component.ts\n            \n            component\n            LoadingComponent\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/data/components/login-proj/login-proj.component.ts\n            \n            component\n            LoginProjComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/data/components/login/login.component.ts\n            \n            component\n            LoginComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/data/components/navbar/navbar.component.ts\n            \n            component\n            NavbarComponent\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/data/components/register-proj/register-proj.component.ts\n            \n            component\n            RegisterProjComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/data/components/register/register.component.ts\n            \n            component\n            RegisterComponent\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/data/components/theme-toggle/theme-toggle.component.ts\n            \n            component\n            ThemeToggleComponent\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/app/data/page/about/about.component.ts\n            \n            component\n            AboutComponent\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts\n            \n            component\n            AchievmentsPageForUserComponent\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/app/data/page/page-cart/page-cart.component.ts\n            \n            component\n            PageCartComponent\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/app/data/page/page-cart/page-cart.component.ts\n            \n            interface\n            CartItem\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/data/page/page-catalog-item/page-catalog-item.component.ts\n            \n            component\n            PageCatalogItemComponent\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts\n            \n            component\n            PageItemFromCatalogComponent\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/data/page/user-page-proj/user-page-proj.component.ts\n            \n            component\n            UserPageProjComponent\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/app/data/page/user-page/user-page.component.ts\n            \n            component\n            UserPageComponent\n            \n                0 %\n                (0/23)\n            \n        \n        \n            \n                \n                src/app/interface/IAchievement.ts\n            \n            interface\n            IAchievement\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/interface/IAddToCartRequest.ts\n            \n            interface\n            IAddToCartRequest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/interface/ICartItem.ts\n            \n            interface\n            ICartItem\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/interface/ICartViewModel.ts\n            \n            interface\n            ICartViewModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/interface/ICreateDpImageRequest.ts\n            \n            interface\n            ICreateDpImageRequest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/interface/IDpCategory.ts\n            \n            interface\n            IDpCategory\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpImage.ts\n            \n            interface\n            IDpImage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrder.ts\n            \n            interface\n            IDpOrder\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrderComposition.ts\n            \n            interface\n            IDpOrderComposition\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrderDetail.ts\n            \n            interface\n            IDpOrderDetail\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpProduct.ts\n            \n            interface\n            IDpProduct\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/interface/IDpProductAttribute.ts\n            \n            interface\n            IDpProductAttribute\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpSize.ts\n            \n            interface\n            IDpSize\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/interface/IDpUser.ts\n            \n            interface\n            IDpUser\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/app/interface/IDpUserProj.ts\n            \n            interface\n            IDpUserProj\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/interface/IRemoveFromCartRequest.ts\n            \n            interface\n            IRemoveFromCartRequest\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/interface/IUpdateCartRequest.ts\n            \n            interface\n            IUpdateCartRequest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/interface/IUpdateDpImageRequest.ts\n            \n            interface\n            IUpdateDpImageRequest\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/interface/IUserHasAchievement.ts\n            \n            interface\n            IUserHasAchievement\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/services/achievements.service.ts\n            \n            injectable\n            AchievementsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/app/services/auth-proj.service.ts\n            \n            injectable\n            AuthProjService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/services/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/dp-categories.service.ts\n            \n            injectable\n            DpCategoriesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-images.service.ts\n            \n            injectable\n            DpImagesService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/services/dp-order-compositions.service.ts\n            \n            injectable\n            DpOrderCompositionsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-orders.service.ts\n            \n            injectable\n            DpOrdersService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-product-attributes.service.ts\n            \n            injectable\n            DpProductAttributesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-products.service.ts\n            \n            injectable\n            ProductsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/app/services/dp-shop-cart.service.ts\n            \n            injectable\n            ShopCartService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/services/dp-sizes.service.ts\n            \n            injectable\n            DpSizesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-user-projs.service.ts\n            \n            injectable\n            DpUserProjsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-users.service.ts\n            \n            injectable\n            DpUsersService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/user-achievements.service.ts\n            \n            injectable\n            UserAchievementsService\n            \n                73 %\n                (11/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : ^19.2.10\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/material : ^19.2.10\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            @fortawesome/fontawesome-free : ^6.7.2\n        \n            @taiga-ui/addon-commerce : ^4.35.0\n        \n            @taiga-ui/addon-table : ^4.36.0\n        \n            @taiga-ui/cdk : ^4.34.0\n        \n            @taiga-ui/core : ^4.36.0\n        \n            @taiga-ui/event-plugins : ^4.0.2\n        \n            @taiga-ui/icons : ^4.34.0\n        \n            @taiga-ui/icons-fontawesome : ^4.37.0\n        \n            @taiga-ui/kit : ^4.34.0\n        \n            @taiga-ui/layout : ^4.35.0\n        \n            @taiga-ui/legacy : ^4.35.0\n        \n            ngx-cookie-service : ^19.1.2\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSota6SiFront\nThis project was generated using Angular CLI version 19.2.8.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    24 Components\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            appConfig   (src/.../app.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/app.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        appConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ApplicationConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  providers: [\n    provideAnimations(),\n    provideHttpClient(withInterceptorsFromDi()),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes),\n    provideEventPlugins(),\n    AchievementsService // Убедитесь, что сервис добавлен в providers\n  ]\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
