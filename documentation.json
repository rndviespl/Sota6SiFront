{
    "pipes": [],
    "interfaces": [
        {
            "name": "CartItem",
            "id": "interface-CartItem-0f9a95c22c10452ed7965b423a9030eb81fc4377d5a8b6ae68ce2c327028595dfff4c4f8a7d8a91d54fd01c9651d2b9440df60ed46210a01d7a322605b687ee1",
            "file": "src/app/data/page/page-cart/page-cart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AsyncPipe, CommonModule, CurrencyPipe, NgForOf, NgIf } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TuiButton, TuiAppearance, TuiAlertService, TuiScrollbar, TuiIcon } from '@taiga-ui/core';\r\nimport { TuiTable, TuiComparator } from '@taiga-ui/addon-table';\r\nimport { TuiDay, tuiDefaultSort } from '@taiga-ui/cdk';\r\nimport { ICartItem } from '../../../interface/ICartItem';\r\nimport { ICartViewModel } from '../../../interface/ICartViewModel';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { IUpdateCartRequest } from '../../../interface/IUpdateCartRequest';\r\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\ninterface CartItem extends ICartItem {\r\n  readonly date: TuiDay;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-page-cart',\r\n  standalone: true,\r\n  imports: [\r\n    AsyncPipe,\r\n    CurrencyPipe,\r\n    FormsModule,\r\n    NgForOf,\r\n    NgIf,\r\n    TuiButton,\r\n    TuiTable,\r\n    CommonModule,\r\n    TuiScrollbar,\r\n    TuiIcon\r\n  ],\r\n  templateUrl: './page-cart.component.html',\r\n  styleUrls: ['./page-cart.component.css', '../../../styles/root.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class PageCartComponent implements OnInit {\r\n  protected readonly options = { updateOn: 'blur' } as const;\r\n  protected cartItems: CartItem[] = [];\r\n  protected readonly columns = ['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const;\r\n  protected isLoading = false;\r\n  private readonly userAchievementsService = inject(UserAchievementsService);\r\n  protected readonly totalSorter: TuiComparator<CartItem> = (a, b) =>\r\n    tuiDefaultSort(a.price * a.quantity, b.price * b.quantity);\r\n\r\n  constructor(\r\n    private cartService: ShopCartRepositoryService,\r\n    private cdr: ChangeDetectorRef,\r\n    public router: Router,\r\n    private userAchievementsRepository: UserAchievementsRepositoryService,\r\n    private configService: ConfigService,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadCartItems();\r\n  }\r\n\r\n  private loadCartItems(): void {\r\n    this.cartService.getCart().subscribe({\r\n      next: (cartViewModel: ICartViewModel) => {\r\n        console.log(cartViewModel);\r\n        this.cartItems = cartViewModel.cartItems.map(item => ({\r\n          ...item,\r\n          date: TuiDay.currentLocal(),\r\n        }));\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при загрузке корзины:', error);\r\n        this.alertService.open('Не удалось загрузить корзину. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected trackByIndex(index: number): number {\r\n    return index;\r\n  }\r\n\r\n  protected getTotal({ price, quantity }: CartItem): number {\r\n    return price * quantity;\r\n  }\r\n\r\n  protected getTotalAmount(): number {\r\n    return this.cartItems.reduce((sum, item) => sum + this.getTotal(item), 0);\r\n  }\r\n\r\n  increaseQuantity(item: CartItem): void {\r\n    const newQuantity = item.quantity + 1;\r\n    this.updateCartItemQuantity(item, newQuantity);\r\n  }\r\n\r\n  decreaseQuantity(item: CartItem): void {\r\n    if (item.quantity > 1) {\r\n      const newQuantity = item.quantity - 1;\r\n      this.updateCartItemQuantity(item, newQuantity);\r\n    }\r\n  }\r\n\r\n  removeFromCart(item: CartItem): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Тест-кейс: ошибка удаления товара из корзины!')\r\n        .subscribe();\r\n      this.alertService.open('Тест-кейс: не удалось удалить товар (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.cartService.removeFromCart({ productId: item.productId, sizeId: item.sizeId }).subscribe({\r\n      next: () => {\r\n        this.cartItems = this.cartItems.filter(cartItem =>\r\n          !(cartItem.productId === item.productId && cartItem.sizeId === item.sizeId)\r\n        );\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartSuccess, 'Товар успешно удалён из корзины!')\r\n          .subscribe();\r\n        this.alertService.open('Товар удалён из корзины', { appearance: 'success' }).subscribe();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при удалении товара из корзины:', error);\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Ошибка удаления товара из корзины!')\r\n          .subscribe();\r\n        this.alertService.open('Не удалось удалить товар. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkout(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n\r\n    if (this.cartItems.length === 0) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutEmptyCart, 'Тест-кейс: Попытка оформления пустой корзины!')\r\n        .subscribe();\r\n      this.alertService.open('Корзина пуста, добавьте товары перед оформлением', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n\r\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Тест-кейс: ошибка оформления заказа!')\r\n        .subscribe();\r\n      this.alertService.open('Тест-кейс: не удалось оформить заказ (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.cartService.checkout().subscribe({\r\n      next: (response) => {\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutSuccess, 'Заказ успешно оформлен!')\r\n          .subscribe();\r\n        this.alertService.open('Заказ успешно оформлен!', { appearance: 'success' }).subscribe();\r\n        this.cartService.clearCart();\r\n        this.cartItems = [];\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.router.navigate(['/order-confirmation'], { state: { orderId: response.orderId } });\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при оформлении заказа:', error);\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Ошибка оформления заказа!')\r\n          .subscribe();\r\n        this.alertService.open('Не удалось оформить заказ. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateCartItemQuantity(item: CartItem, newQuantity: number): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    \r\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Тест-кейс: ошибка обновления количества товара!')\r\n        .subscribe();\r\n      this.alertService.open('Тест-кейс: не удалось обновить количество (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n    \r\n    const request: IUpdateCartRequest = {\r\n      productId: item.productId,\r\n      quantity: newQuantity,\r\n      sizeId: item.sizeId\r\n    };\r\n\r\n    this.cartItems = this.cartItems.map(cartItem =>\r\n      cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\r\n        ? { ...cartItem, quantity: newQuantity }\r\n        : cartItem\r\n    );\r\n    this.cdr.markForCheck();\r\n\r\n    this.cartService.updateCart(request).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantitySuccess, 'Количество товара успешно обновлено!')\r\n            .subscribe();\r\n          this.alertService.open('Количество товара успешно обновлено', { appearance: 'success' }).subscribe();\r\n        } else {\r\n          this.cartItems = this.cartItems.map(cartItem =>\r\n            cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\r\n              ? { ...cartItem, quantity: item.quantity }\r\n              : cartItem\r\n          );\r\n          this.cdr.markForCheck();\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\r\n            .subscribe();\r\n          this.alertService.open('Не удалось обновить количество. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n        }\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      },\r\n      error: (error) => {\r\n        this.cartItems = this.cartItems.map(cartItem =>\r\n          cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\r\n            ? { ...cartItem, quantity: item.quantity }\r\n            : cartItem\r\n        );\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\r\n          .subscribe();\r\n        this.alertService.open('Ошибка при обновлении количества. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected onValueChange<K extends keyof CartItem>(\r\n    value: CartItem[K],\r\n    key: K,\r\n    current: CartItem\r\n  ): void {\r\n    const updated = { ...current, [key]: value };\r\n    this.cartItems = this.cartItems.map((item) => (item === current ? updated : item));\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  protected onSortChange(event: any): void {\r\n    // Логика сортировки, если нужна\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TuiDay",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ICartItem"
            ]
        },
        {
            "name": "IAchievement",
            "id": "interface-IAchievement-9768d108557c033565debce140e2c9fa116f772c7cd7f3de35e2dbca5f0e4386fbe1cebca38ffca99ec583fb493e4876ffb39aac3b245c4338c5ace83fb3d2af",
            "file": "src/app/interface/IAchievement.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpUserProj } from \"./IDpUserProj\";\r\n\r\n// Achievement.ts\r\nexport interface IAchievement {\r\n    achievementId: number;\r\n    title: string;\r\n    textAchievement?: string;\r\n    dpUserProjs?: IDpUserProj[];\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "achievementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dpUserProjs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpUserProj[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "textAchievement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAddToCartRequest",
            "id": "interface-IAddToCartRequest-a4d8826e6bcf2aa6c6088fcc7e63f3924f4773e1b20fe2ae0f945d05b88fa47b3679691635d27df6f9b1c227f4a04256f41a917dac73ac1b805f8eb14b46beb5",
            "file": "src/app/interface/IAddToCartRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAddToCartRequest {\r\n    productId: number;\r\n    quantity: number;\r\n    sizeId?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICartItem",
            "id": "interface-ICartItem-90bf72804339760dd4c737c490b3d517b34488f67851d9edcd131d797e767d007932f0117f92ca3d917bb5860f0fb3c958bf0170abf4ba87c3466d5b8e4fe4d7",
            "file": "src/app/interface/ICartItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICartItem {\r\n    productId: number;\r\n    productTitle: string;\r\n    price: number;\r\n    quantity: number;\r\n    sizeId?: number; // Add sizeId property\r\n}\r\n",
            "properties": [
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "productTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICartViewModel",
            "id": "interface-ICartViewModel-b5236091ef479038f145fe520f67782cf886c277388e27b07a7df340913400c42e00646e6c9f9d7595114dbe389eefe3c7eab5c0b762e2e42cbacc0116a13fcf",
            "file": "src/app/interface/ICartViewModel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpProduct } from \"./IDpProduct\";\r\nimport { ICartItem } from \"./ICartItem\";\r\n\r\n// CartViewModel.ts\r\n\r\nexport interface ICartViewModel {\r\n    cartItems: ICartItem[];\r\n    products: IDpProduct[];\r\n}\r\n",
            "properties": [
                {
                    "name": "cartItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ICartItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProduct[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICreateDpImageRequest",
            "id": "interface-ICreateDpImageRequest-7c9811e0eeb3a58e9045eb0c5998106a1debf539be83b5de32e906b5806dcd9f54f72cd819dc5f5c8173d0e0b0f0761943280d9e5c6a79f7a4da65048befcd17",
            "file": "src/app/interface/ICreateDpImageRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ICreateDpImageRequest {\r\n    dpProductId: number;\r\n    dpImageTitle: string;\r\n    file: File;\r\n}\r\n",
            "properties": [
                {
                    "name": "dpImageTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dpProductId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpCategory",
            "id": "interface-IDpCategory-584246b54f39bf43f0789c6526376cc30ba3ef0f573f662e44b0e16feeb36851e593b7ae39a165f637fe44354240431a1fbf1f7d5fd46f6c31c1e93e9ea8520c",
            "file": "src/app/interface/IDpCategory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpSize } from \"./IDpSize\";\r\nimport { IDpProduct } from \"./IDpProduct\";\r\n\r\n// DpCategory.ts\r\n\r\nexport interface IDpCategory {\r\n    dpCategoryId: number;\r\n    dpCategoryTitle: string;\r\n    sizeId: number;\r\n    size: IDpSize;\r\n    dpProducts?: IDpProduct[];\r\n}\r\n",
            "properties": [
                {
                    "name": "dpCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dpCategoryTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpProducts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProduct[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpSize",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "sizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpImage",
            "id": "interface-IDpImage-3558c7ee97538657cda535687ae7c40254a64871e78a97421128b11c400b2e06cb655a3bcc1dbdef47efcb8363e7dae21a047cf6849f1760cbc36aaaf1310a00",
            "file": "src/app/interface/IDpImage.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpProduct } from \"./IDpProduct\";\r\n\r\n// DpImage.ts\r\n\r\nexport interface IDpImage {\r\n    dpImagesId: number;\r\n    dpProductId: number;\r\n    dpImageTitle: string;\r\n    imagesData?: Uint8Array;\r\n    dpProduct: IDpProduct;\r\n}\r\n",
            "properties": [
                {
                    "name": "dpImagesId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dpImageTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpProduct",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProduct",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dpProductId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imagesData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Uint8Array",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpOrder",
            "id": "interface-IDpOrder-8327cc598c73150ec7e34c03be67ec96c6fe04c84e75f237e0d896fbba018a7ce3c7ca3559d04a060c2b9a101928ca277b12523d050a34c28f8521f44477a93d",
            "file": "src/app/interface/IDpOrder.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpUser } from \"./IDpUser\";\r\n\r\n// DpOrder.ts\r\n\r\nexport interface IDpOrder {\r\n    dpOrderId: number;\r\n    dpUserId: number;\r\n    dpDateTimeOrder: Date;\r\n    dpTypeOrder?: string;\r\n    dpUser: IDpUser;\r\n}\r\n",
            "properties": [
                {
                    "name": "dpDateTimeOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpOrderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dpTypeOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dpUser",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpUser",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dpUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpOrderComposition",
            "id": "interface-IDpOrderComposition-15709f2713d605cdaabb6e91d242943f30cf9fbec4ec411f9afdfe4838ca23ee6e033c15fdbc2b5695ca7e3cddcb72c37f41b63e83dd447c71a7d7bde4676b69",
            "file": "src/app/interface/IDpOrderComposition.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpProductAttribute } from \"./IDpProductAttribute\";\r\nimport { IDpOrder } from \"./IDpOrder\";\r\n\r\n// DpOrderComposition.ts\r\n\r\nexport interface IDpOrderComposition {\r\n    dpOrderId: number;\r\n    dpAttributesId: number;\r\n    dpQuantity: number;\r\n    dpCost: number;\r\n    dpAttributes: IDpProductAttribute;\r\n    dpOrder: IDpOrder;\r\n}\r\n",
            "properties": [
                {
                    "name": "dpAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProductAttribute",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dpAttributesId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dpOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpOrder",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dpOrderId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dpQuantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpOrderDetail",
            "id": "interface-IDpOrderDetail-d5df64331d6e31e0c74d8bd4758ed2fc34cab87510acf85645854ef09bd4555157fb2b36c4685d595c077d6ae93940e44c917ec100c1b75febb91b5e2c68d9d3",
            "file": "src/app/interface/IDpOrderDetail.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDpOrderDetail {\r\n    productTitle?: string;\r\n    quantity: number;\r\n    sizeId?: number;\r\n    sizeName: string;\r\n    unitPrice: number;\r\n    totalPrice: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "productTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sizeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "unitPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpProduct",
            "id": "interface-IDpProduct-ffaf05ed8e048b6dcba7a1376055d9c8cc73e5708165234605f5bb8a41b5fec78566b79a55806ce4242f3d8cb943c6c133c46fd55353b6e7f2619c895843cd3b",
            "file": "src/app/interface/IDpProduct.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpProductAttribute } from \"./IDpProductAttribute\";\r\nimport { IDpCategory } from \"./IDpCategory\";\r\nimport { IDpImage } from \"./IDpImage\";\r\n\r\n// DpProduct.ts\r\n\r\nexport interface IDpProduct {\r\n    dpProductId: number;\r\n    dpPrice: number;\r\n    dpTitle: string;\r\n    dpDiscountPercent?: number;\r\n    dpDescription?: string;\r\n    dpCategoryId?: number;\r\n    dpPurchasePrice: number;\r\n    dpCategory?: IDpCategory;\r\n    dpImages?: IDpImage[];\r\n    dpProductAttributes?: IDpProductAttribute[];\r\n}\r\n",
            "properties": [
                {
                    "name": "dpCategory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpCategory",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "dpCategoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dpDescription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dpDiscountPercent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dpImages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpImage[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "dpPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dpProductAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProductAttribute[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dpProductId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpPurchasePrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "dpTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpProductAttribute",
            "id": "interface-IDpProductAttribute-2dca33095a4d2cf09301be38c00fb11f7fbba0191f17daab42f5e15614f88948ad8d1b89c4800740d3c436bf4b4c70ed39b64cdfac1421c78c5c937bd3595049",
            "file": "src/app/interface/IDpProductAttribute.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpSize } from \"./IDpSize\";\r\nimport { IDpProduct } from \"./IDpProduct\";\r\n\r\n// DpProductAttribute.ts\r\n\r\nexport interface IDpProductAttribute {\r\n    dpAttributesId: number;\r\n    dpProductId: number;\r\n    dpCount: number;\r\n    dpSize?: number;\r\n    dpProduct: IDpProduct;\r\n    dpSizeNavigation?: IDpSize;\r\n}\r\n",
            "properties": [
                {
                    "name": "dpAttributesId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dpCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dpProduct",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProduct",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dpProductId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dpSizeNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpSize",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpSize",
            "id": "interface-IDpSize-9e814fa1462ebc56c373fcf6bf0613df7662ea85870fd3d6fa67c9e7b3c06bc463fa94e108ce289fd2d9bb20665d38f13709d161651f74674fde24da5d348b32",
            "file": "src/app/interface/IDpSize.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpCategory } from \"./IDpCategory\";\r\nimport { IDpProductAttribute } from \"./IDpProductAttribute\";\r\n\r\n// DpSize.ts\r\n\r\nexport interface IDpSize {\r\n    sizeId: number;\r\n    size: string;\r\n    dpProductAttributes?: IDpProductAttribute[];\r\n    dpCategories?: IDpCategory[];\r\n}\r\n",
            "properties": [
                {
                    "name": "dpCategories",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpCategory[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dpProductAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProductAttribute[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "sizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpUser",
            "id": "interface-IDpUser-8c57c67716e43849aab2cb121bf175812b9cdf95b74cf72b107f88787cdef56e171f8e07af2a78eb3f323abd88e04e93a8eac3c5e852a101d62e8e77121750af",
            "file": "src/app/interface/IDpUser.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IDpOrder } from \"./IDpOrder\";\r\n\r\n// DpUser.ts\r\n\r\nexport interface IDpUser {\r\n    dpUserId: number;\r\n    dpUsername: string;\r\n    dpPassword: string;\r\n    dpEmail?: string;\r\n    dpFullName?: string;\r\n    dpRegistrationDate: Date;\r\n    dpPhoneNumber?: string;\r\n    dpOrders?: IDpOrder[];\r\n}\r\n",
            "properties": [
                {
                    "name": "dpEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dpFullName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "dpOrders",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpOrder[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "dpPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpPhoneNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dpRegistrationDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "dpUserId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dpUsername",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDpUserProj",
            "id": "interface-IDpUserProj-54120455f23e05d942b36344d70d5a15173f2bd8173f236f6fa40874069df4370353f1afdcb0bddd743707f3ff6c2c9c6c7c56daf7bdd6c8a2a8a4ab6fea3450",
            "file": "src/app/interface/IDpUserProj.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAchievement } from \"./IAchievement\";\r\n\r\nexport interface IDpUserProj {\r\n    dpUserProjId: number;\r\n    email?: string;\r\n    password: string;\r\n    login: string;\r\n    achievements?: IAchievement[];\r\n}\r\n",
            "properties": [
                {
                    "name": "achievements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAchievement[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dpUserProjId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRemoveFromCartRequest",
            "id": "interface-IRemoveFromCartRequest-b6655e53c7bbd4be41f56b05bb8f551ab25e0631635f81ba44fc197b3ae28edce6b54a24cea284e1cf5477fa86dcc2df440d2d23d198e2cc215517a3c15d37b4",
            "file": "src/app/interface/IRemoveFromCartRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IRemoveFromCartRequest {\r\n    productId: number;\r\n    sizeId?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUpdateCartRequest",
            "id": "interface-IUpdateCartRequest-f7f486853253275b5ea25f0b1e9e0c3cd35a02bb937bc8e58738e1fb0284d4d35a96d3032ba0b0577c6bbc895d8d5cec48a30d93051fa6d072172538928d5f62",
            "file": "src/app/interface/IUpdateCartRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUpdateCartRequest {\r\n    productId: number;\r\n    quantity: number;\r\n    sizeId?: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUpdateDpImageRequest",
            "id": "interface-IUpdateDpImageRequest-c8ca39a35fdf58b0cbd32235c67b292232bd533698f1e3c9240d88eace484efda97ab2328c7c6ea9caeb6889bce90a8e0a6fa005a16cfc28a3bee2fde6554145",
            "file": "src/app/interface/IUpdateDpImageRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IUpdateDpImageRequest {\r\n    dpProductId: number;\r\n    dpImageTitle: string;\r\n    file?: File;\r\n}\r\n",
            "properties": [
                {
                    "name": "dpImageTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "dpProductId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "file",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUserHasAchievement",
            "id": "interface-IUserHasAchievement-4f3d8167c51918164f74c4ba551e4d369761052ca9ca19ad292ac3c7489c01a882be56916eb7b9eafbee7a5c9b3d708bf6498ce36a5d14981deb255339391d64",
            "file": "src/app/interface/IUserHasAchievement.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAchievement } from './IAchievement';\r\nimport { IDpUserProj } from \"./IDpUserProj\";\r\n\r\n\r\nexport interface IUserHasAchievement {\r\n  dpUserProjId: number; // Внешний ключ на IDpUserProj\r\n  achievementId: number; // Внешний ключ на IAchievement\r\n  isObtained: boolean; // Флаг, указывающий, получено ли достижение\r\n  dpUserProj?: IDpUserProj; // Навигационное свойство к IDpUserProj\r\n  achievement?: IAchievement; // Навигационное свойство к IAchievement\r\n}\r\n",
            "properties": [
                {
                    "name": "achievement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAchievement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "achievementId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "dpUserProj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpUserProj",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "dpUserProjId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isObtained",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AchievementsRepositoryService",
            "id": "injectable-AchievementsRepositoryService-21e2af42199cec0d3a672530183e7fb37e653619970fb0f07e7c06591d5955e77442dd6ccf491ee4a13675b8792587cb166d50760f5655eb6d49e6f5fc4b01bc",
            "file": "src/app/repositories/achievements-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createAchievement",
                    "args": [
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAchievement>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAchievement",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAchievementById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAchievement>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllAchievements",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IAchievement[]>",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAchievement",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IAchievement } from '../interface/IAchievement';\r\nimport { AchievementsService } from '../services/achievements.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class AchievementsRepositoryService {\r\n  constructor(private achievementsService: AchievementsService) {}\r\n\r\n  getAllAchievements(): Observable<IAchievement[]> {\r\n    return this.achievementsService.getAllAchievements();\r\n  }\r\n\r\n  getAchievementById(id: number): Observable<IAchievement> {\r\n    return this.achievementsService.getAchievementById(id);\r\n  }\r\n\r\n  createAchievement(achievement: IAchievement): Observable<IAchievement> {\r\n    return this.achievementsService.createAchievement(achievement);\r\n  }\r\n\r\n  updateAchievement(id: number, achievement: IAchievement): Observable<void> {\r\n    return this.achievementsService.updateAchievement(id, achievement);\r\n  }\r\n\r\n  deleteAchievement(id: number): Observable<void> {\r\n    return this.achievementsService.deleteAchievement(id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "achievementsService",
                        "type": "AchievementsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "achievementsService",
                        "type": "AchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AchievementsService",
            "id": "injectable-AchievementsService-f0d83f53a81fcd5913c37f1aa8c878f7e43cf8f88a200638d78c056c4bc4827be6266e62ef1848904d9f3045f1d6de7e53ed262d6f79ba88c6cdb98bb5131f43",
            "file": "src/app/services/achievements.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/Achievements`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createAchievement",
                    "args": [
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAchievement>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteAchievement",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAchievementById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAchievement>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllAchievements",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IAchievement[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unlockAchievement",
                    "args": [
                        {
                            "name": "achievementTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "achievementTitle",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAchievement",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "achievement",
                            "type": "IAchievement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { IAchievement } from '../interface/IAchievement';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AchievementsService {\r\n  private baseUrl = `${window.location.origin}/api/Achievements`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllAchievements(): Observable<IAchievement[]> {\r\n    return this.http.get<IAchievement[]>(this.baseUrl);\r\n  }\r\n\r\n  getAchievementById(id: number): Observable<IAchievement> {\r\n    return this.http.get<IAchievement>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createAchievement(achievement: IAchievement): Observable<IAchievement> {\r\n    return this.http.post<IAchievement>(this.baseUrl, achievement);\r\n  }\r\n\r\n  updateAchievement(id: number, achievement: IAchievement): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, achievement);\r\n  }\r\n\r\n  deleteAchievement(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  // Новый метод для разблокировки ачивки\r\n  unlockAchievement(achievementTitle: string): void {\r\n    console.log(`Achievement unlocked: ${achievementTitle}`);\r\n    // Здесь вы можете добавить логику для обновления состояния ачивки на сервере или локально\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthProjRepositoryService",
            "id": "injectable-AuthProjRepositoryService-288c5365c4b0d0919e2c55f5ffb32c0231d4da2f0dd2caf9e19b580435b9202294e8cbb023b1707785c82058b1467e116b24d6c36b0b62a115925651687fb1fd",
            "file": "src/app/repositories/auth-proj-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpUserProj } from '../interface/IDpUserProj';\r\nimport { AuthProjService } from '../services/auth-proj.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthProjRepositoryService {\r\n  constructor(private authProjService: AuthProjService) {}\r\n\r\n  login(userProj: IDpUserProj): Observable<{ token: string, userProjId: number }> {\r\n    return this.authProjService.login(userProj);\r\n  }\r\n\r\n  register(userProj: IDpUserProj): Observable<{ token: string, userProjId: number }> {\r\n    return this.authProjService.register(userProj);\r\n  }\r\n\r\n  logout(): void {\r\n    this.authProjService.logout();\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authProjService",
                        "type": "AuthProjService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authProjService",
                        "type": "AuthProjService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthProjService",
            "id": "injectable-AuthProjService-19f43c1961f826b5438c43fb69eb4dd90cffa662f0a732859537d2e80f8b1e41083a82f3b375f37cf4f788898a0b889425f67def5676026285c35ff0a3ba907d",
            "file": "src/app/services/auth-proj.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/AuthProj`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAuthenticated$",
                    "defaultValue": "this.isAuthenticatedSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "isAuthenticatedSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkAuthStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAuthenticated",
                    "args": [
                        {
                            "name": "isAuthenticated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isAuthenticated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { IDpUserProj } from '../interface/IDpUserProj';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthProjService {\r\n  private baseUrl = `${window.location.origin}/api/AuthProj`;\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.checkAuthStatus();\r\n  }\r\n\r\n  login(userProj: IDpUserProj): Observable<{ token: string, userProjId: number }> {\r\n    const payload = {\r\n      login: userProj.login,\r\n      password: userProj.password,\r\n    };\r\n    return this.http.post<{ token: string, userProjId: number }>(`${this.baseUrl}/login`, payload).pipe(\r\n      tap(response => {\r\n        if (response.token) {\r\n          localStorage.setItem('projToken', response.token);\r\n          localStorage.setItem('userProjId', response.userProjId.toString());\r\n          this.setAuthenticated(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  register(userProj: IDpUserProj): Observable<{ token: string, userProjId: number }> {\r\n    const payload = {\r\n      login: userProj.login,\r\n      password: userProj.password\r\n    };\r\n    return this.http.post<{ token: string, userProjId: number }>(`${this.baseUrl}/register`, payload).pipe(\r\n      tap(response => {\r\n        if (response.token) {\r\n          localStorage.setItem('projToken', response.token);\r\n          localStorage.setItem('userProjId', response.userProjId.toString());\r\n          this.setAuthenticated(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  setAuthenticated(isAuthenticated: boolean): void {\r\n    this.isAuthenticatedSubject.next(isAuthenticated);\r\n  }\r\n\r\n  checkAuthStatus(): void {\r\n    const token = localStorage.getItem('projToken');\r\n    this.setAuthenticated(!!token);\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('projToken');\r\n        localStorage.removeItem('token');\r\n    localStorage.removeItem('userProjId');\r\n    this.setAuthenticated(false);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthRepositoryService",
            "id": "injectable-AuthRepositoryService-1f5816793c864b8ef1b8c04ba81d65aea650cb27676bfdcb68ab87a376784661a7603110c1c3d1052f153c9c3803c484517d82dc6a5a93cb457e169d525eaf88",
            "file": "src/app/repositories/auth-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpUser } from '../interface/IDpUser';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthRepositoryService {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  login(user: IDpUser): Observable<{ token: string, userProjId?: number, achievementId?: number }> {\r\n    return this.authService.login(user);\r\n  }\r\n\r\n  register(user: IDpUser): Observable<{ token: string, userProjId?: number, achievementId?: number }> {\r\n    return this.authService.register(user);\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-875642ab72d1c3598515a17e964a665aa63dd8c32c2ce9af10bc7f434621cf3d1129c8c394392758cf1b1dbbfb6b41b39f1bd62886a8e2aa54b38f81cc21d7db",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/Auth`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAuthenticated$",
                    "defaultValue": "this.isAuthenticatedSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isAuthenticatedSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAuthenticated",
                    "args": [
                        {
                            "name": "isAuthenticated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isAuthenticated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { IDpUser } from '../interface/IDpUser';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private baseUrl = `${window.location.origin}/api/Auth`;\r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  setAuthenticated(isAuthenticated: boolean): void {\r\n    this.isAuthenticatedSubject.next(isAuthenticated);\r\n  }\r\n\r\n  register(user: IDpUser): Observable<{ token: string, userProjId?: number, achievementId?: number }> {\r\n    const payload = {\r\n      username: user.dpUsername,\r\n      password: user.dpPassword,\r\n      phoneNumber: user.dpPhoneNumber || '0000000000'\r\n    };\r\n    return this.http.post<{ token: string, userProjId?: number, achievementId?: number }>(`${this.baseUrl}/register`, payload).pipe(\r\n      tap(response => {\r\n        if (response.token) {\r\n          localStorage.setItem('token', response.token);\r\n          this.setAuthenticated(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  login(user: IDpUser): Observable<{ token: string, userProjId?: number, achievementId?: number }> {\r\n    const payload = {\r\n      username: user.dpUsername,\r\n      password: user.dpPassword,\r\n      phoneNumber: user.dpPhoneNumber || '0000000000'\r\n    };\r\n    return this.http.post<{ token: string, userProjId?: number, achievementId?: number }>(`${this.baseUrl}/login`, payload).pipe(\r\n      tap(response => {\r\n        if (response.token) {\r\n          localStorage.setItem('token', response.token);\r\n          this.setAuthenticated(true);\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    this.setAuthenticated(false);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CategoriesRepositoryService",
            "id": "injectable-CategoriesRepositoryService-a15a7d144e6f97de5d503cd9637e0eaaf3c2bdb6804e98dfb2db5d993b4d4234258f6a0247cec812e8a990c1fd28449c25e534a8de367d9d5f739c33a181ce74",
            "file": "src/app/repositories/categories-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDpCategory",
                    "args": [
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpCategory>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpCategory[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpCategoryById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpCategory>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpCategory } from '../interface/IDpCategory';\r\nimport { DpCategoriesService } from '../services/dp-categories.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CategoriesRepositoryService {\r\n  constructor(private dpCategoriesService: DpCategoriesService) {}\r\n\r\n  getAllDpCategories(): Observable<IDpCategory[]> {\r\n    return this.dpCategoriesService.getAllDpCategories();\r\n  }\r\n\r\n  getDpCategoryById(id: number): Observable<IDpCategory> {\r\n    return this.dpCategoriesService.getDpCategoryById(id);\r\n  }\r\n\r\n  createDpCategory(dpCategory: IDpCategory): Observable<IDpCategory> {\r\n    return this.dpCategoriesService.createDpCategory(dpCategory);\r\n  }\r\n\r\n  updateDpCategory(id: number, dpCategory: IDpCategory): Observable<void> {\r\n    return this.dpCategoriesService.updateDpCategory(id, dpCategory);\r\n  }\r\n\r\n  deleteDpCategory(id: number): Observable<void> {\r\n    return this.dpCategoriesService.deleteDpCategory(id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpCategoriesService",
                        "type": "DpCategoriesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dpCategoriesService",
                        "type": "DpCategoriesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-3a91a80cc01acf2e9c85f2a997f0e6e7918c6b04876b38c660a697ee361d0795ed74567de7c466a94adf16ee1682bfd278ee9a5a07870712a48f536ded09d0f4",
            "file": "src/app/services/config.service.ts",
            "properties": [
                {
                    "name": "achievementIds",
                    "defaultValue": "{\r\n    loginSuccess: 1,             // Успешный вход\r\n    registerSuccess: 2,          // Успешная регистрация\r\n    addToCartSuccess: 3,         // Добавление в корзину\r\n    checkoutSuccess: 4,          // Оформление заказа\r\n    viewProductSuccess: 5,       // Просмотр продукта\r\n    createProductSuccess: 6,     // Создание продукта\r\n    updateProfileSuccess: 7,     // Обновление профиля\r\n    addImageSuccess: 8,          // Добавление изображения\r\n    addCategorySuccess: 9,       // Добавление категории\r\n    switchToLightThemeSuccess: 10, // Светлая тема\r\n    switchToDarkThemeSuccess: 11, // Тёмная тема\r\n    removeFromCartSuccess: 12,   // Удаление из корзины\r\n    updateCartQuantitySuccess: 13, // Обновление количества\r\n    loadProductsSuccess: 14,     // Загрузка продуктов\r\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\r\n    navigateToProductSuccess: 16, // Навигация к продукту\r\n    toggleThemeSuccess: 17,      // Переключение темы\r\n    resetThemeSuccess: 18,       // Сброс темы\r\n    openProductDialogSuccess: 19, // Открытие диалога продукта\r\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\r\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\r\n    logoutProjSuccess: 22,       // Выход из системы\r\n    updateCategorySuccess: 23,   // Обновление категории\r\n    updateImageSuccess: 24,      // Обновление изображения\r\n    updateProductSuccess: 25,    // Обновление продукта\r\n    // Отрицательные тест-кейсы\r\n    loginFailed: 26,             // Ошибка входа\r\n    registerFailed: 27,          // Ошибка регистрации\r\n    addToCartFailed: 28,         // Ошибка добавления в корзину\r\n    checkoutFailed: 29,          // Ошибка оформления заказа\r\n    viewProductFailed: 30,       // Ошибка просмотра продукта\r\n    createProductFailed: 31,     // Ошибка создания продукта\r\n    updateProfileFailed: 32,     // Ошибка обновления профиля\r\n    addImageFailed: 33,          // Ошибка добавления изображения\r\n    addCategoryFailed: 34,       // Ошибка добавления категории\r\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\r\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\r\n    failedToLoad: 37,            // Ошибка загрузки\r\n    buttonNotWorking: 38,        // Ошибка кнопки\r\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\r\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\r\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\r\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\r\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\r\n    logoutProjFailed: 44,        // Ошибка выхода\r\n    updateCategoryFailed: 45,    // Ошибка обновления категории\r\n    updateImageFailed: 46,       // Ошибка обновления изображения\r\n    updateProductFailed: 47,     // Ошибка обновления продукта\r\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "apiEndpoints",
                    "defaultValue": "{\r\n    login: '/api/login',\r\n    register: '/api/register',\r\n    addToCart: '/api/cart/add',\r\n    checkout: '/api/checkout',\r\n    viewProduct: '/api/products',\r\n    createProduct: '/api/products/create',\r\n    updateProfile: '/api/profile/update',\r\n    addImage: '/api/products/add-image',\r\n    addCategory: '/api/categories/add',\r\n    switchTheme: '/api/settings/switch-theme',\r\n    removeFromCart: '/api/cart/remove',\r\n    updateCartQuantity: '/api/cart/update',\r\n    loadProducts: '/api/products/all',\r\n    loadProductInfo: '/api/products/info',\r\n    toggleTheme: '/api/settings/toggle-theme',\r\n    resetTheme: '/api/settings/reset-theme',\r\n    logoutProj: '/api/auth/logout-proj'\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "httpStatusCodes",
                    "defaultValue": "{\r\n    // 2xx: Успешные\r\n    success: 200,          // Успешный запрос\r\n    created: 201,          // Ресурс создан\r\n    noContent: 204,        // Успешно, но нет содержимого\r\n\r\n    // 3xx: Перенаправления\r\n    movedPermanently: 301, // Ресурс перемещён навсегда\r\n    found: 302,            // Ресурс временно перемещён\r\n\r\n    // 4xx: Ошибки клиента\r\n    badRequest: 400,       // Неверный запрос\r\n    unauthorized: 401,     // Неавторизован\r\n    forbidden: 403,        // Доступ запрещён\r\n    notFound: 404,         // Ресурс не найден\r\n    conflict: 409,         // Конфликт (например, дубликат)\r\n\r\n    // 5xx: Ошибки сервера\r\n    serverError: 500,      // Внутренняя ошибка сервера\r\n    serviceUnavailable: 503 // Сервис недоступен\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfigService {\r\n  readonly achievementIds = {\r\n    loginSuccess: 1,             // Успешный вход\r\n    registerSuccess: 2,          // Успешная регистрация\r\n    addToCartSuccess: 3,         // Добавление в корзину\r\n    checkoutSuccess: 4,          // Оформление заказа\r\n    viewProductSuccess: 5,       // Просмотр продукта\r\n    createProductSuccess: 6,     // Создание продукта\r\n    updateProfileSuccess: 7,     // Обновление профиля\r\n    addImageSuccess: 8,          // Добавление изображения\r\n    addCategorySuccess: 9,       // Добавление категории\r\n    switchToLightThemeSuccess: 10, // Светлая тема\r\n    switchToDarkThemeSuccess: 11, // Тёмная тема\r\n    removeFromCartSuccess: 12,   // Удаление из корзины\r\n    updateCartQuantitySuccess: 13, // Обновление количества\r\n    loadProductsSuccess: 14,     // Загрузка продуктов\r\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\r\n    navigateToProductSuccess: 16, // Навигация к продукту\r\n    toggleThemeSuccess: 17,      // Переключение темы\r\n    resetThemeSuccess: 18,       // Сброс темы\r\n    openProductDialogSuccess: 19, // Открытие диалога продукта\r\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\r\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\r\n    logoutProjSuccess: 22,       // Выход из системы\r\n    updateCategorySuccess: 23,   // Обновление категории\r\n    updateImageSuccess: 24,      // Обновление изображения\r\n    updateProductSuccess: 25,    // Обновление продукта\r\n    // Отрицательные тест-кейсы\r\n    loginFailed: 26,             // Ошибка входа\r\n    registerFailed: 27,          // Ошибка регистрации\r\n    addToCartFailed: 28,         // Ошибка добавления в корзину\r\n    checkoutFailed: 29,          // Ошибка оформления заказа\r\n    viewProductFailed: 30,       // Ошибка просмотра продукта\r\n    createProductFailed: 31,     // Ошибка создания продукта\r\n    updateProfileFailed: 32,     // Ошибка обновления профиля\r\n    addImageFailed: 33,          // Ошибка добавления изображения\r\n    addCategoryFailed: 34,       // Ошибка добавления категории\r\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\r\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\r\n    failedToLoad: 37,            // Ошибка загрузки\r\n    buttonNotWorking: 38,        // Ошибка кнопки\r\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\r\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\r\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\r\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\r\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\r\n    logoutProjFailed: 44,        // Ошибка выхода\r\n    updateCategoryFailed: 45,    // Ошибка обновления категории\r\n    updateImageFailed: 46,       // Ошибка обновления изображения\r\n    updateProductFailed: 47,     // Ошибка обновления продукта\r\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\r\n  };\r\n\r\n  readonly apiEndpoints = {\r\n    login: '/api/login',\r\n    register: '/api/register',\r\n    addToCart: '/api/cart/add',\r\n    checkout: '/api/checkout',\r\n    viewProduct: '/api/products',\r\n    createProduct: '/api/products/create',\r\n    updateProfile: '/api/profile/update',\r\n    addImage: '/api/products/add-image',\r\n    addCategory: '/api/categories/add',\r\n    switchTheme: '/api/settings/switch-theme',\r\n    removeFromCart: '/api/cart/remove',\r\n    updateCartQuantity: '/api/cart/update',\r\n    loadProducts: '/api/products/all',\r\n    loadProductInfo: '/api/products/info',\r\n    toggleTheme: '/api/settings/toggle-theme',\r\n    resetTheme: '/api/settings/reset-theme',\r\n    logoutProj: '/api/auth/logout-proj'\r\n  };\r\n\r\n  readonly httpStatusCodes = {\r\n    // 2xx: Успешные\r\n    success: 200,          // Успешный запрос\r\n    created: 201,          // Ресурс создан\r\n    noContent: 204,        // Успешно, но нет содержимого\r\n\r\n    // 3xx: Перенаправления\r\n    movedPermanently: 301, // Ресурс перемещён навсегда\r\n    found: 302,            // Ресурс временно перемещён\r\n\r\n    // 4xx: Ошибки клиента\r\n    badRequest: 400,       // Неверный запрос\r\n    unauthorized: 401,     // Неавторизован\r\n    forbidden: 403,        // Доступ запрещён\r\n    notFound: 404,         // Ресурс не найден\r\n    conflict: 409,         // Конфликт (например, дубликат)\r\n\r\n    // 5xx: Ошибки сервера\r\n    serverError: 500,      // Внутренняя ошибка сервера\r\n    serviceUnavailable: 503 // Сервис недоступен\r\n  };\r\n}",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpCategoriesService",
            "id": "injectable-DpCategoriesService-66bd6f649fe9b4bdea16ea41214d787c993c59dc191f3730286400947f4a785afa95b2ed3088a7ee0a5c622b70091f15e6ca726c92d6548f15bbb0df556d533f",
            "file": "src/app/services/dp-categories.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpCategories`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpCategory",
                    "args": [
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpCategory>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpCategory[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpCategoryById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpCategory>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpCategory",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpCategory } from '../interface/IDpCategory';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class DpCategoriesService {\r\n  private baseUrl = `${window.location.origin}/api/DpCategories`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllDpCategories(): Observable<IDpCategory[]> {\r\n    return this.http.get<IDpCategory[]>(this.baseUrl);\r\n  }\r\n\r\n  getDpCategoryById(id: number): Observable<IDpCategory> {\r\n    return this.http.get<IDpCategory>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createDpCategory(dpCategory: IDpCategory): Observable<IDpCategory> {\r\n    return this.http.post<IDpCategory>(this.baseUrl, dpCategory);\r\n  }\r\n\r\n  updateDpCategory(id: number, dpCategory: IDpCategory): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, dpCategory);\r\n  }\r\n\r\n  deleteDpCategory(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpImagesService",
            "id": "injectable-DpImagesService-01ab332dd9e01e7319be72c5f6c87b8c3e58ffa9898b2f483b66546d8d2748b5042208641da5d85e7ef7f4d00cd0958c32648d409b5f560e2782cee65fff90ee",
            "file": "src/app/services/dp-images.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpImages`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpImage",
                    "args": [
                        {
                            "name": "request",
                            "type": "ICreateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpImage>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ICreateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpImages",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpImage[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpImageById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpImage>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDpImageData",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDpImagesByProductId",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpImage[]>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "IUpdateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "IUpdateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpImage } from '../interface/IDpImage';\r\nimport { ICreateDpImageRequest } from '../interface/ICreateDpImageRequest';\r\nimport { IUpdateDpImageRequest } from '../interface/IUpdateDpImageRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DpImagesService {\r\n  private baseUrl = `${window.location.origin}/api/DpImages`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n getAllDpImages(): Observable<IDpImage[]> {\r\n    console.log('[DpImagesService] HTTP GET всех изображений');\r\n    return this.http.get<IDpImage[]>(this.baseUrl);\r\n}\r\n\r\ngetDpImagesByProductId(productId: number): Observable<IDpImage[]> {\r\n    console.log(`[DpImagesService] HTTP GET изображений для товара ${productId}`);\r\n    return this.http.get<IDpImage[]>(`${this.baseUrl}/ByProduct/${productId}`);\r\n}\r\n\r\n  getDpImageById(id: number): Observable<IDpImage> {\r\n    return this.http.get<IDpImage>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  getDpImageData(id: number): Observable<Blob> {\r\n    return this.http.get(`${this.baseUrl}/${id}/image`, { responseType: 'blob' });\r\n  }\r\n\r\n  createDpImage(request: ICreateDpImageRequest): Observable<IDpImage> {\r\n    const formData = new FormData();\r\n    formData.append('DpProductId', request.dpProductId.toString());\r\n    formData.append('DpImageTitle', request.dpImageTitle);\r\n    formData.append('File', request.file);\r\n\r\n    return this.http.post<IDpImage>(this.baseUrl, formData);\r\n  }\r\n\r\n  updateDpImage(id: number, request: IUpdateDpImageRequest): Observable<void> {\r\n    const formData = new FormData();\r\n    formData.append('DpProductId', request.dpProductId.toString());\r\n    formData.append('DpImageTitle', request.dpImageTitle);\r\n    if (request.file) {\r\n      formData.append('File', request.file);\r\n    }\r\n\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, formData);\r\n  }\r\n\r\n  deleteDpImage(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpOrderCompositionsService",
            "id": "injectable-DpOrderCompositionsService-914efba6f736d3182711171358dc6667103257450dc18d74f5b6960acbca0ee7565f118f653197c5cb03b959ba4f40bfbd92658d82e46c33bc8cdb759986ba28",
            "file": "src/app/services/dp-order-compositions.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpOrderCompositions`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpOrderComposition",
                    "args": [
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrderComposition>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpOrderComposition",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpOrderCompositions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpOrderComposition[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpOrderCompositionById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrderComposition>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpOrderComposition",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpOrderComposition } from '../interface/IDpOrderComposition';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DpOrderCompositionsService {\r\n  private baseUrl = `${window.location.origin}/api/DpOrderCompositions`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllDpOrderCompositions(): Observable<IDpOrderComposition[]> {\r\n    return this.http.get<IDpOrderComposition[]>(this.baseUrl);\r\n  }\r\n\r\n  getDpOrderCompositionById(id: number): Observable<IDpOrderComposition> {\r\n    return this.http.get<IDpOrderComposition>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createDpOrderComposition(dpOrderComposition: IDpOrderComposition): Observable<IDpOrderComposition> {\r\n    return this.http.post<IDpOrderComposition>(this.baseUrl, dpOrderComposition);\r\n  }\r\n\r\n  updateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, dpOrderComposition);\r\n  }\r\n\r\n  deleteDpOrderComposition(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpOrdersService",
            "id": "injectable-DpOrdersService-255fd1fefed4d56eb363576acc1044733722e115ae3428a8cf909d7ff7b54adc30f55f0b3d65feacd42f0f31a6af071662bb64651e9b95d47fcbb7f805e7e12f",
            "file": "src/app/services/dp-orders.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpOrders`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpOrder",
                    "args": [
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrder>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpOrder",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpOrders",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpOrder[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpOrderById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrder>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpOrder",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpOrder } from '../interface/IDpOrder';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DpOrdersService {\r\n  private baseUrl = `${window.location.origin}/api/DpOrders`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllDpOrders(): Observable<IDpOrder[]> {\r\n    return this.http.get<IDpOrder[]>(this.baseUrl);\r\n  }\r\n\r\n  getDpOrderById(id: number): Observable<IDpOrder> {\r\n    return this.http.get<IDpOrder>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createDpOrder(dpOrder: IDpOrder): Observable<IDpOrder> {\r\n    return this.http.post<IDpOrder>(this.baseUrl, dpOrder);\r\n  }\r\n\r\n  updateDpOrder(id: number, dpOrder: IDpOrder): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, dpOrder);\r\n  }\r\n\r\n  deleteDpOrder(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpProductAttributesService",
            "id": "injectable-DpProductAttributesService-ab3b0492a4cea4f9109bdf25c86b344a8b3567217cd34f29b01c05bd2a82cd37d045a07e6b16beba1675f014a6ef33f3c643c3a0ba70306126b343a3ac36a9a6",
            "file": "src/app/services/dp-product-attributes.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpProductAttributes`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpProductAttribute",
                    "args": [
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProductAttribute>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpProductAttribute",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpProductAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpProductAttribute[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpProductAttributeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProductAttribute>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpProductAttribute",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpProductAttribute } from '../interface/IDpProductAttribute';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class DpProductAttributesService {\r\n  private baseUrl = `${window.location.origin}/api/DpProductAttributes`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllDpProductAttributes(): Observable<IDpProductAttribute[]> {\r\n    return this.http.get<IDpProductAttribute[]>(this.baseUrl);\r\n  }\r\n\r\n  getDpProductAttributeById(id: number): Observable<IDpProductAttribute> {\r\n    return this.http.get<IDpProductAttribute>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createDpProductAttribute(dpProductAttribute: IDpProductAttribute): Observable<IDpProductAttribute> {\r\n    return this.http.post<IDpProductAttribute>(this.baseUrl, dpProductAttribute);\r\n  }\r\n\r\n  updateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, dpProductAttribute);\r\n  }\r\n\r\n  deleteDpProductAttribute(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpSizesService",
            "id": "injectable-DpSizesService-07fc1067233a1731f55ae41fbceb4279336ac96f4e0cad161177bc2a4d4ba34a5023f39107c8dfa0165593aca89b267dbe69dd0001ac416773733e604d64ff6f",
            "file": "src/app/services/dp-sizes.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpSizes`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpSize",
                    "args": [
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpSize>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpSize",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpSizes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpSize[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpSizeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpSize>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpSize",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpSize } from '../interface/IDpSize';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class DpSizesService {\r\n  private baseUrl = `${window.location.origin}/api/DpSizes`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllDpSizes(): Observable<IDpSize[]> {\r\n    return this.http.get<IDpSize[]>(this.baseUrl);\r\n  }\r\n\r\n  getDpSizeById(id: number): Observable<IDpSize> {\r\n    return this.http.get<IDpSize>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createDpSize(dpSize: IDpSize): Observable<IDpSize> {\r\n    return this.http.post<IDpSize>(this.baseUrl, dpSize);\r\n  }\r\n\r\n  updateDpSize(id: number, dpSize: IDpSize): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, dpSize);\r\n  }\r\n\r\n  deleteDpSize(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpUserProjsService",
            "id": "injectable-DpUserProjsService-4594b617df4ac9f33a6b77a2778213f2add9655555a770c21effc3af3fd06e6a39d6f9f81aabe2fd9fbd5ae648e9cafe739ff7cc0671a32523e35ad5d32c2508",
            "file": "src/app/services/dp-user-projs.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpUserProjs`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpUserProj",
                    "args": [
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUserProj>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpUserProj",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpUserProjs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpUserProj[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpUserProjById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUserProj>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpUserProj",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpUserProj } from '../interface/IDpUserProj';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class DpUserProjsService {\r\n  private baseUrl = `${window.location.origin}/api/DpUserProjs`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllDpUserProjs(): Observable<IDpUserProj[]> {\r\n    return this.http.get<IDpUserProj[]>(this.baseUrl);\r\n  }\r\n\r\n  getDpUserProjById(id: number): Observable<IDpUserProj> {\r\n    return this.http.get<IDpUserProj>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createDpUserProj(dpUserProj: IDpUserProj): Observable<IDpUserProj> {\r\n    return this.http.post<IDpUserProj>(this.baseUrl, dpUserProj);\r\n  }\r\n\r\n  updateDpUserProj(id: number, dpUserProj: IDpUserProj): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, dpUserProj);\r\n  }\r\n\r\n  deleteDpUserProj(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "DpUsersService",
            "id": "injectable-DpUsersService-4bd67d371b0fdac7d15c94c1a0acb22e2dd8ea71d93139d5b1a0a9f50aa8e13a243ea64c3a8fa4e4a5a8c4f4da2bc3e3e1dc1ca284ea3f1b016c45d0f1b6db0c",
            "file": "src/app/services/dp-users.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/DpUsers`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpUser",
                    "args": [
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUser>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpUser[]>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpUserById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUser>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpUser } from '../interface/IDpUser';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DpUsersService {\r\n  private baseUrl = `${window.location.origin}/api/DpUsers`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllDpUsers(): Observable<IDpUser[]> {\r\n    return this.http.get<IDpUser[]>(this.baseUrl);\r\n  }\r\n\r\n  getDpUserById(id: number): Observable<IDpUser> {\r\n    return this.http.get<IDpUser>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createDpUser(dpUser: IDpUser): Observable<IDpUser> {\r\n    return this.http.post<IDpUser>(this.baseUrl, dpUser);\r\n  }\r\n\r\n  updateDpUser(id: number, dpUser: IDpUser): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, dpUser);\r\n  }\r\n\r\n  deleteDpUser(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ImagesRepositoryService",
            "id": "injectable-ImagesRepositoryService-3a53787788e941257185ca05c4ab8a1e7cd41883d2304d6f3714c94b08235959ff973176d92256d7eec2e6431ce21a9bd000dfc410e03470fe2cd3341ef6ed93",
            "file": "src/app/repositories/images-repository.service.ts",
            "properties": [
                {
                    "name": "imagesDataCache",
                    "defaultValue": "new Map()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | Observable<Blob>>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "imagesListCache$",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDpImage[]> | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createDpImage",
                    "args": [
                        {
                            "name": "request",
                            "type": "ICreateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpImage>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ICreateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpImages",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpImage[]>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getAllDpImagesWithData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpImage[]>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpImageById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpImage>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDpImageData",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDpImagesByProductId",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpImage[]>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpImage",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "IUpdateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "IUpdateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, shareReplay, tap, map, switchMap, forkJoin, of } from 'rxjs';\r\nimport { ICreateDpImageRequest } from '../interface/ICreateDpImageRequest';\r\nimport { IDpImage } from '../interface/IDpImage';\r\nimport { IUpdateDpImageRequest } from '../interface/IUpdateDpImageRequest';\r\nimport { DpImagesService } from '../services/dp-images.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ImagesRepositoryService {\r\n  private imagesListCache$: Observable<IDpImage[]> | null = null;\r\n  private imagesDataCache: Map<number, Observable<Blob>> = new Map();\r\n\r\n  constructor(private dpImagesService: DpImagesService) {}\r\n\r\n getAllDpImages(): Observable<IDpImage[]> {\r\n    if (!this.imagesListCache$) {\r\n      this.imagesListCache$ = this.dpImagesService.getAllDpImages().pipe(\r\n        shareReplay(1)\r\n      );\r\n    }\r\n    return this.imagesListCache$;\r\n  }\r\n\r\ngetAllDpImagesWithData(): Observable<IDpImage[]> {\r\n    return this.getAllDpImages().pipe(\r\n      switchMap((images: IDpImage[]) => {\r\n        if (!images.length) {\r\n          return of([] as IDpImage[]);\r\n        }\r\n        const requests: Observable<{ image: IDpImage; blob: Blob }>[] = images.map(image =>\r\n          this.getDpImageData(image.dpImagesId).pipe(\r\n            map(blob => ({ image, blob }))\r\n          )\r\n        );\r\n        return forkJoin(requests).pipe(\r\n          map((results: { image: IDpImage; blob: Blob }[]) =>\r\n            results.map(({ image }) => ({\r\n              ...image,\r\n              blob: undefined as Blob | undefined // Явно указываем тип\r\n            } as IDpImage)) // Приводим к IDpImage\r\n          )\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  getDpImagesByProductId(productId: number): Observable<IDpImage[]> {\r\n    return this.getAllDpImages().pipe(\r\n      map(images => images.filter(img => img.dpProductId === productId))\r\n    );\r\n  }\r\n\r\n  getDpImageById(id: number): Observable<IDpImage> {\r\n    return this.dpImagesService.getDpImageById(id);\r\n  }\r\n\r\n  getDpImageData(id: number): Observable<Blob> {\r\n    const cached = this.imagesDataCache.get(id);\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n    const image$ = this.dpImagesService.getDpImageData(id).pipe(\r\n      shareReplay(1)\r\n    );\r\n    this.imagesDataCache.set(id, image$);\r\n    return image$;\r\n  }\r\n\r\n  createDpImage(request: ICreateDpImageRequest): Observable<IDpImage> {\r\n    return this.dpImagesService.createDpImage(request).pipe(\r\n      tap(() => {\r\n        this.imagesListCache$ = null;\r\n        this.imagesDataCache.clear();\r\n      })\r\n    );\r\n  }\r\n\r\n  updateDpImage(id: number, request: IUpdateDpImageRequest): Observable<void> {\r\n    return this.dpImagesService.updateDpImage(id, request).pipe(\r\n      tap(() => {\r\n        this.imagesListCache$ = null;\r\n        this.imagesDataCache.delete(id);\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteDpImage(id: number): Observable<void> {\r\n    return this.dpImagesService.deleteDpImage(id).pipe(\r\n      tap(() => {\r\n        this.imagesListCache$ = null;\r\n        this.imagesDataCache.delete(id);\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpImagesService",
                        "type": "DpImagesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dpImagesService",
                        "type": "DpImagesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderCompositionsRepositoryService",
            "id": "injectable-OrderCompositionsRepositoryService-7eebb96c614bb9924c421efc2bc4dbaf637668bac4799b281f6cadcd5b7efd8f1447b289c3bf5271def607e3e7d0d02b4a5f414c662ef724d9b42b9e2854256b",
            "file": "src/app/repositories/order-compositions-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDpOrderComposition",
                    "args": [
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrderComposition>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpOrderComposition",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpOrderCompositions",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpOrderComposition[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpOrderCompositionById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrderComposition>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpOrderComposition",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpOrderComposition",
                            "type": "IDpOrderComposition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpOrderComposition } from '../interface/IDpOrderComposition';\r\nimport { DpOrderCompositionsService } from '../services/dp-order-compositions.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderCompositionsRepositoryService {\r\n  constructor(private dpOrderCompositionsService: DpOrderCompositionsService) {}\r\n\r\n  getAllDpOrderCompositions(): Observable<IDpOrderComposition[]> {\r\n    return this.dpOrderCompositionsService.getAllDpOrderCompositions();\r\n  }\r\n\r\n  getDpOrderCompositionById(id: number): Observable<IDpOrderComposition> {\r\n    return this.dpOrderCompositionsService.getDpOrderCompositionById(id);\r\n  }\r\n\r\n  createDpOrderComposition(dpOrderComposition: IDpOrderComposition): Observable<IDpOrderComposition> {\r\n    return this.dpOrderCompositionsService.createDpOrderComposition(dpOrderComposition);\r\n  }\r\n\r\n  updateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition): Observable<void> {\r\n    return this.dpOrderCompositionsService.updateDpOrderComposition(id, dpOrderComposition);\r\n  }\r\n\r\n  deleteDpOrderComposition(id: number): Observable<void> {\r\n    return this.dpOrderCompositionsService.deleteDpOrderComposition(id);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpOrderCompositionsService",
                        "type": "DpOrderCompositionsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dpOrderCompositionsService",
                        "type": "DpOrderCompositionsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "OrderRepositoryService",
            "id": "injectable-OrderRepositoryService-086aa7b476916ab93c9367f6feda09c9ade97f5f3511b38a5eab697b3fe80c6931da43f4ff047c67841ecd5f8a693fe4512dfde3ab34200bad407c77ad490eaf",
            "file": "src/app/repositories/order-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDpOrder",
                    "args": [
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrder>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpOrder",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpOrders",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpOrder[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpOrderById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpOrder>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpOrder",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpOrder",
                            "type": "IDpOrder",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpOrder } from '../interface/IDpOrder';\r\nimport { DpOrdersService } from '../services/dp-orders.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderRepositoryService {\r\n  constructor(private dpOrdersService: DpOrdersService) {}\r\n\r\n  getAllDpOrders(): Observable<IDpOrder[]> {\r\n    return this.dpOrdersService.getAllDpOrders();\r\n  }\r\n\r\n  getDpOrderById(id: number): Observable<IDpOrder> {\r\n    return this.dpOrdersService.getDpOrderById(id);\r\n  }\r\n\r\n  createDpOrder(dpOrder: IDpOrder): Observable<IDpOrder> {\r\n    return this.dpOrdersService.createDpOrder(dpOrder);\r\n  }\r\n\r\n  updateDpOrder(id: number, dpOrder: IDpOrder): Observable<void> {\r\n    return this.dpOrdersService.updateDpOrder(id, dpOrder);\r\n  }\r\n\r\n  deleteDpOrder(id: number): Observable<void> {\r\n    return this.dpOrdersService.deleteDpOrder(id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpOrdersService",
                        "type": "DpOrdersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dpOrdersService",
                        "type": "DpOrdersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductAttributesRepositoryService",
            "id": "injectable-ProductAttributesRepositoryService-8062677f372c00bcf6589d867b49ec5fcfc1e1fd05dc843a6331b6a62049c26df221447887313f00b8c949a40c6733a3769b3c51705f0f877dde451711398c4a",
            "file": "src/app/repositories/product-attributes-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDpProductAttribute",
                    "args": [
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProductAttribute>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpProductAttribute",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpProductAttributes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpProductAttribute[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpProductAttributeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProductAttribute>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpProductAttribute",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpProductAttribute",
                            "type": "IDpProductAttribute",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpProductAttribute } from '../interface/IDpProductAttribute';\r\nimport { DpProductAttributesService } from '../services/dp-product-attributes.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductAttributesRepositoryService {\r\n  constructor(private dpProductAttributesService: DpProductAttributesService) {}\r\n\r\n  getAllDpProductAttributes(): Observable<IDpProductAttribute[]> {\r\n    return this.dpProductAttributesService.getAllDpProductAttributes();\r\n  }\r\n\r\n  getDpProductAttributeById(id: number): Observable<IDpProductAttribute> {\r\n    return this.dpProductAttributesService.getDpProductAttributeById(id);\r\n  }\r\n\r\n  createDpProductAttribute(dpProductAttribute: IDpProductAttribute): Observable<IDpProductAttribute> {\r\n    return this.dpProductAttributesService.createDpProductAttribute(dpProductAttribute);\r\n  }\r\n\r\n  updateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute): Observable<void> {\r\n    return this.dpProductAttributesService.updateDpProductAttribute(id, dpProductAttribute);\r\n  }\r\n\r\n  deleteDpProductAttribute(id: number): Observable<void> {\r\n    return this.dpProductAttributesService.deleteDpProductAttribute(id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpProductAttributesService",
                        "type": "DpProductAttributesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dpProductAttributesService",
                        "type": "DpProductAttributesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductsRepositoryService",
            "id": "injectable-ProductsRepositoryService-e6069d792117cf088d55f459135cd934e34475d7914a554f1d81b2b7b9c53eaaf09b6dbd328fe2afcc7087f95aa27f0d2160f67e7012b4d4f605b8287dbc8446",
            "file": "src/app/repositories/products-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProduct>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpProduct[]>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProduct>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { forkJoin, map, Observable, switchMap } from 'rxjs';\r\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\r\nimport { IDpProduct } from '../interface/IDpProduct';\r\nimport { ProductsService } from '../services/dp-products.service';\r\nimport { ImagesRepositoryService } from './images-repository.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductsRepositoryService {\r\n  constructor(private productsService: ProductsService,\r\n    private imagesRepository: ImagesRepositoryService\r\n  ) {}\r\n\r\ngetAllProducts(): Observable<IDpProduct[]> {\r\n    return forkJoin({\r\n      products: this.productsService.getAllProducts(),\r\n      images: this.imagesRepository.getAllDpImagesWithData() // Новый метод\r\n    }).pipe(\r\n      map(({ products, images }) => {\r\n        return products.map(product => ({\r\n          ...product,\r\n          dpImages: images.filter(image => image.dpProductId === product.dpProductId)\r\n        }));\r\n      })\r\n    );\r\n  }\r\n\r\n  // Остальные методы без изменений\r\ngetProductById(id: number): Observable<IDpProduct> {\r\n    return this.productsService.getProductById(id).pipe(\r\n      switchMap((product: IDpProduct) =>\r\n        this.imagesRepository.getDpImagesByProductId(product.dpProductId).pipe(\r\n          map(images => ({\r\n            ...product,\r\n            dpImages: images\r\n          }))\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  createProduct(product: IDpProduct): Observable<IDpProduct> {\r\n    return this.productsService.createProduct(product);\r\n  }\r\n\r\n  updateProduct(id: number, product: IDpProduct): Observable<void> {\r\n    return this.productsService.updateProduct(id, product);\r\n  }\r\n\r\n  deleteProduct(id: number): Observable<void> {\r\n    return this.productsService.deleteProduct(id);\r\n  }\r\n\r\n  addToCart(request: IAddToCartRequest): Observable<{ success: boolean; message: string }> {\r\n    return this.productsService.addToCart(request);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imagesRepository",
                        "type": "ImagesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "productsService",
                        "type": "ProductsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imagesRepository",
                        "type": "ImagesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductsService",
            "id": "injectable-ProductsService-242c3e69c6b3c3f2914fe6780f99bf4bd807b532fab6797325da5f6e65058b512f5b7e93bbb8d01e8e5f45b87f5f4def0dc776dfb18510555b65cbe9fd5ce4c0",
            "file": "src/app/services/dp-products.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/Products`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProduct>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpProduct[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpProduct>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpProduct } from '../interface/IDpProduct';\r\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductsService {\r\n  private baseUrl = `${window.location.origin}/api/Products`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllProducts(): Observable<IDpProduct[]> {\r\n    return this.http.get<IDpProduct[]>(this.baseUrl);\r\n  }\r\n\r\n  getProductById(id: number): Observable<IDpProduct> {\r\n    return this.http.get<IDpProduct>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  createProduct(product: IDpProduct): Observable<IDpProduct> {\r\n    return this.http.post<IDpProduct>(this.baseUrl, product);\r\n  }\r\n\r\n  updateProduct(id: number, product: IDpProduct): Observable<void> {\r\n    return this.http.put<void>(`${this.baseUrl}/${id}`, product);\r\n  }\r\n\r\n  deleteProduct(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  addToCart(request: IAddToCartRequest): Observable<{ success: boolean; message: string }> {\r\n    return this.http.post<{ success: boolean; message: string }>(`${this.baseUrl}/AddToCart`, request);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ShopCartRepositoryService",
            "id": "injectable-ShopCartRepositoryService-9873cf9a20cdfe3b040fd4f838360f9c04fd70e0c9743fdef874225b9de74784e6390abdf60c74c412fe3fc5fb48157702ef1cd97859280fb8aa4babdc392990",
            "file": "src/app/repositories/shop-cart-repository.service.ts",
            "properties": [
                {
                    "name": "cartKey",
                    "defaultValue": "'shopping_cart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportToExcel",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCart",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ICartViewModel>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCartQuantity",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sizeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sizeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFromCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IRemoveFromCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IRemoveFromCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IUpdateCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IUpdateCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { forkJoin, map, Observable, of } from 'rxjs';\r\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\r\nimport { ICartViewModel } from '../interface/ICartViewModel';\r\nimport { IRemoveFromCartRequest } from '../interface/IRemoveFromCartRequest';\r\nimport { IUpdateCartRequest } from '../interface/IUpdateCartRequest';\r\nimport { IDpProduct } from '../interface/IDpProduct';\r\nimport { ProductsRepositoryService } from './products-repository.service';\r\nimport { ShopCartService } from '../services/dp-shop-cart.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShopCartRepositoryService {\r\n  private cartKey = 'shopping_cart';\r\n\r\n  constructor(\r\n    private productsRepositoryService: ProductsRepositoryService,\r\n    private shopCartService: ShopCartService\r\n  ) { }\r\n\r\n  getCart(): Observable<ICartViewModel> {\r\n    try {\r\n      const cartItems = JSON.parse(localStorage.getItem(this.cartKey) || '[]');\r\n      console.log('cartItems from localStorage:', cartItems);\r\n      if (cartItems.length === 0) {\r\n        return of({ cartItems: [], products: [] });\r\n      }\r\n\r\n      const productObservables = cartItems.map((item: IAddToCartRequest) =>\r\n        this.productsRepositoryService.getProductById(item.productId)\r\n      );\r\n\r\n      return forkJoin(productObservables as Observable<IDpProduct>[]).pipe(\r\n        map((products: IDpProduct[]) => {\r\n          const cartItemsWithDetails = cartItems.map((item: IAddToCartRequest, index: number) => ({\r\n            productId: item.productId,\r\n            productTitle: products[index].dpTitle,\r\n            price: products[index].dpPrice,\r\n            quantity: item.quantity,\r\n          }));\r\n\r\n          return {\r\n            cartItems: cartItemsWithDetails,\r\n            products: products,\r\n          };\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error('Error retrieving cart items:', error);\r\n      return of({ cartItems: [], products: [] });\r\n    }\r\n  }\r\n\r\n  updateCart(request: IUpdateCartRequest): Observable<{ success: boolean; message: string }> {\r\n    let cart = JSON.parse(localStorage.getItem(this.cartKey) || '[]');\r\n    const itemIndex = cart.findIndex((item: IAddToCartRequest) =>\r\n      item.productId === request.productId && item.sizeId === request.sizeId\r\n    );\r\n\r\n    if (itemIndex !== -1) {\r\n      cart[itemIndex].quantity = request.quantity;\r\n      localStorage.setItem(this.cartKey, JSON.stringify(cart));\r\n      return of({ success: true, message: 'Корзина обновлена' });\r\n    } else {\r\n      return of({ success: false, message: 'Товар не найден в корзине' });\r\n    }\r\n  }\r\n\r\n  addToCart(request: IAddToCartRequest): Observable<{ success: boolean; message: string }> {\r\n    let cart = JSON.parse(localStorage.getItem(this.cartKey) || '[]');\r\n    const existingItem = cart.find((item: IAddToCartRequest) =>\r\n      item.productId === request.productId && item.sizeId === request.sizeId\r\n    );\r\n\r\n    if (existingItem) {\r\n      existingItem.quantity += request.quantity;\r\n    } else {\r\n      cart.push(request);\r\n    }\r\n\r\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\r\n    return of({ success: true, message: 'Товар добавлен в корзину' });\r\n  }\r\n\r\n  getCartQuantity(productId: number, sizeId?: number): Observable<{ currentQuantity: number }> {\r\n    const cart = JSON.parse(localStorage.getItem(this.cartKey) || '[]');\r\n    const item = cart.find((item: IAddToCartRequest) =>\r\n      item.productId === productId && item.sizeId === sizeId\r\n    );\r\n\r\n    const currentQuantity = item ? item.quantity : 0;\r\n    return of({ currentQuantity });\r\n  }\r\n\r\n  checkout(): Observable<{ orderId: number; orderDetails: any[] }> {\r\n    const cart = JSON.parse(localStorage.getItem(this.cartKey) || '[]');\r\n\r\n    if (cart.length === 0) {\r\n      return of({ orderId: 0, orderDetails: [] });\r\n    }\r\n\r\n    // Убедитесь, что данные корректны перед отправкой\r\n    const cartData = cart.map((item: IAddToCartRequest) => ({\r\n      productId: item.productId,\r\n      quantity: item.quantity,\r\n      sizeId: item.sizeId || null // Убедитесь, что sizeId может быть null\r\n    }));\r\n\r\n    // Отправьте данные на бэкенд\r\n    return this.shopCartService.checkout(cartData);\r\n  }\r\n\r\n  removeFromCart(request: IRemoveFromCartRequest): Observable<void> {\r\n    let cart = JSON.parse(localStorage.getItem(this.cartKey) || '[]');\r\n    cart = cart.filter((item: IAddToCartRequest) =>\r\n      !(item.productId === request.productId && item.sizeId === request.sizeId)\r\n    );\r\n\r\n    localStorage.setItem(this.cartKey, JSON.stringify(cart));\r\n    return of(undefined);\r\n  }\r\n\r\n  exportToExcel(orderId: number): Observable<Blob> {\r\n    return this.shopCartService.exportToExcel(orderId);\r\n  }\r\n\r\n  clearCart(): void {\r\n    localStorage.removeItem(this.cartKey);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsRepositoryService",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "shopCartService",
                        "type": "ShopCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "productsRepositoryService",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shopCartService",
                        "type": "ShopCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ShopCartService",
            "id": "injectable-ShopCartService-21d0fbe1f2e0d28ab5903d6879e8fc1bf981ad52bdb6547a09b7540f62144a46ef23b5c6bbda41304a20959b989c60c7652070e81c78afab06bac69ab316d1a5",
            "file": "src/app/services/dp-shop-cart.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "`${window.location.origin}/api/ShopCart`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IAddToCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkout",
                    "args": [
                        {
                            "name": "cart",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cart",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToExcel",
                    "args": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Blob>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "orderId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCart",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<ICartViewModel>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCartQuantity",
                    "args": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sizeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sizeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFromCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IRemoveFromCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IRemoveFromCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCart",
                    "args": [
                        {
                            "name": "request",
                            "type": "IUpdateCartRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "IUpdateCartRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ICartViewModel } from '../interface/ICartViewModel';\r\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\r\nimport { IUpdateCartRequest } from '../interface/IUpdateCartRequest';\r\nimport { IDpOrderDetail } from '../interface/IDpOrderDetail';\r\nimport { IRemoveFromCartRequest } from '../interface/IRemoveFromCartRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShopCartService {\r\n  private baseUrl = `${window.location.origin}/api/ShopCart`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getCart(): Observable<ICartViewModel> {\r\n    return this.http.get<ICartViewModel>(this.baseUrl);\r\n  }\r\n\r\n  updateCart(request: IUpdateCartRequest): Observable<{ success: boolean; message: string }> {\r\n    return this.http.post<{ success: boolean; message: string }>(`${this.baseUrl}/UpdateCart`, request);\r\n  }\r\n\r\n  addToCart(request: IAddToCartRequest): Observable<{ success: boolean; message: string }> {\r\n    return this.http.post<{ success: boolean; message: string }>(`${this.baseUrl}/AddToCart`, request);\r\n  }\r\n\r\n  getCartQuantity(productId: number, sizeId: number): Observable<{ currentQuantity: number }> {\r\n    return this.http.get<{ currentQuantity: number }>(`${this.baseUrl}/quantity?productId=${productId}&sizeId=${sizeId}`);\r\n  }\r\n\r\n  checkout(cart: any[]): Observable<{ orderId: number; orderDetails: IDpOrderDetail[] }> {\r\n    return this.http.post<{ orderId: number; orderDetails: IDpOrderDetail[] }>(`${this.baseUrl}/Checkout`, cart);\r\n  }\r\n\r\n  removeFromCart(request: IRemoveFromCartRequest): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/RemoveFromCart`, request);\r\n  }\r\n\r\n  exportToExcel(orderId: number): Observable<Blob> {\r\n    return this.http.post(`${this.baseUrl}/export?orderId=${orderId}`, {}, { responseType: 'blob' });\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SizesRepositoryService",
            "id": "injectable-SizesRepositoryService-3bed69268a26ea7a58de8d31afdd2b767900e0a657d5ea1183d40b3dbc5a52399b856015c7b302b0c9bb9b01774be766478151a825e7c46cac00121e66df1a6d",
            "file": "src/app/repositories/sizes-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDpSize",
                    "args": [
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpSize>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpSize",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpSizes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpSize[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpSizeById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpSize>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpSize",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpSize",
                            "type": "IDpSize",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpSize } from '../interface/IDpSize';\r\nimport { DpSizesService } from '../services/dp-sizes.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SizesRepositoryService {\r\n  constructor(private dpSizesService: DpSizesService) {}\r\n\r\n  getAllDpSizes(): Observable<IDpSize[]> {\r\n    return this.dpSizesService.getAllDpSizes();\r\n  }\r\n\r\n  getDpSizeById(id: number): Observable<IDpSize> {\r\n    return this.dpSizesService.getDpSizeById(id);\r\n  }\r\n\r\n  createDpSize(dpSize: IDpSize): Observable<IDpSize> {\r\n    return this.dpSizesService.createDpSize(dpSize);\r\n  }\r\n\r\n  updateDpSize(id: number, dpSize: IDpSize): Observable<void> {\r\n    return this.dpSizesService.updateDpSize(id, dpSize);\r\n  }\r\n\r\n  deleteDpSize(id: number): Observable<void> {\r\n    return this.dpSizesService.deleteDpSize(id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpSizesService",
                        "type": "DpSizesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dpSizesService",
                        "type": "DpSizesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserAchievementsRepositoryService",
            "id": "injectable-UserAchievementsRepositoryService-0359a802ae95ec21aadbb02efc54a08ef4b2ff3843f7f05cec8ab7ad7da877a4599603e9a672cc763db5aadcff1b2189b693bb8aeda0703727ffd75b941e8acc",
            "file": "src/app/repositories/user-achievements-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createUserAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserHasAchievement>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllUserAchievements",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IUserHasAchievement[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCompletedAchievementsByUsername",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAchievement[]>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserHasAchievement>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "successMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nУниверсальный метод для обработки достижения\n",
                    "description": "<p>Универсальный метод для обработки достижения</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1447,
                                "end": 1457,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "userProjId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1441,
                                "end": 1446,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор пользователя</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1498,
                                "end": 1511,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "achievementId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1492,
                                "end": 1497,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор достижения</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1550,
                                "end": 1564,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "successMessage"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1544,
                                "end": 1549,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Сообщение для уведомления</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1598,
                                "end": 1605,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable<void></p>\n"
                        }
                    ]
                },
                {
                    "name": "unlockUserAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IAchievement } from '../interface/IAchievement';\r\nimport { IUserHasAchievement } from '../interface/IUserHasAchievement';\r\nimport { UserAchievementsService } from '../services/user-achievements.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserAchievementsRepositoryService {\r\n  constructor(\r\n    private userAchievementsService: UserAchievementsService\r\n  ) {}\r\n\r\n  getAllUserAchievements(): Observable<IUserHasAchievement[]> {\r\n    return this.userAchievementsService.getAllUserAchievements();\r\n  }\r\n\r\n  getUserAchievement(userProjId: number, achievementId: number): Observable<IUserHasAchievement> {\r\n    return this.userAchievementsService.getUserAchievement(userProjId, achievementId);\r\n  }\r\n\r\n  createUserAchievement(userProjId: number, achievementId: number): Observable<IUserHasAchievement> {\r\n    return this.userAchievementsService.createUserAchievement(userProjId, achievementId);\r\n  }\r\n\r\n  unlockUserAchievement(userProjId: number, achievementId: number): Observable<void> {\r\n    return this.userAchievementsService.unlockUserAchievement(userProjId, achievementId);\r\n  }\r\n\r\n  getCompletedAchievementsByUsername(username: string): Observable<IAchievement[]> {\r\n    return this.userAchievementsService.getCompletedAchievementsByUsername(username);\r\n  }\r\n\r\n  /**\r\n   * Универсальный метод для обработки достижения\r\n   * @param userProjId Идентификатор пользователя\r\n   * @param achievementId Идентификатор достижения\r\n   * @param successMessage Сообщение для уведомления\r\n   * @returns Observable<void>\r\n   */\r\n  handleAchievement(\r\n    userProjId: number,\r\n    achievementId: number,\r\n    successMessage: string\r\n  ): Observable<void> {\r\n    return this.userAchievementsService.handleAchievement(userProjId, achievementId, successMessage);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserAchievementsService",
            "id": "injectable-UserAchievementsService-2270c48f23cc4a5f128a404ff8a9b3c666a244c609ac4f54c40f12e26dcd4c52a9c1b974fd7c9dffaf8de11df107b8905038304dd6ac0d7a256a92578424caed",
            "file": "src/app/services/user-achievements.service.ts",
            "properties": [
                {
                    "name": "ALWAYS_FAIL_KEY",
                    "defaultValue": "'alwaysFailMode'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        126,
                        148
                    ]
                },
                {
                    "name": "baseUrl",
                    "defaultValue": "'/api/UserAchievements'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkUserAchievementExists",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПроверка существования тест-кейса у пользователя\n",
                    "description": "<p>Проверка существования тест-кейса у пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3637,
                                "end": 3647,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "userProjId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3631,
                                "end": 3636,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор пользователя</p>\n"
                        },
                        {
                            "name": {
                                "pos": 3689,
                                "end": 3702,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "achievementId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3683,
                                "end": 3688,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор тест-кейса</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3736,
                                "end": 3743,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable<boolean></p>\n"
                        }
                    ]
                },
                {
                    "name": "createUserAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserHasAchievement>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nСоздание достижения для пользователя\n",
                    "description": "<p>Создание достижения для пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2085,
                                "end": 2095,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "userProjId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2079,
                                "end": 2084,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор пользователя</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2136,
                                "end": 2149,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "achievementId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2130,
                                "end": 2135,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор достижения</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2182,
                                "end": 2189,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable с созданным достижением</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAllUserAchievements",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IUserHasAchievement[]>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение всех достижений пользователя\n",
                    "description": "<p>Получение всех достижений пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1190,
                                "end": 1197,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable с массивом достижений</p>\n"
                        }
                    ]
                },
                {
                    "name": "getAlwaysFailMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCompletedAchievementsByUsername",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAchievement[]>",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение завершенных достижений по имени пользователя\n",
                    "description": "<p>Получение завершенных достижений по имени пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3167,
                                "end": 3175,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "username"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3161,
                                "end": 3166,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Имя пользователя</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 3200,
                                "end": 3207,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable с массивом завершенных достижений</p>\n"
                        }
                    ]
                },
                {
                    "name": "getFailedAchievementId",
                    "args": [
                        {
                            "name": "successAchievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение ID отрицательного тест-кейса на основе положительного\n",
                    "description": "<p>Получение ID отрицательного тест-кейса на основе положительного</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8850,
                                "end": 8870,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "successAchievementId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8844,
                                "end": 8849,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>ID успешного тест-кейса</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 8902,
                                "end": 8909,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>ID соответствующего отрицательного тест-кейса</p>\n"
                        }
                    ]
                },
                {
                    "name": "getUserAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IUserHasAchievement>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение конкретного достижения пользователя\n",
                    "description": "<p>Получение конкретного достижения пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1563,
                                "end": 1573,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "userProjId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1557,
                                "end": 1562,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор пользователя</p>\n"
                        },
                        {
                            "name": {
                                "pos": 1614,
                                "end": 1627,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "achievementId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1608,
                                "end": 1613,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор достижения</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 1660,
                                "end": 1667,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable с достижением</p>\n"
                        }
                    ]
                },
                {
                    "name": "handleAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "successMessage",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nУниверсальный метод для обработки тест-кейса\n",
                    "description": "<p>Универсальный метод для обработки тест-кейса</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4516,
                                "end": 4526,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "userProjId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4510,
                                "end": 4515,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор пользователя проекта</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4576,
                                "end": 4589,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "achievementId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4570,
                                "end": 4575,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор тест-кейса</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4629,
                                "end": 4643,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "successMessage"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4623,
                                "end": 4628,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Сообщение для успешного уведомления</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 4688,
                                "end": 4695,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable<void></p>\n"
                        }
                    ]
                },
                {
                    "name": "setAlwaysFailMode",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulateServerFailure",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "unlockUserAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nРазблокировка достижения для пользователя\n",
                    "description": "<p>Разблокировка достижения для пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2643,
                                "end": 2653,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "userProjId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2637,
                                "end": 2642,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор пользователя</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2694,
                                "end": 2707,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "achievementId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2688,
                                "end": 2693,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<p>Идентификатор достижения</p>\n"
                        },
                        {
                            "tagName": {
                                "pos": 2740,
                                "end": 2747,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>Observable<void></p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { catchError, Observable, of, switchMap, tap, throwError } from 'rxjs';\r\nimport { IAchievement } from '../interface/IAchievement';\r\nimport { IUserHasAchievement } from '../interface/IUserHasAchievement';\r\nimport { ConfigService } from './config.service';\r\nimport { TuiAlertService } from '@taiga-ui/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserAchievementsService {\r\n  private readonly baseUrl = '/api/UserAchievements'; // Прокси для API\r\nprivate static readonly ALWAYS_FAIL_KEY = 'alwaysFailMode';\r\n\r\n  constructor(\r\n    private readonly http: HttpClient,\r\n    private readonly configService: ConfigService,\r\n    private readonly alertService: TuiAlertService\r\n  ) { }\r\n\r\nsetAlwaysFailMode(value: boolean) {\r\n  localStorage.setItem(UserAchievementsService.ALWAYS_FAIL_KEY, value ? '1' : '0');\r\n}\r\n\r\ngetAlwaysFailMode(): boolean {\r\n  return localStorage.getItem(UserAchievementsService.ALWAYS_FAIL_KEY) === '1';\r\n}\r\n\r\nprivate simulateServerFailure(): boolean {\r\n   return this.getAlwaysFailMode();\r\n}\r\n\r\n  /**\r\n   * Получение всех достижений пользователя\r\n   * @returns Observable с массивом достижений\r\n   */\r\n  getAllUserAchievements(): Observable<IUserHasAchievement[]> {\r\n    if (this.simulateServerFailure()) {\r\n      return throwError(() => new Error('Имитация сбоя сервера'));\r\n    }\r\n    return this.http.get<IUserHasAchievement[]>(this.baseUrl)\r\n\r\n  }\r\n\r\n  /**\r\n   * Получение конкретного достижения пользователя\r\n   * @param userProjId Идентификатор пользователя\r\n   * @param achievementId Идентификатор достижения\r\n   * @returns Observable с достижением\r\n   */\r\n  getUserAchievement(userProjId: number, achievementId: number): Observable<IUserHasAchievement> {\r\n    if (this.simulateServerFailure()) {\r\n      return throwError(() => new Error('Имитация сбоя сервера'));\r\n    }\r\n    return this.http.get<IUserHasAchievement>(`${this.baseUrl}/${userProjId}/${achievementId}`)\r\n\r\n  }\r\n\r\n  /**\r\n   * Создание достижения для пользователя\r\n   * @param userProjId Идентификатор пользователя\r\n   * @param achievementId Идентификатор достижения\r\n   * @returns Observable с созданным достижением\r\n   */\r\n  createUserAchievement(userProjId: number, achievementId: number): Observable<IUserHasAchievement> {\r\n    if (this.simulateServerFailure()) {\r\n      return throwError(() => new Error('Имитация сбоя сервера'));\r\n    }\r\n    return this.http\r\n      .post<IUserHasAchievement>(`${this.baseUrl}/Create/${userProjId}/${achievementId}`, {})\r\n  }\r\n\r\n  /**\r\n   * Разблокировка достижения для пользователя\r\n   * @param userProjId Идентификатор пользователя\r\n   * @param achievementId Идентификатор достижения\r\n   * @returns Observable<void>\r\n   */\r\n  unlockUserAchievement(userProjId: number, achievementId: number): Observable<void> {\r\n    if (this.simulateServerFailure()) {\r\n      return throwError(() => new Error('Имитация сбоя сервера'));\r\n    }\r\n    return this.http\r\n      .put<void>(`${this.baseUrl}/Unlock/${userProjId}/${achievementId}`, {})\r\n\r\n  }\r\n\r\n  /**\r\n   * Получение завершенных достижений по имени пользователя\r\n   * @param username Имя пользователя\r\n   * @returns Observable с массивом завершенных достижений\r\n   */\r\n  getCompletedAchievementsByUsername(username: string): Observable<IAchievement[]> {\r\n    if (this.simulateServerFailure()) {\r\n      return throwError(() => new Error('Имитация сбоя сервера'));\r\n    }\r\n    return this.http\r\n      .get<IAchievement[]>(`${this.baseUrl}/Completed/${username}`)\r\n  }\r\n\r\n  /**\r\n    * Проверка существования тест-кейса у пользователя\r\n    * @param userProjId Идентификатор пользователя\r\n    * @param achievementId Идентификатор тест-кейса\r\n    * @returns Observable<boolean>\r\n    */\r\n  checkUserAchievementExists(userProjId: number, achievementId: number): Observable<boolean> {\r\n    if (this.simulateServerFailure()) {\r\n      return throwError(() => new Error('Имитация сбоя сервера'));\r\n    }\r\n    return this.http.get<boolean>(`${this.baseUrl}/Exists/${userProjId}/${achievementId}`).pipe(\r\n      catchError(error => {\r\n        if (error.status === this.configService.httpStatusCodes.notFound) {\r\n          console.warn(`Тест-кейс ${achievementId} или пользователь ${userProjId} не найдены`);\r\n          return of(false);\r\n        }\r\n        console.error('Ошибка при проверке тест-кейса:', error);\r\n        return of(false);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n    * Универсальный метод для обработки тест-кейса\r\n    * @param userProjId Идентификатор пользователя проекта\r\n    * @param achievementId Идентификатор тест-кейса\r\n    * @param successMessage Сообщение для успешного уведомления\r\n    * @returns Observable<void>\r\n    */\r\n  handleAchievement(\r\n    userProjId: number,\r\n    achievementId: number,\r\n    successMessage: string\r\n  ): Observable<void> {\r\n    if (userProjId <= 0 || achievementId <= 0) {\r\n      console.warn('Некорректный userProjId или achievementId:', { userProjId, achievementId });\r\n      this.alertService\r\n        .open('Некорректные данные для обработки тест-кейса!', { appearance: 'error' })\r\n        .subscribe();\r\n      return of(void 0);\r\n    }\r\n\r\n    // Имитация сбоя с 50% вероятностью\r\n    if (this.simulateServerFailure()) {\r\n      const failedAchievementId = this.getFailedAchievementId(achievementId);\r\n      this.alertService\r\n        .open('Не удалось обработать тест-кейс из-за сбоя сервера!', { appearance: 'error' })\r\n        .subscribe();\r\n      // Регистрируем отрицательный тест-кейс\r\n      return this.createUserAchievement(userProjId, failedAchievementId).pipe(\r\n        switchMap(result => {\r\n          if (result === null) {\r\n            // Тест-кейс уже существует\r\n            this.alertService\r\n              .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\r\n              .subscribe();\r\n            return of(void 0);\r\n          }\r\n          return this.unlockUserAchievement(userProjId, failedAchievementId);\r\n        }),\r\n        tap(() => {\r\n          this.alertService\r\n            .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\r\n              appearance: 'error'\r\n            })\r\n            .subscribe();\r\n        }),\r\n        catchError(error => {\r\n          console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, error);\r\n          return of(void 0);\r\n        })\r\n      );\r\n    }\r\n\r\n    // Нормальная обработка тест-кейса\r\n    return this.checkUserAchievementExists(userProjId, achievementId).pipe(\r\n      switchMap(exists => {\r\n        if (exists) {\r\n          console.log(`Тест-кейс ${achievementId} уже выполнен для userProjId ${userProjId}`);\r\n          this.alertService\r\n            .open('Тест-кейс уже выполнен!', { appearance: 'info' })\r\n            .subscribe();\r\n          return of(void 0); // Ничего не делаем, если тест-кейс уже есть\r\n        }\r\n        return this.createUserAchievement(userProjId, achievementId).pipe(\r\n          switchMap(result => {\r\n            if (result === null) {\r\n              // Тест-кейс уже существует\r\n              this.alertService\r\n                .open('Тест-кейс успешно выполнен!', { appearance: 'success' })\r\n                .subscribe();\r\n              return of(void 0);\r\n            }\r\n            return this.unlockUserAchievement(userProjId, achievementId);\r\n          }),\r\n          tap(() => {\r\n            this.alertService.open(successMessage, { appearance: 'success' }).subscribe();\r\n          })\r\n        );\r\n      }),\r\n      catchError(error => {\r\n        console.error(`Ошибка при обработке тест-кейса ${achievementId} для userProjId ${userProjId}:`, error);\r\n        const failedAchievementId = this.getFailedAchievementId(achievementId);\r\n        // Регистрируем отрицательный тест-кейс при ошибке\r\n        return this.createUserAchievement(userProjId, failedAchievementId).pipe(\r\n          switchMap(result => {\r\n            if (result === null) {\r\n              // Ошибочный тест-кейс уже существует\r\n              this.alertService\r\n                .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\r\n                .subscribe();\r\n              return of(void 0);\r\n            }\r\n            return this.unlockUserAchievement(userProjId, failedAchievementId);\r\n          }),\r\n          tap(() => {\r\n            this.alertService\r\n              .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\r\n                appearance: 'error'\r\n              })\r\n              .subscribe();\r\n          }),\r\n          catchError(err => {\r\n            console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, err);\r\n            return of(void 0);\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получение ID отрицательного тест-кейса на основе положительного\r\n   * @param successAchievementId ID успешного тест-кейса\r\n   * @returns ID соответствующего отрицательного тест-кейса\r\n   */\r\n  private getFailedAchievementId(successAchievementId: number): number {\r\n    const successToFailedMap: { [key: number]: number } = {\r\n      [this.configService.achievementIds.loginSuccess]: this.configService.achievementIds.loginFailed,\r\n      [this.configService.achievementIds.registerSuccess]: this.configService.achievementIds.registerFailed,\r\n      [this.configService.achievementIds.addToCartSuccess]: this.configService.achievementIds.addToCartFailed,\r\n      [this.configService.achievementIds.checkoutSuccess]: this.configService.achievementIds.checkoutFailed,\r\n      [this.configService.achievementIds.viewProductSuccess]: this.configService.achievementIds.viewProductFailed,\r\n      [this.configService.achievementIds.createProductSuccess]: this.configService.achievementIds.createProductFailed,\r\n      [this.configService.achievementIds.updateProfileSuccess]: this.configService.achievementIds.updateProfileFailed,\r\n      [this.configService.achievementIds.addImageSuccess]: this.configService.achievementIds.addImageFailed,\r\n      [this.configService.achievementIds.addCategorySuccess]: this.configService.achievementIds.addCategoryFailed,\r\n      [this.configService.achievementIds.switchToLightThemeSuccess]:\r\n        this.configService.achievementIds.switchToLightThemeFailed,\r\n      [this.configService.achievementIds.switchToDarkThemeSuccess]:\r\n        this.configService.achievementIds.switchToDarkThemeFailed,\r\n      [this.configService.achievementIds.removeFromCartSuccess]:\r\n        this.configService.achievementIds.removeFromCartFailed,\r\n      [this.configService.achievementIds.updateCartQuantitySuccess]:\r\n        this.configService.achievementIds.updateCartQuantityFailed,\r\n      [this.configService.achievementIds.loadProductsSuccess]: this.configService.achievementIds.loadProductsFailed,\r\n      [this.configService.achievementIds.loadProductInfoSuccess]:\r\n        this.configService.achievementIds.loadProductInfoFailed,\r\n      [this.configService.achievementIds.navigateToProductSuccess]:\r\n        this.configService.achievementIds.navigateToProductFailed,\r\n      [this.configService.achievementIds.toggleThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\r\n      [this.configService.achievementIds.resetThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\r\n      [this.configService.achievementIds.openProductDialogSuccess]:\r\n        this.configService.achievementIds.buttonNotWorking,\r\n      [this.configService.achievementIds.openCategoryDialogSuccess]:\r\n        this.configService.achievementIds.buttonNotWorking,\r\n      [this.configService.achievementIds.openImageDialogSuccess]: this.configService.achievementIds.buttonNotWorking,\r\n      [this.configService.achievementIds.logoutProjSuccess]: this.configService.achievementIds.logoutProjFailed,\r\n      [this.configService.achievementIds.updateCategorySuccess]:\r\n        this.configService.achievementIds.updateCategoryFailed,\r\n      [this.configService.achievementIds.updateImageSuccess]: this.configService.achievementIds.updateImageFailed,\r\n      [this.configService.achievementIds.updateProductSuccess]: this.configService.achievementIds.updateProductFailed,\r\n    };\r\n\r\n    return successToFailedMap[successAchievementId] || this.configService.achievementIds.buttonNotWorking;\r\n  }\r\n\r\n\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UserProjsRepositoryService",
            "id": "injectable-UserProjsRepositoryService-a07cfdc8d65436562d476d864676297d3df18c04889b7789704a920374160312b138e8656a9593e57051cbe8aa6ff651e48ef4f07d8cc8abd339619fe1e821d4",
            "file": "src/app/repositories/user-projs-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDpUserProj",
                    "args": [
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUserProj>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpUserProj",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpUserProjs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpUserProj[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpUserProjById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUserProj>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpUserProj",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpUserProj",
                            "type": "IDpUserProj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpUserProj } from '../interface/IDpUserProj';\r\nimport { DpUserProjsService } from '../services/dp-user-projs.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserProjsRepositoryService {\r\n  constructor(private dpUserProjsService: DpUserProjsService) {}\r\n\r\n  getAllDpUserProjs(): Observable<IDpUserProj[]> {\r\n    return this.dpUserProjsService.getAllDpUserProjs();\r\n  }\r\n\r\n  getDpUserProjById(id: number): Observable<IDpUserProj> {\r\n    return this.dpUserProjsService.getDpUserProjById(id);\r\n  }\r\n\r\n  createDpUserProj(dpUserProj: IDpUserProj): Observable<IDpUserProj> {\r\n    return this.dpUserProjsService.createDpUserProj(dpUserProj);\r\n  }\r\n\r\n  updateDpUserProj(id: number, dpUserProj: IDpUserProj): Observable<void> {\r\n    return this.dpUserProjsService.updateDpUserProj(id, dpUserProj);\r\n  }\r\n\r\n  deleteDpUserProj(id: number): Observable<void> {\r\n    return this.dpUserProjsService.deleteDpUserProj(id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpUserProjsService",
                        "type": "DpUserProjsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dpUserProjsService",
                        "type": "DpUserProjsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "UsersRepositoryService",
            "id": "injectable-UsersRepositoryService-0552fc76d2d52c628d86dd947cf0e330dabbddeed817c6d7241548f3f214bd5c51c4ed3eb15be1e8ad0f2190283faf025a0c5e98111b1ed3196d9ff2bdc1ad4d",
            "file": "src/app/repositories/users-repository.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createDpUser",
                    "args": [
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUser>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteDpUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllDpUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IDpUser[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDpUserById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IDpUser>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDpUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dpUser",
                            "type": "IDpUser",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { IDpUser } from '../interface/IDpUser';\r\nimport { DpUsersService } from '../services/dp-users.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersRepositoryService {\r\n  constructor(private dpUsersService: DpUsersService) {}\r\n\r\n  getAllDpUsers(): Observable<IDpUser[]> {\r\n    return this.dpUsersService.getAllDpUsers();\r\n  }\r\n\r\n  getDpUserById(id: number): Observable<IDpUser> {\r\n    return this.dpUsersService.getDpUserById(id);\r\n  }\r\n\r\n  createDpUser(dpUser: IDpUser): Observable<IDpUser> {\r\n    return this.dpUsersService.createDpUser(dpUser);\r\n  }\r\n\r\n  updateDpUser(id: number, dpUser: IDpUser): Observable<void> {\r\n    return this.dpUsersService.updateDpUser(id, dpUser);\r\n  }\r\n\r\n  deleteDpUser(id: number): Observable<void> {\r\n    return this.dpUsersService.deleteDpUser(id);\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dpUsersService",
                        "type": "DpUsersService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dpUsersService",
                        "type": "DpUsersService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AboutComponent",
            "id": "component-AboutComponent-9096265731d2e0d097fbfb7fa1cb9f2d8ed484ff6e8f3f60b5a5cc5877436290153ab2c9b01b5191de2cac4319dfae2d30a57cee427e67f4a834cf40f2755312",
            "file": "src/app/data/page/about/about.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-about",
            "styleUrls": [
                "./about.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./about.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertService",
                    "defaultValue": "inject(TuiAlertService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsService",
                    "defaultValue": "inject(UserAchievementsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navigateToHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПереходит на главную страницу\n",
                    "description": "<p>Переходит на главную страницу</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiTitle"
                },
                {
                    "name": "TuiAccordion"
                },
                {
                    "name": "TuiAccordionItem"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TuiLink"
                },
                {
                    "name": "TuiIcon"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "ThemeToggleComponent",
                    "type": "component"
                },
                {
                    "name": "BackButtonComponent",
                    "type": "component"
                },
                {
                    "name": "TuiAvatar"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiIconPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ChangeDetectionStrategy, inject, OnInit, OnDestroy, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { AsyncPipe, CommonModule } from '@angular/common';\r\nimport { TuiButton, TuiTitle, TuiAlertService, TuiIcon, TuiIconPipe, TuiLink } from '@taiga-ui/core';\r\nimport { TuiAccordion, TuiAccordionItem, TuiAvatar } from '@taiga-ui/kit';\r\nimport { Subscription } from 'rxjs';\r\nimport { Router, RouterLink } from '@angular/router';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\nimport { BackButtonComponent } from '../../components/back-button/back-button.component';\r\nimport { ThemeToggleComponent } from '../../components/theme-toggle/theme-toggle.component';\r\nimport { AuthService } from '../../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-about',\r\n imports: [\r\n    CommonModule,\r\n    TuiButton,\r\n    TuiTitle,\r\n    TuiAccordion,\r\n    TuiAccordionItem,\r\n    RouterLink,\r\n     CommonModule,\r\n    TuiLink,\r\n    TuiIcon,\r\n    TuiButton,\r\n    ThemeToggleComponent,\r\n    BackButtonComponent,\r\n    TuiAvatar,\r\n    AsyncPipe,\r\n    TuiIconPipe,\r\n  ],\r\n  templateUrl: './about.component.html',\r\n  styleUrls: ['./about.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AboutComponent {\r\nprivate readonly userAchievementsService = inject(UserAchievementsService);\r\n  private readonly configService = inject(ConfigService);\r\n  private readonly alertService = inject(TuiAlertService);\r\n  private readonly subscriptions = new Subscription();\r\n \r\n  constructor(\r\n    private router: Router,\r\n  ) {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n navigateTo(path: string): void {\r\n    this.router.navigate([path]);\r\n  }\r\n  /**\r\n   * Переходит на главную страницу\r\n   */\r\n  navigateToHome(): void {\r\n    this.navigateTo('/');\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/variables.css';\r\n\r\n.about-page {\r\n  max-width: 90%; /* Относительная ширина для гибкости */\r\n  width: min(50rem, 90vw); /* Ограничение ширины ≈ 800px при базовом 1rem = 16px */\r\n  margin: 1rem auto; /* tui.spacing(4) ≈ 16px → 1rem */\r\n  padding: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\r\n  background: var(--tui-base-01);\r\n  border-radius: 0.5rem; /* tui.border-radius('l') ≈ 8px → 0.5rem */\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow); /* 4px → 0.25rem, 16px → 1rem */\r\n  box-sizing: border-box;\r\n}\r\n\r\n@media (max-width: 47.9375rem) { /* tui.breakpoint('sm') ≈ 767px → 47.9375rem */\r\n  .about-page {\r\n    margin: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\r\n    padding: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\r\n  }\r\n}\r\n\r\n.title-icon {\r\n  margin-left: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\r\n  color: var(--tui-primary);\r\n  vertical-align: middle; /* Четкое выравнивание с заголовком */\r\n}\r\n\r\n.about-section {\r\n  margin-bottom: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\r\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\r\n  line-height: 1.5;\r\n}\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\r\n  font-weight: 700; /* tui.font-weight('bold') */\r\n  font-size: 1.125rem; /* tui.font-size('l') ≈ 18px → 1.125rem */\r\n}\r\n\r\n.feature-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.feature-list li {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\r\n  margin-bottom: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\r\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\r\n}\r\n\r\n.feature-list li::before {\r\n  content: '•';\r\n  color: var(--tui-primary);\r\n  font-size: 1.5rem;\r\n  line-height: 1;\r\n  margin-top: 0.125rem; /* Смещение для выравнивания с текстом */\r\n}\r\n\r\n.actions {\r\n    display: flex;\r\n    flex-direction: row;\r\n    gap: 1.5rem; /* увеличенный отступ между элементами */\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-top: 2rem; /* увеличенный отступ сверху от аккордеона */\r\n    margin-bottom: 1rem;\r\n    flex-wrap: wrap;\r\n    padding: 1rem 0 0 0;\r\n    border-top: 1px solid var(--tui-base-03, #e5e5e5); /* лёгкая линия для отделения */\r\n}\r\n\r\n.actions button,\r\n.actions tui-avatar,\r\n.actions .user-avatar {\r\n    margin: 0;\r\n}\r\n\r\n.user-avatar {\r\n    margin-left: 1.5rem;\r\n    margin-right: 0.5rem;\r\n    cursor: pointer;\r\n    box-shadow: 0 2px 8px var(--tui-shadow, rgba(0,0,0,0.08));\r\n    transition: box-shadow 0.2s, transform 0.2s;\r\n}\r\n.user-avatar:hover {\r\n    box-shadow: 0 4px 16px var(--tui-shadow, rgba(0,0,0,0.16));\r\n    transform: scale(1.05);\r\n}\r\n\r\n@media (max-width: 47.9375rem) {\r\n    .actions {\r\n        flex-direction: column;\r\n        gap: 1rem;\r\n        align-items: center;\r\n        margin-top: 2rem;\r\n        padding-top: 0.5rem;\r\n    }\r\n    .user-avatar {\r\n        margin: 0.5rem 0 0 0;\r\n    }\r\n}\r\n\r\n/* Замените их на [data-theme=\"dark\"] */\r\n[data-theme=\"dark\"] .about-page {\r\n  background: var(--tui-base-02); /* Используйте правильную переменную для фона */\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\r\n}\r\n\r\n[data-theme=\"dark\"] .about-section,\r\n[data-theme=\"dark\"] .feature-list li {\r\n  color: var(--text-color-dark); /* Светлый цвет текста */\r\n}\r\n\r\n",
                    "styleUrl": "./about.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<p></p>\r\n  <section class=\"about-section\">\r\n    <p>\r\n      Этот интерактивный образовательный тренажер разработан для обучения разработчиков ПО созданию\r\n      веб-приложений. Он имитирует реальный интернет-магазин, позволяя практиковаться в разработке\r\n      фронтенда (Angular, Taiga UI) и взаимодействии с бэкендом (ASP.NET Core, MSSQL). Тренажер\r\n      включает тест-кейсы с 50% имитацией сбоев сервера для обучения обработке ошибок.\r\n    </p>\r\n  </section>\r\n\r\n  <tui-accordion>\r\n   <tui-accordion-item aria-expanded=\"false\" aria-controls=\"features\">\r\n      <span class=\"accordion-header\">\r\n        <tui-marker-icon src=\"tuiIconStarLarge\" />\r\n        Возможности тренажера\r\n      </span>\r\n      <ng-template tuiAccordionItemContent>\r\n        <ul class=\"feature-list\">\r\n          <li>\r\n            <strong>Каталог товаров:</strong> Просматривайте товары, переходите к детальной информации о продукте.\r\n          </li>\r\n          <li>\r\n            <strong>Корзина:</strong> Добавляйте товары, изменяйте количество, удаляйте позиции и оформляйте заказ.\r\n          </li>\r\n          <li>\r\n            <strong>Авторизация и регистрация:</strong> Практикуйтесь в реализации входа и создания учетной записи.\r\n          </li>\r\n          <li>\r\n            <strong>Система тест-кейсов:</strong> Выполняйте действия (вход, покупка, смена темы и т.д.) с 50% имитацией сбоев сервера для обучения обработке ошибок.\r\n          </li>\r\n          <li>\r\n            <strong>Темы интерфейса:</strong> Переключайтесь между светлой и тёмной темой с возможностью сброса к системной.\r\n          </li>\r\n          <li>\r\n            <strong>Управление контентом:</strong> Создавайте и редактируйте продукты, категории и изображения через диалоговые окна.\r\n          </li>\r\n          <li>\r\n            <strong>Адаптивный дизайн:</strong> Тренажер оптимизирован для десктопов, планшетов и мобильных устройств.\r\n          </li>\r\n        </ul>\r\n      </ng-template>\r\n    </tui-accordion-item>\r\n\r\n   <tui-accordion-item aria-expanded=\"false\" aria-controls=\"features\">\r\n      <span class=\"accordion-header\">\r\n        <tui-marker-icon src=\"tuiIconCodeLarge\" />\r\n        Технологии\r\n      </span>\r\n      <ng-template tuiAccordionItemContent>\r\n        <ul class=\"feature-list\">\r\n          <li>\r\n            <strong>Фронтенд:</strong> Angular 18, TypeScript, Taiga UI, RxJS, Angular Reactive Forms, CSS.\r\n          </li>\r\n          <li>\r\n            <strong>Бэкенд:</strong> ASP.NET Core 8, RESTful API, MSSQL, контроллеры.\r\n          </li>\r\n          <li>\r\n            <strong>Интеграция:</strong> HTTP-запросы через HttpClient, прокси для API, JWT-авторизация.\r\n          </li>\r\n          <li>\r\n            <strong>Инструменты:</strong> Angular CLI, Webpack, ESLint, Prettier.\r\n          </li>\r\n        </ul>\r\n      </ng-template>\r\n    </tui-accordion-item>\r\n\r\n    <tui-accordion-item aria-expanded=\"false\" aria-controls=\"features\">\r\n      <span class=\"accordion-header\">\r\n        <tui-marker-icon src=\"tuiIconLayersLarge\" />\r\n        Архитектура\r\n      </span>\r\n      <ng-template tuiAccordionItemContent>\r\n        <p>\r\n          Тренажер использует простую и понятную архитектуру, подходящую для образовательных целей:\r\n        </p>\r\n        <ul class=\"feature-list\">\r\n          <li>\r\n            <strong>Фронтенд:</strong> Модульная структура с standalone-компонентами, сервисы для бизнес-логики, RxJS для управления состоянием.\r\n          </li>\r\n          <li>\r\n            <strong>Бэкенд:</strong> ASP.NET Core контроллеры, прямое взаимодействие с MSSQL через Entity Framework Core.\r\n          </li>\r\n          <li>\r\n            <strong>Взаимодействие:</strong> REST API с обработкой HTTP-статусов (200, 401, 404, 500), централизованная обработка ошибок.\r\n          </li>\r\n          <li>\r\n            <strong>Оптимизация:</strong> ChangeDetectionStrategy.OnPush, ленивая загрузка модулей, мемоизация.\r\n          </li>\r\n        </ul>\r\n      </ng-template>\r\n    </tui-accordion-item>\r\n\r\n    <tui-accordion-item aria-expanded=\"false\" aria-controls=\"features\">\r\n      <span class=\"accordion-header\">\r\n        <tui-marker-icon src=\"tuiIconHeartLarge\" />\r\n        Особенности\r\n      </span>\r\n      <ng-template tuiAccordionItemContent>\r\n        <ul class=\"feature-list\">\r\n          <li>\r\n            <strong>Имитация сбоев:</strong> 50% вероятность серверных ошибок в тест-кейсах для обучения устойчивости приложений.\r\n          </li>\r\n          <li>\r\n            <strong>Уведомления:</strong> TuiAlertService для информирования об успехах и ошибках.\r\n          </li>\r\n          <li>\r\n            <strong>Доступность:</strong> ARIA-атрибуты, управление фокусом через TuiAutoFocus.\r\n          </li>\r\n          <li>\r\n            <strong>UX:</strong> Плавные анимации, интуитивные диалоги, кастомизированные Taiga UI компоненты.\r\n          </li>\r\n          <li>\r\n            <strong>Обучение:</strong> Тренажер разработан для практики разработки, тестирования и отладки веб-приложений.\r\n          </li>\r\n        </ul>\r\n      </ng-template>\r\n    </tui-accordion-item>\r\n  </tui-accordion>\r\n\r\n <div class=\"actions tui-space_top-4\">\r\n    <button tuiButton appearance=\"outline-destructive\" routerLink=\"/\">Перейти в каталог</button>\r\n    <button tuiButton appearance=\"outline\" (click)=\"navigateToHome()\">На главную</button>\r\n    <tui-avatar src=\"@tui.user\" class=\"user-avatar\" (click)=\"navigateTo('/user-page')\" />\r\n</div>\r\n"
        },
        {
            "name": "AchievmentsPageForUserComponent",
            "id": "component-AchievmentsPageForUserComponent-5d4d2e96b37570bdc1945d29a90b7b7f67320bb75084847d1f2e8f7fb96c18c52ce5c3a5840a1372791ac5858ef875a51a5311586a150758939bd6ced89237b2",
            "file": "src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-achievments-page-for-user",
            "styleUrls": [
                "./achievments-page-for-user.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./achievments-page-for-user.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allAchievements",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAchievement[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "authProjService",
                    "defaultValue": "inject(AuthProjService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "completedAchievementIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "isProjAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "logoutAttempt",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsRepository",
                    "defaultValue": "inject(UserAchievementsRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "isCompleted",
                    "args": [
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNotWorkingButtonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CdkFixedSizeVirtualScroll"
                },
                {
                    "name": "CdkVirtualForOf"
                },
                {
                    "name": "CdkVirtualScrollViewport"
                },
                {
                    "name": "TuiScrollable"
                },
                {
                    "name": "TuiScrollbar"
                },
                {
                    "name": "TuiTable"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { IAchievement } from '../../../interface/IAchievement';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AchievementsRepositoryService } from '../../../repositories/achievements-repository.service';\r\nimport { TuiTable } from '@taiga-ui/addon-table';\r\nimport { TuiScrollable, TuiScrollbar } from '@taiga-ui/core';\r\nimport {\r\n  CdkFixedSizeVirtualScroll,\r\n  CdkVirtualForOf,\r\n  CdkVirtualScrollViewport,\r\n} from '@angular/cdk/scrolling';\r\nimport { Router } from '@angular/router';\r\nimport { AuthProjService } from '../../../services/auth-proj.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-achievments-page-for-user',\r\n  imports: [CommonModule, CdkFixedSizeVirtualScroll,\r\n    CdkVirtualForOf,\r\n    CdkVirtualScrollViewport,\r\n    TuiScrollable,\r\n    TuiScrollbar,\r\n    TuiTable,],\r\n  templateUrl: './achievments-page-for-user.component.html',\r\n  styleUrls: ['./achievments-page-for-user.component.css', '../../../styles/root.css']\r\n})\r\nexport class AchievmentsPageForUserComponent implements OnInit {\r\n  allAchievements: IAchievement[] = [];\r\n  completedAchievementIds: number[] = [];\r\n  username: string = '';\r\n  userId: number | null = null;\r\nprivate readonly authProjService = inject(AuthProjService);\r\n  private readonly router = inject(Router);\r\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\r\n\r\n  isProjAuthenticated: boolean = false;\r\n  private logoutAttempt = 0;\r\n\r\n  constructor(\r\n    private readonly configService: ConfigService = inject(ConfigService),\r\n    private readonly userAchievementsRepo: UserAchievementsRepositoryService = inject(UserAchievementsRepositoryService),\r\n    private readonly achievementsRepo: AchievementsRepositoryService = inject(AchievementsRepositoryService)\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const projToken = localStorage.getItem('projToken');\r\n    console.log('[Achievements] projToken:', projToken);\r\n\r\n    if (projToken) {\r\n      try {\r\n        const payload = JSON.parse(atob(projToken.split('.')[1]));\r\n        this.username = payload.sub; // <-- логин пользователя\r\n        console.log('Username (login) from token:', this.username);\r\n      } catch (e) {\r\n        console.error('Ошибка при декодировании токена:', e);\r\n        this.username = '';\r\n      }\r\n    } else {\r\n      console.warn('[Achievements] projToken не найден в localStorage');\r\n      this.username = '';\r\n    }\r\n\r\n    const idStr = localStorage.getItem('userProjId');\r\n    this.userId = idStr ? Number(idStr) : null;\r\n    console.log('[Achievements] userId:', this.userId);\r\n\r\n    // Получаем все ачивки с описаниями из репозитория\r\n    this.achievementsRepo.getAllAchievements().subscribe({\r\n      next: (achievements: IAchievement[]) => {\r\n        const validIds = Object.values(this.configService.achievementIds);\r\n        this.allAchievements = achievements.filter(a => validIds.includes(a.achievementId));\r\n        console.log('[Achievements] Загружены все ачивки:', this.allAchievements);\r\n      },\r\n      error: (err) => {\r\n        console.error('[Achievements] Ошибка при получении всех ачивок:', err);\r\n      }\r\n    });\r\n\r\n    // Получаем список завершённых ачивок пользователя\r\n    if (this.username) {\r\n      this.userAchievementsRepo.getCompletedAchievementsByUsername(this.username)\r\n        .subscribe({\r\n          next: (achievements: IAchievement[]) => {\r\n            this.completedAchievementIds = achievements.map(a => a.achievementId);\r\n            console.log('[Achievements] Выполненные ачивки пользователя:', this.completedAchievementIds);\r\n          },\r\n          error: (err) => {\r\n            console.error('[Achievements] Ошибка при получении выполненных ачивок пользователя:', err);\r\n          }\r\n        });\r\n    } else {\r\n      console.warn('[Achievements] Не удалось получить выполненные ачивки: username пустой');\r\n    }\r\n  }\r\n\r\n  isCompleted(achievementId: number): boolean {\r\n    return this.completedAchievementIds.includes(achievementId);\r\n  } \r\n\r\n   onNotWorkingButtonClick(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.userAchievementsRepository\r\n      .handleAchievement(userProjId, this.configService.achievementIds.buttonNotWorking, 'Кнопка не работает!')\r\n      .subscribe();\r\n    // Можно добавить уведомление или визуальный эффект\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./achievments-page-for-user.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(ConfigService)"
                    },
                    {
                        "name": "userAchievementsRepo",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsRepositoryService)"
                    },
                    {
                        "name": "achievementsRepo",
                        "type": "AchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(AchievementsRepositoryService)"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(ConfigService)",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsRepo",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsRepositoryService)",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "achievementsRepo",
                        "type": "AchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(AchievementsRepositoryService)",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"achievements-table-wrapper\">\r\n  <table tuiTable [columns]=\"['title', 'textAchievement', 'status']\">\r\n    <thead>\r\n      <tr tuiThGroup>\r\n        <th *tuiHead=\"'title'\" tuiTh (click)=\"onNotWorkingButtonClick()\">Название</th>\r\n        <th *tuiHead=\"'textAchievement'\" tuiTh (click)=\"onNotWorkingButtonClick()\">Описание</th>\r\n        <th *tuiHead=\"'status'\" tuiTh (click)=\"onNotWorkingButtonClick()\">Статус</th>\r\n      </tr>\r\n    </thead>\r\n    <tbody tuiTbody>\r\n      <tr *ngFor=\"let ach of allAchievements\" tuiTr>\r\n        <td *tuiCell=\"'title'\" tuiTd>{{ ach.title }}</td>\r\n        <td *tuiCell=\"'textAchievement'\" tuiTd>{{ ach.textAchievement }}</td>\r\n        <td *tuiCell=\"'status'\" tuiTd>\r\n          <span *ngIf=\"isCompleted(ach.achievementId)\" class=\"completed\">Выполнено</span>\r\n          <span *ngIf=\"!isCompleted(ach.achievementId)\" class=\"not-completed\">—</span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>"
        },
        {
            "name": "AlertDeleteComponent",
            "id": "component-AlertDeleteComponent-20b454ad4474c253eb347b0d32a4db9fe245cc0f8208e5b31a324a62aa516f1d5012b8aaa13e931240911cc4f703a3b9300044dea3891b157bd899a89dc27a27",
            "file": "src/app/data/components/alert-delete/alert-delete.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-alert-on-delete",
            "styleUrls": [
                "./alert-delete.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./alert-delete.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "context",
                    "defaultValue": "injectContext<TuiPopover<TuiAlertOptions<void>, boolean>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule, NgForOf } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\r\nimport type { TuiPopover } from '@taiga-ui/cdk';\r\nimport type { TuiAlertOptions } from '@taiga-ui/core';\r\nimport { TuiAlertService } from '@taiga-ui/core';\r\nimport { injectContext, PolymorpheusComponent } from '@taiga-ui/polymorpheus';\r\nimport { switchMap, takeUntil } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-alert-on-delete',\r\n  imports: [CommonModule],\r\n  templateUrl: './alert-delete.component.html',\r\n  styleUrls:[ './alert-delete.component.css',\r\n    '../../../styles/root.css',],\r\n})\r\nexport class AlertDeleteComponent {\r\n  protected readonly context =\r\n  injectContext<TuiPopover<TuiAlertOptions<void>, boolean>>();\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./alert-delete.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button\r\n    *ngFor=\"let response of [true, false]\"\r\n    appearance=\"outline-grayscale\"\r\n    size=\"s\"\r\n    tuiButton\r\n    type=\"button\"\r\n    class=\"tui-space_right-1\"\r\n    (click)=\"context.completeWith(response)\"\r\n>\r\n    {{ response ? 'Да' : 'Нет' }}\r\n</button>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-aacc925d007757b3ba0603fff7b3f880556293843f94d23903a6a49ca149b6ebac6bf811233896a6f532378880db79fb199dde205717d4b44a8cac9546eb645d",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkMode",
                    "defaultValue": "inject(TUI_DARK_MODE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Sota6SiFront'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "TuiRoot"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TuiLink"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { TUI_DARK_MODE, TuiLink, TuiRoot } from \"@taiga-ui/core\";\r\nimport { Component, inject } from '@angular/core';\r\nimport { RouterModule, RouterOutlet } from '@angular/router';\r\nimport { NavbarComponent } from \"./data/components/navbar/navbar.component\";\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [  \r\n    RouterOutlet, \r\n    TuiRoot, \r\n    RouterModule,\r\n    TuiLink,\r\n    NavbarComponent,\r\n    ],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css'\r\n})\r\nexport class AppComponent {\r\n  title = 'Sota6SiFront';\r\n  protected readonly darkMode = inject(TUI_DARK_MODE);\r\n}\r\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<tui-root [attr.tuiTheme]=\"darkMode() ? 'dark' : null\">\r\n  <app-navbar></app-navbar>\r\n  <router-outlet></router-outlet>\r\n</tui-root>\r\n"
        },
        {
            "name": "BackButtonComponent",
            "id": "component-BackButtonComponent-578b7a301f49f315670cb2a6a105897f5e91617d4445d759db91d84570c85a0fea3e6d57f3ae42796992bcd9ba700a191cf26a9cf26e6dcbd6b255a167fd88a7",
            "file": "src/app/data/components/back-button/back-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-back-button",
            "styleUrls": [
                "./back-button.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./back-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-back-button',\r\n  imports: [],\r\n  templateUrl: './back-button.component.html',\r\n  styleUrls: ['./back-button.component.css',\r\n    '../../../styles/root.css',],\r\n})\r\nexport class BackButtonComponent {\r\n  constructor(private location: Location, private router: Router) {}\r\n\r\n  goBack(): void {\r\n    try {\r\n      const previousUrl = this.location.path(true); \r\n      const baseDomain = '/'; \r\n      if (previousUrl.startsWith(baseDomain)) {\r\n        this.location.back(); \r\n      } else {\r\n        this.router.navigateByUrl('/');\r\n      }\r\n    } catch (error) {\r\n      this.router.navigateByUrl('/');\r\n    }\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./back-button.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<button size=\"m\" type=\"button\" (click)=\"goBack()\">\r\n  Назад\r\n</button>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CardItemComponent",
            "id": "component-CardItemComponent-e2d4430f116ccff62eecabd3e94093ddf194f18d06e7dca30ecfd28f3b8c2f73fdfafd1b061449f1ad30f89d312ff3c8f947a3c6723f5a2080cacb359e90a32a",
            "file": "src/app/data/components/card-item/card-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-item",
            "styleUrls": [
                "./card-item.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./card-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "productInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IDpProduct",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "navigateToProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TuiAppearance"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "CarouselImgComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, inject, Input } from '@angular/core';\r\nimport { IDpProduct } from '../../../interface/IDpProduct';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TuiAppearance, TuiButton } from '@taiga-ui/core';\r\nimport { CarouselImgComponent } from '../carousel-img/carousel-img.component';\r\nimport { IDpImage } from '../../../interface/IDpImage';\r\nimport { Router } from '@angular/router';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-card-item',\r\n  imports: [\r\n    CommonModule,\r\n    TuiAppearance,\r\n    TuiButton,\r\n    CarouselImgComponent\r\n  ],\r\n  templateUrl: './card-item.component.html',\r\n  styleUrls: ['./card-item.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class CardItemComponent {\r\n  @Input() productInfo!: IDpProduct;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private configService: ConfigService,\r\n    private userAchievementsRepository: UserAchievementsRepositoryService,\r\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService)\r\n  ) { }\r\n\r\n  get images(): IDpImage[] {\r\n    return this.productInfo.dpImages || [];\r\n  }\r\n\r\n  navigateToProduct(product: IDpProduct): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      // Галочка включена — 50% шанс на ошибку\r\n      if (Math.random() < 0.5) {\r\n        this.userAchievementsRepository.handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.navigateToProductFailed,\r\n          'Тест-кейс: ошибка перехода к товару! (режим всегда ошибка, рандом)'\r\n        ).subscribe();\r\n        return;\r\n      }\r\n      // 50% шанс — обычная логика перехода\r\n    }\r\n    this.router.navigate(['/ItemFromCatalog', product.dpProductId])\r\n      .then(success => {\r\n        if (success) {\r\n          this.userAchievementsRepository.handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.navigateToProductSuccess, // Используем числовой ID\r\n            'тест-кейс: Переход к товару выполнен!'\r\n          ).subscribe();\r\n        } else {\r\n          this.userAchievementsRepository.handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.navigateToProductFailed, // Используем числовой ID\r\n            'тест-кейс: Ошибка перехода к товару!'\r\n          ).subscribe();\r\n        }\r\n      })\r\n      .catch(() => {\r\n        this.userAchievementsRepository.handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.navigateToProductFailed, // Используем числовой ID\r\n          'тест-кейс: Ошибка перехода к товару!'\r\n        ).subscribe();\r\n      });\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./card-item.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "accessors": {
                "images": {
                    "name": "images",
                    "getSignature": {
                        "name": "images",
                        "type": "[]",
                        "returnType": "IDpImage[]",
                        "line": 34
                    }
                }
            },
            "templateData": "<div class=\"card-item\">\r\n    <app-carousel-img [images]=\"images\"></app-carousel-img>\r\n    <h3 class=\"card-title\">{{ productInfo.dpTitle }}</h3>\r\n    <p class=\"card-price\">{{ productInfo.dpPrice | currency:'RUB ' }}</p>\r\n    <button type=\"button\" class=\"btn btn-view-details\" (click)=\"navigateToProduct(productInfo)\">\r\n        <tui-icon name=\"tuiIconChevronRightLarge\"></tui-icon>\r\n        Перейти к товару\r\n    </button>\r\n</div>"
        },
        {
            "name": "CarouselImgComponent",
            "id": "component-CarouselImgComponent-3c78ed6d5f27132c358eca6125a2273b7d5a028b13349108f948c1f872d1b6c73f0cde5952bc613f7cb099b655835cc325c9c096e896205b07cad3b83b4ee5f6",
            "file": "src/app/data/components/carousel-img/carousel-img.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel-img",
            "styleUrls": [
                "./carousel-img.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel-img.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "IDpImage[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "imageClick",
                    "defaultValue": "new EventEmitter<SafeUrl>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "imageUrls",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "index",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "loadImageUrls",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImageClick",
                    "args": [
                        {
                            "name": "imageUrl",
                            "type": "SafeUrl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageUrl",
                            "type": "SafeUrl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiAmountPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiAvatar"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiCarousel"
                },
                {
                    "name": "TuiPagination"
                },
                {
                    "name": "TuiLoader"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output, SimpleChanges, OnDestroy, ChangeDetectionStrategy } from '@angular/core';\r\nimport { SafeUrl, DomSanitizer } from '@angular/platform-browser';\r\nimport { IDpImage } from '../../../interface/IDpImage';\r\nimport { ImagesRepositoryService } from '../../../repositories/images-repository.service';\r\nimport { AsyncPipe, CommonModule } from '@angular/common';\r\nimport { TuiButton, TuiLoader } from '@taiga-ui/core';\r\nimport { TuiAvatar, TuiCarousel, TuiPagination } from '@taiga-ui/kit';\r\nimport { TuiAmountPipe } from '@taiga-ui/addon-commerce';\r\nimport { Subscription, forkJoin, map } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-carousel-img',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    AsyncPipe,\r\n    TuiAmountPipe,\r\n    TuiAvatar,\r\n    TuiButton,\r\n    TuiCarousel,\r\n    TuiPagination,\r\n    TuiLoader\r\n  ],\r\n  templateUrl: './carousel-img.component.html',\r\n  styleUrls: [\r\n    './carousel-img.component.css',\r\n    '../../../styles/root.css'\r\n  ],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CarouselImgComponent implements OnInit, OnDestroy {\r\n  @Input() images: IDpImage[] = [];\r\n  @Output() imageClick = new EventEmitter<SafeUrl>();\r\n  imageUrls: { [key: number]: SafeUrl } = {};\r\n  index = 0;\r\n  private subscriptions: Subscription = new Subscription();\r\n\r\n  constructor(\r\n    private imagesRepository: ImagesRepositoryService,\r\n    private sanitizer: DomSanitizer,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadImageUrls();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes['images'] && !changes['images'].firstChange) {\r\n      this.loadImageUrls();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n    Object.values(this.imageUrls).forEach(url => {\r\n      if (typeof url === 'string') {\r\n        URL.revokeObjectURL(url);\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadImageUrls(): void {\r\n    if (!this.images || this.images.length === 0) {\r\n      this.imageUrls = {};\r\n      this.cd.markForCheck();\r\n      return;\r\n    }\r\n\r\n    const newImages = this.images.filter(image => !this.imageUrls[image.dpImagesId]);\r\n    if (newImages.length === 0) {\r\n      this.cd.markForCheck();\r\n      return;\r\n    }\r\n\r\n    const imageRequests = newImages.map(image =>\r\n      this.imagesRepository.getDpImageData(image.dpImagesId).pipe(\r\n        map(blob => ({ id: image.dpImagesId, blob }))\r\n      )\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      forkJoin(imageRequests).subscribe(results => {\r\n        results.forEach(({ id, blob }) => {\r\n          const url = URL.createObjectURL(blob);\r\n          this.imageUrls[id] = this.sanitizer.bypassSecurityTrustUrl(url);\r\n        });\r\n        this.cd.markForCheck();\r\n      })\r\n    );\r\n  }\r\n\r\n  onImageClick(imageUrl: SafeUrl): void {\r\n    this.imageClick.emit(imageUrl);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: stretch;\r\n    align-items: stretch;\r\n    box-sizing: border-box;\r\n}",
                    "styleUrl": "./carousel-img.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "imagesRepository",
                        "type": "ImagesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "imagesRepository",
                        "type": "ImagesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wrapper\">\r\n    <tui-carousel #carousel class=\"carousel\" [duration]=\"4000\" [(index)]=\"index\">\r\n        <ng-container *ngFor=\"let image of images\">\r\n            <div *tuiItem class=\"item\" (click)=\"onImageClick(imageUrls[image.dpImagesId])\">\r\n                <img [src]=\"imageUrls[image.dpImagesId]\" alt=\"Изображение товара {{ image.dpImagesId }}\"\r\n                    *ngIf=\"imageUrls[image.dpImagesId]\">\r\n            </div>\r\n        </ng-container>\r\n    </tui-carousel>\r\n    <tui-pagination size=\"s\" class=\"pagination\" [length]=\"images.length\" [(index)]=\"index\" />\r\n</div>"
        },
        {
            "name": "DialogCategoryComponent",
            "id": "component-DialogCategoryComponent-a781e7c7018e78683612dd4326b7016c12a852678b5081b770fc6a8ffc85b816f22a9004d7a32226d1006bd6a4dcda7b01edc3a7b4f45ee340a90d8031b38ec0",
            "file": "src/app/data/components/dialog-category/dialog-category.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-category",
            "styleUrls": [
                "./dialog-category.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-category.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alerts",
                    "defaultValue": "inject(TuiAlertService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "categoriesRepositoryService",
                    "defaultValue": "inject(CategoriesRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "categoryForm",
                    "defaultValue": "new FormGroup({\r\n    dpCategoryTitle: new FormControl('', Validators.required),\r\n    sizeId: new FormControl<number | null>(null)\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "categoryNameInputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'categoryNameInput', {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "context",
                    "defaultValue": "injectContext<TuiDialogContext<IDpCategory, IDpCategory>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "dialogs",
                    "defaultValue": "inject(TuiDialogService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsRepository",
                    "defaultValue": "inject(UserAchievementsRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsService",
                    "defaultValue": "inject(UserAchievementsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkLengthAndWarn",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "warningThreshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "15"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "warningThreshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "15",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createCategory",
                    "args": [
                        {
                            "name": "categoryData",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryData",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveFocus",
                    "args": [
                        {
                            "name": "targetInput",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "targetInput",
                            "type": "ElementRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWarning",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCategory",
                    "args": [
                        {
                            "name": "categoryData",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "categoryData",
                            "type": "IDpCategory",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAutoFocus"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiDataListWrapper"
                },
                {
                    "name": "TuiInputModule",
                    "type": "module"
                },
                {
                    "name": "TuiSelectModule",
                    "type": "module"
                },
                {
                    "name": "TuiSlider"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTextfieldControllerModule",
                    "type": "controller"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\r\nimport { TuiAlertService, TuiButton, TuiDialogContext, TuiDialogService, TuiTextfield } from '@taiga-ui/core';\r\nimport { TuiDataListWrapper, TuiSlider } from '@taiga-ui/kit';\r\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\r\nimport { injectContext } from '@taiga-ui/polymorpheus';\r\nimport { IDpCategory } from '../../../interface/IDpCategory';\r\nimport { CategoriesRepositoryService } from '../../../repositories/categories-repository.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog-category',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    TuiAutoFocus,\r\n    TuiButton,\r\n    TuiDataListWrapper,\r\n    TuiInputModule,\r\n    TuiSelectModule,\r\n    TuiSlider,\r\n    TuiTextfield,\r\n    TuiTextfieldControllerModule,\r\n    CommonModule\r\n  ],\r\n  templateUrl: './dialog-category.component.html',\r\n  styleUrls: ['./dialog-category.component.css']\r\n})\r\nexport class DialogCategoryComponent implements OnInit {\r\n  @ViewChild('categoryNameInput', { read: ElementRef }) categoryNameInputRef!: ElementRef;\r\n\r\n  private readonly alerts = inject(TuiAlertService);\r\n  private readonly dialogs = inject(TuiDialogService);\r\n  private readonly categoriesRepositoryService = inject(CategoriesRepositoryService);\r\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\r\n  private readonly configService = inject(ConfigService);\r\n  private readonly userAchievementsService = inject(UserAchievementsService);\r\n\r\n  public readonly context = injectContext<TuiDialogContext<IDpCategory, IDpCategory>>();\r\n\r\n  protected readonly categoryForm = new FormGroup({\r\n    dpCategoryTitle: new FormControl('', Validators.required),\r\n    sizeId: new FormControl<number | null>(null)\r\n  });\r\n\r\n  protected get hasValue(): boolean {\r\n    return this.categoryForm.valid;\r\n  }\r\n\r\n  protected get data(): IDpCategory {\r\n    return this.context.data;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.userAchievementsRepository\r\n      .handleAchievement(\r\n        userProjId,\r\n        this.configService.achievementIds.openCategoryDialogSuccess,\r\n        'Достижение: диалог категории открыт!'\r\n      )\r\n      .subscribe();\r\n    if (this.data) {\r\n      this.categoryForm.patchValue(this.data);\r\n    }\r\n  }\r\n\r\n  protected submit(event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.hasValue) {\r\n      const categoryData = this.categoryForm.value;\r\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n\r\n      if (this.data.dpCategoryId) {\r\n        this.updateCategory({ ...categoryData, dpCategoryId: this.data.dpCategoryId } as IDpCategory, userProjId);\r\n      } else {\r\n        this.createCategory(categoryData as IDpCategory, userProjId);\r\n      }\r\n    } else {\r\n      this.showError('Форма заполнена некорректно.');\r\n    }\r\n  }\r\n\r\n  private createCategory(categoryData: IDpCategory, userProjId: number): void {\r\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.addCategoryFailed,\r\n          'Тест-кейс: ошибка создания категории!'\r\n        )\r\n        .subscribe();\r\n      this.showError('Тест-кейс: ошибка создания категории!');\r\n      return;\r\n    }\r\n    this.categoriesRepositoryService.createDpCategory(categoryData).subscribe({\r\n      next: (createdCategory) => {\r\n        this.context.completeWith(createdCategory);\r\n        this.showSuccess('Категория успешно создана.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.addCategorySuccess,\r\n            'Достижение: категория успешно создана!'\r\n          )\r\n          .subscribe();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при создании категории:', error);\r\n        this.showError('Ошибка при создании категории.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.addCategoryFailed, // Исправляем\r\n            'Достижения: ошибка создания категории!'\r\n          )\r\n          .subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateCategory(categoryData: IDpCategory, userProjId: number): void {\r\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.addCategoryFailed,\r\n          'Тест-кейс: ошибка создания категории!'\r\n        )\r\n        .subscribe();\r\n      this.showError('Тест-кейс: ошибка создания категории!');\r\n      return;\r\n    }\r\n    this.categoriesRepositoryService.updateDpCategory(categoryData.dpCategoryId, categoryData).subscribe({\r\n      next: () => {\r\n        this.context.completeWith(categoryData);\r\n        this.showSuccess('Категория успешно обновлена.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCategorySuccess, 'Достижение: категория успешно обновлена!')\r\n          .subscribe();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при обновлении категории:', error);\r\n        this.showError('Ошибка при обновлении категории.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCategoryFailed, 'Достижение: ошибка обновления категории!')\r\n          .subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private showError(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Ошибка',\r\n        appearance: 'negative',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n\r\n  private showSuccess(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Успех',\r\n        appearance: 'success',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n\r\n  protected onInput(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const cleanedValue = input.value.replace(/[^a-zA-Z0-9]/g, '');\r\n    const maxLength = 200;\r\n    const finalValue = this.checkLengthAndWarn(cleanedValue, maxLength);\r\n\r\n    input.value = finalValue;\r\n    this.categoryForm.get('dpCategoryTitle')?.setValue(finalValue);\r\n  }\r\n\r\n  private checkLengthAndWarn(value: string, maxLength: number, warningThreshold: number = 15): string {\r\n    if (value.length > maxLength) {\r\n      this.showError(`Вы превысили максимальную длину в ${maxLength} символов.`);\r\n      return value.slice(0, maxLength);\r\n    } else if (value.length > maxLength - warningThreshold) {\r\n      this.showWarning(`Вы приближаетесь к лимиту символов. Осталось ${maxLength - value.length} символов.`);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  protected moveFocus(targetInput: ElementRef): void {\r\n    targetInput.nativeElement.querySelector('input').focus();\r\n  }\r\n\r\n  private showWarning(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Предупреждение',\r\n        appearance: 'warning',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog-category.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "hasValue": {
                    "name": "hasValue",
                    "getSignature": {
                        "name": "hasValue",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 51
                    }
                },
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "IDpCategory",
                        "line": 55
                    }
                }
            },
            "templateData": "<form [formGroup]=\"categoryForm\" (submit)=\"submit()\">\r\n  <tui-input\r\n    #categoryNameInput\r\n    tuiAutoFocus\r\n    tuiTextfieldSize=\"m\"\r\n    maxlength=\"200\"\r\n    formControlName=\"dpCategoryTitle\"\r\n  >\r\n    название категории\r\n  </tui-input>\r\n  <br />\r\n  <button tuiButton type=\"submit\" [disabled]=\"!categoryForm.valid\">Добавить категорию</button>\r\n</form>\r\n"
        },
        {
            "name": "DialogImageComponent",
            "id": "component-DialogImageComponent-27290d835f131d14023594327e76d81e27fcb8ab3d321f837387934b17f9e0d13d3012b227e3fcb4578053bf247e582963d940449b771f774fed2a48ef1e2308",
            "file": "src/app/data/components/dialog-image/dialog-image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-image",
            "styleUrls": [
                "./dialog-image.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-image.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alerts",
                    "defaultValue": "inject(TuiAlertService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "allowedTypes",
                    "defaultValue": "['image/jpeg', 'image/png']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "context",
                    "defaultValue": "injectContext<TuiDialogContext<IDpImage, IDpImage>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "dialogs",
                    "defaultValue": "inject(TuiDialogService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "failedImage$",
                    "defaultValue": "new Subject<TuiFileLike | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "imageControl",
                    "defaultValue": "new FormControl<TuiFileLike | null>(null, Validators.required)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "imageForm",
                    "defaultValue": "new FormGroup({\r\n    dpProductId: new FormControl<number | null>(null, Validators.required),\r\n    dpImageTitle: new FormControl('', [Validators.required, Validators.maxLength(200)])\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "imagesRepositoryService",
                    "defaultValue": "inject(ImagesRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loadedImage$",
                    "defaultValue": "new Subject<TuiFileLike | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "loadingImage$",
                    "defaultValue": "new Subject<TuiFileLike | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "maxFileSize",
                    "defaultValue": "5 * 1024 * 1024",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "productNameInputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'productNameInput', {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "selectedFile",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "userAchievementsRepository",
                    "defaultValue": "inject(UserAchievementsRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsService",
                    "defaultValue": "inject(UserAchievementsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createImage",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "ICreateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "ICreateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeImage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateImage",
                    "args": [
                        {
                            "name": "imageData",
                            "type": "IUpdateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "imageData",
                            "type": "IUpdateDpImageRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAutoFocus"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiDataListWrapper"
                },
                {
                    "name": "TuiFiles"
                },
                {
                    "name": "TuiInputModule",
                    "type": "module"
                },
                {
                    "name": "TuiSelectModule",
                    "type": "module"
                },
                {
                    "name": "TuiSlider"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTextfieldControllerModule",
                    "type": "controller"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, ViewChild, ElementRef, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { AsyncPipe, NgIf } from '@angular/common';\r\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\r\nimport { TuiAlertService, TuiButton, TuiDialogContext, TuiDialogService, TuiTextfield } from '@taiga-ui/core';\r\nimport { TuiDataListWrapper, TuiFileLike, TuiFiles, TuiSlider } from '@taiga-ui/kit';\r\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\r\nimport { injectContext } from '@taiga-ui/polymorpheus';\r\nimport { Subject, Observable, of } from 'rxjs';\r\nimport { ICreateDpImageRequest } from '../../../interface/ICreateDpImageRequest';\r\nimport { ImagesRepositoryService } from '../../../repositories/images-repository.service';\r\nimport { IDpImage } from '../../../interface/IDpImage';\r\nimport { IUpdateDpImageRequest } from '../../../interface/IUpdateDpImageRequest';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog-image',\r\n  standalone: true,\r\n  imports: [\r\n    AsyncPipe,\r\n    ReactiveFormsModule,\r\n    TuiAutoFocus,\r\n    TuiButton,\r\n    TuiDataListWrapper,\r\n    TuiFiles,\r\n    TuiInputModule,\r\n    TuiSelectModule,\r\n    TuiSlider,\r\n    TuiTextfield,\r\n    TuiTextfieldControllerModule,\r\n    NgIf\r\n  ],\r\n  templateUrl: './dialog-image.component.html',\r\n  styleUrls: ['./dialog-image.component.css']\r\n})\r\nexport class DialogImageComponent implements OnInit {\r\n  @ViewChild('productNameInput', { read: ElementRef }) productNameInputRef!: ElementRef;\r\n\r\n  private readonly alerts = inject(TuiAlertService);\r\n  private readonly dialogs = inject(TuiDialogService);\r\n  private readonly imagesRepositoryService = inject(ImagesRepositoryService);\r\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\r\n  private readonly configService = inject(ConfigService);\r\n  private readonly userAchievementsService = inject(UserAchievementsService);\r\n\r\n  public readonly context = injectContext<TuiDialogContext<IDpImage, IDpImage>>();\r\n\r\n  protected readonly imageControl = new FormControl<TuiFileLike | null>(null, Validators.required);\r\n  protected readonly failedImage$ = new Subject<TuiFileLike | null>();\r\n  protected readonly loadingImage$ = new Subject<TuiFileLike | null>();\r\n  protected readonly loadedImage$ = new Subject<TuiFileLike | null>();\r\n\r\n  protected readonly imageForm = new FormGroup({\r\n    dpProductId: new FormControl<number | null>(null, Validators.required),\r\n    dpImageTitle: new FormControl('', [Validators.required, Validators.maxLength(200)])\r\n  });\r\n\r\n  selectedFile: File | null = null;\r\n  private readonly maxFileSize = 5 * 1024 * 1024; // 5MB\r\n  private readonly allowedTypes = ['image/jpeg', 'image/png'];\r\n\r\n  protected get hasValue(): boolean {\r\n    return this.imageForm.valid && !!this.selectedFile;\r\n  }\r\n\r\n  protected get data(): IDpImage {\r\n    return this.context.data;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.userAchievementsRepository\r\n      .handleAchievement(userProjId, this.configService.achievementIds.openImageDialogSuccess, 'тест-кейс: диалог изображения открыт!')\r\n      .subscribe();\r\n    if (this.data) {\r\n      this.imageForm.patchValue({\r\n        dpProductId: this.data.dpProductId,\r\n        dpImageTitle: this.data.dpImageTitle\r\n      });\r\n    }\r\n  }\r\n\r\n  protected removeImage(): void {\r\n    this.imageControl.setValue(null);\r\n    this.selectedFile = null;\r\n    this.loadedImage$.next(null);\r\n    this.failedImage$.next(null);\r\n    this.loadingImage$.next(null);\r\n  }\r\n\r\n  protected onFileChange(event: Event): void {\r\n    const input = event.target as HTMLInputElement;\r\n    if (input.files && input.files.length > 0) {\r\n      const file = input.files[0];\r\n      const validationError = this.validateFile(file);\r\n      if (validationError) {\r\n        this.showError(validationError);\r\n        this.failedImage$.next(file);\r\n        this.imageControl.setValue(null);\r\n        this.selectedFile = null;\r\n        return;\r\n      }\r\n      this.selectedFile = file;\r\n      this.imageControl.setValue(file);\r\n      this.loadedImage$.next(file);\r\n    }\r\n  }\r\n\r\n  private validateFile(file: File): string | null {\r\n    if (file.size > this.maxFileSize) {\r\n      return `Файл слишком большой (максимум ${this.maxFileSize / 1024 / 1024}MB).`;\r\n    }\r\n    if (!this.allowedTypes.includes(file.type)) {\r\n      return 'Поддерживаются только JPEG и PNG.';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  protected submit(event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.hasValue) {\r\n      const imageData = this.imageForm.value;\r\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n      this.loadingImage$.next(this.selectedFile);\r\n\r\n      if (this.data.dpImagesId) {\r\n        const updateRequest: IUpdateDpImageRequest = {\r\n          dpProductId: imageData.dpProductId!,\r\n          dpImageTitle: imageData.dpImageTitle!,\r\n          file: this.selectedFile!\r\n        };\r\n        this.updateImage(updateRequest, userProjId);\r\n      } else {\r\n        const createRequest: ICreateDpImageRequest = {\r\n          dpProductId: imageData.dpProductId!,\r\n          dpImageTitle: imageData.dpImageTitle!,\r\n          file: this.selectedFile!\r\n        };\r\n        this.createImage(createRequest, userProjId);\r\n      }\r\n    } else {\r\n      this.showError('Форма заполнена некорректно.');\r\n    }\r\n  }\r\n\r\n  private createImage(imageData: ICreateDpImageRequest, userProjId: number): void {\r\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.addImageFailed,\r\n          'тест-кейс: ошибка добавления изображения!'\r\n        )\r\n        .subscribe();\r\n      this.showError('Тест-кейс: ошибка добавления изображения!');\r\n      this.failedImage$.next(this.selectedFile);\r\n      this.loadingImage$.next(null);\r\n      return;\r\n    }\r\n\r\n    // Обычная логика\r\n    this.imagesRepositoryService.createDpImage(imageData).subscribe({\r\n      next: (createdImage) => {\r\n        this.context.completeWith(createdImage);\r\n        this.showSuccess('Изображение успешно загружено.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.addImageSuccess,\r\n            'тест-кейс: изображение успешно добавлено!'\r\n          )\r\n          .subscribe();\r\n        this.loadingImage$.next(null);\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при загрузке изображения:', error);\r\n        this.showError(`Ошибка при загрузке изображения: ${error.message || 'неизвестная ошибка'}`);\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.addImageFailed,\r\n            'тест-кейс: ошибка добавления изображения!'\r\n          )\r\n          .subscribe();\r\n        this.failedImage$.next(this.selectedFile);\r\n        this.loadingImage$.next(null);\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateImage(imageData: IUpdateDpImageRequest, userProjId: number): void {\r\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.updateImageFailed,\r\n          'тест-кейс: ошибка обновления изображения!'\r\n        )\r\n        .subscribe();\r\n      this.showError('Тест-кейс: ошибка обновления изображения!');\r\n      return;\r\n    }\r\n\r\n    // Обычная логика обновления изображения\r\n    this.imagesRepositoryService.updateDpImage(this.data.dpImagesId, imageData).subscribe({\r\n      next: () => {\r\n        this.context.completeWith(this.data);\r\n        this.showSuccess('Изображение успешно обновлено.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.updateImageSuccess, 'тест-кейс: изображение успешно обновлено!')\r\n          .subscribe();\r\n        this.loadingImage$.next(null);\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при обновлении изображения:', error);\r\n        this.showError(`Ошибка при обновлении изображения: ${error.message || 'неизвестная ошибка'}`);\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.updateImageFailed, 'тест-кейс: ошибка обновления изображения!')\r\n          .subscribe();\r\n        this.failedImage$.next(this.selectedFile);\r\n        this.loadingImage$.next(null);\r\n      }\r\n    });\r\n  }\r\n\r\n  private showError(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Ошибка',\r\n        appearance: 'negative',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n\r\n  private showSuccess(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Успех',\r\n        appearance: 'success',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog-image.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "hasValue": {
                    "name": "hasValue",
                    "getSignature": {
                        "name": "hasValue",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 65
                    }
                },
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "IDpImage",
                        "line": 69
                    }
                }
            },
            "templateData": "<div class=\"dialog-container\">\r\n  <form [formGroup]=\"imageForm\" (submit)=\"submit($event)\">\r\n    <tui-input\r\n      tuiTextfieldSize=\"m\"\r\n      maxlength=\"200\"\r\n      formControlName=\"dpProductId\"\r\n    >\r\n      ID продукта\r\n    </tui-input>\r\n    <br />\r\n    <tui-input\r\n      tuiTextfieldSize=\"m\"\r\n      maxlength=\"200\"\r\n      formControlName=\"dpImageTitle\"\r\n    >\r\n      Название изображения\r\n    </tui-input>\r\n    <br />\r\n    <label *ngIf=\"!imageControl.value\" tuiInputFiles>\r\n      <input accept=\"image/*\" tuiInputFiles [formControl]=\"imageControl\" (change)=\"onFileChange($event)\" />\r\n    </label>\r\n    <br />\r\n    <button tuiButton type=\"submit\" [disabled]=\"!hasValue\">Загрузить изображение</button>\r\n  </form>\r\n\r\n  <tui-files class=\"tui-space_top-1\">\r\n    <tui-file\r\n      *ngIf=\"imageControl.value | tuiFileRejected: {accept: 'image/*'} | async as file\"\r\n      state=\"error\"\r\n      [file]=\"file\"\r\n      (remove)=\"removeImage()\"\r\n    />\r\n\r\n    <tui-file\r\n      *ngIf=\"loadedImage$ | async as file\"\r\n      [file]=\"file\"\r\n      (remove)=\"removeImage()\"\r\n    />\r\n\r\n    <tui-file\r\n      *ngIf=\"failedImage$ | async as file\"\r\n      state=\"error\"\r\n      [file]=\"file\"\r\n      (remove)=\"removeImage()\"\r\n    />\r\n\r\n    <tui-file\r\n      *ngIf=\"loadingImage$ | async as file\"\r\n      state=\"loading\"\r\n      [file]=\"file\"\r\n      (remove)=\"removeImage()\"\r\n    />\r\n  </tui-files>\r\n</div>\r\n"
        },
        {
            "name": "DialogProductComponent",
            "id": "component-DialogProductComponent-a4bb12b6dee4595512b039b3492808f689ae70016ac13d02fae793aeaadda0f1c185df85538b84ec8e2d3fa98ca6b7832dc23f4e25ce8caaa219d442c74102f0",
            "file": "src/app/data/components/dialog-product/dialog-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog-product",
            "styleUrls": [
                "./dialog-product.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog-product.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alerts",
                    "defaultValue": "inject(TuiAlertService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "context",
                    "defaultValue": "injectContext<TuiDialogContext<IDpProduct, IDpProduct>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "dialogs",
                    "defaultValue": "inject(TuiDialogService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "productForm",
                    "defaultValue": "new FormGroup({\r\n    dpTitle: new FormControl('', Validators.required),\r\n    dpDescription: new FormControl(''),\r\n    dpPrice: new FormControl(0, [Validators.required, Validators.min(0)]),\r\n    dpPurchasePrice: new FormControl(0, [Validators.required, Validators.min(0)]),\r\n    dpCategoryId: new FormControl(0),\r\n    dpDiscountPercent: new FormControl(0, [Validators.min(0), Validators.max(100)])\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "productNameInputRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'productNameInput', {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "productsRepositoryService",
                    "defaultValue": "inject(ProductsRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsRepository",
                    "defaultValue": "inject(UserAchievementsRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsService",
                    "defaultValue": "inject(UserAchievementsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkLengthAndWarn",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "warningThreshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "15"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "warningThreshold",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "15",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "productData",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxLength",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWarning",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "productData",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "productData",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAutoFocus"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiDataListWrapper"
                },
                {
                    "name": "TuiInputModule",
                    "type": "module"
                },
                {
                    "name": "TuiSelectModule",
                    "type": "module"
                },
                {
                    "name": "TuiSlider"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTextfieldControllerModule",
                    "type": "controller"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, ViewChild, ElementRef, OnInit, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\r\nimport { TuiAlertService, TuiButton, TuiDialogContext, TuiDialogService, TuiTextfield } from '@taiga-ui/core';\r\nimport { TuiDataListWrapper, TuiSlider } from '@taiga-ui/kit';\r\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\r\nimport { injectContext } from '@taiga-ui/polymorpheus';\r\nimport { IDpProduct } from '../../../interface/IDpProduct';\r\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\r\nimport { AsyncPipe, CommonModule, NgIf } from '@angular/common';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog-product',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TuiAutoFocus,\r\n    TuiButton,\r\n    TuiDataListWrapper,\r\n    TuiInputModule,\r\n    TuiSelectModule,\r\n    TuiSlider,\r\n    TuiTextfield,\r\n    TuiTextfieldControllerModule,\r\n    AsyncPipe,\r\n    NgIf\r\n  ],\r\n  templateUrl: './dialog-product.component.html',\r\n  styleUrls: ['./dialog-product.component.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class DialogProductComponent implements OnInit {\r\n  @ViewChild('productNameInput', { read: ElementRef }) productNameInputRef!: ElementRef;\r\n\r\n  private readonly alerts = inject(TuiAlertService);\r\n  private readonly dialogs = inject(TuiDialogService);\r\n  private readonly productsRepositoryService = inject(ProductsRepositoryService);\r\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\r\n  private readonly configService = inject(ConfigService);\r\n  private readonly userAchievementsService = inject(UserAchievementsService);\r\n\r\n  public readonly context = injectContext<TuiDialogContext<IDpProduct, IDpProduct>>();\r\n\r\n  protected readonly productForm = new FormGroup({\r\n    dpTitle: new FormControl('', Validators.required),\r\n    dpDescription: new FormControl(''),\r\n    dpPrice: new FormControl(0, [Validators.required, Validators.min(0)]),\r\n    dpPurchasePrice: new FormControl(0, [Validators.required, Validators.min(0)]),\r\n    dpCategoryId: new FormControl(0),\r\n    dpDiscountPercent: new FormControl(0, [Validators.min(0), Validators.max(100)])\r\n  });\r\n\r\n  protected get hasValue(): boolean {\r\n    return this.productForm.valid;\r\n  }\r\n\r\n  protected get data(): IDpProduct {\r\n    return this.context.data;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.userAchievementsRepository\r\n      .handleAchievement(userProjId, this.configService.achievementIds.openProductDialogSuccess, 'тест-кейс: диалог продукта открыт!')\r\n      .subscribe();\r\n    if (this.data) {\r\n      this.productForm.patchValue(this.data);\r\n    }\r\n  }\r\n\r\n  protected submit(event?: Event): void {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n    if (this.hasValue) {\r\n      const productData = this.productForm.value;\r\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n\r\n      if (this.data.dpProductId) {\r\n        this.updateProduct({ ...productData, dpProductId: this.data.dpProductId } as IDpProduct, userProjId);\r\n      } else {\r\n        this.createProduct(productData as IDpProduct, userProjId);\r\n      }\r\n    } else {\r\n      this.showError('Форма заполнена некорректно.');\r\n    }\r\n  }\r\n\r\n  private createProduct(productData: IDpProduct, userProjId: number): void {\r\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.createProductFailed,\r\n          'тест-кейс: ошибка создания продукта!'\r\n        )\r\n        .subscribe();\r\n      this.showError('Тест-кейс: ошибка создания продукта!');\r\n      return;\r\n    }\r\n\r\n    // Обычная логика создания продукта\r\n    this.productsRepositoryService.createProduct(productData).subscribe({\r\n      next: (createdProduct) => {\r\n        this.context.completeWith(createdProduct);\r\n        this.showSuccess('Продукт успешно создан.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.createProductSuccess,\r\n            'тест-кейс: продукт успешно создан!'\r\n          )\r\n          .subscribe();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при создании продукта:', error);\r\n        this.showError('Ошибка при создании продукта.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.createProductFailed,\r\n            'тест-кейс: ошибка создания продукта!'\r\n          )\r\n          .subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateProduct(productData: IDpProduct, userProjId: number): void {\r\n    // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.updateProductFailed,\r\n          'тест-кейс: ошибка обновления продукта!'\r\n        )\r\n        .subscribe();\r\n      this.showError('Тест-кейс: ошибка обновления продукта!');\r\n      return;\r\n    }\r\n\r\n    // Обычная логика обновления продукта\r\n    this.productsRepositoryService.updateProduct(productData.dpProductId, productData).subscribe({\r\n      next: () => {\r\n        this.context.completeWith(productData);\r\n        this.showSuccess('Продукт успешно обновлён.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.updateProductSuccess,\r\n            'тест-кейс: продукт успешно обновлён!'\r\n          )\r\n          .subscribe();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при обновлении продукта:', error);\r\n        this.showError('Ошибка при обновлении продукта.');\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.updateProductFailed,\r\n            'тест-кейс: ошибка обновления продукта!'\r\n          )\r\n          .subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private showError(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Ошибка',\r\n        appearance: 'negative',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n\r\n  private showSuccess(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Успех',\r\n        appearance: 'success',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n\r\n  protected onInput(event: Event, controlName: string, maxLength: number): void {\r\n    const input = event.target as HTMLInputElement;\r\n    const cleanedValue = input.value;\r\n    const finalValue = this.checkLengthAndWarn(cleanedValue, maxLength, controlName);\r\n    input.value = finalValue;\r\n    this.productForm.patchValue({ [controlName]: finalValue });\r\n  }\r\n\r\n  private checkLengthAndWarn(value: string, maxLength: number, controlName: string, warningThreshold: number = 15): string {\r\n    if (value.length > maxLength) {\r\n      this.showError(`Вы превысили максимальную длину в ${maxLength} символов для ${controlName}.`);\r\n      return value.slice(0, maxLength);\r\n    } else if (value.length > maxLength - warningThreshold) {\r\n      this.showWarning(`Вы приближаетесь к лимиту символов для ${controlName}. Осталось ${maxLength - value.length} символов.`);\r\n    }\r\n    return value;\r\n  }\r\n\r\n  private showWarning(message: string): void {\r\n    this.alerts\r\n      .open(message, {\r\n        label: 'Предупреждение',\r\n        appearance: 'warning',\r\n        autoClose: 5000\r\n      })\r\n      .subscribe();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog-product.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "hasValue": {
                    "name": "hasValue",
                    "getSignature": {
                        "name": "hasValue",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 58
                    }
                },
                "data": {
                    "name": "data",
                    "getSignature": {
                        "name": "data",
                        "type": "",
                        "returnType": "IDpProduct",
                        "line": 62
                    }
                }
            },
            "templateData": "<div class=\"dialog-container\">\r\n  <form [formGroup]=\"productForm\" (submit)=\"submit($event)\">\r\n    <tui-input\r\n      #productNameInput\r\n      tuiAutoFocus\r\n      tuiTextfieldSize=\"m\"\r\n      maxlength=\"200\"\r\n      formControlName=\"dpTitle\"\r\n      (input)=\"onInput($event, 'dpTitle', 200)\"\r\n    >\r\n      Название продукта\r\n    </tui-input>\r\n    <br />\r\n    <tui-input\r\n      #productDescriptionInput\r\n      tuiTextfieldSize=\"m\"\r\n      maxlength=\"1000\"\r\n      formControlName=\"dpDescription\"\r\n      (input)=\"onInput($event, 'dpDescription', 1000)\"\r\n    >\r\n      Описание продукта\r\n    </tui-input>\r\n    <br />\r\n    <tui-input\r\n      tuiTextfieldSize=\"m\"\r\n      type=\"number\"\r\n      formControlName=\"dpPrice\"\r\n    >\r\n      Цена продукта\r\n    </tui-input>\r\n    <br />\r\n    <tui-input\r\n      tuiTextfieldSize=\"m\"\r\n      type=\"number\"\r\n      formControlName=\"dpPurchasePrice\"\r\n    >\r\n      Закупочная цена\r\n    </tui-input>\r\n    <br />\r\n    <tui-input\r\n      tuiTextfieldSize=\"m\"\r\n      type=\"number\"\r\n      formControlName=\"dpCategoryId\"\r\n    >\r\n      ID категории\r\n    </tui-input>\r\n    <br />\r\n    <tui-input\r\n      tuiTextfieldSize=\"m\"\r\n      type=\"number\"\r\n      formControlName=\"dpDiscountPercent\"\r\n    >\r\n      Процент скидки\r\n    </tui-input>\r\n    <br />\r\n    <button tuiButton type=\"submit\" [disabled]=\"!hasValue\">Добавить продукт</button>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "FilterByInputComponent",
            "id": "component-FilterByInputComponent-952d2cb140a24912ce0813c7f083073b03bd241581923eabe6af5669302015d06de3cbde55bff89033d3e77a14372f8f27dde242abba31307f028adbfc623703",
            "file": "src/app/data/components/filter-by-input/filter-by-input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FilterByInputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-filter-by-input",
            "styleUrls": [
                "./filter-by-input.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./filter-by-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "searchQuery",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n    search: new FormControl('', [Validators.pattern('^[a-zA-Zа-яА-Я0-9]*$')]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "innerValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "methodsClass": [
                {
                    "name": "onKeyPress",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiDataListWrapper"
                },
                {
                    "name": "TuiInputModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, FormGroup, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiDataListWrapper } from '@taiga-ui/kit';\r\nimport {TuiInputModule} from '@taiga-ui/legacy';\r\n\r\n@Component({\r\n  selector: 'app-filter-by-input',\r\n  standalone: true,\r\n  imports: [\r\n    ReactiveFormsModule,\r\n    TuiDataListWrapper,\r\n    TuiInputModule\r\n  ],\r\n  templateUrl: './filter-by-input.component.html',\r\n  styleUrls: ['./filter-by-input.component.css',\r\n    '../../../styles/root.css',],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FilterByInputComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FilterByInputComponent implements ControlValueAccessor {\r\n  @Input() label: string = 'Search';\r\n  @Input() items: string[] = [];\r\n  @Output() searchQuery = new EventEmitter<string>();\r\n\r\n  form = new FormGroup({\r\n    search: new FormControl('', [Validators.pattern('^[a-zA-Zа-яА-Я0-9]*$')]),\r\n  });\r\n\r\n  private innerValue: string = '';\r\n\r\n  get filteredItems() {\r\n    const value = this.form.get('search')?.value ?? '';\r\n    this.searchQuery.emit(value);\r\n    return this.items.filter(item => item.includes(value));\r\n  }\r\n\r\n  constructor() {\r\n    this.form.controls['search'].valueChanges.subscribe(value => {\r\n      const safeValue = value ?? '';\r\n      this.searchQuery.emit(safeValue);\r\n      this.onChange(safeValue);\r\n    });\r\n  }\r\n\r\n  onKeyPress(event: KeyboardEvent): void {\r\n    const inputChar = event.key;\r\n    const allowedChars = /^[a-zA-Zа-яА-Я0-9]$/;\r\n    if (!allowedChars.test(inputChar) && !event.ctrlKey && !event.metaKey) {\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    this.innerValue = value;\r\n    this.form.controls['search'].setValue(value, { emitEvent: false });\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n    if (isDisabled) {\r\n      this.form.disable();\r\n    } else {\r\n      this.form.enable();\r\n    }\r\n  }\r\n\r\n  onChange = (value: string) => {};\r\n  onTouched = () => {};\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./filter-by-input.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 41
            },
            "extends": [],
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "filteredItems": {
                    "name": "filteredItems",
                    "getSignature": {
                        "name": "filteredItems",
                        "type": "",
                        "returnType": "",
                        "line": 37
                    }
                }
            },
            "templateData": "<form [formGroup]=\"form\">\r\n  <tui-input formControlName=\"search\" (keypress)=\"onKeyPress($event)\">\r\n    {{ label }}\r\n    <tui-data-list-wrapper\r\n      *tuiDataList\r\n      [items]=\"filteredItems\"\r\n    />\r\n  </tui-input>\r\n</form>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "IconTrashComponent",
            "id": "component-IconTrashComponent-82e0411ac22c2aa54802bea7ded4265daeb68e112e47a5304682b2aa85ba380f4c808d969f6a7bbb18a83ba7406445b56715c55f5cabfd39bcfe6240da47b737",
            "file": "src/app/data/components/icon-trash/icon-trash.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-icon-trash",
            "styleUrls": [
                "./icon-trash.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./icon-trash.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "ICartItem",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "responseAlert",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "showNotification",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TuiIcon"
                },
                {
                    "name": "TuiIconPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, } from '@angular/core';\r\nimport { TuiAlertService, TuiIcon, TuiIconPipe } from '@taiga-ui/core';\r\nimport { switchMap, takeUntil } from 'rxjs';\r\nimport { Router,  } from '@angular/router';\r\nimport { PolymorpheusComponent } from '@taiga-ui/polymorpheus';\r\nimport { AlertDeleteComponent } from '../alert-delete/alert-delete.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ICartItem } from '../../../interface/ICartItem';\r\n\r\n@Component({\r\n  selector: 'app-icon-trash',\r\n  imports: [ CommonModule,\r\n    TuiIcon, TuiIconPipe,],\r\n  templateUrl: './icon-trash.component.html',\r\n  styleUrls: ['./icon-trash.component.css', \r\n    '../../../styles/root.css',],\r\n})\r\nexport class IconTrashComponent {\r\n  @Input() item!: ICartItem;\r\n  \r\n\r\n  @Output() responseAlert = new EventEmitter<boolean>();\r\n  constructor(\r\n    private alerts: TuiAlertService,\r\n    private router: Router,\r\n  ) { }\r\n\r\n  protected showNotification(): void {\r\n    const notification = this.alerts\r\n      .open<boolean>(new PolymorpheusComponent(AlertDeleteComponent), {\r\n        label: 'Вы уверены, что хотите удалить?',\r\n        appearance: 'negative',\r\n        autoClose: 0,\r\n      })\r\n      .pipe(\r\n        switchMap((response) => {\r\n          if (response) {\r\n            this.responseAlert.emit(true);\r\n            console.log(`Удаление товара: ${this.item.productId}`);\r\n            return this.alerts.open(`Товар \"${this.item.productId}\" удален.`, { label: 'Успех' });\r\n          } else {\r\n            return this.alerts.open(`Удаление товара \"${this.item.productId}\" отменено.`, { label: 'Информация' });\r\n          }\r\n        }),\r\n        takeUntil(this.router.events),\r\n      );\r\n    notification.subscribe();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./icon-trash.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "alerts",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "alerts",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<img alt=\"\"\r\n[src]=\"'@tui.trash' | tuiIcon\"\r\n    (click)=\"showNotification()\" \r\n>\r\n"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-f43c34beda4ae7457510c5d04aabc6e3e5f1c006a15a2fb02ead2da551a97ea7092c0dcdece5d8b9995569e8dd854b0425937d3ca81662554f92752c0667b966",
            "file": "src/app/data/components/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loading",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "path",
                    "defaultValue": "\"loading.gif\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading',\r\n  imports: [],\r\n  templateUrl: './loading.component.html',\r\n  styleUrl: './loading.component.css'\r\n})\r\nexport class LoadingComponent {\r\n  path: string = \"loading.gif\";\r\n}\r\n",
            "styleUrl": "./loading.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"loading\">\r\n    <span class=\"loader\"></span>\r\n</div>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-ade19e75330cc6349cb7f355000a74f816679227c9b3df723dbae8a5171a4ff6c724c6398d21bc75b5d41d14aa6fd648f37b74798c39ff96d33e75ea1fa51ff0",
            "file": "src/app/data/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAppearance"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiCardLarge"
                },
                {
                    "name": "TuiError"
                },
                {
                    "name": "TuiFieldErrorPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiForm"
                },
                {
                    "name": "TuiHeader"
                },
                {
                    "name": "TuiNotification"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTitle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject } from '@angular/core';\r\nimport { AuthRepositoryService } from '../../../repositories/auth-repository.service';\r\nimport { IDpUser } from '../../../interface/IDpUser';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\r\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\r\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { TuiAlertService } from '@taiga-ui/core';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TuiAppearance,\r\n    TuiButton,\r\n    TuiCardLarge,\r\n    TuiError,\r\n    TuiFieldErrorPipe,\r\n    TuiForm,\r\n    TuiHeader,\r\n    TuiNotification,\r\n    TuiTextfield,\r\n    TuiTitle,\r\n  ],\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class LoginComponent {\r\n  protected readonly form = new FormGroup({\r\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n  });\r\n\r\n  constructor(\r\n    private authRepository: AuthRepositoryService,\r\n    private userAchievementsRepository: UserAchievementsRepositoryService,\r\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService),\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService,\r\n    private configService: ConfigService\r\n  ) { }\r\n\r\n  onLogin() {\r\n    if (this.form.valid) {\r\n      const user: IDpUser = {\r\n        dpUserId: 0,\r\n        dpUsername: this.form.value.username || '',\r\n        dpPassword: this.form.value.password || '',\r\n        dpRegistrationDate: new Date(),\r\n        dpPhoneNumber: '0000000000'\r\n      };\r\n      // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n      if (this.userAchievementsService.getAlwaysFailMode()) {\r\n        const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.loginFailed, 'тест-кейс неудачного входа разблокировано!')\r\n          .subscribe();\r\n        this.alertService.open('Тест-кейс: ошибка входа (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n        return;\r\n      }\r\n      \r\n      this.authRepository.login(user).subscribe({\r\n        next: (response) => {\r\n          if (response && response.token) {\r\n            this.alertService.open('Успешный вход!', { appearance: 'success' }).subscribe();\r\n            localStorage.setItem('token', response.token);\r\n\r\n            const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n            this.userAchievementsRepository\r\n              .handleAchievement(userProjId, this.configService.achievementIds.loginSuccess, 'тест-кейс входа разблокировано!')\r\n              .subscribe({\r\n                complete: () => this.router.navigate(['/'])\r\n              });\r\n          }\r\n        },\r\n        error: (error) => {\r\n          const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.loginFailed, 'тест-кейс неудачного входа разблокировано!')\r\n            .subscribe();\r\n\r\n          let errorMessage = 'Ошибка входа: неверное имя пользователя или пароль';\r\n          if (error.status === this.configService.httpStatusCodes.unauthorized) {\r\n            errorMessage = 'Ошибка: неверные учетные данные';\r\n          } else if (error.status === this.configService.httpStatusCodes.serverError) {\r\n            errorMessage = 'Ошибка сервера, попробуйте позже';\r\n          }\r\n\r\n          this.alertService.open(errorMessage, { appearance: 'error' }).subscribe();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  navigateToRegister() {\r\n    this.router.navigate(['/register']);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: var(--tui-base-01);\r\n  padding: 1rem;\r\n  box-sizing: border-box;\r\n}\r\n\r\nform[tuiCardLarge] {\r\n  width: 100%;\r\n  max-width: 32rem;\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n@media (max-width: 47.9375rem) {\r\n  .form-container {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  form[tuiCardLarge] {\r\n    max-width: 90%;\r\n  }\r\n}\r\n\r\nbody.dark-theme .form-container {\r\n  background: var(--tui-base-02-dark);\r\n}\r\n\r\nbody.dark-theme form[tuiCardLarge] {\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\r\n}",
                    "styleUrl": "./login.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)"
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"form-container\">\r\n    <form tuiAppearance=\"floating\" tuiCardLarge tuiForm=\"m\" [formGroup]=\"form\" [style.max-width.rem]=\"32\"\r\n        (ngSubmit)=\"onLogin()\">\r\n        <header tuiHeader>\r\n            <h2 tuiTitle>Форма авторизации</h2>\r\n        </header>\r\n\r\n        <tui-textfield>\r\n            <label tuiLabel>Логин пользователя</label>\r\n            <input formControlName=\"username\" placeholder=\"Логин пользователя\" tuiTextfield required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"username\" [error]=\"[] | tuiFieldError | async\" />\r\n        <tui-textfield>\r\n            <label tuiLabel>Пароль</label>\r\n            <input formControlName=\"password\" placeholder=\"Пароль\" tuiTextfield type=\"password\" required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"password\" [error]=\"[] | tuiFieldError | async\" />\r\n        <footer>\r\n            <button appearance=\"secondary\" tuiButton type=\"button\" (click)=\"navigateToRegister()\">\r\n                Регистрация\r\n            </button>\r\n            <button tuiButton type=\"submit\">Войти</button>\r\n        </footer>\r\n    </form>\r\n</div>"
        },
        {
            "name": "LoginProjComponent",
            "id": "component-LoginProjComponent-81bf592fa1877f8f9fa744862586b79d08e5fca3d5ca61897b0feed7603e45379ecb5fcbbbc8f27e8e949350bbb2e9863f70a5b36d826fc49fd12c5085450a49",
            "file": "src/app/data/components/login-proj/login-proj.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-proj",
            "styleUrls": [
                "./login-proj.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login-proj.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n    login: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAppearance"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiCardLarge"
                },
                {
                    "name": "TuiError"
                },
                {
                    "name": "TuiFieldErrorPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiForm"
                },
                {
                    "name": "TuiHeader"
                },
                {
                    "name": "TuiNotification"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTitle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, Inject } from '@angular/core';\r\nimport { AuthProjService } from '../../../services/auth-proj.service';\r\nimport { IDpUserProj } from '../../../interface/IDpUserProj';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\r\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\r\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\r\nimport { TuiAlertService } from '@taiga-ui/core';\r\nimport { AuthProjRepositoryService } from '../../../repositories/auth-proj-repository.service';\r\n\r\n@Component({\r\n  selector: 'app-login-proj',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TuiAppearance,\r\n    TuiButton,\r\n    TuiCardLarge,\r\n    TuiError,\r\n    TuiFieldErrorPipe,\r\n    TuiForm,\r\n    TuiHeader,\r\n    TuiNotification,\r\n    TuiTextfield,\r\n    TuiTitle,\r\n  ],\r\n  templateUrl: './login-proj.component.html',\r\n  styleUrls: ['./login-proj.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class LoginProjComponent {\r\n  protected readonly form = new FormGroup({\r\n    login: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required]),\r\n  });\r\n\r\n  constructor(\r\n    private authProjRepository: AuthProjRepositoryService,\r\n    private router: Router,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\r\n  ) { }\r\n\r\n  onLogin() {\r\n    if (this.form.valid) {\r\n      const userProj: IDpUserProj = {\r\n        dpUserProjId: 0,\r\n        login: this.form.value.login || '',\r\n        password: this.form.value.password || '',\r\n      };\r\n\r\n      this.authProjRepository.login(userProj).subscribe({\r\n        next: (response) => {\r\n          console.log('Login successful:', response);\r\n          if (response && response.token) {\r\n            this.alertService.open('Успешный вход!', { appearance: 'success' }).subscribe();\r\n            this.router.navigate(['/']);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Login failed:', error);\r\n          this.alertService.open('Ошибка входа: неверный логин или пароль', { appearance: 'error' }).subscribe();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  navigateToRegister() {\r\n    this.router.navigate(['/register-proj']);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: var(--tui-base-01);\r\n  padding: 1rem;\r\n  box-sizing: border-box;\r\n}\r\n\r\nform[tuiCardLarge] {\r\n  width: 100%;\r\n  max-width: 32rem;\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n@media (max-width: 47.9375rem) {\r\n  .form-container {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  form[tuiCardLarge] {\r\n    max-width: 90%;\r\n  }\r\n}\r\n\r\nbody.dark-theme .form-container {\r\n  background: var(--tui-base-02-dark);\r\n}\r\n\r\nbody.dark-theme form[tuiCardLarge] {\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\r\n}",
                    "styleUrl": "./login-proj.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authProjRepository",
                        "type": "AuthProjRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "authProjRepository",
                        "type": "AuthProjRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"form-container\">\r\n    <form tuiAppearance=\"floating\" tuiCardLarge tuiForm=\"m\" [formGroup]=\"form\" [style.max-width.rem]=\"32\"\r\n        (ngSubmit)=\"onLogin()\">\r\n        <header tuiHeader>\r\n            <h2 tuiTitle>Форма авторизации для пользователя с тестами</h2>\r\n        </header>\r\n\r\n        <tui-textfield>\r\n            <label tuiLabel>Логин</label>\r\n            <input formControlName=\"login\" placeholder=\"Логин\" tuiTextfield required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"login\" [error]=\"[] | tuiFieldError | async\" />\r\n        <tui-textfield>\r\n            <label tuiLabel>Пароль</label>\r\n            <input formControlName=\"password\" placeholder=\"Пароль\" tuiTextfield type=\"password\" required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"password\" [error]=\"[] | tuiFieldError | async\" />\r\n        <footer>\r\n            <button appearance=\"secondary\" tuiButton type=\"button\" (click)=\"navigateToRegister()\">\r\n                Регистрация\r\n            </button>\r\n            <button tuiButton type=\"submit\">Войти</button>\r\n        </footer>\r\n    </form>\r\n</div>"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-a4d8582cce3f9ccd62c910ab8249d387e81aea0a20f328205404705a7cb834daa2d8c8c3a290ecd857934e388198d8b7ef0dfa09ece773ff85c345c53460f98c",
            "file": "src/app/data/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alwaysFailMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAuthStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAlwaysFail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiLink"
                },
                {
                    "name": "TuiIcon"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "ThemeToggleComponent",
                    "type": "component"
                },
                {
                    "name": "BackButtonComponent",
                    "type": "component"
                },
                {
                    "name": "TuiAvatar"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiIconPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, inject } from '@angular/core';\r\nimport { AsyncPipe, CommonModule, NgIf } from '@angular/common';\r\nimport { BackButtonComponent } from '../back-button/back-button.component';\r\nimport { ThemeToggleComponent } from '../theme-toggle/theme-toggle.component';\r\nimport { TuiLink, TuiIcon, TuiButton, TuiIconPipe } from '@taiga-ui/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { TuiAvatar } from '@taiga-ui/kit';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    TuiLink,\r\n    TuiIcon,\r\n    TuiButton,\r\n    ThemeToggleComponent,\r\n    BackButtonComponent,\r\n    TuiAvatar,\r\n    AsyncPipe,\r\n    TuiIconPipe,\r\n    NgIf\r\n  ],\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class NavbarComponent {\r\n  isAuthenticated: boolean = false;\r\n  alwaysFailMode = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService,\r\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService)\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.authService.isAuthenticated$.subscribe(isAuthenticated => {\r\n      this.isAuthenticated = isAuthenticated;\r\n    });\r\n    this.checkAuthStatus();\r\n    this.alwaysFailMode = this.userAchievementsService.getAlwaysFailMode();\r\n  }\r\n\r\n    toggleAlwaysFail() {\r\n    this.userAchievementsService.setAlwaysFailMode(this.alwaysFailMode);\r\n  }\r\n\r\n  navigateTo(path: string): void {\r\n    this.router.navigate([path]);\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    this.authService.setAuthenticated(false);\r\n    this.router.navigate(['/']);\r\n  }\r\n  checkAuthStatus(): void {\r\n    const token = localStorage.getItem('token');\r\n    this.isAuthenticated = !!token;\r\n    this.authService.setAuthenticated(this.isAuthenticated);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".user-avatar tui-svg,\r\n.user-avatar svg {\r\n    color: var(--avatar-color, #212529);\r\n    fill: var(--avatar-color, #212529);\r\n}\r\n[data-theme=\"dark\"] .user-avatar tui-svg,\r\n[data-theme=\"dark\"] .user-avatar svg {\r\n    color: #fff;\r\n    fill: #fff;\r\n}\r\nlabel.always-fail-label {\r\n    color: #fff;\r\n}\r\n\r\n[data-theme=\"dark\"] label.always-fail-label {\r\n    color: #fff;\r\n}",
                    "styleUrl": "./navbar.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"header\">\r\n  <div>\r\n    <div class=\"nav-link\" (click)=\"navigateTo('/about')\">О приложении</div>\r\n    <div class=\"nav-link\" (click)=\"navigateTo('/')\">Каталог</div>\r\n    <div class=\"nav-link\" (click)=\"navigateTo('/cart')\">Перейти в корзину</div>\r\n  </div>\r\n  <div>\r\n<label class=\"always-fail-label\" style=\"margin: 0 12px; font-size: 0.95em;\">\r\n  <input type=\"checkbox\" [(ngModel)]=\"alwaysFailMode\" (change)=\"toggleAlwaysFail()\" />\r\n  Всегда имитировать ошибку тест-кейсов\r\n</label>\r\n    <app-back-button></app-back-button>\r\n    <button size=\"m\" type=\"button\" *ngIf=\"!isAuthenticated\" (click)=\"navigateTo('/login')\" tuiButton>Войти</button>\r\n    <button size=\"m\" type=\"button\" *ngIf=\"isAuthenticated\" (click)=\"logout()\" tuiButton>Выйти</button>\r\n  </div>\r\n</div>"
        },
        {
            "name": "PageCartComponent",
            "id": "component-PageCartComponent-0f9a95c22c10452ed7965b423a9030eb81fc4377d5a8b6ae68ce2c327028595dfff4c4f8a7d8a91d54fd01c9651d2b9440df60ed46210a01d7a322605b687ee1",
            "file": "src/app/data/page/page-cart/page-cart.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-cart",
            "styleUrls": [
                "./page-cart.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-cart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cartItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "columns",
                    "defaultValue": "['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "{ updateOn: 'blur' } as const",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "totalSorter",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TuiComparator<CartItem>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "userAchievementsService",
                    "defaultValue": "inject(UserAchievementsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "decreaseQuantity",
                    "args": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotal",
                    "args": [
                        {
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "increaseQuantity",
                    "args": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCartItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSortChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onValueChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "current",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "K"
                    ],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "K",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "current",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeFromCart",
                    "args": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCartItemQuantity",
                    "args": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newQuantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CartItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newQuantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "CurrencyPipe",
                    "type": "pipe"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "NgForOf"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiTable"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TuiScrollbar"
                },
                {
                    "name": "TuiIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AsyncPipe, CommonModule, CurrencyPipe, NgForOf, NgIf } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TuiButton, TuiAppearance, TuiAlertService, TuiScrollbar, TuiIcon } from '@taiga-ui/core';\r\nimport { TuiTable, TuiComparator } from '@taiga-ui/addon-table';\r\nimport { TuiDay, tuiDefaultSort } from '@taiga-ui/cdk';\r\nimport { ICartItem } from '../../../interface/ICartItem';\r\nimport { ICartViewModel } from '../../../interface/ICartViewModel';\r\nimport { ChangeDetectorRef } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { IUpdateCartRequest } from '../../../interface/IUpdateCartRequest';\r\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\ninterface CartItem extends ICartItem {\r\n  readonly date: TuiDay;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-page-cart',\r\n  standalone: true,\r\n  imports: [\r\n    AsyncPipe,\r\n    CurrencyPipe,\r\n    FormsModule,\r\n    NgForOf,\r\n    NgIf,\r\n    TuiButton,\r\n    TuiTable,\r\n    CommonModule,\r\n    TuiScrollbar,\r\n    TuiIcon\r\n  ],\r\n  templateUrl: './page-cart.component.html',\r\n  styleUrls: ['./page-cart.component.css', '../../../styles/root.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class PageCartComponent implements OnInit {\r\n  protected readonly options = { updateOn: 'blur' } as const;\r\n  protected cartItems: CartItem[] = [];\r\n  protected readonly columns = ['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const;\r\n  protected isLoading = false;\r\n  private readonly userAchievementsService = inject(UserAchievementsService);\r\n  protected readonly totalSorter: TuiComparator<CartItem> = (a, b) =>\r\n    tuiDefaultSort(a.price * a.quantity, b.price * b.quantity);\r\n\r\n  constructor(\r\n    private cartService: ShopCartRepositoryService,\r\n    private cdr: ChangeDetectorRef,\r\n    public router: Router,\r\n    private userAchievementsRepository: UserAchievementsRepositoryService,\r\n    private configService: ConfigService,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loadCartItems();\r\n  }\r\n\r\n  private loadCartItems(): void {\r\n    this.cartService.getCart().subscribe({\r\n      next: (cartViewModel: ICartViewModel) => {\r\n        console.log(cartViewModel);\r\n        this.cartItems = cartViewModel.cartItems.map(item => ({\r\n          ...item,\r\n          date: TuiDay.currentLocal(),\r\n        }));\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при загрузке корзины:', error);\r\n        this.alertService.open('Не удалось загрузить корзину. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected trackByIndex(index: number): number {\r\n    return index;\r\n  }\r\n\r\n  protected getTotal({ price, quantity }: CartItem): number {\r\n    return price * quantity;\r\n  }\r\n\r\n  protected getTotalAmount(): number {\r\n    return this.cartItems.reduce((sum, item) => sum + this.getTotal(item), 0);\r\n  }\r\n\r\n  increaseQuantity(item: CartItem): void {\r\n    const newQuantity = item.quantity + 1;\r\n    this.updateCartItemQuantity(item, newQuantity);\r\n  }\r\n\r\n  decreaseQuantity(item: CartItem): void {\r\n    if (item.quantity > 1) {\r\n      const newQuantity = item.quantity - 1;\r\n      this.updateCartItemQuantity(item, newQuantity);\r\n    }\r\n  }\r\n\r\n  removeFromCart(item: CartItem): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Тест-кейс: ошибка удаления товара из корзины!')\r\n        .subscribe();\r\n      this.alertService.open('Тест-кейс: не удалось удалить товар (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.cartService.removeFromCart({ productId: item.productId, sizeId: item.sizeId }).subscribe({\r\n      next: () => {\r\n        this.cartItems = this.cartItems.filter(cartItem =>\r\n          !(cartItem.productId === item.productId && cartItem.sizeId === item.sizeId)\r\n        );\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartSuccess, 'Товар успешно удалён из корзины!')\r\n          .subscribe();\r\n        this.alertService.open('Товар удалён из корзины', { appearance: 'success' }).subscribe();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при удалении товара из корзины:', error);\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Ошибка удаления товара из корзины!')\r\n          .subscribe();\r\n        this.alertService.open('Не удалось удалить товар. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkout(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n\r\n    if (this.cartItems.length === 0) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutEmptyCart, 'Тест-кейс: Попытка оформления пустой корзины!')\r\n        .subscribe();\r\n      this.alertService.open('Корзина пуста, добавьте товары перед оформлением', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n\r\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Тест-кейс: ошибка оформления заказа!')\r\n        .subscribe();\r\n      this.alertService.open('Тест-кейс: не удалось оформить заказ (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n    this.isLoading = true;\r\n    this.cartService.checkout().subscribe({\r\n      next: (response) => {\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutSuccess, 'Заказ успешно оформлен!')\r\n          .subscribe();\r\n        this.alertService.open('Заказ успешно оформлен!', { appearance: 'success' }).subscribe();\r\n        this.cartService.clearCart();\r\n        this.cartItems = [];\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.router.navigate(['/order-confirmation'], { state: { orderId: response.orderId } });\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при оформлении заказа:', error);\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Ошибка оформления заказа!')\r\n          .subscribe();\r\n        this.alertService.open('Не удалось оформить заказ. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateCartItemQuantity(item: CartItem, newQuantity: number): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    \r\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Тест-кейс: ошибка обновления количества товара!')\r\n        .subscribe();\r\n      this.alertService.open('Тест-кейс: не удалось обновить количество (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n    \r\n    const request: IUpdateCartRequest = {\r\n      productId: item.productId,\r\n      quantity: newQuantity,\r\n      sizeId: item.sizeId\r\n    };\r\n\r\n    this.cartItems = this.cartItems.map(cartItem =>\r\n      cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\r\n        ? { ...cartItem, quantity: newQuantity }\r\n        : cartItem\r\n    );\r\n    this.cdr.markForCheck();\r\n\r\n    this.cartService.updateCart(request).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantitySuccess, 'Количество товара успешно обновлено!')\r\n            .subscribe();\r\n          this.alertService.open('Количество товара успешно обновлено', { appearance: 'success' }).subscribe();\r\n        } else {\r\n          this.cartItems = this.cartItems.map(cartItem =>\r\n            cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\r\n              ? { ...cartItem, quantity: item.quantity }\r\n              : cartItem\r\n          );\r\n          this.cdr.markForCheck();\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\r\n            .subscribe();\r\n          this.alertService.open('Не удалось обновить количество. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n        }\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      },\r\n      error: (error) => {\r\n        this.cartItems = this.cartItems.map(cartItem =>\r\n          cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\r\n            ? { ...cartItem, quantity: item.quantity }\r\n            : cartItem\r\n        );\r\n        this.cdr.markForCheck();\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\r\n          .subscribe();\r\n        this.alertService.open('Ошибка при обновлении количества. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\r\n        this.isLoading = false;\r\n        this.cdr.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  protected onValueChange<K extends keyof CartItem>(\r\n    value: CartItem[K],\r\n    key: K,\r\n    current: CartItem\r\n  ): void {\r\n    const updated = { ...current, [key]: value };\r\n    this.cartItems = this.cartItems.map((item) => (item === current ? updated : item));\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  protected onSortChange(event: any): void {\r\n    // Логика сортировки, если нужна\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": " .container {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 1rem;\r\n}\r\n\r\n.header-section {\r\n  text-align: center;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n.empty-cart {\r\n  text-align: center;\r\n  padding: 2rem;\r\n  background-color: var(--tui-base-01);\r\n  border-radius: 8px;\r\n  box-shadow: var(--tui-shadow);\r\n}\r\n\r\n.empty-cart h3 {\r\n  color: var(--tui-text-01);\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.quantity-container {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n}\r\n\r\n.quantity-input {\r\n  width: 60px;\r\n  text-align: center;\r\n}\r\n\r\n.total-label {\r\n  font-weight: bold;\r\n  text-align: right;\r\n}\r\n\r\n.number {\r\n  text-align: right;\r\n}\r\n\r\n",
                    "styleUrl": "./page-cart.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "ShopCartRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "ShopCartRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n  <div class=\"header-section\">\r\n    <h1>Корзина</h1>\r\n  </div>\r\n  <div *ngIf=\"cartItems.length === 0\" class=\"empty-cart\">\r\n    <h3>Корзина пуста</h3>\r\n    <p>Добавьте товары, чтобы продолжить</p>\r\n    <button tuiButton appearance=\"primary\" (click)=\"checkout()\" [disabled]=\"isLoading\">\r\n      Оформить заказ\r\n    </button>\r\n    <button tuiButton appearance=\"primary\" (click)=\"router.navigate(['/'])\">\r\n      Перейти к товарам\r\n    </button>\r\n  </div>\r\n  <ng-container *ngIf=\"cartItems.length > 0\">\r\n    <tui-scrollbar class=\"taiga-scrollbar\">\r\n      <table tuiTable size=\"l\" [columns]=\"columns\" [direction]=\"-1\" [sorter]=\"totalSorter\">\r\n        <thead tuiThead>\r\n          <tr tuiThGroup>\r\n            <th *tuiHead=\"'productTitle'\" tuiTh>Название товара</th>\r\n            <th *tuiHead=\"'price'\" tuiTh class=\"number\">Цена</th>\r\n            <th *tuiHead=\"'quantity'\" tuiTh>Количество</th>\r\n            <th *tuiHead=\"'totalPrice'\" tuiTh class=\"number\">Итого</th>\r\n            <th *tuiHead=\"'actions'\" tuiTh>Действия</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody tuiTbody>\r\n          <tr *ngFor=\"let item of cartItems; trackBy: trackByIndex\" tuiTr>\r\n            <td *tuiCell=\"'productTitle'\" tuiTd>{{ item.productTitle }}</td>\r\n            <td *tuiCell=\"'price'\" tuiTd class=\"number\">{{ item.price | currency:'RUB' }}</td>\r\n            <td *tuiCell=\"'quantity'\" tuiTd>\r\n              <div class=\"quantity-container\">\r\n                <button tuiButton appearance=\"flat\" size=\"s\" (click)=\"decreaseQuantity(item)\" [disabled]=\"isLoading\">\r\n                 -\r\n                </button>\r\n                <input type=\"number\" [(ngModel)]=\"item.quantity\" [ngModelOptions]=\"options\"\r\n                  (ngModelChange)=\"onValueChange($event, 'quantity', item)\" min=\"1\" max=\"100\" step=\"1\"\r\n                  class=\"quantity-input\" [disabled]=\"isLoading\" />\r\n                <button tuiButton appearance=\"flat\" size=\"s\" (click)=\"increaseQuantity(item)\" [disabled]=\"isLoading\">\r\n                  + \r\n                </button>\r\n              </div>\r\n            </td>\r\n            <td *tuiCell=\"'totalPrice'\" tuiTd class=\"number\">{{ getTotal(item) | currency:'RUB ' }}</td>\r\n            <td *tuiCell=\"'actions'\" tuiTd>\r\n              <button tuiButton appearance=\"destructive\" size=\"s\" (click)=\"removeFromCart(item)\" [disabled]=\"isLoading\">\r\n                Удалить\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n        <tfoot>\r\n          <tr>\r\n            <td colspan=\"3\" class=\"total-label\">Общая сумма:</td>\r\n            <td class=\"number\">{{ getTotalAmount() | currency:'RUB ' }}</td>\r\n            <td>\r\n              <button tuiButton appearance=\"primary\" (click)=\"checkout()\" [disabled]=\"isLoading\">\r\n                Оформить заказ\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tfoot>\r\n      </table>\r\n    </tui-scrollbar>\r\n  </ng-container>\r\n</div>"
        },
        {
            "name": "PageCatalogItemComponent",
            "id": "component-PageCatalogItemComponent-8b9f634c70d467936bd9e0e41ef65e1d2211b9d5d14a618241e1d75c49c456ca3f828ea8cfe65897630457b97570fd0ffc8f98d8730b38f6085e07d13be20c8e",
            "file": "src/app/data/page/page-catalog-item/page-catalog-item.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-catalog-item",
            "styleUrls": [
                "./page-catalog-item.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-catalog-item.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "products$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<IDpProduct[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "loadProducts",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProductsOrFail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackByProductId",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "product",
                            "type": "IDpProduct",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardItemComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\r\nimport { IDpProduct } from '../../../interface/IDpProduct';\r\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\r\nimport { CardItemComponent } from '../../components/card-item/card-item.component';\r\nimport { CommonModule, AsyncPipe } from '@angular/common';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { TuiAlertService } from '@taiga-ui/core';\r\nimport { Inject } from '@angular/core';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-page-catalog-item',\r\n  standalone: true,\r\n  imports: [CardItemComponent, CommonModule, AsyncPipe],\r\n  templateUrl: './page-catalog-item.component.html',\r\n  styleUrls: ['./page-catalog-item.component.css', '../../../styles/root.css'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PageCatalogItemComponent implements OnInit {\r\n  products$!: Observable<IDpProduct[]>; // Используем ! для строгой типизации\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private productsRepository: ProductsRepositoryService,\r\n    private userAchievementsRepository: UserAchievementsRepositoryService,\r\n    private userAchievementsService: UserAchievementsService,\r\n    private configService: ConfigService,\r\n    private cd: ChangeDetectorRef,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadProductsOrFail();\r\n  }\r\n\r\n  loadProductsOrFail(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.isLoading = true;\r\n    this.cd.markForCheck();\r\n\r\n    if (this.userAchievementsService.getAlwaysFailMode() && Math.random() < 0.5) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.loadProductsFailed,\r\n          'тест-кейс: ошибка загрузки каталога продуктов! (режим всегда ошибка, рандом)'\r\n        )\r\n        .subscribe(() => {\r\n          this.isLoading = false;\r\n          this.products$ = of([]); // Пустой список при ошибке\r\n          this.cd.markForCheck();\r\n        });\r\n      return;\r\n    }\r\n\r\n    this.loadProducts(userProjId);\r\n  }\r\n\r\n  private loadProducts(userProjId: number): void {\r\n    this.products$ = this.productsRepository.getAllProducts();\r\n    this.products$.subscribe({\r\n      next: (productList: IDpProduct[]) => {\r\n        const imagesCount = productList.reduce((sum, p) => sum + (p.dpImages?.length || 0), 0);\r\n        console.log(`[Catalog] Загружено товаров: ${productList.length}`);\r\n        console.log(`[Catalog] Всего изображений у товаров: ${imagesCount}`);\r\n        this.isLoading = false;\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.loadProductsSuccess,\r\n            'тест-кейс: каталог продуктов успешно загружен!'\r\n          )\r\n          .subscribe();\r\n        this.cd.markForCheck();\r\n      },\r\n      error: (error) => {\r\n        console.error('Ошибка при загрузке товаров:', error);\r\n        this.isLoading = false;\r\n        this.products$ = of([]);\r\n        this.userAchievementsRepository\r\n          .handleAchievement(\r\n            userProjId,\r\n            this.configService.achievementIds.loadProductsFailed,\r\n            'тест-кейс: ошибка загрузки каталога продуктов!'\r\n          )\r\n          .subscribe();\r\n        this.alertService.open('Не удалось загрузить каталог продуктов', { appearance: 'error' }).subscribe();\r\n        this.cd.markForCheck();\r\n      }\r\n    });\r\n  }\r\n\r\n  trackByProductId(index: number, product: IDpProduct): number {\r\n    return product.dpProductId;\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.loading-animation {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    min-height: 300px;\r\n    font-size: 1.2rem;\r\n    color: #888;\r\n}",
                    "styleUrl": "./page-catalog-item.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsRepository",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "productsRepository",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"page-cart-item\">\r\n  <div class=\"container\">\r\n    <div *ngIf=\"isLoading\" class=\"loading-animation\">\r\n      <img src=\"public/loading.gif\" alt=\"Загрузка...\" width=\"120\" height=\"120\" />\r\n      <img src=\"public/polish-cow.gif\" alt=\"Загрузка...\" width=\"120\" height=\"120\" />\r\n      <div>Загрузка каталога...</div>\r\n    </div>\r\n    <div *ngIf=\"!isLoading && (products$ | async)?.length === 0\">\r\n      <h1>Товары не найдены.</h1>\r\n    </div>\r\n    <div *ngIf=\"!isLoading\" class=\"grid\">\r\n      <div *ngFor=\"let product of products$ | async; trackBy: trackByProductId\" class=\"card\">\r\n        <app-card-item [productInfo]=\"product\"></app-card-item>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageItemFromCatalogComponent",
            "id": "component-PageItemFromCatalogComponent-31786eaebe6e41518d22a7d51e19c1307ef8635d4e5e70c4946e91e35910748942dd153a8e6d50f55153c2d1405c283c193f4c5fe89ab92563f6ffa49465432c",
            "file": "src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-item-from-catalog",
            "styleUrls": [
                "./page-item-from-catalog.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-item-from-catalog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "productInfo",
                    "defaultValue": "{} as IDpProduct",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProduct",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "quantity",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "selectedSizeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "addToCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadProductInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onImageClick",
                    "args": [
                        {
                            "name": "imageUrl",
                            "type": "SafeUrl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageUrl",
                            "type": "SafeUrl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openImageInFullscreen",
                    "args": [
                        {
                            "name": "imageUrl",
                            "type": "SafeUrl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "imageUrl",
                            "type": "SafeUrl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CarouselImgComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TuiAppearance"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, Inject, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IDpProduct } from '../../../interface/IDpProduct';\r\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\r\nimport { CarouselImgComponent } from '../../components/carousel-img/carousel-img.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TuiAlertService, TuiAppearance, TuiButton } from '@taiga-ui/core';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\nimport { SecurityContext } from '@angular/core';\r\nimport { IDpImage } from '../../../interface/IDpImage';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-page-item-from-catalog',\r\n  imports: [CarouselImgComponent, CommonModule, TuiAppearance, TuiButton, FormsModule,],\r\n  templateUrl: './page-item-from-catalog.component.html',\r\n  styleUrls: ['./page-item-from-catalog.component.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class PageItemFromCatalogComponent implements OnInit {\r\n  productInfo: IDpProduct = {} as IDpProduct;\r\n  quantity: number = 1;\r\n  selectedSizeId: number | undefined;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private productsRepositoryService: ProductsRepositoryService,\r\n    private sanitizer: DomSanitizer,\r\n    private cartService: ShopCartRepositoryService,\r\n    private userAchievementsRepository: UserAchievementsRepositoryService,\r\n    private userAchievementsService: UserAchievementsService,\r\n    private configService: ConfigService,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\r\n  ) { }\r\n  get images(): IDpImage[] {\r\n    return this.productInfo?.dpImages || [];\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadProductInfo();\r\n  }\r\n\r\n  private loadProductInfo(): void {\r\n    const dpProductId = this.route.snapshot.paramMap.get('dpProductId');\r\n    if (dpProductId) {\r\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n      this.productsRepositoryService.getProductById(+dpProductId).subscribe({\r\n        next: (product: IDpProduct) => {\r\n          this.productInfo = product;\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.viewProductSuccess, 'тест-кейс: просмотр продукта разблокировано!')\r\n            .subscribe();\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.loadProductInfoSuccess, 'тест-кейс: загрузка информации о продукте разблокирована!')\r\n            .subscribe();\r\n        },\r\n        error: (error) => {\r\n          console.error('Ошибка при загрузке информации о продукте:', error);\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.viewProductFailed, 'тест-кейс: ошибка просмотра продукта разблокирована!')\r\n            .subscribe();\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.loadProductInfoFailed, 'тест-кейс: ошибка загрузки информации о продукте разблокирована!')\r\n            .subscribe();\r\n          this.alertService.open('Не удалось загрузить информацию о продукте', { appearance: 'error' }).subscribe();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  addToCart(): void {\r\n    if (this.productInfo) {\r\n      const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n       // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n      if (this.userAchievementsService.getAlwaysFailMode()) {\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.addToCartFailed, 'Тест-кейс: ошибка добавления товара в корзину!')\r\n          .subscribe();\r\n        this.alertService.open('Тест-кейс: ошибка добавления товара в корзину (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n        return;\r\n      }\r\n\r\n\r\n      const request = {\r\n        productId: this.productInfo.dpProductId,\r\n        quantity: this.quantity,\r\n        sizeId: this.selectedSizeId\r\n      };\r\n      this.cartService.addToCart(request).subscribe({\r\n        next: (response) => {\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.addToCartSuccess, 'тест-кейс: товар успешно добавлен в корзину!')\r\n            .subscribe();\r\n          this.alertService.open(response.message || 'Товар добавлен в корзину!', { appearance: 'success' }).subscribe();\r\n\r\n        },\r\n        error: (error) => {\r\n          this.alertService.open('Ошибка при добавлении товара в корзину', { appearance: 'error' }).subscribe();\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.addToCartFailed, 'тест-кейс: ошибка добавления товара в корзину!')\r\n            .subscribe();\r\n        }\r\n      });\r\n    } else {\r\n      this.alertService.open('Ошибка: информация о продукте недоступна', { appearance: 'error' }).subscribe();\r\n    }\r\n  }\r\n\r\n  openImageInFullscreen(imageUrl: SafeUrl): void {\r\n    const url = this.sanitizer.sanitize(SecurityContext.URL, imageUrl);\r\n    if (url) {\r\n      const fullscreenDiv = document.createElement('div');\r\n      fullscreenDiv.style.position = 'fixed';\r\n      fullscreenDiv.style.top = '0';\r\n      fullscreenDiv.style.left = '0';\r\n      fullscreenDiv.style.width = '100%';\r\n      fullscreenDiv.style.height = '100%';\r\n      fullscreenDiv.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';\r\n      fullscreenDiv.style.display = 'flex';\r\n      fullscreenDiv.style.justifyContent = 'center';\r\n      fullscreenDiv.style.alignItems = 'center';\r\n      fullscreenDiv.style.zIndex = '1000';\r\n\r\n      const img = document.createElement('img');\r\n      img.src = url;\r\n      img.style.maxWidth = '90%';\r\n      img.style.maxHeight = '90%';\r\n\r\n      fullscreenDiv.appendChild(img);\r\n      fullscreenDiv.addEventListener('click', () => {\r\n        document.body.removeChild(fullscreenDiv);\r\n      });\r\n\r\n      document.body.appendChild(fullscreenDiv);\r\n    }\r\n  }\r\n\r\n  onImageClick(imageUrl: SafeUrl): void {\r\n    this.openImageInFullscreen(imageUrl);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/variables.css';\r\n\r\n/* Карточка товара */\r\n.product-card {\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: var(--button-border-radius);\r\n  overflow: hidden;\r\n  margin-bottom: 1.5rem;\r\n  box-shadow: var(--card-shadow);\r\n  background: var(--card-background-color);\r\n  color: var(--tui-text-01);\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.product-card:hover {\r\n  transform: translateY(-4px);\r\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.product-row {\r\n  display: flex;\r\n  flex-direction: row;\r\n  width: 100%;\r\n  align-items: stretch;\r\n}\r\n\r\n.product-image-container {\r\n  flex: 1;\r\n  position: relative;\r\n  aspect-ratio: 4 / 3;\r\n  min-width: 280px;\r\n  max-width: 400px;\r\n  overflow: hidden;\r\n  background: var(--tui-base-02);\r\n}\r\n\r\n.product-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: var(--button-border-radius) 0 0 var(--button-border-radius);\r\n}\r\n\r\n.product-image app-carousel-img {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: block;\r\n}\r\n\r\n/* Карусель */\r\n.carousel {\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: 0;\r\n  overflow: hidden;\r\n  background: transparent;\r\n}\r\n\r\n.wrapper {\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: stretch;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.item {\r\n  width: 100%;\r\n  height: 100%;\r\n  aspect-ratio: 4 / 3;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: relative;\r\n  overflow: hidden;\r\n  transition: opacity 0.5s ease;\r\n}\r\n\r\n.item img {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.item img:hover {\r\n  transform: translate(-50%, -50%) scale(1.05);\r\n}\r\n\r\n.pagination {\r\n  margin: 0.75rem auto;\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n/* Детали товара */\r\n.product-details-container {\r\n  flex: 1;\r\n  padding: 1rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n\r\n.product-title {\r\n  font-size: 1.5rem;\r\n  margin: 0.5rem 0;\r\n  color: var(--tui-primary);\r\n  font-weight: 600;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  max-width: 90%;\r\n}\r\n\r\n.product-price {\r\n  font-size: 1.25rem;\r\n  color: var(--tui-error-fill);\r\n  margin: 0.5rem 0;\r\n  font-weight: 600;\r\n}\r\n\r\n.product-description {\r\n  font-size: 1rem;\r\n  color: var(--tui-text-01);\r\n  margin: 0.5rem 0;\r\n  line-height: 1.5;\r\n  max-height: calc(1.5rem * 3);\r\n  overflow-y: auto;\r\n}\r\n\r\n.product-category {\r\n  font-size: 0.875rem;\r\n  color: var(--text-color-secondary);\r\n  margin: 0.5rem 0;\r\n}\r\n\r\n.product-actions {\r\n  display: flex;\r\n  gap: 1rem;\r\n  align-items: center;\r\n  flex-wrap: wrap;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.quantity-input {\r\n  max-width: 6rem;\r\n}\r\n\r\n.btn-add-to-cart {\r\n  padding: 0.5rem 1rem;\r\n}\r\n\r\n/* Темная тема */\r\n[data-theme=\"dark\"] .product-card {\r\n  background: var(--card-background-color);\r\n  border-color: var(--border-color);\r\n  box-shadow: var(--card-shadow);\r\n}\r\n\r\n[data-theme=\"dark\"] .product-card:hover {\r\n  box-shadow: 0 8px 24px rgba(255, 255, 255, 0.15);\r\n}\r\n\r\n[data-theme=\"dark\"] .product-image-container,\r\n[data-theme=\"dark\"] .item img {\r\n  background: var(--tui-base-02);\r\n}\r\n\r\n[data-theme=\"dark\"] .product-title {\r\n  color: var(--tui-primary);\r\n}\r\n\r\n[data-theme=\"dark\"] .product-price {\r\n  color: var(--tui-error-fill);\r\n}\r\n\r\n[data-theme=\"dark\"] .product-description,\r\n[data-theme=\"dark\"] .product-category {\r\n  color: var(--tui-text-01);\r\n}\r\n\r\n/* Адаптивность */\r\n@media (max-width: 768px) {\r\n  .product-row {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .product-image-container {\r\n    flex: none;\r\n    width: 100%;\r\n    min-width: 100%;\r\n    max-width: 100%;\r\n    min-height: 200px;\r\n  }\r\n\r\n  .product-image,\r\n  .carousel,\r\n  .item {\r\n    border-radius: var(--button-border-radius) var(--button-border-radius) 0 0;\r\n  }\r\n\r\n  .product-title {\r\n    max-width: 100%;\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  .product-price {\r\n    font-size: 1.125rem;\r\n  }\r\n\r\n  .product-description,\r\n  .product-category {\r\n    font-size: 0.875rem;\r\n  }\r\n\r\n  .product-actions {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    gap: 0.5rem;\r\n  }\r\n\r\n  .quantity-input,\r\n  .btn-add-to-cart {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .product-details-container {\r\n    padding: 0.75rem;\r\n  }\r\n\r\n  .product-title {\r\n    font-size: 1.125rem;\r\n  }\r\n\r\n  .product-price {\r\n    font-size: 1rem;\r\n  }\r\n}\r\n\r\n/* Анимации */\r\n@keyframes fadeIn {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(10px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.fade-in {\r\n  animation: fadeIn 0.5s ease-out;\r\n}",
                    "styleUrl": "./page-item-from-catalog.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productsRepositoryService",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "ShopCartRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productsRepositoryService",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "ShopCartRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "images": {
                    "name": "images",
                    "getSignature": {
                        "name": "images",
                        "type": "[]",
                        "returnType": "IDpImage[]",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"product-card fade-in\">\r\n  <div class=\"product-row\">\r\n    <div class=\"product-image-container\">\r\n      <app-carousel-img [images]=\"images\" class=\"product-image\" (imageClick)=\"onImageClick($event)\"></app-carousel-img>\r\n    </div>\r\n    <div class=\"product-details-container\">\r\n      <h3 class=\"product-title\">{{ productInfo?.dpTitle }}</h3>\r\n      <p class=\"product-price\">{{ productInfo?.dpPrice | currency:'RUB ' }}</p>\r\n      <p class=\"product-description\">{{ productInfo?.dpDescription }}</p>\r\n      <p class=\"product-category\">{{ productInfo?.dpCategory?.dpCategoryTitle }}</p>\r\n      <div class=\"product-actions\">\r\n        <div class=\"quantity-container\">\r\n           <input type=\"number\" [(ngModel)]=\"quantity\" min=\"1\" max=\"100\" step=\"1\"  class=\"quantity-input\">\r\n        </div>\r\n       \r\n        <button type=\"button\" tuiButton appearance=\"primary\" class=\"btn-add-to-cart\" (click)=\"addToCart()\">\r\n          Добавить в корзину\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-aef72bd74f7f2910f84e383a02f6c7368c148b0b48ec1df0c4647c337a054625c59b4f6d7f9e1497a44b6a97252ae7c8ea045a5f10e5e9bd62bb1ca68828f972",
            "file": "src/app/data/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAppearance"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiCardLarge"
                },
                {
                    "name": "TuiError"
                },
                {
                    "name": "TuiFieldErrorPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiForm"
                },
                {
                    "name": "TuiHeader"
                },
                {
                    "name": "TuiNotification"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTitle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject } from '@angular/core';\r\nimport { AuthRepositoryService } from '../../../repositories/auth-repository.service';\r\nimport { IDpUser } from '../../../interface/IDpUser';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\r\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\r\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\r\nimport { TuiAlertService } from '@taiga-ui/core';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TuiAppearance,\r\n    TuiButton,\r\n    TuiCardLarge,\r\n    TuiError,\r\n    TuiFieldErrorPipe,\r\n    TuiForm,\r\n    TuiHeader,\r\n    TuiNotification,\r\n    TuiTextfield,\r\n    TuiTitle,\r\n  ],\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RegisterComponent {\r\n  protected readonly form = new FormGroup({\r\n    username: new FormControl('', [Validators.required, Validators.minLength(3)]),\r\n    password: new FormControl('', [Validators.required, Validators.minLength(6)]),\r\n  });\r\n\r\n  constructor(\r\n    private authRepository: AuthRepositoryService,\r\n    private userAchievementsRepository: UserAchievementsRepositoryService,\r\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService),\r\n    private router: Router,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService,\r\n    private configService: ConfigService\r\n  ) {}\r\n\r\n  onRegister() {\r\n    if (this.form.valid) {\r\n      const user: IDpUser = {\r\n        dpUserId: 0,\r\n        dpUsername: this.form.value.username || '',\r\n        dpPassword: this.form.value.password || '',\r\n        dpRegistrationDate: new Date(),\r\n        dpPhoneNumber: '0000000000'\r\n      };\r\n      // Проверка: если включён режим \"всегда ошибка\" — только негативный тест-кейс\r\n      if (this.userAchievementsService.getAlwaysFailMode()) {\r\n        const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n        this.userAchievementsRepository\r\n          .handleAchievement(userProjId, this.configService.achievementIds.registerFailed, 'тест-кейс неудачной регистрации разблокировано!')\r\n          .subscribe();\r\n        this.alertService.open('Тест-кейс: ошибка регистрации (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\r\n        return;\r\n      }\r\n      // Галочка выключена — обычная логика\r\n      // Выполняем регистрацию пользователя\r\n      this.authRepository.register(user).subscribe({\r\n        next: (response: { token: string; userProjId?: number }) => {\r\n          if (response.token) {\r\n            this.alertService.open('Регистрация успешна! Войдите в аккаунт.', { appearance: 'success' }).subscribe();\r\n            const userProjId = response.userProjId || parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n\r\n            this.userAchievementsRepository\r\n              .handleAchievement(userProjId, this.configService.achievementIds.registerSuccess, 'тест-кейс регистрации разблокировано!')\r\n              .subscribe({\r\n                complete: () => setTimeout(() => this.router.navigate(['/login']), 2000)\r\n              });\r\n          } else {\r\n            this.alertService.open('Ошибка регистрации: некорректный ответ сервера', { appearance: 'error' }).subscribe();\r\n          }\r\n        },\r\n        error: (error) => {\r\n          const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n          this.userAchievementsRepository\r\n            .handleAchievement(userProjId, this.configService.achievementIds.registerFailed, 'тест-кейс неудачной регистрации разблокировано!')\r\n            .subscribe();\r\n\r\n          let errorMessage = 'Ошибка регистрации: попробуйте другое имя пользователя';\r\n          if (error.status === this.configService.httpStatusCodes.conflict) {\r\n            errorMessage = 'Ошибка: имя пользователя уже занято';\r\n          } else if (error.status === this.configService.httpStatusCodes.badRequest) {\r\n            errorMessage = 'Ошибка: неверный формат данных';\r\n          }\r\n\r\n          this.alertService.open(errorMessage, { appearance: 'error' }).subscribe();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  navigateToLogin() {\r\n    this.router.navigate(['/login']);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: var(--tui-base-01);\r\n  padding: 1rem;\r\n  box-sizing: border-box;\r\n}\r\n\r\nform[tuiCardLarge] {\r\n  width: 100%;\r\n  max-width: 32rem;\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n@media (max-width: 47.9375rem) {\r\n  .form-container {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  form[tuiCardLarge] {\r\n    max-width: 90%;\r\n  }\r\n}\r\n\r\nbody.dark-theme .form-container {\r\n  background: var(--tui-base-02-dark);\r\n}\r\n\r\nbody.dark-theme form[tuiCardLarge] {\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\r\n}",
                    "styleUrl": "./register.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)"
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "authRepository",
                        "type": "AuthRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsRepository",
                        "type": "UserAchievementsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"form-container\">\r\n    <form tuiAppearance=\"floating\" tuiCardLarge tuiForm=\"m\" [formGroup]=\"form\" [style.max-width.rem]=\"32\"\r\n        (ngSubmit)=\"onRegister()\">\r\n        <header tuiHeader>\r\n            <h2 tuiTitle>Форма регистрации</h2>\r\n        </header>\r\n\r\n        <tui-textfield>\r\n            <label tuiLabel>Логин</label>\r\n            <input formControlName=\"username\" placeholder=\"Логин\" tuiTextfield required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"username\" [error]=\"[] | tuiFieldError | async\" />\r\n        <tui-textfield>\r\n            <label tuiLabel>Пароль</label>\r\n            <input formControlName=\"password\" placeholder=\"Пароль\" tuiTextfield type=\"password\" required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"password\" [error]=\"[] | tuiFieldError | async\" />\r\n        <footer>\r\n            <button appearance=\"secondary\" tuiButton type=\"button\" (click)=\"navigateToLogin()\">\r\n                Отмена\r\n            </button>\r\n            <button tuiButton type=\"submit\">Зарегистрироваться</button>\r\n        </footer>\r\n    </form>\r\n</div>"
        },
        {
            "name": "RegisterProjComponent",
            "id": "component-RegisterProjComponent-966f9cb03a383d830f603a76f1923fc80730a99b13d297358e3821e8027591343e3779a984feb381efe4e485e303c32849d63f8640d20a7bb9b92f9c357e4f4f",
            "file": "src/app/data/components/register-proj/register-proj.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-proj",
            "styleUrls": [
                "./register-proj.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register-proj.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "new FormGroup({\r\n    login: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required])\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateToLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAppearance"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiCardLarge"
                },
                {
                    "name": "TuiError"
                },
                {
                    "name": "TuiFieldErrorPipe",
                    "type": "pipe"
                },
                {
                    "name": "TuiForm"
                },
                {
                    "name": "TuiHeader"
                },
                {
                    "name": "TuiNotification"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTitle"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, Inject } from '@angular/core';\r\nimport { AuthProjService } from '../../../services/auth-proj.service';\r\nimport { IDpUserProj } from '../../../interface/IDpUserProj';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiAppearance, TuiButton, TuiError, TuiNotification, TuiTextfield, TuiTitle } from '@taiga-ui/core';\r\nimport { TuiFieldErrorPipe } from '@taiga-ui/kit';\r\nimport { TuiCardLarge, TuiForm, TuiHeader } from '@taiga-ui/layout';\r\nimport { TuiAlertService } from '@taiga-ui/core';\r\nimport { AuthProjRepositoryService } from '../../../repositories/auth-proj-repository.service';\r\n\r\n@Component({\r\n  selector: 'app-register-proj',\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TuiAppearance,\r\n    TuiButton,\r\n    TuiCardLarge,\r\n    TuiError,\r\n    TuiFieldErrorPipe,\r\n    TuiForm,\r\n    TuiHeader,\r\n    TuiNotification,\r\n    TuiTextfield,\r\n    TuiTitle,\r\n  ],\r\n  templateUrl: './register-proj.component.html',\r\n  styleUrls: ['./register-proj.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class RegisterProjComponent {\r\n  protected readonly form = new FormGroup({\r\n    login: new FormControl('', [Validators.required]),\r\n    password: new FormControl('', [Validators.required])\r\n  });\r\n\r\n  constructor(\r\n    private authProjRepository: AuthProjRepositoryService,\r\n    private router: Router,\r\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\r\n  ) {}\r\n\r\n  onRegister() {\r\n    if (this.form.valid) {\r\n      const userProj: IDpUserProj = {\r\n        dpUserProjId: 0,\r\n        login: this.form.value.login || '',\r\n        password: this.form.value.password || ''\r\n      };\r\n\r\n      this.authProjRepository.register(userProj).subscribe({\r\n        next: (response) => {\r\n          console.log('Registration successful:', response);\r\n          if (response && response.token) {\r\n            this.alertService.open('Регистрация успешна! Войдите в аккаунт.', { appearance: 'success' }).subscribe();\r\n            this.router.navigate(['/login-proj']);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('Registration failed:', error);\r\n          const errorMessage = error.error?.message || 'Ошибка регистрации: попробуйте другое имя пользователя';\r\n          this.alertService.open(errorMessage, { appearance: 'error' }).subscribe();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  navigateToLogin() {\r\n    this.router.navigate(['/login-proj']);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: var(--tui-base-01);\r\n  padding: 1rem;\r\n  box-sizing: border-box;\r\n}\r\n\r\nform[tuiCardLarge] {\r\n  width: 100%;\r\n  max-width: 32rem;\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n@media (max-width: 47.9375rem) {\r\n  .form-container {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  form[tuiCardLarge] {\r\n    max-width: 90%;\r\n  }\r\n}\r\n\r\nbody.dark-theme .form-container {\r\n  background: var(--tui-base-02-dark);\r\n}\r\n\r\nbody.dark-theme form[tuiCardLarge] {\r\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow-dark);\r\n}",
                    "styleUrl": "./register-proj.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authProjRepository",
                        "type": "AuthProjRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "authProjRepository",
                        "type": "AuthProjRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "TuiAlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"form-container\">\r\n    <form tuiAppearance=\"floating\" tuiCardLarge tuiForm=\"m\" [formGroup]=\"form\" [style.max-width.rem]=\"32\"\r\n        (ngSubmit)=\"onRegister()\">\r\n        <header tuiHeader>\r\n            <h2 tuiTitle>\r\n                Форма регистрации для пользователя с тестами\r\n            </h2>\r\n        </header>\r\n\r\n        <tui-textfield>\r\n            <label tuiLabel>Логин</label>\r\n            <input formControlName=\"login\" placeholder=\"Логин\" tuiTextfield required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"login\" [error]=\"[] | tuiFieldError | async\" />\r\n        <tui-textfield>\r\n            <label tuiLabel>Пароль</label>\r\n            <input formControlName=\"password\" placeholder=\"Пароль\" tuiTextfield type=\"password\" required />\r\n        </tui-textfield>\r\n        <tui-error formControlName=\"password\" [error]=\"[] | tuiFieldError | async\" />\r\n        <footer>\r\n            <button appearance=\"secondary\" tuiButton type=\"button\" (click)=\"navigateToLogin()\">\r\n                Отмена\r\n            </button>\r\n            <button tuiButton type=\"submit\">\r\n                Зарегистрироваться\r\n            </button>\r\n        </footer>\r\n    </form>\r\n</div>"
        },
        {
            "name": "ThemeToggleComponent",
            "id": "component-ThemeToggleComponent-b624982bf2938a868da312956fb554dbc4c3a5334e131082569d6f74d7cead3bf31771cf4d0025d4b96a1691ccec8d94c6f636436b4765cd2f27ad038b27f0ef",
            "file": "src/app/data/components/theme-toggle/theme-toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-theme-toggle",
            "styleUrls": [
                "./theme-toggle.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./theme-toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertService",
                    "defaultValue": "inject(TuiAlertService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "configService",
                    "defaultValue": "inject(ConfigService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "darkMode",
                    "defaultValue": "inject(TUI_DARK_MODE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "key",
                    "defaultValue": "inject(TUI_DARK_MODE_KEY)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "media",
                    "defaultValue": "inject(WA_WINDOW).matchMedia('(prefers-color-scheme: dark)')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "storage",
                    "defaultValue": "inject(WA_LOCAL_STORAGE)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "toggle",
                    "defaultValue": "this.darkMode()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "toggleCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "userAchievementsRepository",
                    "defaultValue": "inject(UserAchievementsRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsService",
                    "defaultValue": "inject(UserAchievementsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "recordAchievement",
                    "args": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "userProjId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "achievementId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TuiSwitch"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, inject } from '@angular/core';\r\nimport { TUI_DARK_MODE_KEY, TUI_DARK_MODE, TuiAlertService } from '@taiga-ui/core';\r\nimport { WA_LOCAL_STORAGE, WA_WINDOW } from '@ng-web-apis/common';\r\nimport { TuiSwitch } from '@taiga-ui/kit';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-theme-toggle',\r\n  standalone: true,\r\n  imports: [CommonModule, TuiSwitch, FormsModule],\r\n  templateUrl: './theme-toggle.component.html',\r\n  styleUrls: ['./theme-toggle.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ThemeToggleComponent {\r\n  private readonly key = inject(TUI_DARK_MODE_KEY);\r\n  private readonly storage = inject(WA_LOCAL_STORAGE);\r\n  private readonly media = inject(WA_WINDOW).matchMedia('(prefers-color-scheme: dark)');\r\n  private readonly darkMode = inject(TUI_DARK_MODE);\r\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\r\n  private readonly userAchievementsService = inject(UserAchievementsService);\r\n  private readonly alertService = inject(TuiAlertService);\r\n  private readonly configService = inject(ConfigService);\r\n\r\n  toggle = this.darkMode();\r\n  private toggleCount = 0;\r\n\r\n  constructor() {\r\n    // Инициализация темы из локального хранилища, если она есть\r\n    const savedTheme = this.storage.getItem(this.key);\r\n    if (savedTheme) {\r\n      this.toggle = savedTheme === 'true';\r\n      this.darkMode.set(this.toggle);\r\n      document.body.classList.toggle('dark-theme', this.toggle);\r\n    }\r\n  }\r\n\r\n  toggleTheme(): void {\r\n    this.toggle = !this.toggle;\r\n    this.darkMode.set(this.toggle);\r\n    document.body.classList.add('dark-theme');\r\n    document.body.classList.toggle('dark-theme', this.toggle);\r\n    this.storage.setItem(this.key, this.toggle.toString());\r\n\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.toggleCount++;\r\n\r\n    // Если включён режим \"всегда ошибка\" — всегда негативный тест-кейс\r\n    if (this.userAchievementsService.getAlwaysFailMode()) {\r\n      const achievementId = this.toggle\r\n        ? this.configService.achievementIds.switchToDarkThemeFailed\r\n        : this.configService.achievementIds.switchToLightThemeFailed;\r\n      this.recordAchievement(userProjId, achievementId, `Тест-кейс: ошибка включения ${this.toggle ? 'тёмной' : 'светлой'} темы!`);\r\n      this.alertService.open(`Тест-кейс: ошибка переключения темы на ${this.toggle ? 'тёмную' : 'светлую'}!`, { appearance: 'error' }).subscribe();\r\n      return;\r\n    }\r\n    \r\n    // Логика достижений: чередуем успех и ошибку\r\n    if (this.toggleCount % 2 === 0) {\r\n      // Успешное переключение темы\r\n      const achievementId = this.toggle\r\n        ? this.configService.achievementIds.switchToDarkThemeSuccess\r\n        : this.configService.achievementIds.switchToLightThemeSuccess;\r\n      this.recordAchievement(userProjId, achievementId, `Успешно включена ${this.toggle ? 'тёмная' : 'светлая'} тема!`);\r\n      this.alertService.open(`Тема переключена на ${this.toggle ? 'тёмную' : 'светлую'}!`, { appearance: 'success' }).subscribe();\r\n    } else {\r\n      // Ошибка переключения темы\r\n      const achievementId = this.toggle\r\n        ? this.configService.achievementIds.switchToDarkThemeFailed\r\n        : this.configService.achievementIds.switchToLightThemeFailed;\r\n      this.recordAchievement(userProjId, achievementId, `Ошибка включения ${this.toggle ? 'тёмной' : 'светлой'} темы!`);\r\n      this.alertService.open(`Ошибка переключения темы на ${this.toggle ? 'тёмную' : 'светлую'}!`, { appearance: 'error' }).subscribe();\r\n    }\r\n  }\r\n\r\n  reset(): void {\r\n    const systemTheme = this.media.matches;\r\n    this.toggle = systemTheme;\r\n    this.darkMode.set(systemTheme);\r\n    this.storage.removeItem(this.key);\r\n    this.toggleCount = 0;\r\n\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.recordAchievement(\r\n      userProjId,\r\n      this.configService.achievementIds.resetThemeSuccess,\r\n      'Тема сброшена к системной!'\r\n    );\r\n    this.alertService.open('Тема сброшена к системной!', { appearance: 'success' }).subscribe();\r\n  }\r\n\r\n  private recordAchievement(userProjId: number, achievementId: number, message: string): void {\r\n    if (userProjId <= 0) {\r\n      console.warn('Некорректный userProjId:', userProjId);\r\n      return;\r\n    }\r\n\r\n    this.userAchievementsRepository.handleAchievement(userProjId, achievementId, message).subscribe({\r\n      error: (err) => {\r\n        console.error('Ошибка при записи достижения:', err);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./theme-toggle.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [],
            "templateData": "<label>\r\n    <input\r\n      tuiSwitch\r\n      type=\"checkbox\"\r\n      [(ngModel)]=\"toggle\"\r\n      (ngModelChange)=\"toggleTheme()\"\r\n    />\r\n  </label>\r\n  "
        },
        {
            "name": "UserPageComponent",
            "id": "component-UserPageComponent-3b61c90445cf6ea3414a9108c2cdb5992382e518e0992089082fcbf0294d22472b6103c814be4063e136c57e271088314439b54536bfb4ac0d25b9bcedcf666b",
            "file": "src/app/data/page/user-page/user-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-page",
            "styleUrls": [
                "./user-page.component.css",
                "../../../styles/root.css"
            ],
            "styles": [],
            "templateUrl": [
                "./user-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authProjService",
                    "defaultValue": "inject(AuthProjService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "categories",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpCategory[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "categoryDialog",
                    "defaultValue": "tuiDialog(DialogCategoryComponent, {\r\n    dismissible: true,\r\n    label: 'Добавить запись о категории',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "dialogService",
                    "defaultValue": "inject(TuiDialogService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "editCategoryForm",
                    "defaultValue": "new FormGroup({\r\n    id: new FormControl<number | null>(null, Validators.required)\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "editImageForm",
                    "defaultValue": "new FormGroup({\r\n    id: new FormControl<number | null>(null, Validators.required)\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "editProductForm",
                    "defaultValue": "new FormGroup({\r\n    id: new FormControl<number | null>(null, Validators.required)\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "imageDialog",
                    "defaultValue": "tuiDialog(DialogImageComponent, {\r\n    dismissible: true,\r\n    label: 'Загрузить изображение продукта',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpImage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "isProjAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "productDialog",
                    "defaultValue": "tuiDialog(DialogProductComponent, {\r\n    dismissible: true,\r\n    label: 'Добавить запись о продукте',\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDpProduct[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAuthStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editCategoryById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editImageById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProductById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logoutProj",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "component",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "DialogCategoryComponent",
                    "type": "component"
                },
                {
                    "name": "DialogImageComponent",
                    "type": "component"
                },
                {
                    "name": "DialogProductComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiAutoFocus"
                },
                {
                    "name": "TuiInputModule",
                    "type": "module"
                },
                {
                    "name": "TuiSelectModule",
                    "type": "module"
                },
                {
                    "name": "TuiSlider"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTextfieldControllerModule",
                    "type": "controller"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiDataListWrapper"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "TuiFiles"
                },
                {
                    "name": "TuiLink"
                },
                {
                    "name": "TuiIcon"
                },
                {
                    "name": "TuiAvatar"
                },
                {
                    "name": "TuiIconPipe",
                    "type": "pipe"
                },
                {
                    "name": "ThemeToggleComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, CUSTOM_ELEMENTS_SCHEMA, inject } from '@angular/core';\r\nimport { AsyncPipe, CommonModule, NgIf } from '@angular/common';\r\nimport { DialogCategoryComponent } from \"../../components/dialog-category/dialog-category.component\";\r\nimport { DialogImageComponent } from \"../../components/dialog-image/dialog-image.component\";\r\nimport { DialogProductComponent } from \"../../components/dialog-product/dialog-product.component\";\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { TuiAutoFocus } from '@taiga-ui/cdk';\r\nimport { TuiButton, TuiDialogService, TuiIcon, TuiIconPipe, TuiLink, TuiTextfield } from '@taiga-ui/core';\r\nimport { TuiAvatar, TuiDataListWrapper, TuiFiles, TuiSlider } from '@taiga-ui/kit';\r\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\r\nimport { tuiDialog } from '@taiga-ui/core';\r\nimport { IDpCategory } from '../../../interface/IDpCategory';\r\nimport { IDpProduct } from '../../../interface/IDpProduct';\r\nimport { IDpImage } from '../../../interface/IDpImage';\r\nimport { AuthService } from '../../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { AuthProjService } from '../../../services/auth-proj.service';\r\nimport { CategoriesRepositoryService } from '../../../repositories/categories-repository.service';\r\nimport { ImagesRepositoryService } from '../../../repositories/images-repository.service';\r\nimport { ProductsRepositoryService } from '../../../repositories/products-repository.service';\r\nimport { ThemeToggleComponent } from '../../components/theme-toggle/theme-toggle.component';\r\n\r\n@Component({\r\n  selector: 'app-user-page',\r\n  imports: [\r\n    CommonModule,\r\n    DialogCategoryComponent,\r\n    DialogImageComponent,\r\n    DialogProductComponent,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    TuiAutoFocus,\r\n    TuiInputModule,\r\n    TuiSelectModule,\r\n    TuiSlider,\r\n    TuiTextfield,\r\n    TuiTextfieldControllerModule,\r\n    TuiButton,\r\n    TuiDataListWrapper,\r\n    AsyncPipe,\r\n    NgIf,\r\n    TuiFiles,\r\n    TuiLink,\r\n    TuiIcon,\r\n    TuiAvatar,\r\n    TuiIconPipe,\r\n    ThemeToggleComponent\r\n  ],\r\n  templateUrl: './user-page.component.html',\r\n  styleUrls: ['./user-page.component.css', '../../../styles/root.css'],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class UserPageComponent {\r\n  private readonly dialogService = inject(TuiDialogService);\r\n  private readonly authProjService = inject(AuthProjService);\r\n  private readonly router = inject(Router);\r\n  products: IDpProduct[] = [];\r\n  categories: IDpCategory[] = [];\r\n  images: IDpImage[] = [];\r\n\r\n  editProductForm = new FormGroup({\r\n    id: new FormControl<number | null>(null, Validators.required)\r\n  });\r\n\r\n  editCategoryForm = new FormGroup({\r\n    id: new FormControl<number | null>(null, Validators.required)\r\n  });\r\n\r\n  editImageForm = new FormGroup({\r\n    id: new FormControl<number | null>(null, Validators.required)\r\n  });\r\n\r\n\r\n  isProjAuthenticated: boolean = false;\r\n\r\n  private readonly productDialog = tuiDialog(DialogProductComponent, {\r\n    dismissible: true,\r\n    label: 'Добавить запись о продукте',\r\n  });\r\n\r\n  private readonly categoryDialog = tuiDialog(DialogCategoryComponent, {\r\n    dismissible: true,\r\n    label: 'Добавить запись о категории',\r\n  });\r\n\r\n  private readonly imageDialog = tuiDialog(DialogImageComponent, {\r\n    dismissible: true,\r\n    label: 'Загрузить изображение продукта',\r\n  });\r\n\r\n  constructor(\r\n    private productsRepository: ProductsRepositoryService,\r\n    private categoriesRepository: CategoriesRepositoryService,\r\n    private imagesRepository: ImagesRepositoryService\r\n  ) { }\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.authProjService.isAuthenticated$.subscribe(isAuthenticated => {\r\n      this.isProjAuthenticated = isAuthenticated;\r\n    });\r\n    this.checkAuthStatus();\r\n  }\r\n\r\n  checkAuthStatus(): void {\r\n    const token = localStorage.getItem('projToken');\r\n    this.isProjAuthenticated = !!token;\r\n    this.authProjService.setAuthenticated(this.isProjAuthenticated);\r\n  }\r\n\r\n  logoutProj(): void {\r\n    localStorage.removeItem('projToken'); // Удаляем 'projToken'\r\n    localStorage.removeItem('userProjId');\r\n    this.authProjService.setAuthenticated(false);\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  navigateTo(path: string): void {\r\n    this.router.navigate([path]);\r\n  }\r\n\r\n  openDialog(component: string): void {\r\n    switch (component) {\r\n      case 'product':\r\n        this.productDialog({} as IDpProduct).subscribe({\r\n          next: (data) => {\r\n            console.log('Creating product with data:', JSON.stringify(data, null, 2));\r\n            this.products.push(data); // Добавить в массив\r\n          },\r\n          complete: () => {\r\n            console.info('Product dialog closed');\r\n          }\r\n        });\r\n        break;\r\n      case 'category':\r\n        this.categoryDialog({} as IDpCategory).subscribe({\r\n          next: (data) => {\r\n            console.log('Creating category with data:', JSON.stringify(data, null, 2));\r\n          },\r\n          complete: () => {\r\n            console.info('Category dialog closed');\r\n          }\r\n        });\r\n        break;\r\n      case 'image':\r\n        this.imageDialog({} as IDpImage).subscribe({\r\n          next: (data) => {\r\n            console.log('Uploading image with data:', JSON.stringify(data, null, 2));\r\n          },\r\n          complete: () => {\r\n            console.info('Image dialog closed');\r\n          }\r\n        });\r\n        break;\r\n    }\r\n  }\r\n\r\n  editProductById(id: number | null): void {\r\n    if (id == null) return;\r\n    this.productsRepository.getProductById(id).subscribe({\r\n      next: (product) => {\r\n        this.productDialog(product).subscribe({\r\n          next: (data) => {\r\n            console.log('Updated product:', data);\r\n          },\r\n          complete: () => {\r\n            console.info('Product edit dialog closed');\r\n          }\r\n        });\r\n      },\r\n      error: () => {\r\n        console.warn('Продукт с таким ID не найден');\r\n      }\r\n    });\r\n  }\r\n\r\n  editCategoryById(id: number | null): void {\r\n    if (id == null) return;\r\n    this.categoriesRepository.getDpCategoryById(id).subscribe({\r\n      next: (category) => {\r\n        this.categoryDialog(category).subscribe({\r\n          next: (data) => {\r\n            console.log('Updated category:', data);\r\n          },\r\n          complete: () => {\r\n            console.info('Category edit dialog closed');\r\n          }\r\n        });\r\n      },\r\n      error: () => {\r\n        console.warn('Категория с таким ID не найдена');\r\n      }\r\n    });\r\n  }\r\n\r\n  editImageById(id: number | null): void {\r\n    if (id == null) return;\r\n    this.imagesRepository.getDpImageById(id).subscribe({\r\n      next: (image) => {\r\n        this.imageDialog(image).subscribe({\r\n          next: (data) => {\r\n            console.log('Updated image:', data);\r\n          },\r\n          complete: () => {\r\n            console.info('Image edit dialog closed');\r\n          }\r\n        });\r\n      },\r\n      error: () => {\r\n        console.warn('Изображение с таким ID не найдено');\r\n      }\r\n    });\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../styles/variables.css';\r\n\r\n:host {\r\n    display: block;\r\n    padding: 1.5rem 1rem; /* 24px 16px */\r\n    box-sizing: border-box;\r\n    min-height: 100vh;\r\n}\r\n\r\n.user-page-content {\r\n    padding: 1.25rem; /* 20px */\r\n    margin: 0 auto;\r\n    max-width: 800px; /* Компактная ширина */\r\n    border-radius: var(--button-border-radius); /* 6px */\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1.25rem; /* Уменьшен с 1.5rem для компактности */\r\n}\r\n\r\n/* Стили для заголовка */\r\nh1 {\r\n    font-size: 1.75rem;\r\n    color: var(--tui-primary);\r\n    margin: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n    flex-wrap: wrap;\r\n}\r\n\r\n/* Стили для кнопок Taiga UI */\r\nbutton[tuiButton] {\r\n    margin: 0;\r\n    padding: var(--button-padding); /* Из variables.css */\r\n    color: var(--tui-text-01); /* Текст кнопки */\r\n}\r\n\r\n/* Группа кнопок */\r\n.user-page-content > div.action-buttons {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 0.75rem; /* 12px между кнопками */\r\n}\r\n\r\n/* Стили для форм */\r\nform {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 0.75rem; /* 12px внутри формы */\r\n}\r\n\r\n/* Стили для инпутов Taiga UI */\r\ntui-input {\r\n    max-width: 200px; /* Компактная ширина */\r\n}\r\n\r\n/* Стили для текстовых элементов */\r\np {\r\n    margin: 0.5rem 0;\r\n    color: var(--tui-text-01);\r\n    font-size: 1rem;\r\n    line-height: 1.5;\r\n}\r\n\r\n/* Адаптивность */\r\n@media (max-width: 768px) {\r\n    :host {\r\n        padding: 1rem 0.5rem; /* 16px 8px */\r\n    }\r\n\r\n    .user-page-content {\r\n        padding: 0.75rem; /* 12px */\r\n        max-width: 100%;\r\n        border-radius: 0.5rem; /* 8px */\r\n        gap: 1rem; /* 16px */\r\n    }\r\n\r\n    h1 {\r\n        font-size: 1.5rem;\r\n        gap: 0.25rem;\r\n    }\r\n\r\n    tui-input {\r\n        max-width: 100%; /* Полная ширина */\r\n    }\r\n\r\n    .user-page-content > div.action-buttons {\r\n        flex-direction: column;\r\n        gap: 0.5rem; /* 8px */\r\n    }\r\n\r\n    form {\r\n        gap: 0.5rem; /* 8px */\r\n    }\r\n}\r\n\r\n/* Темная тема */\r\n[data-theme=\"dark\"] :host {\r\n    background: var(--background-color); /* Фон страницы */\r\n    color: var(--text-color-dark); /* Темный текст */\r\n}\r\n\r\n[data-theme=\"dark\"] .user-page-content {\r\n    background: var(--card-background-color); /* Фон карточки */\r\n    box-shadow: var(--card-shadow); /* Тень */\r\n}\r\n\r\n[data-theme=\"dark\"] h1 {\r\n    color: var(--tui-primary); /* Акцентный цвет */\r\n}\r\n\r\n[data-theme=\"dark\"] p {\r\n    color: var(--tui-text-01); /* Светлый текст */\r\n}\r\n\r\n[data-theme=\"dark\"] button[tuiButton] {\r\n    color: var(--tui-text-01); /* Светлый текст для кнопок */\r\n    background: var(--button-background-color); /* Фон из variables.css */\r\n}\r\n\r\n[data-theme=\"dark\"] button[tuiButton]:hover {\r\n    background: var(--button-background-color-hover);\r\n}\r\n\r\n[data-theme=\"dark\"] tui-input {\r\n    color: var(--tui-text-01); /* Светлый текст в инпутах */\r\n    background: var(--tui-base-01); /* Фон инпута */\r\n    border-color: var(--tui-base-03); /* Граница */\r\n}",
                    "styleUrl": "./user-page.component.css"
                },
                {
                    "data": "@import 'variables.css';\r\n@import 'buttons.css';\r\n@import 'cards.css';\r\n@import 'navigation.css';\r\n@import 'header.css';\r\n@import 'carousel.css';\r\n@import 'icons.css';\r\n@import 'layout.css';\r\n@import 'tables.css';\r\n@import 'typography.css';",
                    "styleUrl": "../../../styles/root.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "productsRepository",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoriesRepository",
                        "type": "CategoriesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "imagesRepository",
                        "type": "ImagesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 89,
                "jsdoctags": [
                    {
                        "name": "productsRepository",
                        "type": "ProductsRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoriesRepository",
                        "type": "CategoriesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imagesRepository",
                        "type": "ImagesRepositoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"user-page-content\">\r\n  <div>\r\n    <h1>\r\n      Экран тест пользователя\r\n      <tui-avatar src=\"@tui.user\" appearance=\"primary\" size=\"s\" (click)=\"navigateTo('/userProj')\" class=\"user-avatar\" />\r\n      <br />\r\n      Переключение темы приложения\r\n      <app-theme-toggle></app-theme-toggle>\r\n    </h1>\r\n  </div>\r\n\r\n  <div class=\"action-buttons\">\r\n    <button tuiButton appearance=\"primary\" type=\"button\" (click)=\"openDialog('product')\">\r\n      Добавить продукт\r\n    </button>\r\n    <button tuiButton appearance=\"primary\" type=\"button\" (click)=\"openDialog('category')\">\r\n      Добавить категорию\r\n    </button>\r\n    <button tuiButton appearance=\"primary\" type=\"button\" (click)=\"openDialog('image')\">\r\n      Добавить изображение\r\n    </button>\r\n  </div>\r\n\r\n  <form [formGroup]=\"editProductForm\" (ngSubmit)=\"editProductById(editProductForm.value.id ?? null)\">\r\n    <tui-input tuiTextfieldSize=\"m\" maxlength=\"10\" formControlName=\"id\" placeholder=\"Введите ID продукта\" type=\"number\">\r\n      ID Продукта\r\n    </tui-input>\r\n    <button tuiButton appearance=\"primary\" type=\"submit\" [disabled]=\"!editProductForm.valid\">\r\n      Редактировать продукт\r\n    </button>\r\n  </form>\r\n\r\n  <form [formGroup]=\"editCategoryForm\" (ngSubmit)=\"editCategoryById(editCategoryForm.value.id ?? null)\">\r\n    <tui-input tuiTextfieldSize=\"m\" maxlength=\"10\" formControlName=\"id\" placeholder=\"Введите ID категории\"\r\n      type=\"number\">\r\n      ID Категории\r\n    </tui-input>\r\n    <button tuiButton appearance=\"primary\" type=\"submit\" [disabled]=\"!editCategoryForm.valid\">\r\n      Редактировать категорию\r\n    </button>\r\n  </form>\r\n\r\n  <form [formGroup]=\"editImageForm\" (ngSubmit)=\"editImageById(editImageForm.value.id ?? null)\">\r\n    <tui-input tuiTextfieldSize=\"m\" maxlength=\"10\" formControlName=\"id\" placeholder=\"Введите ID изображения\"\r\n      type=\"number\">\r\n      ID Изображения\r\n    </tui-input>\r\n    <button tuiButton appearance=\"primary\" type=\"submit\" [disabled]=\"!editImageForm.valid\">\r\n      Редактировать изображение\r\n    </button>\r\n  </form>\r\n</div>"
        },
        {
            "name": "UserPageProjComponent",
            "id": "component-UserPageProjComponent-2af8a45508eb7cc5976f0fe7ee399879674af128e35cfc9ed224174d71320c82ab9fc0a276401b7a1595529868da61463417d52a679a9b9e166657f612cbb900",
            "file": "src/app/data/page/user-page-proj/user-page-proj.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-page-proj",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./user-page-proj.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alwaysFailMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "authProjService",
                    "defaultValue": "inject(AuthProjService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isProjAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "logoutAttempt",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userAchievementsRepository",
                    "defaultValue": "inject(UserAchievementsRepositoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAuthStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logoutProj",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleAlwaysFail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TuiInputModule",
                    "type": "module"
                },
                {
                    "name": "TuiSelectModule",
                    "type": "module"
                },
                {
                    "name": "TuiSlider"
                },
                {
                    "name": "TuiTextfield"
                },
                {
                    "name": "TuiTextfieldControllerModule",
                    "type": "controller"
                },
                {
                    "name": "TuiButton"
                },
                {
                    "name": "TuiDataListWrapper"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgIf"
                },
                {
                    "name": "TuiFiles"
                },
                {
                    "name": "TuiLink"
                },
                {
                    "name": "AchievmentsPageForUserComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthProjService } from '../../../services/auth-proj.service';\r\nimport { CommonModule, AsyncPipe, NgIf } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { TuiTextfield, TuiButton, TuiLink, TuiIcon, TuiIconPipe } from '@taiga-ui/core';\r\nimport { TuiSlider, TuiDataListWrapper, TuiFiles, TuiAvatar } from '@taiga-ui/kit';\r\nimport { TuiInputModule, TuiSelectModule, TuiTextfieldControllerModule } from '@taiga-ui/legacy';\r\nimport { AchievmentsPageForUserComponent } from '../achievments-page-for-user/achievments-page-for-user.component';\r\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\r\nimport { ConfigService } from '../../../services/config.service';\r\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\r\n\r\n@Component({\r\n  selector: 'app-user-page-proj',\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    TuiInputModule,\r\n    TuiSelectModule,\r\n    TuiSlider,\r\n    TuiTextfield,\r\n    TuiTextfieldControllerModule,\r\n    TuiButton,\r\n    TuiDataListWrapper,\r\n    AsyncPipe,\r\n    NgIf,\r\n    TuiFiles,\r\n    TuiLink,\r\n    AchievmentsPageForUserComponent\r\n  ],\r\n  templateUrl: './user-page-proj.component.html',\r\n  styleUrl: './user-page-proj.component.css'\r\n})\r\nexport class UserPageProjComponent {\r\n  private readonly authProjService = inject(AuthProjService);\r\n  private readonly router = inject(Router);\r\n  private readonly userAchievementsRepository = inject(UserAchievementsRepositoryService);\r\n  alwaysFailMode = false;\r\n  isProjAuthenticated: boolean = false;\r\n  private logoutAttempt = 0;\r\n\r\n  constructor(\r\n    private readonly configService: ConfigService = inject(ConfigService),\r\n    private userAchievementsService: UserAchievementsService = inject(UserAchievementsService)\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.alwaysFailMode = this.userAchievementsService.getAlwaysFailMode();\r\n    // Случайно определяем успех или ошибку (50/50)\r\n    const isSuccess = Math.random() < 0.3;\r\n\r\n    this.isProjAuthenticated = !!localStorage.getItem('projToken');\r\n    this.authProjService.setAuthenticated(this.isProjAuthenticated);\r\n\r\n    if (isSuccess) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.updateProfileSuccess,\r\n          'Успешное обновление профиля'\r\n        )\r\n        .subscribe();\r\n      // Можно добавить alert или другой способ уведомления\r\n      // alert('Тест-кейс: успешное обновление профиля!');\r\n    } else {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(\r\n          userProjId,\r\n          this.configService.achievementIds.updateProfileFailed,\r\n          'Ошибка обновления профиля!'\r\n        )\r\n        .subscribe();\r\n      // alert('Тест-кейс: ошибка обновления профиля!');\r\n    }\r\n    this.checkAuthStatus();\r\n  }\r\n\r\n  toggleAlwaysFail() {\r\n    this.userAchievementsService.setAlwaysFailMode(this.alwaysFailMode);\r\n  }\r\n\r\n  checkAuthStatus(): void {\r\n    const token = localStorage.getItem('projToken');\r\n    this.isProjAuthenticated = !!token;\r\n    this.authProjService.setAuthenticated(this.isProjAuthenticated);\r\n  }\r\n\r\n  logoutProj(): void {\r\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\r\n    this.logoutAttempt++;\r\n    // 1 из 4 успешный, остальные — ошибка\r\n    const isSuccess = this.logoutAttempt % 4 === 1;\r\n\r\n    if (isSuccess) {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.logoutProjSuccess, 'Успешный выход из проекта!')\r\n        .subscribe();\r\n    } else {\r\n      this.userAchievementsRepository\r\n        .handleAchievement(userProjId, this.configService.achievementIds.logoutProjFailed, 'Ошибка выхода из проекта!')\r\n        .subscribe();\r\n    }\r\n    localStorage.removeItem('projToken');\r\n    localStorage.removeItem('userProjId');\r\n    this.authProjService.setAuthenticated(false);\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  navigateTo(path: string): void {\r\n    this.router.navigate([path]);\r\n  }\r\n}",
            "styleUrl": "./user-page-proj.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(ConfigService)"
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)"
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(ConfigService)",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAchievementsService",
                        "type": "UserAchievementsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "inject(UserAchievementsService)",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": " <button *ngIf=\"!isProjAuthenticated\" (click)=\"navigateTo('/login-proj')\" tuiButton>Авторизация пользователя с тестами</button>\r\n  <button *ngIf=\"isProjAuthenticated\" (click)=\"logoutProj()\" tuiButton>Выйти из аккаунта пользователя с тестами</button>\r\n  <label>\r\n  <input type=\"checkbox\" [(ngModel)]=\"alwaysFailMode\" (change)=\"toggleAlwaysFail()\" />\r\n  Всегда имитировать ошибку тест-кейсов\r\n</label>\r\n<app-achievments-page-for-user></app-achievments-page-for-user>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideAnimations(),\r\n    provideHttpClient(withInterceptorsFromDi()),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideEventPlugins(),\r\n    AchievementsService // Убедитесь, что сервис добавлен в providers\r\n  ]\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideAnimations(),\r\n    provideHttpClient(withInterceptorsFromDi()),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideEventPlugins(),\r\n    AchievementsService // Убедитесь, что сервис добавлен в providers\r\n  ]\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/alert-delete/alert-delete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlertDeleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/back-button/back-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BackButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/card-item/card-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/carousel-img/carousel-img.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselImgComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/dialog-category/dialog-category.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogCategoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/dialog-image/dialog-image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/dialog-product/dialog-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/filter-by-input/filter-by-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterByInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/icon-trash/icon-trash.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IconTrashComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/login-proj/login-proj.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginProjComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/register-proj/register-proj.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterProjComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/data/components/theme-toggle/theme-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/about/about.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AboutComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/achievments-page-for-user/achievments-page-for-user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AchievmentsPageForUserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/page-cart/page-cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageCartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/page-cart/page-cart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItem",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/page-catalog-item/page-catalog-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageCatalogItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/page-item-from-catalog/page-item-from-catalog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageItemFromCatalogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/user-page-proj/user-page-proj.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserPageProjComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/data/page/user-page/user-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IAchievement.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAchievement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IAddToCartRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAddToCartRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/ICartItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICartItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/ICartViewModel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICartViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/ICreateDpImageRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICreateDpImageRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpCategory.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpCategory",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpImage.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpImage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpOrder.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpOrder",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpOrderComposition.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpOrderComposition",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpOrderDetail.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpOrderDetail",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpProduct.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpProduct",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpProductAttribute.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpProductAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpSize.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpSize",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpUser.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpUser",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IDpUserProj.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDpUserProj",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IRemoveFromCartRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRemoveFromCartRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IUpdateCartRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUpdateCartRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IUpdateDpImageRequest.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUpdateDpImageRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/interface/IUserHasAchievement.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUserHasAchievement",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/achievements-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AchievementsRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/auth-proj-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthProjRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/auth-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/categories-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoriesRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/images-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImagesRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/order-compositions-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderCompositionsRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/order-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "OrderRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/product-attributes-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductAttributesRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/products-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/shop-cart-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShopCartRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/sizes-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SizesRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/user-achievements-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAchievementsRepositoryService",
                "coveragePercent": 12,
                "coverageCount": "1/8",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/user-projs-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserProjsRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/repositories/users-repository.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UsersRepositoryService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/services/achievements.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AchievementsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth-proj.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthProjService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-categories.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpCategoriesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-images.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpImagesService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-order-compositions.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpOrderCompositionsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-orders.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpOrdersService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-product-attributes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpProductAttributesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-products.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductsService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-shop-cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShopCartService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-sizes.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpSizesService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-user-projs.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpUserProjsService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/dp-users.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DpUsersService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/user-achievements.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAchievementsService",
                "coveragePercent": 53,
                "coverageCount": "8/15",
                "status": "good"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}