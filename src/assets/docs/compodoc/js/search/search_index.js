var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AboutComponent.html",[0,1.916,1,2.544]],["body/components/AboutComponent.html",[0,1.952,1,2.988,2,2.323,3,0.082,4,0.069,5,1.683,6,1.683,7,1.683,8,1.683,9,0.069,10,1.427,11,1.683,12,2.323,13,3.389,14,2.94,15,2.94,16,2.323,17,3.731,18,3.731,19,3.467,20,3.467,21,3.467,22,3.467,23,3.467,24,2.94,25,3.467,26,3.467,27,3.467,28,2.94,29,3.467,30,2.323,31,1.683,32,2.323,33,2.741,34,0.069,35,0.09,36,1.672,37,3.873,38,2.592,39,2.251,40,3.467,41,2.45,42,0.833,43,2.741,44,3.997,45,3.997,46,0.782,47,1.683,48,4,49,1.48,50,2.741,51,0.833,52,0.026,53,1.215,54,0.112,55,0.254,56,2.741,57,0.929,58,1.683,59,1.683,60,1.054,61,2.657,62,1.683,63,1.683,64,1.071,65,1.071,66,2.323,67,1.683,68,2.741,69,1.683,70,1.151,71,3.467,72,2.323,73,1.683,74,0.718,75,1.427,76,1.427,77,1.427,78,1.683,79,2.323,80,0.423,81,1.258,82,2.592,83,3.489,84,1.132,85,1.427,86,1.256,87,1.258,88,1.427,89,1.427,90,1.427,91,1.683,92,1.683,93,1.683,94,1.683,95,1.683,96,1.683,97,1.132,98,1.683,99,2.741,100,2.323,101,1.427,102,0.082,103,0.451,104,1.683,105,1.683,106,1.683,107,4.397,108,4,109,4.719,110,5.186,111,4.719,112,4.719,113,2.741,114,0.195,115,2.12,116,3.997,117,2.323,118,2.741,119,2.741,120,2.741,121,2.741,122,2.323,123,2.741,124,1.141,125,0.833,126,2.741,127,2.323,128,2.741,129,2.741,130,2.741,131,2.323,132,2.741,133,2.323,134,2.741,135,2.323,136,2.323,137,2.323,138,2.323,139,2.741,140,2.741,141,2.741,142,1.683,143,2.592,144,3.467,145,3.997,146,1.683,147,1.683,148,1.683,149,1.683,150,6.156,151,5.186,152,5.944,153,1.683,154,3.467,155,4.401,156,2.741,157,5.944,158,5.515,159,3.467,160,1.683,161,3.467,162,1.683,163,5.644,164,1.683,165,1.683,166,4.401,167,4.975,168,5.364,169,2.156,170,5.364,171,4.401,172,1.683,173,2.741,174,3.467,175,1.683,176,1.683,177,3.467,178,0.947,179,1.683,180,2.741,181,3.467,182,3.997,183,2.741,184,1.683,185,4.401,186,1.683,187,2.741,188,3.467,189,4.401,190,2.45,191,3.997,192,2.741,193,2.741,194,2.741,195,1.683,196,1.683,197,1.683,198,3.467,199,4.975,200,3.997,201,3.997,202,3.997,203,1.683,204,1.683,205,1.683,206,2.741,207,1.683,208,1.683,209,3.997,210,3.29,211,1.683,212,1.683,213,2.741,214,1.427,215,1.683,216,2.741,217,3.467,218,0.156,219,4.401,220,1.683,221,3.731,222,2.741,223,1.683,224,1.683,225,2.741,226,2.741,227,1.683,228,1.683,229,1.683,230,1.683,231,1.683,232,3.997,233,1.931,234,1.683,235,1.683,236,1.683,237,1.683,238,1.683,239,1.683,240,2.741,241,2.741,242,1.683,243,1.683,244,1.683,245,1.683,246,3.389,247,3.997,248,1.683,249,1.683,250,1.683,251,1.683,252,1.683,253,1.683,254,1.683,255,1.683,256,1.683,257,1.683,258,1.683,259,1.683,260,1.683,261,1.683,262,2.049,263,2.741,264,1.683,265,1.683,266,1.427,267,1.683,268,0.01,269,0.01]],["title/injectables/AchievementsService.html",[270,0.316,271,2.544]],["body/injectables/AchievementsService.html",[3,0.122,4,0.102,9,0.102,34,0.102,35,0.123,36,1.275,42,1.135,46,0.713,49,1.693,51,1.693,52,0.026,53,1.693,54,0.227,55,0.516,57,1.328,60,1.906,61,2.101,64,0.669,65,0.669,74,0.557,80,0.628,86,0.713,102,0.122,103,0.669,114,0.316,115,1.374,124,1.065,125,1.507,169,2.05,178,3.574,218,0.516,268,0.013,269,0.013,270,0.346,271,2.789,272,0.713,273,2.117,274,0.365,275,2.789,276,5.932,277,1.922,278,6.348,279,1.803,280,2.184,281,3.574,282,5.381,283,2.188,284,2.505,285,1.447,286,3.732,287,3.732,288,3.732,289,4.957,290,3.732,291,3.732,292,0.809,293,3.732,294,3.732,295,3.156,296,2.497,297,3.732,298,3.732,299,4.434,300,2.131,301,3.732,302,0.472,303,2.497,304,3.732,305,3.732,306,2.497,307,3.732,308,2.497,309,3.732,310,3.164,311,3.732,312,2.497,313,3.732,314,2.101,315,4.468,316,3.732,317,2.497,318,3.732,319,1.374,320,3.732,321,0.809,322,2.117,323,0.759,324,0.759,325,0.759,326,0.862,327,1.613,328,0.919,329,1.803,330,1.049,331,1.049,332,1.049,333,1.049,334,2.497,335,2.497,336,2.497]],["title/injectables/AuthProjService.html",[270,0.316,337,2.544]],["body/injectables/AuthProjService.html",[3,0.124,4,0.103,9,0.103,34,0.103,35,0.124,36,1.598,42,1.148,46,0.724,49,1.738,51,1.519,52,0.026,53,1.519,54,0.204,55,0.463,57,1.596,60,1.763,61,3.153,64,1.208,65,1.208,70,1.586,74,0.6,80,0.637,86,0.724,102,0.124,103,0.679,114,0.291,124,1.078,125,1.519,233,2.879,268,0.013,269,0.013,270,0.35,272,0.724,274,0.328,277,1.618,279,1.93,280,2.194,285,1.461,292,0.822,300,1.973,302,0.443,314,3.794,321,0.822,323,0.771,324,0.771,325,0.771,326,0.876,327,1.148,329,1.461,337,2.822,338,5.255,339,2.15,340,3.201,341,3.776,342,2.6,343,4.996,344,4.489,345,5.052,346,4.996,347,4.008,348,4.008,349,5.163,350,4.008,351,4.996,352,4.455,353,5.959,354,4.996,355,3.824,356,4.528,357,3.824,358,4.996,359,4.236,360,2.822,361,3.201,362,3.776,363,2.536,364,3.776,365,3.169,366,2.536,367,4.236,368,2.536,369,3.776,370,3.776,371,2.536,372,3.201,373,3.36,374,2.536,375,3.776,376,2.536,377,3.201,378,3.201,379,2.536,380,2.15,381,1.896,382,2.15,383,2.15,384,2.536,385,0.651,386,3.201,387,3.776,388,3.776,389,2.15,390,3.201,391,3.201,392,4.236,393,3.776,394,3.776,395,3.776,396,3.201,397,2.15,398,2.15,399,2.536,400,2.536,401,2.536,402,2.15,403,2.536,404,2.15]],["title/injectables/AuthService.html",[97,2.289,270,0.316]],["body/injectables/AuthService.html",[3,0.123,4,0.103,9,0.103,34,0.103,35,0.124,36,1.595,42,1.144,46,0.72,49,1.699,51,1.516,52,0.026,53,1.516,54,0.203,55,0.462,57,1.335,60,1.7,61,2.806,64,1.205,65,1.205,70,1.581,74,0.599,80,0.634,86,0.72,97,2.53,102,0.123,103,0.676,114,0.291,124,1.074,125,1.516,233,3.302,268,0.013,269,0.013,270,0.349,272,0.72,274,0.327,277,1.615,279,1.928,280,2.191,281,2.118,285,1.457,292,0.818,300,1.97,302,0.416,314,2.118,321,0.818,323,0.768,324,0.768,325,0.768,326,0.871,327,1.144,329,1.457,340,3.189,342,2.594,344,4.164,345,5.587,347,4.003,348,4.003,349,4.226,350,3.352,356,4.519,357,3.813,359,4.226,360,2.812,361,3.189,372,3.189,373,3.352,377,3.189,378,3.189,380,2.14,381,1.887,382,2.14,385,0.543,386,3.189,389,2.14,390,3.189,391,3.189,392,4.226,396,3.189,397,2.14,398,2.14,402,2.14,404,2.14,405,2.14,406,3.762,407,4.984,408,4.164,409,6.191,410,6.59,411,4.984,412,4.448,413,5.045,414,5.045,415,3.726,416,4.984,417,4.984,418,4.984,419,4.984,420,3.762,421,3.762,422,3.424,423,2.524,424,2.524,425,3.762,426,3.762,427,2.524,428,2.524,429,3.762,430,2.524,431,2.524,432,2.14,433,3.762,434,3.762,435,3.762,436,3.762,437,3.762]],["title/interfaces/CartItem.html",[438,0.036,439,2.544]],["body/interfaces/CartItem.html",[0,2.025,3,0.116,4,0.097,9,0.097,12,2.016,13,2.016,14,2.016,15,2.016,16,2.016,17,3.049,18,3.049,24,3.049,28,3.049,30,2.016,32,2.016,34,0.147,35,0.118,36,1.668,37,3.676,38,1.777,39,2.443,41,2.204,46,0.679,48,3.678,52,0.026,54,0.097,61,3.369,65,0.964,66,2.016,72,2.016,74,0.727,75,2.016,76,3.049,77,3.049,79,3.049,80,0.904,81,1.777,82,2.689,83,2.918,84,1.599,87,1.777,88,2.016,89,2.016,90,2.016,100,2.016,101,2.016,102,0.116,103,0.637,131,2.016,143,3.243,169,1.913,218,0.402,221,2.016,268,0.013,269,0.013,275,1.777,302,0.387,319,2.499,327,1.726,350,2.918,355,2.016,385,0.863,438,0.025,439,4.839,440,0.491,441,2.016,442,2.016,443,2.016,444,3.597,445,2.659,446,3.884,447,4.837,448,3.597,449,3.597,450,3.597,451,3.597,452,2.016,453,2.378,454,3.597,455,3.597,456,3.597,457,2.016,458,1.777,459,2.378,460,2.016,461,2.378,462,2.204,463,2.016,464,3.597,465,2.204,466,2.016,467,3.597,468,2.378,469,2.419,470,3.597,471,3.597,472,2.378,473,2.378,474,2.659,475,2.378,476,2.378,477,2.378,478,2.378,479,6.099,480,2.378,481,2.378,482,2.378,483,1.777,484,2.378,485,1.777,486,3.678,487,2.742,488,2.016,489,2.378,490,5.072,491,2.378,492,2.378,493,2.378,494,2.378,495,2.378,496,2.378,497,2.378,498,2.378,499,2.378,500,2.378,501,2.378,502,2.378,503,2.378,504,4.837,505,2.378,506,2.378,507,5.676,508,2.378,509,4.101,510,2.378,511,6.099,512,6.281,513,5.663,514,3.678,515,6.281,516,5.325,517,2.378,518,2.378,519,2.378,520,2.378,521,2.378,522,2.378,523,2.378,524,5.676,525,5.195,526,3.597,527,2.378,528,2.378,529,4.339,530,2.918,531,3.678,532,6.197,533,5.254,534,3.049,535,2.378,536,1.738,537,5.465,538,1.324,539,5.465,540,2.378,541,4.837,542,4.837,543,2.016,544,2.659,545,1.777,546,2.378,547,2.378,548,3.049,549,2.378,550,3.597,551,2.016,552,2.378,553,2.378,554,2.378,555,2.378,556,2.016,557,2.378,558,2.378,559,3.678,560,1.599,561,4.339,562,2.378,563,2.378,564,2.016,565,2.378,566,2.378,567,3.049,568,2.378,569,4.339,570,3.049,571,2.378,572,2.378]],["title/injectables/ConfigService.html",[39,1.916,270,0.316]],["body/injectables/ConfigService.html",[3,0.108,4,0.09,9,0.09,34,0.09,35,0.112,37,3.939,39,1.913,49,1.183,52,0.026,54,0.169,64,1.11,65,1.11,74,0.248,80,0.555,102,0.108,103,0.591,114,0.279,115,1.714,117,2.881,122,2.881,124,1.328,135,2.881,136,2.881,137,2.881,138,2.881,218,0.315,268,0.012,269,0.012,270,0.315,272,0.63,274,0.145,277,1.101,314,1.913,323,0.671,324,0.671,325,0.671,342,1.768,360,2.54,385,0.671,530,2.286,544,2.082,545,2.54,573,1.871,574,3.398,575,2.881,576,4.654,577,4.144,578,4.144,579,4.144,580,4.144,581,3.398,582,3.398,583,0.97,584,3.398,585,1.529,586,3.398,587,3.398,588,3.398,589,1.768,590,3.398,591,3.398,592,3.398,593,3.398,594,3.398,595,3.398,596,2.881,597,3.398,598,3.398,599,2.881,600,3.398,601,3.398,602,3.398,603,3.398,604,3.398,605,2.54,606,3.398,607,2.881,608,3.398,609,2.881,610,3.398,611,3.398,612,3.398,613,3.398,614,3.398,615,3.398,616,2.54,617,3.398,618,3.398,619,3.398,620,3.398,621,3.398,622,3.398,623,3.398,624,3.398,625,3.398,626,2.881,627,3.398,628,3.398,629,3.398,630,3.398,631,3.398,632,3.398,633,3.398,634,3.398,635,3.398,636,3.398,637,3.398,638,3.398,639,3.398,640,3.398,641,3.398,642,2.881,643,3.398,644,3.398,645,3.398,646,3.398,647,3.398,648,3.398,649,3.398,650,3.398,651,3.398,652,3.398,653,3.398,654,3.398,655,3.398,656,3.398,657,3.398,658,3.398,659,3.398,660,2.286,661,3.398,662,3.398,663,3.398,664,3.398,665,3.398,666,3.398,667,3.398,668,3.398,669,3.398,670,3.398,671,3.398,672,3.398,673,2.207,674,2.881,675,3.398,676,3.398,677,2.54,678,3.398,679,3.398,680,3.398,681,2.881,682,2.881,683,3.398,684,3.398,685,3.398,686,3.398,687,3.398,688,2.881,689,3.398,690,3.398,691,3.398,692,3.398,693,5.308,694,2.881,695,3.398,696,3.398,697,3.398,698,3.398,699,3.398,700,3.398,701,3.398,702,3.398,703,3.398,704,3.398,705,3.398,706,3.398,707,3.398,708,3.398,709,2.207,710,3.398,711,3.398,712,3.398,713,3.398,714,3.398,715,3.398,716,3.398,717,3.398,718,3.398,719,3.398,720,3.398,721,3.398,722,3.398,723,3.398,724,3.398,725,3.398,726,3.398,727,3.398,728,3.398,729,3.398,730,3.398,731,3.398,732,3.398,733,3.398,734,2.207,735,3.398,736,3.398]],["title/injectables/DpCategoriesService.html",[270,0.316,737,2.544]],["body/injectables/DpCategoriesService.html",[3,0.122,4,0.102,9,0.102,34,0.102,35,0.123,36,1.278,42,1.138,46,0.716,49,1.649,51,1.616,52,0.026,53,1.616,54,0.217,55,0.493,60,1.879,64,0.672,65,0.672,74,0.558,80,0.63,86,0.716,102,0.122,103,0.672,114,0.31,115,1.378,124,1.068,125,1.51,169,2.187,218,0.551,268,0.013,269,0.013,270,0.347,272,0.716,274,0.349,277,1.924,279,1.609,280,2.187,283,1.952,284,2.235,285,1.451,292,0.812,300,2.132,302,0.473,319,1.829,321,0.812,323,0.762,324,0.762,325,0.762,326,0.866,327,1.616,328,0.923,329,1.722,330,1.053,331,1.053,332,1.053,333,1.053,342,3.216,737,2.798,738,2.334,739,2.125,740,5.939,741,4.967,742,3.743,743,6.353,744,4.967,745,4.034,746,4.428,747,6.583,748,4.967,749,4.967,750,4.967,751,4.967,752,3.743,753,3.743,754,4.967,755,3.743,756,3.743,757,3.743,758,3.743,759,3.418,760,2.507,761,5.035,762,3.743,763,2.507,764,2.507,765,3.743,766,2.507,767,3.743,768,2.507,769,3.743,770,2.507]],["title/injectables/DpImagesService.html",[270,0.316,771,2.544]],["body/injectables/DpImagesService.html",[3,0.111,4,0.093,9,0.274,34,0.093,35,0.115,36,1.207,42,1.06,46,0.651,49,1.688,51,1.701,52,0.026,53,1.701,54,0.228,55,0.519,60,1.936,64,0.611,65,0.611,70,2.259,74,0.604,80,0.573,86,0.651,102,0.111,103,0.611,114,0.311,124,0.995,125,1.44,246,4.014,268,0.012,269,0.012,270,0.323,272,0.651,274,0.367,277,1.869,279,1.129,283,1.37,285,1.37,292,0.739,300,2.171,302,0.494,321,0.739,323,0.693,324,0.693,325,0.693,326,0.787,327,1.701,328,0.84,329,1.812,330,0.958,331,0.958,332,0.958,333,0.958,342,1.814,385,0.898,536,1.684,560,3.617,589,3.14,688,4.891,738,2.371,771,2.605,772,1.934,773,3.485,774,3.485,775,4.735,776,3.485,777,3.485,778,3.485,779,3.485,780,3.485,781,3.485,782,3.431,783,2.281,784,4.735,785,4.735,786,6.567,787,2.674,788,3.901,789,4.735,790,3.485,791,5.378,792,5.378,793,5.378,794,3.485,795,3.485,796,4.313,797,4.891,798,3.485,799,3.485,800,3.485,801,3.485,802,2.281,803,3.485,804,4.014,805,2.281,806,3.485,807,4.735,808,3.485,809,3.485,810,2.281,811,4.735,812,3.485,813,3.485,814,2.281,815,3.585,816,3.485,817,3.485,818,2.954,819,2.954,820,3.485,821,2.281,822,3.485,823,3.485,824,3.485,825,3.431,826,2.281,827,3.485,828,3.485,829,3.485,830,3.485,831,1.398,832,2.281,833,2.281,834,2.281,835,2.281,836,2.281,837,1.934,838,3.485,839,3.485,840,4.229]],["title/injectables/DpOrderCompositionsService.html",[270,0.316,841,2.544]],["body/injectables/DpOrderCompositionsService.html",[3,0.104,4,0.087,9,0.087,34,0.087,35,0.109,36,1.159,42,1.008,46,0.61,49,1.56,51,1.506,52,0.026,53,1.506,54,0.202,55,0.459,60,1.803,64,0.573,65,0.573,74,0.514,80,0.537,86,0.61,102,0.104,103,0.573,114,0.299,115,1.221,124,0.946,125,1.391,218,0.594,268,0.012,269,0.012,270,0.308,272,0.61,274,0.325,277,1.83,279,1.482,280,2.08,283,1.799,284,2.059,285,1.316,292,0.693,300,2.074,302,0.456,319,1.685,321,0.693,323,0.65,324,0.65,325,0.65,326,0.738,327,1.506,328,0.787,329,1.604,330,0.898,331,0.898,332,0.898,333,0.898,342,3.085,487,3.177,583,1.827,585,2.542,589,2.94,738,2.221,787,2.763,841,2.479,842,3.085,843,1.813,844,4.576,845,5.65,846,4.576,847,3.316,848,6.13,849,4.576,850,3.88,851,4.03,852,5.508,853,4.857,854,5.427,855,4.576,856,4.576,857,4.576,858,4.576,859,4.576,860,3.316,861,3.316,862,4.576,863,3.316,864,3.316,865,3.316,866,3.316,867,3.902,868,2.138,869,5.65,870,3.316,871,2.138,872,2.138,873,3.316,874,2.138,875,3.316,876,2.138,877,3.316,878,2.138]],["title/injectables/DpOrdersService.html",[270,0.316,879,2.544]],["body/injectables/DpOrdersService.html",[3,0.135,4,0.112,9,0.112,34,0.112,35,0.132,36,1.351,42,1.22,46,0.787,49,1.7,51,1.681,52,0.026,53,1.681,54,0.225,55,0.513,60,1.922,64,0.738,65,0.738,70,2.185,74,0.584,80,0.693,86,0.787,102,0.135,103,0.738,114,0.309,115,1.478,124,1.146,125,1.581,169,1.915,218,0.601,268,0.014,269,0.014,270,0.372,272,0.787,274,0.363,277,1.869,279,1.3,280,1.915,283,1.577,284,1.806,285,1.533,292,0.893,300,2.164,302,0.482,319,1.478,321,0.893,323,0.838,324,0.838,325,0.838,326,0.951,327,1.681,328,1.015,329,1.79,330,1.158,331,1.158,332,1.158,333,1.158,738,2.398,842,2.089,851,4.04,853,4.561,879,3,880,2.337,881,5.2,882,4.014,883,4.014,884,5.2,885,4.014,886,4.014,887,4.014,888,4.014,889,3.503,890,2.756,891,5.2,892,4.04,893,6.592,894,5.2,895,5.2,896,5.2,897,6.592,898,4.014,899,5.2,900,4.014,901,4.014,902,4.014,903,2.756,904,5.769,905,4.014,906,2.756,907,4.014,908,4.014,909,4.014,910,2.756,911,4.014,912,4.014,913,2.756,914,4.014,915,4.014,916,2.756]],["title/injectables/DpProductAttributesService.html",[270,0.316,917,2.544]],["body/injectables/DpProductAttributesService.html",[3,0.133,4,0.111,9,0.111,34,0.111,35,0.131,36,1.341,42,1.209,46,0.776,49,1.693,51,1.672,52,0.026,53,1.672,54,0.224,55,0.51,60,1.916,64,0.729,65,0.729,74,0.58,80,0.684,86,0.776,102,0.133,103,0.729,114,0.308,115,1.463,124,1.135,125,1.571,169,1.902,218,0.599,268,0.014,269,0.014,270,0.369,272,0.776,274,0.361,277,1.86,279,1.288,280,1.902,283,1.562,284,1.788,285,1.522,292,0.881,300,2.16,302,0.481,319,1.463,321,0.881,323,0.827,324,0.827,325,0.827,326,0.939,327,1.672,328,1.001,329,1.781,330,1.143,331,1.143,332,1.143,333,1.143,738,2.389,787,2.714,917,2.971,918,3.548,919,2.306,920,3.975,921,3.975,922,3.975,923,5.167,924,3.975,925,3.975,926,3.975,927,3.975,928,3.227,929,2.72,930,5.167,931,3.959,932,4.829,933,4.381,934,6.08,935,5.167,936,3.975,937,3.975,938,4.381,939,6.08,940,3.975,941,2.72,942,5.742,943,3.975,944,2.72,945,3.975,946,3.975,947,3.975,948,3.975,949,2.72,950,3.975,951,3.975,952,2.72,953,5.167,954,5.167,955,3.975,956,3.975,957,2.72]],["title/injectables/DpSizesService.html",[270,0.316,958,2.544]],["body/injectables/DpSizesService.html",[3,0.142,4,0.119,9,0.119,34,0.119,35,0.137,36,1.393,42,1.269,46,0.83,49,1.728,51,1.717,52,0.026,53,1.717,54,0.23,55,0.524,60,1.945,64,0.779,65,0.779,74,0.599,80,0.731,86,0.83,102,0.142,103,0.779,114,0.312,115,1.536,124,1.191,125,1.621,169,1.963,190,4.127,218,0.494,268,0.015,269,0.015,270,0.387,272,0.83,274,0.371,277,1.903,279,1.352,280,1.963,283,1.64,284,1.877,285,1.581,292,0.942,300,2.182,302,0.487,319,1.536,321,0.942,323,0.884,324,0.884,325,0.884,326,1.004,327,1.717,328,1.071,329,1.829,330,1.222,331,1.222,332,1.222,333,1.222,538,2.449,738,2.433,932,4.628,958,3.119,959,2.465,960,5.332,961,4.173,962,4.173,963,5.332,964,4.173,965,4.173,966,4.173,967,4.173,968,3.55,969,2.908,970,5.332,971,5.332,972,4.173,973,4.173,974,4.173,975,4.173,976,2.908,977,5.876,978,4.173,979,2.908,980,4.173,981,4.173,982,4.173,983,2.908,984,4.173,985,4.173,986,2.908,987,5.332,988,4.173,989,4.173,990,2.908]],["title/injectables/DpUserProjsService.html",[270,0.316,991,2.544]],["body/injectables/DpUserProjsService.html",[3,0.137,4,0.114,9,0.114,34,0.114,35,0.134,36,1.365,42,1.237,46,0.801,49,1.709,51,1.693,52,0.026,53,1.693,54,0.227,55,0.516,60,1.93,64,0.752,65,0.752,74,0.589,80,0.705,86,0.801,102,0.137,103,0.752,114,0.31,115,1.497,124,1.161,125,1.595,169,1.931,218,0.486,233,3.066,268,0.014,269,0.014,270,0.377,272,0.801,274,0.365,277,1.88,279,1.317,280,1.931,283,1.598,284,1.83,285,1.549,292,0.909,300,2.17,302,0.484,319,1.497,321,0.909,323,0.853,324,0.853,325,0.853,326,0.969,327,1.693,328,1.033,329,1.803,330,1.179,331,1.179,332,1.179,333,1.179,352,3.04,365,3.253,383,2.379,408,4.372,738,2.41,991,3.04,992,2.379,993,4.067,994,4.067,995,4.067,996,5.245,997,4.067,998,4.067,999,4.067,1000,4.067,1001,2.806,1002,5.245,1003,3.983,1004,4.067,1005,3.448,1006,5.199,1007,4.067,1008,2.806,1009,5.805,1010,4.067,1011,2.806,1012,4.067,1013,3.448,1014,3.448,1015,4.067,1016,2.806,1017,4.067,1018,4.067,1019,2.806,1020,4.067,1021,4.067]],["title/injectables/DpUsersService.html",[270,0.316,1022,2.544]],["body/injectables/DpUsersService.html",[3,0.141,4,0.118,9,0.118,34,0.118,35,0.137,36,1.388,42,1.263,46,0.825,49,1.724,51,1.712,52,0.026,53,1.712,54,0.23,55,0.522,60,1.943,64,0.774,65,0.774,74,0.597,80,0.726,86,0.825,102,0.141,103,0.774,114,0.312,115,1.529,124,1.186,125,1.617,169,1.957,218,0.493,233,2.007,268,0.014,269,0.014,270,0.385,272,0.825,274,0.37,277,1.899,279,1.346,280,1.957,283,1.633,284,1.869,285,1.575,292,0.936,300,2.18,302,0.486,319,1.529,321,0.936,323,0.879,324,0.879,325,0.879,326,0.998,327,1.712,328,1.064,329,1.824,330,1.214,331,1.214,332,1.214,333,1.214,352,3.105,408,4.396,422,3.544,432,2.45,738,2.429,892,4.005,1005,3.522,1013,4.507,1014,3.522,1022,3.105,1023,2.45,1024,4.154,1025,4.154,1026,5.316,1027,4.154,1028,4.154,1029,4.154,1030,4.154,1031,2.89,1032,5.316,1033,4.154,1034,5.24,1035,4.154,1036,2.89,1037,5.863,1038,4.154,1039,2.89,1040,4.154,1041,4.154,1042,2.89,1043,4.154,1044,4.154,1045,2.89,1046,4.154,1047,4.154]],["title/interfaces/IAchievement.html",[295,1.771,438,0.036]],["body/interfaces/IAchievement.html",[3,0.22,4,0.184,9,0.184,34,0.184,35,0.184,52,0.026,54,0.26,55,0.59,57,1.831,74,0.505,102,0.22,114,0.273,178,3.808,218,0.59,268,0.019,269,0.019,274,0.295,281,3.808,282,5.734,295,3.312,299,4.757,302,0.473,365,3.471,385,0.807,438,0.048,440,0.93,1003,3.427,1048,3.816,1049,6.764,1050,2.343]],["title/interfaces/IAddToCartRequest.html",[438,0.036,1051,2.086]],["body/interfaces/IAddToCartRequest.html",[3,0.251,4,0.209,9,0.209,34,0.209,35,0.199,52,0.025,54,0.263,55,0.562,102,0.251,114,0.251,218,0.476,268,0.021,269,0.021,274,0.337,302,0.524,385,0.741,438,0.054,440,1.06,487,3.279,536,3.279,538,2.499,583,1.465,589,2.672,1051,3.948,1052,4.352,1053,3.146]],["title/interfaces/ICartItem.html",[438,0.036,445,2.086]],["body/interfaces/ICartItem.html",[3,0.245,4,0.204,9,0.204,34,0.204,35,0.197,52,0.025,54,0.275,55,0.553,57,1.708,102,0.245,114,0.245,218,0.464,268,0.021,269,0.021,274,0.329,302,0.528,385,0.722,438,0.053,440,1.034,445,3.907,485,5.041,486,5.717,487,3.258,509,4.246,536,3.258,538,2.483,583,1.43,585,2.253,1054,4.246,1055,4.246]],["title/interfaces/ICartViewModel.html",[438,0.036,462,2.086]],["body/interfaces/ICartViewModel.html",[3,0.241,4,0.201,9,0.201,34,0.201,35,0.195,52,0.025,54,0.241,74,0.664,102,0.241,114,0.289,268,0.021,269,0.021,274,0.324,385,0.853,438,0.052,440,1.019,445,4.179,462,4.025,469,3.979,483,5.153,1050,2.178,1056,4.183,1057,5.153,1058,3.294]],["title/interfaces/ICreateDpImageRequest.html",[438,0.036,782,2.289]],["body/interfaces/ICreateDpImageRequest.html",[3,0.252,4,0.211,9,0.287,34,0.211,35,0.2,52,0.025,54,0.263,57,1.73,102,0.252,114,0.252,218,0.479,268,0.021,269,0.021,274,0.339,302,0.48,385,0.745,438,0.055,440,1.066,782,4.343,787,2.856,788,4.166,1053,3.164,1059,4.377]],["title/interfaces/IDpCategory.html",[438,0.036,759,1.916]],["body/interfaces/IDpCategory.html",[3,0.225,4,0.188,9,0.188,34,0.188,35,0.187,52,0.025,54,0.269,55,0.527,57,1.72,74,0.638,102,0.225,114,0.277,190,4.167,218,0.527,268,0.02,269,0.02,274,0.303,302,0.511,385,0.819,438,0.049,440,0.953,538,2.503,583,1.621,745,4.167,746,4.574,759,3.614,968,3.779,1050,2.427,1058,3.242,1060,3.911,1061,5.679,1062,6.591]],["title/interfaces/IDpImage.html",[438,0.036,831,2.086]],["body/interfaces/IDpImage.html",[3,0.227,4,0.19,9,0.19,34,0.19,35,0.188,52,0.025,54,0.269,55,0.529,57,1.724,74,0.522,102,0.227,114,0.279,218,0.529,268,0.02,269,0.02,274,0.305,302,0.512,385,0.823,438,0.049,440,0.96,583,1.628,787,2.861,788,4.174,796,5.091,797,5.6,831,3.944,1050,2.432,1058,3.248,1063,3.941,1064,5.705,1065,5.774,1066,6.436]],["title/interfaces/IDpOrder.html",[438,0.036,889,1.916]],["body/interfaces/IDpOrder.html",[3,0.217,4,0.181,9,0.181,34,0.181,35,0.183,52,0.025,54,0.266,55,0.514,57,1.696,70,2.328,74,0.498,102,0.217,114,0.271,218,0.514,268,0.019,269,0.019,274,0.291,302,0.507,385,0.799,412,4.143,422,3.742,438,0.047,440,0.916,446,4.969,583,1.807,842,3.295,851,4.132,889,3.565,892,4.213,1034,5.716,1050,2.399,1067,3.761,1068,6.743,1069,6.743,1070,5.542,1071,3.728]],["title/interfaces/IDpOrderComposition.html",[438,0.036,867,2.289]],["body/interfaces/IDpOrderComposition.html",[3,0.208,4,0.174,9,0.174,34,0.174,35,0.178,52,0.025,54,0.268,74,0.607,102,0.208,114,0.264,218,0.61,268,0.019,269,0.019,274,0.28,302,0.525,385,0.78,438,0.045,440,0.881,583,1.879,585,2.433,787,2.272,842,2.814,850,4.585,851,4.185,852,5.668,853,4.997,867,4.199,889,3.706,892,3.314,928,3.425,931,4.185,1050,2.423,1072,3.617,1073,5.408,1074,6.685,1075,6.685,1076,3.638]],["title/interfaces/IDpOrderDetail.html",[438,0.036,1077,2.289]],["body/interfaces/IDpOrderDetail.html",[3,0.239,4,0.2,9,0.2,34,0.2,35,0.194,52,0.025,54,0.278,55,0.608,57,1.823,102,0.239,114,0.239,268,0.021,269,0.021,274,0.321,302,0.527,385,0.706,438,0.052,440,1.011,485,5.009,487,3.238,488,5.681,538,2.467,583,1.397,585,2.203,660,3.293,842,2.547,1076,3.293,1077,4.246,1078,4.15,1079,5.887,1080,6.702,1081,6.702,1082,4.895]],["title/interfaces/IDpProduct.html",[438,0.036,1058,1.644]],["body/interfaces/IDpProduct.html",[3,0.182,4,0.152,9,0.152,34,0.152,35,0.163,52,0.026,54,0.274,55,0.633,57,1.763,74,0.625,102,0.182,114,0.242,218,0.624,268,0.017,269,0.017,274,0.245,302,0.524,385,0.716,438,0.04,440,0.772,530,3.337,583,1.694,589,2.582,745,4.081,746,3.337,759,3.575,761,5.493,787,2.849,788,3.04,796,3.708,831,3.891,918,3.341,928,3.304,931,3.04,1050,2.476,1055,4.206,1058,2.867,1076,3.337,1083,3.167,1084,5.493,1085,6.479,1086,6.479,1087,6.479,1088,6.479,1089,6.479,1090,5.493,1091,4.206]],["title/interfaces/IDpProductAttribute.html",[438,0.036,928,1.771]],["body/interfaces/IDpProductAttribute.html",[3,0.208,4,0.174,9,0.174,34,0.174,35,0.178,52,0.025,54,0.268,55,0.578,74,0.606,102,0.208,114,0.264,190,3.309,218,0.501,268,0.019,269,0.019,274,0.279,302,0.525,385,0.779,438,0.045,440,0.879,530,3.632,538,1.988,583,1.78,585,2.807,660,3.632,787,2.868,918,3.04,928,3.246,931,4.095,932,4.995,938,4.578,968,3.703,1050,2.422,1058,3.178,1065,5.665,1076,3.632,1084,4.578,1091,5.665,1092,3.609,1093,5.4,1094,6.682]],["title/interfaces/IDpSize.html",[438,0.036,968,1.916]],["body/interfaces/IDpSize.html",[3,0.216,4,0.181,9,0.181,34,0.181,35,0.182,52,0.026,54,0.258,55,0.587,57,1.695,74,0.622,102,0.216,114,0.27,190,4.266,218,0.587,268,0.019,269,0.019,274,0.291,302,0.471,385,0.799,438,0.047,440,0.915,538,2.482,583,1.581,660,4.063,745,3.394,746,3.725,759,3.741,928,3.458,931,3.394,933,3.756,968,3.563,1050,2.33,1090,5.715,1095,3.756,1096,6.741]],["title/interfaces/IDpUser.html",[422,1.916,438,0.036]],["body/interfaces/IDpUser.html",[3,0.201,4,0.168,9,0.168,34,0.168,35,0.174,52,0.025,54,0.274,55,0.623,57,1.902,70,2.218,74,0.462,102,0.201,114,0.258,218,0.604,233,2.974,262,3.072,268,0.018,269,0.018,274,0.27,302,0.458,385,0.762,412,4.955,413,5.62,414,5.62,422,3.467,438,0.043,440,0.849,446,4.872,851,3.236,889,3.67,892,4.156,1050,2.472,1071,3.552,1097,3.484,1098,5.28,1099,6.629,1100,6.629,1101,5.28,1102,6.629,1103,6.518,1104,3.484,1105,3.484]],["title/interfaces/IDpUserProj.html",[365,1.771,438,0.036]],["body/interfaces/IDpUserProj.html",[3,0.217,4,0.181,9,0.181,34,0.181,35,0.183,52,0.025,54,0.266,55,0.588,57,1.875,74,0.499,102,0.217,114,0.271,178,3.125,218,0.588,233,2.681,262,3.324,268,0.019,269,0.019,274,0.292,275,5.043,281,3.125,295,3.461,302,0.471,314,3.798,344,4.538,365,3.298,367,4.706,385,0.801,438,0.047,440,0.919,1003,4.134,1050,2.401,1071,3.733,1104,5.719,1105,3.77,1106,3.77,1107,4.706,1108,5.55]],["title/interfaces/IRemoveFromCartRequest.html",[438,0.036,1109,2.289]],["body/interfaces/IRemoveFromCartRequest.html",[3,0.254,4,0.212,9,0.212,34,0.212,35,0.201,52,0.025,54,0.249,55,0.566,102,0.254,114,0.254,268,0.021,269,0.021,274,0.342,302,0.513,385,0.751,438,0.055,440,1.075,536,3.291,538,2.508,583,1.486,589,2.709,1053,3.19,1109,4.358,1110,4.414]],["title/interfaces/IUpdateCartRequest.html",[438,0.036,465,2.086]],["body/interfaces/IUpdateCartRequest.html",[3,0.25,4,0.209,9,0.209,34,0.209,35,0.199,52,0.025,54,0.262,55,0.561,102,0.25,114,0.25,218,0.475,268,0.021,269,0.021,274,0.336,302,0.524,385,0.738,438,0.054,440,1.057,465,3.943,487,3.277,536,3.277,538,2.497,585,2.303,589,2.664,1053,3.137,1111,4.34]],["title/interfaces/IUpdateDpImageRequest.html",[438,0.036,825,2.289]],["body/interfaces/IUpdateDpImageRequest.html",[3,0.25,4,0.209,9,0.287,34,0.209,35,0.199,52,0.025,54,0.263,55,0.561,57,1.725,102,0.25,114,0.25,218,0.475,268,0.021,269,0.021,274,0.336,302,0.479,385,0.739,438,0.054,440,1.059,787,2.851,788,4.158,825,4.33,1053,3.142,1112,4.346,1113,5.127]],["title/interfaces/IUserHasAchievement.html",[438,0.036,1114,2.289]],["body/interfaces/IUserHasAchievement.html",[3,0.202,4,0.168,9,0.168,34,0.168,35,0.174,52,0.026,54,0.26,55,0.572,74,0.595,102,0.202,114,0.259,178,2.982,218,0.572,268,0.018,269,0.018,274,0.271,281,3.822,295,3.532,299,4.96,302,0.5,314,2.982,344,3.562,365,3.532,373,4.148,385,0.764,438,0.044,440,0.853,474,3.245,583,1.76,1003,4.16,1006,5.625,1050,2.348,1071,3.562,1114,4.148,1115,3.5,1116,5.296,1117,5.296,1118,5.625,1119,5.296]],["title/injectables/ProductsService.html",[270,0.316,1120,2.544]],["body/injectables/ProductsService.html",[3,0.121,4,0.101,9,0.101,34,0.101,35,0.122,36,1.269,42,1.128,46,0.707,49,1.689,51,1.688,52,0.026,53,1.688,54,0.226,55,0.515,60,1.927,64,0.664,65,0.664,74,0.594,80,0.622,86,0.707,102,0.121,103,0.664,114,0.309,115,1.366,124,1.059,125,1.501,169,1.818,218,0.549,268,0.013,269,0.013,270,0.344,272,0.707,274,0.364,277,1.798,279,1.599,280,2.043,283,1.458,284,1.669,285,1.44,292,0.802,300,2.166,302,0.471,319,1.366,321,0.802,323,0.753,324,0.753,325,0.753,326,0.855,327,1.688,328,0.912,329,1.798,330,1.041,331,1.041,332,1.041,333,1.041,347,2.495,348,2.495,415,2.773,469,2.495,474,2.273,487,2.385,536,2.385,538,1.818,544,2.273,560,2.991,583,1.809,585,2.222,677,2.773,681,4.186,682,3.144,738,2.378,745,3.626,787,2.662,918,3.568,1051,3.24,1057,3.691,1058,2.923,1120,2.773,1121,2.1,1122,3.709,1123,4.938,1124,3.709,1125,3.709,1126,3.709,1127,3.144,1128,2.477,1129,3.709,1130,3.709,1131,3.144,1132,3.709,1133,2.477,1134,6.337,1135,4.938,1136,3.709,1137,3.709,1138,3.709,1139,3.709,1140,2.477,1141,5.55,1142,3.709,1143,2.477,1144,3.709,1145,3.709,1146,3.709,1147,2.477,1148,3.709,1149,3.709,1150,2.477,1151,3.709,1152,3.709,1153,2.477,1154,2.1,1155,2.1]],["title/injectables/ShopCartService.html",[270,0.316,1156,2.544]],["body/injectables/ShopCartService.html",[3,0.11,4,0.092,9,0.092,34,0.092,35,0.114,36,1.197,42,1.048,46,0.642,49,1.681,51,1.693,52,0.026,53,1.693,54,0.227,55,0.516,60,1.93,64,0.602,65,0.602,74,0.645,80,0.565,86,0.642,102,0.11,103,0.602,114,0.31,124,0.984,125,1.429,218,0.62,268,0.012,269,0.012,270,0.32,272,0.642,274,0.365,279,1.732,280,1.969,285,1.358,292,0.728,300,2.167,302,0.481,319,1.269,321,0.728,323,0.684,324,0.684,325,0.684,326,0.776,327,1.693,328,0.828,329,1.803,342,1.794,347,3.161,348,3.161,385,0.497,415,3.513,462,1.378,463,1.906,465,3.106,466,1.906,469,4.112,474,2.88,483,2.577,487,3.121,536,3.201,538,2.463,544,2.88,545,2.577,556,3.985,560,3.961,570,2.923,583,1.909,585,2.584,677,2.577,694,2.923,738,2.362,815,1.906,818,2.923,819,2.923,837,1.906,842,1.794,918,1.941,1051,3.106,1057,2.577,1077,1.513,1109,3.409,1127,2.923,1131,2.923,1154,1.906,1155,1.906,1156,2.577,1157,5.258,1158,1.906,1159,5.348,1160,3.447,1161,4.7,1162,3.447,1163,3.447,1164,3.447,1165,2.249,1166,3.447,1167,3.447,1168,3.447,1169,2.249,1170,3.447,1171,3.447,1172,3.447,1173,3.447,1174,3.447,1175,2.249,1176,3.447,1177,2.249,1178,3.447,1179,3.447,1180,3.447,1181,3.447,1182,2.249,1183,3.447,1184,3.447,1185,3.447,1186,3.447,1187,3.447,1188,3.447,1189,2.249,1190,3.447,1191,3.447,1192,2.249,1193,3.447,1194,3.447,1195,3.447,1196,2.249,1197,2.249,1198,2.249,1199,2.249,1200,2.249,1201,2.249,1202,2.249]],["title/injectables/UserAchievementsService.html",[41,2.086,270,0.316]],["body/injectables/UserAchievementsService.html",[3,0.194,4,0.068,9,0.068,34,0.068,35,0.09,36,1.716,37,3.598,38,2.579,39,2.793,41,1.67,42,0.828,46,0.778,49,1.694,51,1.627,52,0.026,53,1.627,54,0.23,55,0.496,57,1.474,60,1.917,61,0.941,64,0.73,65,1.175,70,1.976,74,0.557,80,0.42,82,2.975,83,1.124,84,1.124,86,0.477,102,0.082,103,0.448,108,2.31,114,0.308,115,0.615,124,0.778,125,1.21,169,1.826,178,1.534,210,2.975,218,0.253,268,0.009,269,0.009,270,0.253,272,0.477,274,0.351,277,1.523,279,0.883,281,3.755,283,1.071,285,1.118,292,0.541,295,0.869,300,2.07,302,0.513,310,2.31,319,1.97,321,0.541,322,1.416,323,0.508,324,0.508,325,0.508,327,2.008,328,0.615,329,1.922,350,4.134,373,3.598,381,2.975,385,0.574,408,1.833,474,2.882,490,2.31,513,4.775,514,3.374,516,4.205,531,2.31,533,1.416,534,1.416,543,1.416,544,1.67,548,1.416,551,1.416,559,1.416,564,1.416,567,1.416,575,1.416,605,2.037,674,1.416,804,1.416,854,2.925,1003,2.882,1114,1.124,1118,3.987,1203,5.097,1204,1.416,1205,3.45,1206,3.45,1207,2.724,1208,2.724,1209,3.98,1210,3.98,1211,2.724,1212,2.724,1213,2.724,1214,3.45,1215,2.724,1216,3.98,1217,2.724,1218,2.724,1219,2.724,1220,1.67,1221,2.724,1222,2.724,1223,2.724,1224,3.45,1225,2.724,1226,2.724,1227,1.67,1228,2.724,1229,2.724,1230,3.98,1231,3.98,1232,1.67,1233,3.98,1234,2.724,1235,1.67,1236,2.724,1237,1.67,1238,2.724,1239,2.724,1240,2.724,1241,1.67,1242,2.724,1243,2.724,1244,2.724,1245,2.724,1246,1.67,1247,2.724,1248,2.724,1249,3.98,1250,1.67,1251,2.724,1252,2.724,1253,1.67,1254,2.724,1255,1.67,1256,2.724,1257,1.67,1258,2.724,1259,2.724,1260,2.724,1261,2.724,1262,1.67,1263,1.67,1264,1.67,1265,4.96,1266,1.67,1267,1.67,1268,1.67,1269,1.67,1270,1.67,1271,4.703,1272,1.67,1273,3.45,1274,1.67,1275,1.67,1276,1.67,1277,1.67,1278,3.45,1279,1.67,1280,1.67,1281,1.67,1282,2.724,1283,3.45,1284,4.703,1285,3.987,1286,4.703,1287,3.45,1288,4.384,1289,2.724,1290,1.67,1291,2.724,1292,1.67,1293,2.724,1294,2.724,1295,1.67,1296,1.67,1297,1.67,1298,1.67,1299,1.67,1300,1.67,1301,1.67,1302,1.67,1303,1.67,1304,1.67,1305,1.67,1306,1.67,1307,1.67,1308,1.67,1309,1.67,1310,1.67,1311,1.67,1312,1.67,1313,1.67,1314,1.67,1315,1.67,1316,1.67,1317,1.67,1318,1.67,1319,1.67,1320,1.67,1321,1.67,1322,1.67,1323,1.67,1324,1.67,1325,1.67,1326,4.703,1327,1.67,1328,1.67,1329,1.67,1330,1.67,1331,1.67,1332,1.67,1333,1.67,1334,1.67,1335,1.67,1336,1.67,1337,1.67,1338,1.67,1339,1.67]],["title/coverage.html",[1340,3.95]],["body/coverage.html",[0,2.312,1,3.069,9,0.167,10,3.481,39,2.312,41,2.516,52,0.025,54,0.167,70,1.725,97,2.761,169,1.512,233,1.983,268,0.018,269,0.018,270,0.65,271,3.069,273,3.481,295,2.136,337,3.069,338,3.481,339,3.481,365,2.136,405,3.481,422,2.312,438,0.075,439,3.069,441,3.481,442,3.481,443,3.481,445,2.516,458,3.069,462,2.516,465,2.516,573,3.481,596,3.481,599,4.473,605,4.359,609,5.524,616,3.944,626,5.218,642,4.473,737,3.069,738,2.687,739,3.481,759,2.312,771,3.069,772,3.481,782,2.761,825,2.761,831,2.516,841,3.069,842,2.136,843,3.481,867,2.761,879,3.069,880,3.481,889,2.312,917,3.069,918,2.312,919,3.481,928,2.136,958,3.069,959,3.481,968,2.312,991,3.069,992,3.481,1022,3.069,1023,3.481,1048,3.481,1051,2.516,1052,3.481,1054,3.481,1056,3.481,1058,1.983,1059,3.481,1060,3.481,1063,3.481,1067,3.481,1072,3.481,1077,2.761,1078,3.481,1083,3.481,1092,3.481,1095,3.481,1097,3.481,1106,3.481,1109,2.761,1110,3.481,1111,3.481,1112,3.481,1114,2.761,1115,3.481,1120,3.069,1121,3.481,1156,3.069,1157,3.481,1158,3.481,1203,3.481,1204,3.481,1340,3.481,1341,4.105,1342,4.105,1343,4.105,1344,5.277,1345,4.105,1346,5.277,1347,6.154,1348,6.516,1349,5.277,1350,5.831,1351,4.105,1352,5.277,1353,5.277,1354,4.105,1355,4.105,1356,4.105,1357,4.105,1358,4.105,1359,4.105,1360,6.627,1361,6.627,1362,5.277,1363,5.277,1364,4.105,1365,4.105,1366,4.105]],["title/dependencies.html",[1367,2.404,1368,3.474]],["body/dependencies.html",[52,0.025,80,1.239,81,3.684,83,4.73,84,3.315,85,4.178,86,1.407,87,3.684,268,0.021,269,0.021,452,4.178,457,5.011,458,3.684,460,4.178,1368,4.178,1369,4.928,1370,5.911,1371,6.892,1372,4.928,1373,4.928,1374,5.911,1375,5.011,1376,4.928,1377,4.928,1378,4.928,1379,4.928,1380,4.928,1381,6.331,1382,5.911,1383,6.331,1384,4.928,1385,4.928,1386,4.928,1387,5.911,1388,4.928,1389,4.928,1390,4.928,1391,4.928,1392,4.928,1393,4.928,1394,4.928,1395,4.928,1396,4.928,1397,4.928,1398,4.928,1399,4.928,1400,4.928]],["title/index.html",[34,0.116,1401,2.836,1402,2.836]],["body/index.html",[0,3.475,2,3.941,4,0.19,52,0.02,64,1.528,70,1.953,107,5.457,114,0.328,127,5.6,133,3.941,143,3.475,210,3.475,214,3.941,266,3.941,268,0.02,269,0.02,1107,5.233,1285,3.941,1375,3.941,1403,4.649,1404,4.649,1405,5.705,1406,3.941,1407,4.649,1408,5.705,1409,6.173,1410,4.649,1411,6.606,1412,6.724,1413,4.649,1414,5.705,1415,4.649,1416,4.649,1417,5.705,1418,4.649,1419,4.649,1420,4.649,1421,4.649,1422,4.649,1423,5.705,1424,5.705,1425,4.649,1426,4.649,1427,4.649,1428,6.173,1429,4.649,1430,4.649,1431,4.649,1432,4.649,1433,4.649,1434,4.649,1435,4.649,1436,6.173,1437,4.649,1438,4.649,1439,4.649,1440,4.649,1441,4.649,1442,4.649,1443,4.649,1444,4.649,1445,4.649,1446,4.649,1447,5.705,1448,6.173,1449,4.649,1450,4.649,1451,4.649,1452,4.649,1453,4.649,1454,4.649,1455,6.173,1456,4.649,1457,6.724,1458,4.649,1459,5.705,1460,4.649,1461,4.649,1462,4.649,1463,4.649,1464,4.649,1465,4.649,1466,4.649,1467,4.649,1468,4.649,1469,4.649,1470,4.649,1471,4.649,1472,4.649,1473,4.649,1474,3.475,1475,4.649]],["title/modules.html",[1476,3.95]],["body/modules.html",[52,0.022,268,0.022,269,0.022,1476,4.763]],["title/overview.html",[1474,3.483]],["body/overview.html",[0,3.135,52,0.022,218,0.516,268,0.022,269,0.022,272,1.589,440,1.15,607,4.72,616,4.162,1474,4.162]],["title/properties.html",[35,0.135,1367,2.404]],["body/properties.html",[35,0.184,52,0.023,268,0.022,269,0.022,1406,4.741,1477,5.593]]],"invertedIndex":[["",{"_index":52,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":169,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["0.0.0",{"_index":1477,"title":{},"body":{"properties.html":{}}}],["0.125rem",{"_index":220,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.15.0",{"_index":1400,"title":{},"body":{"dependencies.html":{}}}],["0.25rem",{"_index":170,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.2s",{"_index":240,"title":{},"body":{"components/AboutComponent.html":{}}}],["0.5rem",{"_index":163,"title":{},"body":{"components/AboutComponent.html":{}}}],["0/2",{"_index":1345,"title":{},"body":{"coverage.html":{}}}],["0000000000",{"_index":436,"title":{},"body":{"injectables/AuthService.html":{}}}],["01",{"_index":160,"title":{},"body":{"components/AboutComponent.html":{}}}],["02",{"_index":248,"title":{},"body":{"components/AboutComponent.html":{}}}],["03",{"_index":229,"title":{},"body":{"components/AboutComponent.html":{}}}],["06",{"_index":895,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["1",{"_index":218,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"overview.html":{}}}],["1.125rem",{"_index":206,"title":{},"body":{"components/AboutComponent.html":{}}}],["1.5",{"_index":195,"title":{},"body":{"components/AboutComponent.html":{}}}],["1.5rem",{"_index":217,"title":{},"body":{"components/AboutComponent.html":{}}}],["1/11",{"_index":1351,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":1347,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":1346,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":1348,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1350,"title":{},"body":{"coverage.html":{}}}],["1/9",{"_index":1344,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":530,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["100",{"_index":1358,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":1055,"title":{},"body":{"interfaces/ICartItem.html":{},"interfaces/IDpProduct.html":{}}}],["11",{"_index":599,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["11/15",{"_index":1365,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":601,"title":{},"body":{"injectables/ConfigService.html":{}}}],["123",{"_index":1119,"title":{},"body":{"interfaces/IUserHasAchievement.html":{}}}],["123456",{"_index":1098,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["13",{"_index":603,"title":{},"body":{"injectables/ConfigService.html":{}}}],["14",{"_index":605,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["14).subscribe",{"_index":1260,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["14).subscribe(ach",{"_index":1230,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["14).subscribe(exists",{"_index":1223,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["15",{"_index":607,"title":{},"body":{"injectables/ConfigService.html":{},"overview.html":{}}}],["1500",{"_index":1076,"title":{},"body":{"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["16",{"_index":609,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["16px",{"_index":151,"title":{},"body":{"components/AboutComponent.html":{}}}],["17",{"_index":611,"title":{},"body":{"injectables/ConfigService.html":{}}}],["18",{"_index":613,"title":{},"body":{"injectables/ConfigService.html":{}}}],["18px",{"_index":208,"title":{},"body":{"components/AboutComponent.html":{}}}],["19",{"_index":117,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["19.1.2",{"_index":1395,"title":{},"body":{"dependencies.html":{}}}],["19.2.0",{"_index":1371,"title":{},"body":{"dependencies.html":{}}}],["19.2.10",{"_index":1370,"title":{},"body":{"dependencies.html":{}}}],["19.2.8",{"_index":1407,"title":{},"body":{"index.html":{}}}],["1px",{"_index":227,"title":{},"body":{"components/AboutComponent.html":{}}}],["1rem",{"_index":150,"title":{},"body":{"components/AboutComponent.html":{}}}],["2",{"_index":583,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["2).subscribe(q",{"_index":1185,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["2.3.0",{"_index":1398,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":616,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{},"overview.html":{}}}],["200",{"_index":135,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["201",{"_index":713,"title":{},"body":{"injectables/ConfigService.html":{}}}],["2025",{"_index":894,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["204",{"_index":715,"title":{},"body":{"injectables/ConfigService.html":{}}}],["21",{"_index":618,"title":{},"body":{"injectables/ConfigService.html":{}}}],["22",{"_index":620,"title":{},"body":{"injectables/ConfigService.html":{}}}],["22t12:00:00",{"_index":896,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["23",{"_index":622,"title":{},"body":{"injectables/ConfigService.html":{}}}],["24",{"_index":624,"title":{},"body":{"injectables/ConfigService.html":{}}}],["25",{"_index":626,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["26",{"_index":628,"title":{},"body":{"injectables/ConfigService.html":{}}}],["27",{"_index":630,"title":{},"body":{"injectables/ConfigService.html":{}}}],["28",{"_index":632,"title":{},"body":{"injectables/ConfigService.html":{}}}],["29",{"_index":634,"title":{},"body":{"injectables/ConfigService.html":{}}}],["2px",{"_index":237,"title":{},"body":{"components/AboutComponent.html":{}}}],["2rem",{"_index":225,"title":{},"body":{"components/AboutComponent.html":{}}}],["2xx",{"_index":711,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3",{"_index":585,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["30",{"_index":636,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3000",{"_index":1082,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["301",{"_index":718,"title":{},"body":{"injectables/ConfigService.html":{}}}],["302",{"_index":720,"title":{},"body":{"injectables/ConfigService.html":{}}}],["31",{"_index":638,"title":{},"body":{"injectables/ConfigService.html":{}}}],["32",{"_index":640,"title":{},"body":{"injectables/ConfigService.html":{}}}],["33",{"_index":642,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["34",{"_index":644,"title":{},"body":{"injectables/ConfigService.html":{}}}],["35",{"_index":646,"title":{},"body":{"injectables/ConfigService.html":{}}}],["36",{"_index":648,"title":{},"body":{"injectables/ConfigService.html":{}}}],["37",{"_index":650,"title":{},"body":{"injectables/ConfigService.html":{}}}],["38",{"_index":652,"title":{},"body":{"injectables/ConfigService.html":{}}}],["39",{"_index":654,"title":{},"body":{"injectables/ConfigService.html":{}}}],["3xx",{"_index":716,"title":{},"body":{"injectables/ConfigService.html":{}}}],["4",{"_index":587,"title":{},"body":{"injectables/ConfigService.html":{}}}],["4.0.2",{"_index":1386,"title":{},"body":{"dependencies.html":{}}}],["4.34.0",{"_index":1383,"title":{},"body":{"dependencies.html":{}}}],["4.35.0",{"_index":1381,"title":{},"body":{"dependencies.html":{}}}],["4.36.0",{"_index":1382,"title":{},"body":{"dependencies.html":{}}}],["4.37.0",{"_index":1389,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1359,"title":{},"body":{"coverage.html":{}}}],["40",{"_index":656,"title":{},"body":{"injectables/ConfigService.html":{}}}],["400",{"_index":723,"title":{},"body":{"injectables/ConfigService.html":{}}}],["401",{"_index":136,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["403",{"_index":726,"title":{},"body":{"injectables/ConfigService.html":{}}}],["404",{"_index":137,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["409",{"_index":729,"title":{},"body":{"injectables/ConfigService.html":{}}}],["41",{"_index":658,"title":{},"body":{"injectables/ConfigService.html":{}}}],["42",{"_index":660,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{}}}],["43",{"_index":662,"title":{},"body":{"injectables/ConfigService.html":{}}}],["44",{"_index":664,"title":{},"body":{"injectables/ConfigService.html":{}}}],["45",{"_index":666,"title":{},"body":{"injectables/ConfigService.html":{}}}],["46",{"_index":668,"title":{},"body":{"injectables/ConfigService.html":{}}}],["47",{"_index":670,"title":{},"body":{"injectables/ConfigService.html":{}}}],["47.9375rem",{"_index":174,"title":{},"body":{"components/AboutComponent.html":{}}}],["48",{"_index":672,"title":{},"body":{"injectables/ConfigService.html":{}}}],["4px",{"_index":171,"title":{},"body":{"components/AboutComponent.html":{}}}],["4xx",{"_index":721,"title":{},"body":{"injectables/ConfigService.html":{}}}],["5",{"_index":589,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/IDpProduct.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{}}}],["50",{"_index":112,"title":{},"body":{"components/AboutComponent.html":{}}}],["500",{"_index":138,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["503",{"_index":733,"title":{},"body":{"injectables/ConfigService.html":{}}}],["5xx",{"_index":730,"title":{},"body":{"injectables/ConfigService.html":{}}}],["6",{"_index":591,"title":{},"body":{"injectables/ConfigService.html":{}}}],["6.7.2",{"_index":1379,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":1361,"title":{},"body":{"coverage.html":{}}}],["6/9",{"_index":1357,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1356,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":593,"title":{},"body":{"injectables/ConfigService.html":{}}}],["7.8.0",{"_index":1396,"title":{},"body":{"dependencies.html":{}}}],["7/10",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":1353,"title":{},"body":{"coverage.html":{}}}],["70",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["700",{"_index":204,"title":{},"body":{"components/AboutComponent.html":{}}}],["73",{"_index":1364,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1360,"title":{},"body":{"coverage.html":{}}}],["767px",{"_index":176,"title":{},"body":{"components/AboutComponent.html":{}}}],["77",{"_index":1352,"title":{},"body":{"coverage.html":{}}}],["79990001122",{"_index":410,"title":{},"body":{"injectables/AuthService.html":{}}}],["79991234567",{"_index":1101,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["8",{"_index":122,"title":{},"body":{"components/AboutComponent.html":{},"injectables/ConfigService.html":{}}}],["8/10",{"_index":1363,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1362,"title":{},"body":{"coverage.html":{}}}],["800px",{"_index":149,"title":{},"body":{"components/AboutComponent.html":{}}}],["8px",{"_index":166,"title":{},"body":{"components/AboutComponent.html":{}}}],["9",{"_index":596,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["90",{"_index":146,"title":{},"body":{"components/AboutComponent.html":{}}}],["90vw",{"_index":148,"title":{},"body":{"components/AboutComponent.html":{}}}],["a.quantity",{"_index":494,"title":{},"body":{"interfaces/CartItem.html":{}}}],["about.component.css",{"_index":99,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.css,../../../styles/root.css",{"_index":31,"title":{},"body":{"components/AboutComponent.html":{}}}],["about.component.html",{"_index":33,"title":{},"body":{"components/AboutComponent.html":{}}}],["aboutcomponent",{"_index":1,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["accordion",{"_index":196,"title":{},"body":{"components/AboutComponent.html":{}}}],["ach",{"_index":1231,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievement",{"_index":299,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IUserHasAchievement.html":{}}}],["achievementid",{"_index":281,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["achievementid).pipe",{"_index":1291,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievementids",{"_index":577,"title":{},"body":{"injectables/ConfigService.html":{}}}],["achievements",{"_index":275,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"interfaces/IDpUserProj.html":{}}}],["achievements.service",{"_index":90,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["achievements.service.ts",{"_index":1204,"title":{},"body":{"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["achievements.service.ts:117",{"_index":1257,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:135",{"_index":1237,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:154",{"_index":1220,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:179",{"_index":1250,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:19",{"_index":1262,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:20",{"_index":1218,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:288",{"_index":1241,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:34",{"_index":1253,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:44",{"_index":1235,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:48",{"_index":1255,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:62",{"_index":1232,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:80",{"_index":1246,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievements.service.ts:98",{"_index":1227,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["achievementsservice",{"_index":271,"title":{"injectables/AchievementsService.html":{}},"body":{"injectables/AchievementsService.html":{},"coverage.html":{}}}],["achievementtitle",{"_index":315,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["actions",{"_index":221,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["actual_component",{"_index":267,"title":{},"body":{"components/AboutComponent.html":{}}}],["addcategory",{"_index":689,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addcategoryfailed",{"_index":643,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addcategorysuccess",{"_index":595,"title":{},"body":{"injectables/ConfigService.html":{}}}],["added",{"_index":1131,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addimage",{"_index":686,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addimagefailed",{"_index":641,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addimagesuccess",{"_index":594,"title":{},"body":{"injectables/ConfigService.html":{}}}],["additional",{"_index":1466,"title":{},"body":{"index.html":{}}}],["addtocart",{"_index":677,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addtocart(request",{"_index":1127,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["addtocartfailed",{"_index":631,"title":{},"body":{"injectables/ConfigService.html":{}}}],["addtocartsuccess",{"_index":584,"title":{},"body":{"injectables/ConfigService.html":{}}}],["alertservice",{"_index":38,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["align",{"_index":185,"title":{},"body":{"components/AboutComponent.html":{}}}],["always_fail_key",{"_index":1206,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["alwaysfailmode",{"_index":1261,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["angular",{"_index":107,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["angular/cdk",{"_index":1369,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":81,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":321,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["angular/compiler",{"_index":1372,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":80,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["angular/forms",{"_index":452,"title":{},"body":{"interfaces/CartItem.html":{},"dependencies.html":{}}}],["angular/material",{"_index":1373,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":1374,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":87,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"dependencies.html":{}}}],["api",{"_index":115,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["api/achievements",{"_index":276,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["api/achievements/1",{"_index":278,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["api/auth",{"_index":406,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/auth/login",{"_index":418,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/auth/logout",{"_index":707,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/auth/register",{"_index":407,"title":{},"body":{"injectables/AuthService.html":{}}}],["api/authproj",{"_index":341,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/authproj/login",{"_index":343,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/authproj/register",{"_index":351,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["api/cart/add",{"_index":678,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/cart/remove",{"_index":695,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/cart/update",{"_index":697,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/categories/add",{"_index":690,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/checkout",{"_index":679,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/dpcategories",{"_index":740,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["api/dpcategories/1",{"_index":743,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["api/dpimages",{"_index":784,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/10",{"_index":811,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/10/image",{"_index":816,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpimages/byproduct/5",{"_index":822,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["api/dpordercompositions",{"_index":845,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["api/dpordercompositions/1",{"_index":848,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["api/dporders",{"_index":891,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["api/dporders/1",{"_index":904,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["api/dpproductattributes",{"_index":930,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["api/dpproductattributes/1",{"_index":942,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["api/dpsizes",{"_index":970,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["api/dpsizes/1",{"_index":977,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["api/dpuserprojs",{"_index":1002,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["api/dpuserprojs/1",{"_index":1009,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["api/dpusers",{"_index":1032,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["api/dpusers/1",{"_index":1037,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["api/login",{"_index":675,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products",{"_index":681,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ProductsService.html":{}}}],["api/products/1",{"_index":1141,"title":{},"body":{"injectables/ProductsService.html":{}}}],["api/products/add",{"_index":687,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/addtocart",{"_index":1129,"title":{},"body":{"injectables/ProductsService.html":{}}}],["api/products/all",{"_index":699,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/create",{"_index":683,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/products/info",{"_index":701,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/profile/update",{"_index":685,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/register",{"_index":676,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/reset",{"_index":705,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/switch",{"_index":692,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/settings/toggle",{"_index":703,"title":{},"body":{"injectables/ConfigService.html":{}}}],["api/shopcart",{"_index":1178,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/addtocart",{"_index":1166,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/checkout",{"_index":1170,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/quantity?productid=1&sizeid=2",{"_index":1183,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/shopcart/updatecart",{"_index":1193,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["api/userachievements",{"_index":1233,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/1/14",{"_index":1247,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/completed/vasya",{"_index":1238,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/create/1/14",{"_index":1228,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/exists/1/14",{"_index":1221,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["api/userachievements/unlock/1/14",{"_index":1258,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["apiendpoints",{"_index":578,"title":{},"body":{"injectables/ConfigService.html":{}}}],["app",{"_index":15,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["appearance",{"_index":516,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["application",{"_index":1417,"title":{},"body":{"index.html":{}}}],["aria",{"_index":139,"title":{},"body":{"components/AboutComponent.html":{}}}],["artifacts",{"_index":1440,"title":{},"body":{"index.html":{}}}],["asp.net",{"_index":109,"title":{},"body":{"components/AboutComponent.html":{}}}],["asyncpipe",{"_index":28,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["attr",{"_index":938,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpProductAttribute.html":{}}}],["attribute",{"_index":1093,"title":{},"body":{"interfaces/IDpProductAttribute.html":{}}}],["attributes",{"_index":920,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts",{"_index":919,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"coverage.html":{}}}],["attributes.service.ts:103",{"_index":952,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:118",{"_index":941,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:16",{"_index":926,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:31",{"_index":944,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:46",{"_index":949,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attributes.service.ts:74",{"_index":929,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["attrs",{"_index":946,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["authprojservice",{"_index":337,"title":{"injectables/AuthProjService.html":{}},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["authservice",{"_index":97,"title":{"injectables/AuthService.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["auto",{"_index":153,"title":{},"body":{"components/AboutComponent.html":{}}}],["automatically",{"_index":1418,"title":{},"body":{"index.html":{}}}],["available",{"_index":1431,"title":{},"body":{"index.html":{}}}],["avatar",{"_index":232,"title":{},"body":{"components/AboutComponent.html":{}}}],["avatar:hover",{"_index":242,"title":{},"body":{"components/AboutComponent.html":{}}}],["b",{"_index":492,"title":{},"body":{"interfaces/CartItem.html":{}}}],["b.price",{"_index":495,"title":{},"body":{"interfaces/CartItem.html":{}}}],["b.quantity",{"_index":496,"title":{},"body":{"interfaces/CartItem.html":{}}}],["backbuttoncomponent",{"_index":26,"title":{},"body":{"components/AboutComponent.html":{}}}],["backend",{"_index":340,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["background",{"_index":156,"title":{},"body":{"components/AboutComponent.html":{}}}],["badrequest",{"_index":722,"title":{},"body":{"injectables/ConfigService.html":{}}}],["base",{"_index":159,"title":{},"body":{"components/AboutComponent.html":{}}}],["baseurl",{"_index":285,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["behaviorsubject",{"_index":380,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["behaviorsubject(false",{"_index":378,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["binary",{"_index":789,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["blob",{"_index":815,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["blue",{"_index":954,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["blur",{"_index":482,"title":{},"body":{"interfaces/CartItem.html":{}}}],["body",{"_index":280,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["boolean",{"_index":373,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["border",{"_index":161,"title":{},"body":{"components/AboutComponent.html":{}}}],["bottom",{"_index":188,"title":{},"body":{"components/AboutComponent.html":{}}}],["box",{"_index":167,"title":{},"body":{"components/AboutComponent.html":{}}}],["browser",{"_index":1375,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["build",{"_index":1436,"title":{},"body":{"index.html":{}}}],["buildthis",{"_index":1437,"title":{},"body":{"index.html":{}}}],["button",{"_index":231,"title":{},"body":{"components/AboutComponent.html":{}}}],["button.component",{"_index":93,"title":{},"body":{"components/AboutComponent.html":{}}}],["button/back",{"_index":92,"title":{},"body":{"components/AboutComponent.html":{}}}],["buttonnotworking",{"_index":651,"title":{},"body":{"injectables/ConfigService.html":{}}}],["buttons.css",{"_index":252,"title":{},"body":{"components/AboutComponent.html":{}}}],["cards.css",{"_index":253,"title":{},"body":{"components/AboutComponent.html":{}}}],["carousel.css",{"_index":256,"title":{},"body":{"components/AboutComponent.html":{}}}],["cart",{"_index":469,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["cart.component.css",{"_index":476,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cart.component.html",{"_index":475,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cart.component.ts",{"_index":443,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["cart.service.ts",{"_index":1158,"title":{},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["cart.service.ts:101",{"_index":1182,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:124",{"_index":1169,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:136",{"_index":1189,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:151",{"_index":1175,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:20",{"_index":1164,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:35",{"_index":1177,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:60",{"_index":1192,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart.service.ts:85",{"_index":1165,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cart/page",{"_index":442,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["cartitem",{"_index":439,"title":{"interfaces/CartItem.html":{}},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["cartitem.productid",{"_index":541,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartitem.sizeid",{"_index":542,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartitem[k",{"_index":566,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartitems",{"_index":483,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"injectables/ShopCartService.html":{}}}],["cartservice",{"_index":497,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartviewmodel",{"_index":505,"title":{},"body":{"interfaces/CartItem.html":{}}}],["cartviewmodel.cartitems.map(item",{"_index":508,"title":{},"body":{"interfaces/CartItem.html":{}}}],["case",{"_index":335,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["cat",{"_index":1061,"title":{},"body":{"interfaces/IDpCategory.html":{}}}],["catcherror",{"_index":1263,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["catcherror(err",{"_index":1298,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["catcherror(error",{"_index":1278,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["categories.service.ts",{"_index":739,"title":{},"body":{"injectables/DpCategoriesService.html":{},"coverage.html":{}}}],["categories.service.ts:105",{"_index":760,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:129",{"_index":768,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:142",{"_index":763,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:57",{"_index":757,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:69",{"_index":764,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["categories.service.ts:82",{"_index":766,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["cdr",{"_index":498,"title":{},"body":{"interfaces/CartItem.html":{}}}],["center",{"_index":201,"title":{},"body":{"components/AboutComponent.html":{}}}],["changedetection",{"_index":12,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["changedetectionstrategy",{"_index":75,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["changedetectionstrategy.onpush",{"_index":13,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["changedetectorref",{"_index":464,"title":{},"body":{"interfaces/CartItem.html":{}}}],["checkauthstatus",{"_index":358,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["checkout",{"_index":545,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/ShopCartService.html":{}}}],["checkout(cart",{"_index":1168,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["checkoutemptycart",{"_index":671,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkoutfailed",{"_index":633,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkoutsuccess",{"_index":586,"title":{},"body":{"injectables/ConfigService.html":{}}}],["checkuserachievementexists",{"_index":1207,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["checkuserachievementexists(userprojid",{"_index":1219,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["choose",{"_index":1462,"title":{},"body":{"index.html":{}}}],["class",{"_index":103,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["cli",{"_index":127,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["code",{"_index":1423,"title":{},"body":{"index.html":{}}}],["color",{"_index":182,"title":{},"body":{"components/AboutComponent.html":{}}}],["column",{"_index":245,"title":{},"body":{"components/AboutComponent.html":{}}}],["columns",{"_index":484,"title":{},"body":{"interfaces/CartItem.html":{}}}],["come",{"_index":1461,"title":{},"body":{"index.html":{}}}],["command",{"_index":1455,"title":{},"body":{"index.html":{}}}],["commerce",{"_index":1380,"title":{},"body":{"dependencies.html":{}}}],["commonmodule",{"_index":17,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["compile",{"_index":1438,"title":{},"body":{"index.html":{}}}],["complete",{"_index":1430,"title":{},"body":{"index.html":{}}}],["component",{"_index":0,"title":{"components/AboutComponent.html":{}},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["component_template",{"_index":265,"title":{},"body":{"components/AboutComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["components/back",{"_index":91,"title":{},"body":{"components/AboutComponent.html":{}}}],["components/theme",{"_index":94,"title":{},"body":{"components/AboutComponent.html":{}}}],["composition",{"_index":850,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["compositions",{"_index":844,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts",{"_index":843,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"coverage.html":{}}}],["compositions.service.ts:102",{"_index":874,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:131",{"_index":868,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:161",{"_index":876,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:176",{"_index":871,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:73",{"_index":865,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["compositions.service.ts:87",{"_index":872,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["config.service",{"_index":1267,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["configservice",{"_index":39,"title":{"injectables/ConfigService.html":{}},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["confirmation",{"_index":554,"title":{},"body":{"interfaces/CartItem.html":{}}}],["conflict",{"_index":728,"title":{},"body":{"injectables/ConfigService.html":{}}}],["console.error",{"_index":514,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log",{"_index":804,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log(`test",{"_index":334,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["console.log(attrs",{"_index":947,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["console.log(cart",{"_index":1180,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["console.log(cartviewmodel",{"_index":506,"title":{},"body":{"interfaces/CartItem.html":{}}}],["console.log(categories",{"_index":742,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["console.log(compositions",{"_index":847,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["console.log(image",{"_index":800,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["console.log(images",{"_index":808,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["console.log(list",{"_index":310,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/UserAchievementsService.html":{}}}],["console.log(orders",{"_index":908,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["console.log(products",{"_index":1145,"title":{},"body":{"injectables/ProductsService.html":{}}}],["console.log(sizes",{"_index":981,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["console.log(users",{"_index":1014,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["console.warn",{"_index":1281,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["const",{"_index":385,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpImagesService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["constructor",{"_index":46,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["constructor(http",{"_index":292,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["constructor(private",{"_index":326,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["constructor(router",{"_index":47,"title":{},"body":{"components/AboutComponent.html":{}}}],["content",{"_index":216,"title":{},"body":{"components/AboutComponent.html":{}}}],["cookie",{"_index":1393,"title":{},"body":{"dependencies.html":{}}}],["core",{"_index":110,"title":{},"body":{"components/AboutComponent.html":{}}}],["coverage",{"_index":1340,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createachievement",{"_index":286,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["createachievement(achievement",{"_index":294,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["created",{"_index":712,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createdpcategory",{"_index":752,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["createdpcategory(dpcategory",{"_index":758,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["createdpimage",{"_index":773,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["createdpimage(request",{"_index":781,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["createdporder",{"_index":882,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["createdporder(dporder",{"_index":888,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["createdpordercomposition",{"_index":860,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["createdpordercomposition(dpordercomposition",{"_index":866,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["createdpproductattribute",{"_index":921,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["createdpproductattribute(dpproductattribute",{"_index":927,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["createdpsize",{"_index":961,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["createdpsize(dpsize",{"_index":967,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["createdpuser",{"_index":1024,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["createdpuser(dpuser",{"_index":1030,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["createdpuserproj",{"_index":994,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["createdpuserproj(dpuserproj",{"_index":1000,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["createproduct",{"_index":682,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ProductsService.html":{}}}],["createproduct(product",{"_index":1132,"title":{},"body":{"injectables/ProductsService.html":{}}}],["createproductfailed",{"_index":637,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createproductsuccess",{"_index":590,"title":{},"body":{"injectables/ConfigService.html":{}}}],["createuserachievement",{"_index":1208,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["createuserachievement(userprojid",{"_index":1226,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["css",{"_index":121,"title":{},"body":{"components/AboutComponent.html":{}}}],["currencypipe",{"_index":448,"title":{},"body":{"interfaces/CartItem.html":{}}}],["current",{"_index":569,"title":{},"body":{"interfaces/CartItem.html":{}}}],["currentquantity",{"_index":1187,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["cursor",{"_index":235,"title":{},"body":{"components/AboutComponent.html":{}}}],["custom_elements_schema",{"_index":79,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["dark",{"_index":250,"title":{},"body":{"components/AboutComponent.html":{}}}],["data",{"_index":246,"title":{},"body":{"components/AboutComponent.html":{},"injectables/DpImagesService.html":{}}}],["date",{"_index":446,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{}}}],["date().toisostring",{"_index":899,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["decreasequantity(item",{"_index":527,"title":{},"body":{"interfaces/CartItem.html":{}}}],["default",{"_index":64,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["defined",{"_index":49,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["delete",{"_index":284,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["deleteachievement",{"_index":287,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["deleteachievement(id",{"_index":301,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["deletedpcategory",{"_index":753,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["deletedpcategory(id",{"_index":762,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["deletedpimage",{"_index":774,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["deletedpimage(id",{"_index":801,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["deletedporder",{"_index":883,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["deletedporder(id",{"_index":902,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["deletedpordercomposition",{"_index":861,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["deletedpordercomposition(id",{"_index":870,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["deletedpproductattribute",{"_index":922,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["deletedpproductattribute(id",{"_index":940,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["deletedpsize",{"_index":962,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["deletedpsize(id",{"_index":975,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["deletedpuser",{"_index":1025,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["deletedpuser(id",{"_index":1035,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["deletedpuserproj",{"_index":995,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["deletedpuserproj(id",{"_index":1007,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["deleteproduct",{"_index":1122,"title":{},"body":{"injectables/ProductsService.html":{}}}],["deleteproduct(id",{"_index":1139,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dependencies",{"_index":1368,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":274,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["detail",{"_index":1079,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["detailed",{"_index":1471,"title":{},"body":{"index.html":{}}}],["development",{"_index":1408,"title":{},"body":{"index.html":{}}}],["direction",{"_index":222,"title":{},"body":{"components/AboutComponent.html":{}}}],["directive",{"_index":264,"title":{},"body":{"components/AboutComponent.html":{}}}],["directives",{"_index":266,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["directory",{"_index":1442,"title":{},"body":{"index.html":{}}}],["display",{"_index":198,"title":{},"body":{"components/AboutComponent.html":{}}}],["dist",{"_index":1441,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1341,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AboutComponent.html":{}}}],["dpattributes",{"_index":852,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["dpattributesid",{"_index":931,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{}}}],["dpcategories",{"_index":1096,"title":{},"body":{"interfaces/IDpSize.html":{}}}],["dpcategoriesservice",{"_index":737,"title":{"injectables/DpCategoriesService.html":{}},"body":{"injectables/DpCategoriesService.html":{},"coverage.html":{}}}],["dpcategory",{"_index":761,"title":{},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpProduct.html":{}}}],["dpcategorydescription",{"_index":747,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["dpcategoryid",{"_index":745,"title":{},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"injectables/ProductsService.html":{}}}],["dpcategorytitle",{"_index":746,"title":{},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{}}}],["dpcolor",{"_index":934,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["dpcost",{"_index":1075,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["dpcount",{"_index":1091,"title":{},"body":{"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpdatetimeorder",{"_index":1068,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["dpdescription",{"_index":1088,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpdiscountpercent",{"_index":1087,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpemail",{"_index":1103,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpfullname",{"_index":1100,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpimages",{"_index":1089,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpimagesid",{"_index":796,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{}}}],["dpimagesservice",{"_index":771,"title":{"injectables/DpImagesService.html":{}},"body":{"injectables/DpImagesService.html":{},"coverage.html":{}}}],["dpimagetitle",{"_index":788,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"interfaces/IUpdateDpImageRequest.html":{}}}],["dporder",{"_index":853,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrderComposition.html":{}}}],["dpordercomposition",{"_index":869,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["dpordercompositionsservice",{"_index":841,"title":{"injectables/DpOrderCompositionsService.html":{}},"body":{"injectables/DpOrderCompositionsService.html":{},"coverage.html":{}}}],["dporderid",{"_index":851,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpUser.html":{}}}],["dporders",{"_index":1102,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpordersservice",{"_index":879,"title":{"injectables/DpOrdersService.html":{}},"body":{"injectables/DpOrdersService.html":{},"coverage.html":{}}}],["dppassword",{"_index":413,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpUser.html":{}}}],["dpphonenumber",{"_index":414,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpUser.html":{}}}],["dpprice",{"_index":1084,"title":{},"body":{"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpproduct",{"_index":1065,"title":{},"body":{"interfaces/IDpImage.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpproductattribute",{"_index":939,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["dpproductattributes",{"_index":1090,"title":{},"body":{"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{}}}],["dpproductattributesservice",{"_index":917,"title":{"injectables/DpProductAttributesService.html":{}},"body":{"injectables/DpProductAttributesService.html":{},"coverage.html":{}}}],["dpproductdescription",{"_index":1135,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dpproductid",{"_index":787,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpProductAttributesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IUpdateDpImageRequest.html":{},"injectables/ProductsService.html":{}}}],["dpproducts",{"_index":1062,"title":{},"body":{"interfaces/IDpCategory.html":{}}}],["dpproducttitle",{"_index":1134,"title":{},"body":{"injectables/ProductsService.html":{}}}],["dppurchaseprice",{"_index":1086,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dpquantity",{"_index":1074,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["dpregistrationdate",{"_index":1099,"title":{},"body":{"interfaces/IDpUser.html":{}}}],["dpsize",{"_index":932,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"interfaces/IDpProductAttribute.html":{}}}],["dpsizenavigation",{"_index":1094,"title":{},"body":{"interfaces/IDpProductAttribute.html":{}}}],["dpsizesservice",{"_index":958,"title":{"injectables/DpSizesService.html":{}},"body":{"injectables/DpSizesService.html":{},"coverage.html":{}}}],["dptitle",{"_index":1085,"title":{},"body":{"interfaces/IDpProduct.html":{}}}],["dptypeorder",{"_index":1069,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["dpuser",{"_index":1034,"title":{},"body":{"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{}}}],["dpuserid",{"_index":892,"title":{},"body":{"injectables/DpOrdersService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpUser.html":{}}}],["dpusername",{"_index":412,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{}}}],["dpuserproj",{"_index":1006,"title":{},"body":{"injectables/DpUserProjsService.html":{},"interfaces/IUserHasAchievement.html":{}}}],["dpuserprojid",{"_index":1003,"title":{},"body":{"injectables/DpUserProjsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["dpuserprojs",{"_index":1049,"title":{},"body":{"interfaces/IAchievement.html":{}}}],["dpuserprojsservice",{"_index":991,"title":{"injectables/DpUserProjsService.html":{}},"body":{"injectables/DpUserProjsService.html":{},"coverage.html":{}}}],["dpusersservice",{"_index":1022,"title":{"injectables/DpUsersService.html":{}},"body":{"injectables/DpUsersService.html":{},"coverage.html":{}}}],["dynamic",{"_index":1376,"title":{},"body":{"dependencies.html":{}}}],["e2e",{"_index":1458,"title":{},"body":{"index.html":{}}}],["e2eangular",{"_index":1460,"title":{},"body":{"index.html":{}}}],["e5e5e5",{"_index":230,"title":{},"body":{"components/AboutComponent.html":{}}}],["element",{"_index":263,"title":{},"body":{"components/AboutComponent.html":{}}}],["email",{"_index":1104,"title":{},"body":{"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{}}}],["end",{"_index":1457,"title":{},"body":{"index.html":{}}}],["endpoint",{"_index":710,"title":{},"body":{"injectables/ConfigService.html":{}}}],["endpoints",{"_index":574,"title":{},"body":{"injectables/ConfigService.html":{}}}],["entity",{"_index":132,"title":{},"body":{"components/AboutComponent.html":{}}}],["err",{"_index":1299,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["error",{"_index":513,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["error.status",{"_index":1279,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["eslint",{"_index":129,"title":{},"body":{"components/AboutComponent.html":{}}}],["example",{"_index":114,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["excel",{"_index":1159,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["execute",{"_index":1449,"title":{},"body":{"index.html":{}}}],["exists",{"_index":1224,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["export",{"_index":102,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["exporttoexcel",{"_index":1160,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["exporttoexcel(orderid",{"_index":1174,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["extends",{"_index":444,"title":{},"body":{"interfaces/CartItem.html":{}}}],["failedachievementid",{"_index":1288,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedachievementid).pipe",{"_index":1297,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedid",{"_index":1242,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["failedtoload",{"_index":649,"title":{},"body":{"injectables/ConfigService.html":{}}}],["false",{"_index":490,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["feature",{"_index":209,"title":{},"body":{"components/AboutComponent.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["files",{"_index":1422,"title":{},"body":{"index.html":{}}}],["flex",{"_index":199,"title":{},"body":{"components/AboutComponent.html":{}}}],["following",{"_index":1454,"title":{},"body":{"index.html":{}}}],["font",{"_index":189,"title":{},"body":{"components/AboutComponent.html":{}}}],["fontawesome",{"_index":1388,"title":{},"body":{"dependencies.html":{}}}],["forbidden",{"_index":725,"title":{},"body":{"injectables/ConfigService.html":{}}}],["formdata",{"_index":786,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata).subscribe",{"_index":829,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata).subscribe(image",{"_index":795,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('dpimagetitle",{"_index":792,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('dpproductid",{"_index":791,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["formdata.append('file",{"_index":793,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["forms",{"_index":120,"title":{},"body":{"components/AboutComponent.html":{}}}],["formsmodule",{"_index":451,"title":{},"body":{"interfaces/CartItem.html":{}}}],["fortawesome/fontawesome",{"_index":1377,"title":{},"body":{"dependencies.html":{}}}],["found",{"_index":719,"title":{},"body":{"injectables/ConfigService.html":{}}}],["framework",{"_index":133,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["free",{"_index":1378,"title":{},"body":{"dependencies.html":{}}}],["gap",{"_index":202,"title":{},"body":{"components/AboutComponent.html":{}}}],["generate",{"_index":1428,"title":{},"body":{"index.html":{}}}],["generated",{"_index":1404,"title":{},"body":{"index.html":{}}}],["get(`${this.baseurl}/completed/${username",{"_index":1276,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getachievementbyid",{"_index":288,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getachievementbyid(id",{"_index":305,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getallachievements",{"_index":289,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["getalldpcategories",{"_index":754,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getalldpimages",{"_index":775,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getalldpordercompositions",{"_index":862,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getalldporders",{"_index":884,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getalldpproductattributes",{"_index":923,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getalldpsizes",{"_index":963,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getalldpuserprojs",{"_index":996,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getalldpusers",{"_index":1026,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getallproducts",{"_index":1123,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getalluserachievements",{"_index":1209,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getalwaysfailmode",{"_index":1210,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getcart",{"_index":1161,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcartquantity",{"_index":1162,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcartquantity(productid",{"_index":1181,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["getcompletedachievementsbyusername",{"_index":1211,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getcompletedachievementsbyusername(username",{"_index":1236,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getdpcategorybyid",{"_index":755,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getdpcategorybyid(id",{"_index":765,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["getdpimagebyid",{"_index":776,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagebyid(id",{"_index":809,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagedata",{"_index":777,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagedata(id",{"_index":813,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagesbyproductid",{"_index":778,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdpimagesbyproductid(productid",{"_index":820,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["getdporderbyid",{"_index":885,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getdporderbyid(id",{"_index":909,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["getdpordercompositionbyid",{"_index":863,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getdpordercompositionbyid(id",{"_index":873,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["getdpproductattributebyid",{"_index":924,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getdpproductattributebyid(id",{"_index":948,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["getdpsizebyid",{"_index":964,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getdpsizebyid(id",{"_index":982,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["getdpuserbyid",{"_index":1027,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getdpuserbyid(id",{"_index":1041,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["getdpuserprojbyid",{"_index":997,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getdpuserprojbyid(id",{"_index":1015,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["getfailedachievementid",{"_index":1212,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getfailedachievementid(successachievementid",{"_index":1240,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getproductbyid",{"_index":1124,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getproductbyid(id",{"_index":1146,"title":{},"body":{"injectables/ProductsService.html":{}}}],["getting",{"_index":1401,"title":{"index.html":{}},"body":{}}],["gettotal",{"_index":518,"title":{},"body":{"interfaces/CartItem.html":{}}}],["gettotalamount",{"_index":519,"title":{},"body":{"interfaces/CartItem.html":{}}}],["getuserachievement",{"_index":1213,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["getuserachievement(userprojid",{"_index":1245,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["handleachievement",{"_index":1214,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["handleachievement(userprojid",{"_index":533,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["header",{"_index":197,"title":{},"body":{"components/AboutComponent.html":{}}}],["header.css",{"_index":255,"title":{},"body":{"components/AboutComponent.html":{}}}],["height",{"_index":194,"title":{},"body":{"components/AboutComponent.html":{}}}],["helpbuilding",{"_index":1435,"title":{},"body":{"index.html":{}}}],["html",{"_index":262,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{}}}],["http",{"_index":124,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["http://localhost:4200",{"_index":1416,"title":{},"body":{"index.html":{}}}],["httpclient",{"_index":125,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["httpstatuscodes",{"_index":579,"title":{},"body":{"injectables/ConfigService.html":{}}}],["iachievement",{"_index":295,"title":{"interfaces/IAchievement.html":{}},"body":{"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["iaddtocartrequest",{"_index":1051,"title":{"interfaces/IAddToCartRequest.html":{}},"body":{"interfaces/IAddToCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["icartitem",{"_index":445,"title":{"interfaces/ICartItem.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"coverage.html":{}}}],["icartviewmodel",{"_index":462,"title":{"interfaces/ICartViewModel.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/ICartViewModel.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["icon",{"_index":179,"title":{},"body":{"components/AboutComponent.html":{}}}],["icons.css",{"_index":257,"title":{},"body":{"components/AboutComponent.html":{}}}],["icreatedpimagerequest",{"_index":782,"title":{"interfaces/ICreateDpImageRequest.html":{}},"body":{"injectables/DpImagesService.html":{},"interfaces/ICreateDpImageRequest.html":{},"coverage.html":{}}}],["id",{"_index":277,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["identifier",{"_index":1342,"title":{},"body":{"coverage.html":{}}}],["idpcategory",{"_index":759,"title":{"interfaces/IDpCategory.html":{}},"body":{"injectables/DpCategoriesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpimage",{"_index":831,"title":{"interfaces/IDpImage.html":{}},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"coverage.html":{}}}],["idporder",{"_index":889,"title":{"interfaces/IDpOrder.html":{}},"body":{"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpUser.html":{},"coverage.html":{}}}],["idpordercomposition",{"_index":867,"title":{"interfaces/IDpOrderComposition.html":{}},"body":{"injectables/DpOrderCompositionsService.html":{},"interfaces/IDpOrderComposition.html":{},"coverage.html":{}}}],["idporderdetail",{"_index":1077,"title":{"interfaces/IDpOrderDetail.html":{}},"body":{"interfaces/IDpOrderDetail.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["idpproduct",{"_index":1058,"title":{"interfaces/IDpProduct.html":{}},"body":{"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"injectables/ProductsService.html":{},"coverage.html":{}}}],["idpproductattribute",{"_index":928,"title":{"interfaces/IDpProductAttribute.html":{}},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpsize",{"_index":968,"title":{"interfaces/IDpSize.html":{}},"body":{"injectables/DpSizesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"coverage.html":{}}}],["idpuser",{"_index":422,"title":{"interfaces/IDpUser.html":{}},"body":{"injectables/AuthService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"coverage.html":{}}}],["idpuserproj",{"_index":365,"title":{"interfaces/IDpUserProj.html":{}},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"coverage.html":{}}}],["ignore",{"_index":473,"title":{},"body":{"interfaces/CartItem.html":{}}}],["image",{"_index":688,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DpImagesService.html":{}}}],["images",{"_index":807,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts",{"_index":772,"title":{},"body":{"injectables/DpImagesService.html":{},"coverage.html":{}}}],["images.service.ts:110",{"_index":783,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:140",{"_index":826,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:159",{"_index":802,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:18",{"_index":780,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:33",{"_index":805,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:48",{"_index":821,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:63",{"_index":810,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["images.service.ts:79",{"_index":814,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["imagesdata",{"_index":797,"title":{},"body":{"injectables/DpImagesService.html":{},"interfaces/IDpImage.html":{}}}],["img",{"_index":1064,"title":{},"body":{"interfaces/IDpImage.html":{}}}],["implements",{"_index":478,"title":{},"body":{"interfaces/CartItem.html":{}}}],["import",{"_index":74,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["imports",{"_index":16,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["includes",{"_index":1425,"title":{},"body":{"index.html":{}}}],["including",{"_index":1470,"title":{},"body":{"index.html":{}}}],["increasequantity(item",{"_index":523,"title":{},"body":{"interfaces/CartItem.html":{}}}],["index",{"_index":34,"title":{"index.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["information",{"_index":1469,"title":{},"body":{"index.html":{}}}],["inject",{"_index":76,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["inject(configservice",{"_index":68,"title":{},"body":{"components/AboutComponent.html":{}}}],["inject(tuialertservice",{"_index":66,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["inject(userachievementsservice",{"_index":72,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["injectable",{"_index":270,"title":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["injectables",{"_index":272,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"overview.html":{}}}],["input[type=\"file",{"_index":790,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface",{"_index":438,"title":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"coverage.html":{}}}],["interface/iachievement",{"_index":322,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/UserAchievementsService.html":{}}}],["interface/iaddtocartrequest",{"_index":1154,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["interface/icartitem",{"_index":461,"title":{},"body":{"interfaces/CartItem.html":{}}}],["interface/icartviewmodel",{"_index":463,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["interface/icreatedpimagerequest",{"_index":833,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface/idpcategory",{"_index":770,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["interface/idpimage",{"_index":832,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface/idporder",{"_index":916,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["interface/idpordercomposition",{"_index":878,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["interface/idporderdetail",{"_index":1196,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["interface/idpproduct",{"_index":1153,"title":{},"body":{"injectables/ProductsService.html":{}}}],["interface/idpproductattribute",{"_index":957,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["interface/idpsize",{"_index":990,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["interface/idpuser",{"_index":432,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DpUsersService.html":{}}}],["interface/idpuserproj",{"_index":383,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{}}}],["interface/iremovefromcartrequest",{"_index":1197,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["interface/iupdatecartrequest",{"_index":466,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["interface/iupdatedpimagerequest",{"_index":834,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["interface/iuserhasachievement",{"_index":1266,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["interfaces",{"_index":440,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"overview.html":{}}}],["iremovefromcartrequest",{"_index":1109,"title":{"interfaces/IRemoveFromCartRequest.html":{}},"body":{"interfaces/IRemoveFromCartRequest.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["isauthenticated",{"_index":356,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["isauthenticatedsubject",{"_index":357,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["isloading",{"_index":489,"title":{},"body":{"interfaces/CartItem.html":{}}}],["isobtained",{"_index":1118,"title":{},"body":{"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["item",{"_index":509,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{}}}],["item.productid",{"_index":537,"title":{},"body":{"interfaces/CartItem.html":{}}}],["item.quantity",{"_index":525,"title":{},"body":{"interfaces/CartItem.html":{}}}],["item.sizeid",{"_index":539,"title":{},"body":{"interfaces/CartItem.html":{}}}],["items",{"_index":200,"title":{},"body":{"components/AboutComponent.html":{}}}],["iupdatecartrequest",{"_index":465,"title":{"interfaces/IUpdateCartRequest.html":{}},"body":{"interfaces/CartItem.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["iupdatedpimagerequest",{"_index":825,"title":{"interfaces/IUpdateDpImageRequest.html":{}},"body":{"injectables/DpImagesService.html":{},"interfaces/IUpdateDpImageRequest.html":{},"coverage.html":{}}}],["iuserhasachievement",{"_index":1114,"title":{"interfaces/IUserHasAchievement.html":{}},"body":{"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["jsdoc",{"_index":113,"title":{},"body":{"components/AboutComponent.html":{}}}],["justify",{"_index":224,"title":{},"body":{"components/AboutComponent.html":{}}}],["jwt",{"_index":126,"title":{},"body":{"components/AboutComponent.html":{}}}],["k",{"_index":568,"title":{},"body":{"interfaces/CartItem.html":{}}}],["karma",{"_index":1450,"title":{},"body":{"index.html":{}}}],["key",{"_index":567,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["l",{"_index":953,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["layout.css",{"_index":258,"title":{},"body":{"components/AboutComponent.html":{}}}],["left",{"_index":180,"title":{},"body":{"components/AboutComponent.html":{}}}],["legend",{"_index":261,"title":{},"body":{"components/AboutComponent.html":{}}}],["li",{"_index":213,"title":{},"body":{"components/AboutComponent.html":{}}}],["li::before",{"_index":215,"title":{},"body":{"components/AboutComponent.html":{}}}],["line",{"_index":193,"title":{},"body":{"components/AboutComponent.html":{}}}],["list",{"_index":210,"title":{},"body":{"components/AboutComponent.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["loadcartitems",{"_index":502,"title":{},"body":{"interfaces/CartItem.html":{}}}],["loadproductinfo",{"_index":700,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductinfofailed",{"_index":659,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductinfosuccess",{"_index":606,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproducts",{"_index":698,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductsfailed",{"_index":657,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loadproductssuccess",{"_index":604,"title":{},"body":{"injectables/ConfigService.html":{}}}],["local",{"_index":1410,"title":{},"body":{"index.html":{}}}],["localstorage.getitem('projtoken",{"_index":399,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.getitem(userachievementsservice.always_fail_key",{"_index":1269,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["localstorage.removeitem('projtoken",{"_index":401,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.removeitem('token",{"_index":402,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["localstorage.removeitem('userprojid",{"_index":403,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem('projtoken",{"_index":393,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem('token",{"_index":437,"title":{},"body":{"injectables/AuthService.html":{}}}],["localstorage.setitem('userprojid",{"_index":394,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["localstorage.setitem(userachievementsservice.always_fail_key",{"_index":1268,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["login",{"_index":314,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["login(user",{"_index":421,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(userproj",{"_index":364,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["loginfailed",{"_index":627,"title":{},"body":{"injectables/ConfigService.html":{}}}],["loginsuccess",{"_index":581,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logout",{"_index":359,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["logoutproj",{"_index":706,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logoutprojfailed",{"_index":663,"title":{},"body":{"injectables/ConfigService.html":{}}}],["logoutprojsuccess",{"_index":619,"title":{},"body":{"injectables/ConfigService.html":{}}}],["m",{"_index":933,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpSize.html":{}}}],["margin",{"_index":152,"title":{},"body":{"components/AboutComponent.html":{}}}],["matching",{"_index":269,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max",{"_index":144,"title":{},"body":{"components/AboutComponent.html":{}}}],["media",{"_index":173,"title":{},"body":{"components/AboutComponent.html":{}}}],["message",{"_index":415,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AboutComponent.html":{}}}],["methods",{"_index":42,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["middle",{"_index":186,"title":{},"body":{"components/AboutComponent.html":{}}}],["min(50rem",{"_index":147,"title":{},"body":{"components/AboutComponent.html":{}}}],["modify",{"_index":1421,"title":{},"body":{"index.html":{}}}],["modules",{"_index":1476,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":1468,"title":{},"body":{"index.html":{}}}],["movedpermanently",{"_index":717,"title":{},"body":{"injectables/ConfigService.html":{}}}],["mssql",{"_index":111,"title":{},"body":{"components/AboutComponent.html":{}}}],["multipart/form",{"_index":785,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["name",{"_index":53,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["namefor",{"_index":1429,"title":{},"body":{"index.html":{}}}],["navigate",{"_index":1415,"title":{},"body":{"index.html":{}}}],["navigateto",{"_index":43,"title":{},"body":{"components/AboutComponent.html":{}}}],["navigateto(path",{"_index":56,"title":{},"body":{"components/AboutComponent.html":{}}}],["navigatetohome",{"_index":44,"title":{},"body":{"components/AboutComponent.html":{}}}],["navigatetoproductfailed",{"_index":661,"title":{},"body":{"injectables/ConfigService.html":{}}}],["navigatetoproductsuccess",{"_index":608,"title":{},"body":{"injectables/ConfigService.html":{}}}],["navigation.css",{"_index":254,"title":{},"body":{"components/AboutComponent.html":{}}}],["needs",{"_index":1465,"title":{},"body":{"index.html":{}}}],["new",{"_index":70,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"index.html":{}}}],["newcomp",{"_index":857,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["neworder",{"_index":901,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["newpass",{"_index":353,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["newproduct",{"_index":1138,"title":{},"body":{"injectables/ProductsService.html":{}}}],["newquantity",{"_index":524,"title":{},"body":{"interfaces/CartItem.html":{}}}],["newsize",{"_index":974,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["newuser",{"_index":352,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["next",{"_index":504,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ng",{"_index":1412,"title":{},"body":{"index.html":{}}}],["ngforof",{"_index":449,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ngif",{"_index":450,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ngondestroy",{"_index":45,"title":{},"body":{"components/AboutComponent.html":{}}}],["ngoninit",{"_index":500,"title":{},"body":{"interfaces/CartItem.html":{}}}],["ngx",{"_index":1392,"title":{},"body":{"dependencies.html":{}}}],["nocontent",{"_index":714,"title":{},"body":{"injectables/ConfigService.html":{}}}],["none",{"_index":212,"title":{},"body":{"components/AboutComponent.html":{}}}],["notfound",{"_index":727,"title":{},"body":{"injectables/ConfigService.html":{}}}],["null",{"_index":854,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/UserAchievementsService.html":{}}}],["number",{"_index":302,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["object",{"_index":580,"title":{},"body":{"injectables/ConfigService.html":{}}}],["observable",{"_index":300,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["of(false",{"_index":1282,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["of(void",{"_index":1286,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["ondestroy",{"_index":78,"title":{},"body":{"components/AboutComponent.html":{}}}],["one",{"_index":1463,"title":{},"body":{"index.html":{}}}],["oninit",{"_index":77,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["onsortchange(event",{"_index":572,"title":{},"body":{"interfaces/CartItem.html":{}}}],["onvaluechange",{"_index":565,"title":{},"body":{"interfaces/CartItem.html":{}}}],["open",{"_index":1285,"title":{},"body":{"injectables/UserAchievementsService.html":{},"index.html":{}}}],["opencategorydialogsuccess",{"_index":615,"title":{},"body":{"injectables/ConfigService.html":{}}}],["openimagedialogsuccess",{"_index":617,"title":{},"body":{"injectables/ConfigService.html":{}}}],["openproductdialogsuccess",{"_index":614,"title":{},"body":{"injectables/ConfigService.html":{}}}],["optimizes",{"_index":1444,"title":{},"body":{"index.html":{}}}],["optional",{"_index":55,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["options",{"_index":480,"title":{},"body":{"interfaces/CartItem.html":{}}}],["order",{"_index":842,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["ordercomp",{"_index":1073,"title":{},"body":{"interfaces/IDpOrderComposition.html":{}}}],["orderdate",{"_index":893,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orderdetails",{"_index":1173,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["orderid",{"_index":556,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["orders",{"_index":881,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts",{"_index":880,"title":{},"body":{"injectables/DpOrdersService.html":{},"coverage.html":{}}}],["orders.service.ts:101",{"_index":913,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:116",{"_index":903,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:16",{"_index":887,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:31",{"_index":906,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:46",{"_index":910,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orders.service.ts:73",{"_index":890,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["orderstatus",{"_index":897,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["overview",{"_index":1474,"title":{"overview.html":{}},"body":{"index.html":{},"overview.html":{}}}],["package",{"_index":1367,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":155,"title":{},"body":{"components/AboutComponent.html":{}}}],["page",{"_index":143,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"index.html":{}}}],["pagecartcomponent",{"_index":477,"title":{},"body":{"interfaces/CartItem.html":{}}}],["param",{"_index":329,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["parameters",{"_index":51,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["parseint(localstorage.getitem('userprojid",{"_index":529,"title":{},"body":{"interfaces/CartItem.html":{}}}],["pass",{"_index":345,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["password",{"_index":344,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["path",{"_index":59,"title":{},"body":{"components/AboutComponent.html":{}}}],["payload",{"_index":386,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["payload).pipe",{"_index":390,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["performance",{"_index":1445,"title":{},"body":{"index.html":{}}}],["phonenumber",{"_index":409,"title":{},"body":{"injectables/AuthService.html":{}}}],["pipes",{"_index":1434,"title":{},"body":{"index.html":{}}}],["plugins",{"_index":1385,"title":{},"body":{"dependencies.html":{}}}],["pointer",{"_index":236,"title":{},"body":{"components/AboutComponent.html":{}}}],["post",{"_index":279,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["post(`${this.baseurl}/create/${userprojid}/${achievementid",{"_index":1274,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["powerful",{"_index":1426,"title":{},"body":{"index.html":{}}}],["prettier",{"_index":130,"title":{},"body":{"components/AboutComponent.html":{}}}],["price",{"_index":486,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{}}}],["primary",{"_index":183,"title":{},"body":{"components/AboutComponent.html":{}}}],["private",{"_index":36,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["product",{"_index":918,"title":{},"body":{"injectables/DpProductAttributesService.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["productid",{"_index":536,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpImagesService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["production",{"_index":1443,"title":{},"body":{"index.html":{}}}],["products",{"_index":1057,"title":{},"body":{"interfaces/ICartViewModel.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["products.service.ts",{"_index":1121,"title":{},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["products.service.ts:102",{"_index":1150,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:117",{"_index":1140,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:142",{"_index":1128,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:17",{"_index":1126,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:32",{"_index":1143,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:47",{"_index":1147,"title":{},"body":{"injectables/ProductsService.html":{}}}],["products.service.ts:75",{"_index":1133,"title":{},"body":{"injectables/ProductsService.html":{}}}],["productsservice",{"_index":1120,"title":{"injectables/ProductsService.html":{}},"body":{"injectables/ProductsService.html":{},"coverage.html":{}}}],["producttitle",{"_index":485,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderDetail.html":{}}}],["proj",{"_index":708,"title":{},"body":{"injectables/ConfigService.html":{}}}],["proj.service.ts",{"_index":339,"title":{},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["proj.service.ts:101",{"_index":371,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:122",{"_index":374,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:129",{"_index":363,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:140",{"_index":368,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:41",{"_index":376,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:42",{"_index":379,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:47",{"_index":362,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["proj.service.ts:69",{"_index":366,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["project",{"_index":1107,"title":{},"body":{"interfaces/IDpUserProj.html":{},"index.html":{}}}],["projs.service.ts",{"_index":992,"title":{},"body":{"injectables/DpUserProjsService.html":{},"coverage.html":{}}}],["projs.service.ts:110",{"_index":1008,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:16",{"_index":999,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:31",{"_index":1011,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:46",{"_index":1016,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:70",{"_index":1001,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["projs.service.ts:95",{"_index":1019,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["properties",{"_index":35,"title":{"properties.html":{}},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"properties.html":{}}}],["property",{"_index":1050,"title":{},"body":{"interfaces/IAchievement.html":{},"interfaces/ICartViewModel.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["protected",{"_index":479,"title":{},"body":{"interfaces/CartItem.html":{}}}],["providedin",{"_index":324,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["public",{"_index":355,"title":{},"body":{"injectables/AuthProjService.html":{},"interfaces/CartItem.html":{}}}],["put",{"_index":283,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/UserAchievementsService.html":{}}}],["put(`${this.baseurl}/unlock/${userprojid}/${achievementid",{"_index":1275,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["q",{"_index":1186,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["quantity",{"_index":487,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpOrderCompositionsService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["qwerty",{"_index":1108,"title":{},"body":{"interfaces/IDpUserProj.html":{}}}],["radius",{"_index":162,"title":{},"body":{"components/AboutComponent.html":{}}}],["radius('l",{"_index":165,"title":{},"body":{"components/AboutComponent.html":{}}}],["reactive",{"_index":119,"title":{},"body":{"components/AboutComponent.html":{}}}],["readonly",{"_index":37,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{}}}],["red",{"_index":935,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["reference",{"_index":1475,"title":{},"body":{"index.html":{}}}],["references",{"_index":1472,"title":{},"body":{"index.html":{}}}],["register",{"_index":360,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{}}}],["register(user",{"_index":426,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(userproj",{"_index":370,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["registered",{"_index":416,"title":{},"body":{"injectables/AuthService.html":{}}}],["registerfailed",{"_index":629,"title":{},"body":{"injectables/ConfigService.html":{}}}],["registersuccess",{"_index":582,"title":{},"body":{"injectables/ConfigService.html":{}}}],["reload",{"_index":1419,"title":{},"body":{"index.html":{}}}],["remarks",{"_index":323,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["removefromcart",{"_index":694,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/ShopCartService.html":{}}}],["removefromcart(item",{"_index":528,"title":{},"body":{"interfaces/CartItem.html":{}}}],["removefromcart(request",{"_index":1188,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["removefromcartfailed",{"_index":653,"title":{},"body":{"injectables/ConfigService.html":{}}}],["removefromcartsuccess",{"_index":600,"title":{},"body":{"injectables/ConfigService.html":{}}}],["repositories/shop",{"_index":468,"title":{},"body":{"interfaces/CartItem.html":{}}}],["repositories/user",{"_index":472,"title":{},"body":{"interfaces/CartItem.html":{}}}],["repository.service",{"_index":470,"title":{},"body":{"interfaces/CartItem.html":{}}}],["req",{"_index":1053,"title":{},"body":{"interfaces/IAddToCartRequest.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{}}}],["request",{"_index":560,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpImagesService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["request.dpimagetitle",{"_index":839,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["request.dpproductid.tostring",{"_index":838,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["request.file",{"_index":840,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["res",{"_index":348,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["resettheme",{"_index":704,"title":{},"body":{"injectables/ConfigService.html":{}}}],["resetthemesuccess",{"_index":612,"title":{},"body":{"injectables/ConfigService.html":{}}}],["resources",{"_index":1467,"title":{},"body":{"index.html":{}}}],["response",{"_index":550,"title":{},"body":{"interfaces/CartItem.html":{}}}],["response.orderid",{"_index":557,"title":{},"body":{"interfaces/CartItem.html":{}}}],["response.status",{"_index":735,"title":{},"body":{"injectables/ConfigService.html":{}}}],["response.success",{"_index":563,"title":{},"body":{"interfaces/CartItem.html":{}}}],["response.token",{"_index":392,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["response.userprojid.tostring",{"_index":395,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["responsetype",{"_index":837,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["rest",{"_index":134,"title":{},"body":{"components/AboutComponent.html":{}}}],["restful",{"_index":123,"title":{},"body":{"components/AboutComponent.html":{}}}],["result",{"_index":1283,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["results",{"_index":268,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":327,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["returns",{"_index":60,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["rgba(0,0,0,0.08",{"_index":238,"title":{},"body":{"components/AboutComponent.html":{}}}],["rgba(0,0,0,0.16",{"_index":243,"title":{},"body":{"components/AboutComponent.html":{}}}],["right",{"_index":234,"title":{},"body":{"components/AboutComponent.html":{}}}],["root",{"_index":325,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["router",{"_index":48,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["routerlink",{"_index":22,"title":{},"body":{"components/AboutComponent.html":{}}}],["row",{"_index":223,"title":{},"body":{"components/AboutComponent.html":{}}}],["run",{"_index":1411,"title":{},"body":{"index.html":{}}}],["runner",{"_index":1452,"title":{},"body":{"index.html":{}}}],["running",{"_index":1414,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":86,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":382,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["scaffolding",{"_index":1424,"title":{},"body":{"index.html":{}}}],["scale(1.05",{"_index":244,"title":{},"body":{"components/AboutComponent.html":{}}}],["schemas",{"_index":101,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["schematics",{"_index":1432,"title":{},"body":{"index.html":{}}}],["section",{"_index":187,"title":{},"body":{"components/AboutComponent.html":{}}}],["selectedfile",{"_index":1113,"title":{},"body":{"interfaces/IUpdateDpImageRequest.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["selenium",{"_index":116,"title":{},"body":{"components/AboutComponent.html":{}}}],["serveonce",{"_index":1413,"title":{},"body":{"index.html":{}}}],["server",{"_index":1409,"title":{},"body":{"index.html":{}}}],["servererror",{"_index":731,"title":{},"body":{"injectables/ConfigService.html":{}}}],["service",{"_index":1394,"title":{},"body":{"dependencies.html":{}}}],["services/auth.service",{"_index":98,"title":{},"body":{"components/AboutComponent.html":{}}}],["services/config.service",{"_index":88,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["services/user",{"_index":89,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["serviceunavailable",{"_index":732,"title":{},"body":{"injectables/ConfigService.html":{}}}],["setalwaysfailmode",{"_index":1215,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["setalwaysfailmode(value",{"_index":1252,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["setauthenticated",{"_index":361,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["setauthenticated(isauthenticated",{"_index":372,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["shadow",{"_index":168,"title":{},"body":{"components/AboutComponent.html":{}}}],["shop",{"_index":1157,"title":{},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["shopcartrepositoryservice",{"_index":467,"title":{},"body":{"interfaces/CartItem.html":{}}}],["shopcartservice",{"_index":1156,"title":{"injectables/ShopCartService.html":{}},"body":{"injectables/ShopCartService.html":{},"coverage.html":{}}}],["simulateserverfailure",{"_index":1216,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["size",{"_index":190,"title":{},"body":{"components/AboutComponent.html":{},"injectables/DpSizesService.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{}}}],["size('l",{"_index":207,"title":{},"body":{"components/AboutComponent.html":{}}}],["size('m",{"_index":192,"title":{},"body":{"components/AboutComponent.html":{}}}],["sizeid",{"_index":538,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/DpSizesService.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["sizename",{"_index":1080,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["sizes",{"_index":960,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts",{"_index":959,"title":{},"body":{"injectables/DpSizesService.html":{},"coverage.html":{}}}],["sizes.service.ts:108",{"_index":976,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:16",{"_index":966,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:31",{"_index":979,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:46",{"_index":983,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:69",{"_index":969,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizes.service.ts:93",{"_index":986,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["sizing",{"_index":172,"title":{},"body":{"components/AboutComponent.html":{}}}],["solid",{"_index":228,"title":{},"body":{"components/AboutComponent.html":{}}}],["sota6sifront",{"_index":1403,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"index.html":{}}}],["speed",{"_index":1446,"title":{},"body":{"index.html":{}}}],["src/app/data/page/about/about.component.ts",{"_index":10,"title":{},"body":{"components/AboutComponent.html":{},"coverage.html":{}}}],["src/app/data/page/about/about.component.ts:39",{"_index":73,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:40",{"_index":69,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:41",{"_index":67,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:42",{"_index":50,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:48",{"_index":63,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:52",{"_index":58,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/about/about.component.ts:58",{"_index":62,"title":{},"body":{"components/AboutComponent.html":{}}}],["src/app/data/page/page",{"_index":441,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{}}}],["src/app/interface/iachievement.ts",{"_index":1048,"title":{},"body":{"interfaces/IAchievement.html":{},"coverage.html":{}}}],["src/app/interface/iaddtocartrequest.ts",{"_index":1052,"title":{},"body":{"interfaces/IAddToCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/icartitem.ts",{"_index":1054,"title":{},"body":{"interfaces/ICartItem.html":{},"coverage.html":{}}}],["src/app/interface/icartviewmodel.ts",{"_index":1056,"title":{},"body":{"interfaces/ICartViewModel.html":{},"coverage.html":{}}}],["src/app/interface/icreatedpimagerequest.ts",{"_index":1059,"title":{},"body":{"interfaces/ICreateDpImageRequest.html":{},"coverage.html":{}}}],["src/app/interface/idpcategory.ts",{"_index":1060,"title":{},"body":{"interfaces/IDpCategory.html":{},"coverage.html":{}}}],["src/app/interface/idpimage.ts",{"_index":1063,"title":{},"body":{"interfaces/IDpImage.html":{},"coverage.html":{}}}],["src/app/interface/idporder.ts",{"_index":1067,"title":{},"body":{"interfaces/IDpOrder.html":{},"coverage.html":{}}}],["src/app/interface/idpordercomposition.ts",{"_index":1072,"title":{},"body":{"interfaces/IDpOrderComposition.html":{},"coverage.html":{}}}],["src/app/interface/idporderdetail.ts",{"_index":1078,"title":{},"body":{"interfaces/IDpOrderDetail.html":{},"coverage.html":{}}}],["src/app/interface/idpproduct.ts",{"_index":1083,"title":{},"body":{"interfaces/IDpProduct.html":{},"coverage.html":{}}}],["src/app/interface/idpproductattribute.ts",{"_index":1092,"title":{},"body":{"interfaces/IDpProductAttribute.html":{},"coverage.html":{}}}],["src/app/interface/idpsize.ts",{"_index":1095,"title":{},"body":{"interfaces/IDpSize.html":{},"coverage.html":{}}}],["src/app/interface/idpuser.ts",{"_index":1097,"title":{},"body":{"interfaces/IDpUser.html":{},"coverage.html":{}}}],["src/app/interface/idpuserproj.ts",{"_index":1106,"title":{},"body":{"interfaces/IDpUserProj.html":{},"coverage.html":{}}}],["src/app/interface/iremovefromcartrequest.ts",{"_index":1110,"title":{},"body":{"interfaces/IRemoveFromCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/iupdatecartrequest.ts",{"_index":1111,"title":{},"body":{"interfaces/IUpdateCartRequest.html":{},"coverage.html":{}}}],["src/app/interface/iupdatedpimagerequest.ts",{"_index":1112,"title":{},"body":{"interfaces/IUpdateDpImageRequest.html":{},"coverage.html":{}}}],["src/app/interface/iuserhasachievement.ts",{"_index":1115,"title":{},"body":{"interfaces/IUserHasAchievement.html":{},"coverage.html":{}}}],["src/app/services/achievements.service.ts",{"_index":273,"title":{},"body":{"injectables/AchievementsService.html":{},"coverage.html":{}}}],["src/app/services/achievements.service.ts:116",{"_index":317,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:129",{"_index":303,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:140",{"_index":312,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:44",{"_index":293,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:56",{"_index":308,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:69",{"_index":306,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/achievements.service.ts:92",{"_index":296,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["src/app/services/auth",{"_index":338,"title":{},"body":{"injectables/AuthProjService.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts",{"_index":405,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/app/services/auth.service.ts:127",{"_index":423,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:149",{"_index":424,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:51",{"_index":430,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:52",{"_index":431,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:57",{"_index":420,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:66",{"_index":428,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/auth.service.ts:91",{"_index":427,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/app/services/config.service.ts",{"_index":573,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/app/services/config.service.ts:107",{"_index":734,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:23",{"_index":673,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/config.service.ts:81",{"_index":709,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/app/services/dp",{"_index":738,"title":{},"body":{"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"coverage.html":{}}}],["src/app/services/user",{"_index":1203,"title":{},"body":{"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["standalone",{"_index":131,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["start",{"_index":214,"title":{},"body":{"components/AboutComponent.html":{},"index.html":{}}}],["started",{"_index":1402,"title":{"index.html":{}},"body":{}}],["state",{"_index":555,"title":{},"body":{"interfaces/CartItem.html":{}}}],["statements",{"_index":1343,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1205,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["store",{"_index":1439,"title":{},"body":{"index.html":{}}}],["string",{"_index":57,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/IAchievement.html":{},"interfaces/ICartItem.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUpdateDpImageRequest.html":{},"injectables/UserAchievementsService.html":{}}}],["style",{"_index":211,"title":{},"body":{"components/AboutComponent.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AboutComponent.html":{}}}],["styles/root.css",{"_index":100,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["styles/variables.css",{"_index":142,"title":{},"body":{"components/AboutComponent.html":{}}}],["styleurls",{"_index":30,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["subscribe",{"_index":319,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/CartItem.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["subscribe(attr",{"_index":937,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["subscribe(image",{"_index":799,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["subscribe(newach",{"_index":298,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["subscribe(newcategory",{"_index":749,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["subscribe(newcomp",{"_index":856,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["subscribe(neworder",{"_index":900,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["subscribe(newproduct",{"_index":1137,"title":{},"body":{"injectables/ProductsService.html":{}}}],["subscribe(newsize",{"_index":973,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["subscribe(newuser",{"_index":1005,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["subscribe(order",{"_index":1172,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["subscribe(res",{"_index":347,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["subscription",{"_index":71,"title":{},"body":{"components/AboutComponent.html":{}}}],["subscriptions",{"_index":40,"title":{},"body":{"components/AboutComponent.html":{}}}],["success",{"_index":544,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["successachievementid",{"_index":1244,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successfully",{"_index":417,"title":{},"body":{"injectables/AuthService.html":{}}}],["successmessage",{"_index":1249,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successmessage.replace",{"_index":1289,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successtofailedmap",{"_index":1300,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["successtofailedmap[successachievementid",{"_index":1339,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["such",{"_index":1433,"title":{},"body":{"index.html":{}}}],["suits",{"_index":1464,"title":{},"body":{"index.html":{}}}],["sum",{"_index":521,"title":{},"body":{"interfaces/CartItem.html":{}}}],["switchmap",{"_index":1264,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchmap(exists",{"_index":1292,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchmap(result",{"_index":1294,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["switchtheme",{"_index":691,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtodarkthemefailed",{"_index":647,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtodarkthemesuccess",{"_index":598,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtolightthemefailed",{"_index":645,"title":{},"body":{"injectables/ConfigService.html":{}}}],["switchtolightthemesuccess",{"_index":597,"title":{},"body":{"injectables/ConfigService.html":{}}}],["table",{"_index":458,"title":{},"body":{"interfaces/CartItem.html":{},"coverage.html":{},"dependencies.html":{}}}],["tables.css",{"_index":259,"title":{},"body":{"components/AboutComponent.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1366,"title":{},"body":{"coverage.html":{}}}],["taiga",{"_index":83,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["tap",{"_index":381,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/UserAchievementsService.html":{}}}],["tap(response",{"_index":391,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AboutComponent.html":{}}}],["templateurl",{"_index":32,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["test",{"_index":1451,"title":{},"body":{"index.html":{}}}],["testing",{"_index":1459,"title":{},"body":{"index.html":{}}}],["testrunning",{"_index":1456,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1448,"title":{},"body":{"index.html":{}}}],["text",{"_index":249,"title":{},"body":{"components/AboutComponent.html":{}}}],["textachievement",{"_index":282,"title":{},"body":{"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{}}}],["theme",{"_index":693,"title":{},"body":{"injectables/ConfigService.html":{}}}],["theme=\"dark",{"_index":247,"title":{},"body":{"components/AboutComponent.html":{}}}],["themetogglecomponent",{"_index":25,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.achievementsservice.createachievement",{"_index":297,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.deleteachievement(1).subscribe",{"_index":304,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.getachievementbyid(1).subscribe(ach",{"_index":307,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.getallachievements().subscribe(list",{"_index":309,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.unlockachievement('first",{"_index":313,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.achievementsservice.updateachievement(1",{"_index":318,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["this.alertservice",{"_index":1284,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.alertservice.open",{"_index":515,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.alertservice.open(successmessage",{"_index":1295,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.authprojservice.login",{"_index":346,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authprojservice.logout",{"_index":369,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authprojservice.register",{"_index":354,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.authservice.login",{"_index":419,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.logout",{"_index":425,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.authservice.register",{"_index":411,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.cartitems",{"_index":507,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.filter(cartitem",{"_index":540,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.length",{"_index":546,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.map((item",{"_index":571,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.map(cartitem",{"_index":561,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartitems.reduce((sum",{"_index":520,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.checkout().subscribe",{"_index":549,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.clearcart",{"_index":552,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.getcart().subscribe",{"_index":503,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.removefromcart",{"_index":535,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cartservice.updatecart(request).subscribe",{"_index":562,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.cdr.markforcheck",{"_index":512,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.checkauthstatus",{"_index":384,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.checkuserachievementexists(userprojid",{"_index":1290,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addcategoryfailed",{"_index":1314,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addcategorysuccess",{"_index":1313,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addimagefailed",{"_index":1312,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addimagesuccess",{"_index":1311,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addtocartfailed",{"_index":1304,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.addtocartsuccess",{"_index":674,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.buttonnotworking",{"_index":1326,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.checkoutemptycart",{"_index":547,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.configservice.achievementids.checkoutfailed",{"_index":548,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.checkoutsuccess",{"_index":551,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.createproductfailed",{"_index":1308,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.createproductsuccess",{"_index":1307,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductinfofailed",{"_index":1322,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductinfosuccess",{"_index":1321,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductsfailed",{"_index":1320,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loadproductssuccess",{"_index":1319,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loginfailed",{"_index":1301,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.loginsuccess",{"_index":575,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.logoutprojfailed",{"_index":1332,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.logoutprojsuccess",{"_index":1331,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.navigatetoproductfailed",{"_index":1324,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.navigatetoproductsuccess",{"_index":1323,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.opencategorydialogsuccess",{"_index":1329,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.openimagedialogsuccess",{"_index":1330,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.openproductdialogsuccess",{"_index":1328,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.registerfailed",{"_index":1303,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.registersuccess",{"_index":1302,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.removefromcartfailed",{"_index":534,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.removefromcartsuccess",{"_index":543,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.resetthemesuccess",{"_index":1327,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtodarkthemefailed",{"_index":1318,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtodarkthemesuccess",{"_index":1317,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtolightthemefailed",{"_index":1316,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.switchtolightthemesuccess",{"_index":1315,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.togglethemesuccess",{"_index":1325,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecartquantityfailed",{"_index":559,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecartquantitysuccess",{"_index":564,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecategoryfailed",{"_index":1334,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updatecategorysuccess",{"_index":1333,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateimagefailed",{"_index":1336,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateimagesuccess",{"_index":1335,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateproductfailed",{"_index":1338,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateproductsuccess",{"_index":1337,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateprofilefailed",{"_index":1310,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.updateprofilesuccess",{"_index":1309,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.viewproductfailed",{"_index":1306,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.achievementids.viewproductsuccess",{"_index":1305,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.apiendpoints.login",{"_index":576,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.configservice.httpstatuscodes.notfound",{"_index":1280,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.configservice.httpstatuscodes.success",{"_index":736,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.createuserachievement(userprojid",{"_index":1293,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.dpcategoriesservice.createdpcategory",{"_index":748,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.deletedpcategory(1).subscribe",{"_index":751,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.getalldpcategories().subscribe(categories",{"_index":741,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.getdpcategorybyid(1).subscribe(category",{"_index":744,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpcategoriesservice.updatedpcategory(1",{"_index":750,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["this.dpimagesservice.createdpimage",{"_index":798,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.deletedpimage(10).subscribe",{"_index":803,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getalldpimages().subscribe(images",{"_index":806,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagebyid(10).subscribe(image",{"_index":812,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagedata(10).subscribe(blob",{"_index":817,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpimagesservice.getdpimagesbyproductid(5).subscribe(images",{"_index":823,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.dpordercompositionsservice.createdpordercomposition",{"_index":855,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.deletedpordercomposition(1).subscribe",{"_index":859,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.getalldpordercompositions().subscribe(compositions",{"_index":846,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.getdpordercompositionbyid(1).subscribe(composition",{"_index":849,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordercompositionsservice.updatedpordercomposition(1",{"_index":858,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["this.dpordersservice.createdporder",{"_index":898,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.deletedporder(1).subscribe",{"_index":905,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.getalldporders().subscribe(orders",{"_index":907,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.getdporderbyid(1).subscribe(order",{"_index":911,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpordersservice.updatedporder(1",{"_index":914,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["this.dpproductattributesservice.createdpproductattribute",{"_index":936,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.deletedpproductattribute(1).subscribe",{"_index":943,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.getalldpproductattributes().subscribe(attrs",{"_index":945,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.getdpproductattributebyid(1).subscribe(attr",{"_index":950,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpproductattributesservice.updatedpproductattribute(1",{"_index":955,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["this.dpsizesservice.createdpsize",{"_index":972,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.deletedpsize(1).subscribe",{"_index":978,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.getalldpsizes().subscribe(sizes",{"_index":980,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.getdpsizebyid(1).subscribe(size",{"_index":984,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpsizesservice.updatedpsize(1",{"_index":988,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["this.dpuserprojsservice.createdpuserproj",{"_index":1004,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.deletedpuserproj(1).subscribe",{"_index":1010,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.getalldpuserprojs().subscribe(users",{"_index":1012,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.getdpuserprojbyid(1).subscribe(user",{"_index":1017,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpuserprojsservice.updatedpuserproj(1",{"_index":1020,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["this.dpusersservice.createdpuser",{"_index":1033,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.deletedpuser(1).subscribe",{"_index":1038,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.getalldpusers().subscribe(users",{"_index":1040,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.getdpuserbyid(1).subscribe(user",{"_index":1043,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.dpusersservice.updatedpuser(1",{"_index":1046,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["this.getalwaysfailmode",{"_index":1270,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.getfailedachievementid(achievementid",{"_index":1296,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.gettotal(item",{"_index":522,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.http",{"_index":1273,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.delete(`${this.baseurl}/${id",{"_index":333,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.get(`${this.baseurl}/${id",{"_index":330,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.get(`${this.baseurl}/${id}/image",{"_index":836,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.get(`${this.baseurl}/${userprojid}/${achievementid",{"_index":1272,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.get(`${this.baseurl}/byproduct/${productid",{"_index":835,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.get(`${this.baseurl}/exists/${userprojid}/${achievementid}`).pipe",{"_index":1277,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.http.get(`${this.baseurl}/quantity?productid=${productid}&sizeid=${sizeid",{"_index":1199,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.get(this.baseurl",{"_index":328,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["this.http.post('/api/dpimages",{"_index":794,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.post(`${this.baseurl}/addtocart",{"_index":1155,"title":{},"body":{"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/checkout",{"_index":1200,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/export?orderid=${orderid",{"_index":1202,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/login",{"_index":389,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.http.post(`${this.baseurl}/register",{"_index":397,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.http.post(`${this.baseurl}/removefromcart",{"_index":1201,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(`${this.baseurl}/updatecart",{"_index":1198,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.http.post(this.baseurl",{"_index":331,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.http.put('/api/dpimages/10",{"_index":828,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["this.http.put(`${this.baseurl}/${id",{"_index":332,"title":{},"body":{"injectables/AchievementsService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{}}}],["this.isauthenticatedsubject.asobservable",{"_index":377,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.isauthenticatedsubject.next(isauthenticated",{"_index":398,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.isloading",{"_index":511,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.loadcartitems",{"_index":501,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.navigateto",{"_index":106,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.productsservice.addtocart",{"_index":1130,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.createproduct",{"_index":1136,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.deleteproduct(1).subscribe",{"_index":1142,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.getallproducts().subscribe(products",{"_index":1144,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.getproductbyid(1).subscribe(product",{"_index":1148,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.productsservice.updateproduct(1",{"_index":1151,"title":{},"body":{"injectables/ProductsService.html":{}}}],["this.router.navigate(['/order",{"_index":553,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.router.navigate([path",{"_index":105,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.setauthenticated(!!token",{"_index":400,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["this.setauthenticated(false",{"_index":404,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.setauthenticated(true",{"_index":396,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["this.shopcartservice.addtocart",{"_index":1167,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.checkout",{"_index":1171,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.exporttoexcel(123).subscribe(blob",{"_index":1176,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.getcart().subscribe(cart",{"_index":1179,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.getcartquantity(1",{"_index":1184,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.removefromcart",{"_index":1190,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.shopcartservice.updatecart",{"_index":1194,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["this.simulateserverfailure",{"_index":1271,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.subscriptions.unsubscribe",{"_index":104,"title":{},"body":{"components/AboutComponent.html":{}}}],["this.unlockuserachievement(userprojid",{"_index":1287,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.updatecartitemquantity(item",{"_index":526,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.userachievementsrepository",{"_index":532,"title":{},"body":{"interfaces/CartItem.html":{}}}],["this.userachievementsservice.checkuserachievementexists(1",{"_index":1222,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.createuserachievement(1",{"_index":1229,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getalluserachievements().subscribe(list",{"_index":1234,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getalwaysfailmode",{"_index":531,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getcompletedachievementsbyusername('vasya').subscribe(list",{"_index":1239,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getfailedachievementid(14",{"_index":1243,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.getuserachievement(1",{"_index":1248,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.handleachievement(1",{"_index":1251,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.setalwaysfailmode(true",{"_index":1254,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["this.userachievementsservice.unlockuserachievement(1",{"_index":1259,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["throwerror",{"_index":1265,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["title",{"_index":178,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"interfaces/IAchievement.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/UserAchievementsService.html":{}}}],["toggle.component",{"_index":96,"title":{},"body":{"components/AboutComponent.html":{}}}],["toggle/theme",{"_index":95,"title":{},"body":{"components/AboutComponent.html":{}}}],["toggletheme",{"_index":702,"title":{},"body":{"injectables/ConfigService.html":{}}}],["togglethemesuccess",{"_index":610,"title":{},"body":{"injectables/ConfigService.html":{}}}],["token",{"_index":349,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{}}}],["tools",{"_index":1427,"title":{},"body":{"index.html":{}}}],["top",{"_index":219,"title":{},"body":{"components/AboutComponent.html":{}}}],["totalprice",{"_index":488,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IDpOrderDetail.html":{}}}],["totalsorter",{"_index":491,"title":{},"body":{"interfaces/CartItem.html":{}}}],["trackbyindex(index",{"_index":517,"title":{},"body":{"interfaces/CartItem.html":{}}}],["transform",{"_index":241,"title":{},"body":{"components/AboutComponent.html":{}}}],["transition",{"_index":239,"title":{},"body":{"components/AboutComponent.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AboutComponent.html":{}}}],["true",{"_index":474,"title":{},"body":{"interfaces/CartItem.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["true/false",{"_index":1225,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["tslib",{"_index":1397,"title":{},"body":{"dependencies.html":{}}}],["tui",{"_index":158,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.border",{"_index":164,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.breakpoint('sm",{"_index":175,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.font",{"_index":191,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(1",{"_index":181,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(2",{"_index":177,"title":{},"body":{"components/AboutComponent.html":{}}}],["tui.spacing(4",{"_index":154,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiaccordion",{"_index":20,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiaccordionitem",{"_index":21,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuialertservice",{"_index":82,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["tuiappearance",{"_index":453,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiautofocus",{"_index":140,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiavatar",{"_index":27,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuibutton",{"_index":18,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["tuicomparator",{"_index":456,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiday",{"_index":447,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiday.currentlocal",{"_index":510,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuidefaultsort",{"_index":459,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuidefaultsort(a.price",{"_index":493,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuiicon",{"_index":24,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{}}}],["tuiiconpipe",{"_index":29,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuilink",{"_index":23,"title":{},"body":{"components/AboutComponent.html":{}}}],["tuiscrollbar",{"_index":454,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuitable",{"_index":455,"title":{},"body":{"interfaces/CartItem.html":{}}}],["tuititle",{"_index":19,"title":{},"body":{"components/AboutComponent.html":{}}}],["type",{"_index":54,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IAchievement.html":{},"interfaces/IAddToCartRequest.html":{},"interfaces/ICartItem.html":{},"interfaces/ICartViewModel.html":{},"interfaces/ICreateDpImageRequest.html":{},"interfaces/IDpCategory.html":{},"interfaces/IDpImage.html":{},"interfaces/IDpOrder.html":{},"interfaces/IDpOrderComposition.html":{},"interfaces/IDpOrderDetail.html":{},"interfaces/IDpProduct.html":{},"interfaces/IDpProductAttribute.html":{},"interfaces/IDpSize.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IRemoveFromCartRequest.html":{},"interfaces/IUpdateCartRequest.html":{},"interfaces/IUpdateDpImageRequest.html":{},"interfaces/IUserHasAchievement.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["typescript",{"_index":118,"title":{},"body":{"components/AboutComponent.html":{}}}],["typography.css",{"_index":260,"title":{},"body":{"components/AboutComponent.html":{}}}],["ui",{"_index":108,"title":{},"body":{"components/AboutComponent.html":{},"injectables/UserAchievementsService.html":{}}}],["ui/addon",{"_index":457,"title":{},"body":{"interfaces/CartItem.html":{},"dependencies.html":{}}}],["ui/cdk",{"_index":460,"title":{},"body":{"interfaces/CartItem.html":{},"dependencies.html":{}}}],["ui/core",{"_index":84,"title":{},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{},"dependencies.html":{}}}],["ui/event",{"_index":1384,"title":{},"body":{"dependencies.html":{}}}],["ui/icons",{"_index":1387,"title":{},"body":{"dependencies.html":{}}}],["ui/kit",{"_index":85,"title":{},"body":{"components/AboutComponent.html":{},"dependencies.html":{}}}],["ui/layout",{"_index":1390,"title":{},"body":{"dependencies.html":{}}}],["ui/legacy",{"_index":1391,"title":{},"body":{"dependencies.html":{}}}],["uint8array",{"_index":1066,"title":{},"body":{"interfaces/IDpImage.html":{}}}],["unauthorized",{"_index":724,"title":{},"body":{"injectables/ConfigService.html":{}}}],["undefined",{"_index":827,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["unit",{"_index":1447,"title":{},"body":{"index.html":{}}}],["unitprice",{"_index":1081,"title":{},"body":{"interfaces/IDpOrderDetail.html":{}}}],["unlockachievement",{"_index":290,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlockachievement(achievementtitle",{"_index":311,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlocked",{"_index":336,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["unlockuserachievement",{"_index":1217,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["unlockuserachievement(userprojid",{"_index":1256,"title":{},"body":{"injectables/UserAchievementsService.html":{}}}],["updateachievement",{"_index":291,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["updateachievement(id",{"_index":316,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["updatecart",{"_index":1163,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["updatecart(request",{"_index":1191,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["updatecartitemquantity(item",{"_index":558,"title":{},"body":{"interfaces/CartItem.html":{}}}],["updatecartquantity",{"_index":696,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecartquantityfailed",{"_index":655,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecartquantitysuccess",{"_index":602,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecategoryfailed",{"_index":665,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updatecategorysuccess",{"_index":621,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updated",{"_index":570,"title":{},"body":{"interfaces/CartItem.html":{},"injectables/ShopCartService.html":{}}}],["updatedpcategory",{"_index":756,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["updatedpcategory(id",{"_index":767,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["updatedpimage",{"_index":779,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["updatedpimage(id",{"_index":824,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["updatedporder",{"_index":886,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["updatedporder(id",{"_index":912,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["updatedpordercomposition",{"_index":864,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["updatedpordercomposition(id",{"_index":875,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["updatedpproductattribute",{"_index":925,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["updatedpproductattribute(id",{"_index":951,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["updatedpsize",{"_index":965,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["updatedpsize(id",{"_index":985,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["updatedpuser",{"_index":1028,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["updatedpuser(id",{"_index":1044,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["updatedpuserproj",{"_index":998,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["updatedpuserproj(id",{"_index":1018,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["updateimagefailed",{"_index":667,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateimagesuccess",{"_index":623,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateon",{"_index":481,"title":{},"body":{"interfaces/CartItem.html":{}}}],["updateproduct",{"_index":1125,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproduct(id",{"_index":1149,"title":{},"body":{"injectables/ProductsService.html":{}}}],["updateproductfailed",{"_index":669,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateproductsuccess",{"_index":625,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofile",{"_index":684,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofilefailed",{"_index":639,"title":{},"body":{"injectables/ConfigService.html":{}}}],["updateprofilesuccess",{"_index":592,"title":{},"body":{"injectables/ConfigService.html":{}}}],["url",{"_index":342,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/ShopCartService.html":{}}}],["url.createobjecturl(blob",{"_index":818,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["use",{"_index":1453,"title":{},"body":{"index.html":{}}}],["user",{"_index":233,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"coverage.html":{}}}],["user.dppassword",{"_index":434,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dpphonenumber",{"_index":435,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dpusername",{"_index":433,"title":{},"body":{"injectables/AuthService.html":{}}}],["userachievement",{"_index":1117,"title":{},"body":{"interfaces/IUserHasAchievement.html":{}}}],["userachievementsrepository",{"_index":499,"title":{},"body":{"interfaces/CartItem.html":{}}}],["userachievementsrepositoryservice",{"_index":471,"title":{},"body":{"interfaces/CartItem.html":{}}}],["userachievementsservice",{"_index":41,"title":{"injectables/UserAchievementsService.html":{}},"body":{"components/AboutComponent.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{},"coverage.html":{}}}],["userhasachievement",{"_index":1116,"title":{},"body":{"interfaces/IUserHasAchievement.html":{}}}],["username",{"_index":408,"title":{},"body":{"injectables/AuthService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/UserAchievementsService.html":{}}}],["userproj",{"_index":367,"title":{},"body":{"injectables/AuthProjService.html":{},"interfaces/IDpUserProj.html":{}}}],["userproj.login",{"_index":387,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["userproj.password",{"_index":388,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["userprojid",{"_index":350,"title":{},"body":{"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["userprojs",{"_index":993,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["users",{"_index":1013,"title":{},"body":{"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{}}}],["users.service.ts",{"_index":1023,"title":{},"body":{"injectables/DpUsersService.html":{},"coverage.html":{}}}],["users.service.ts:110",{"_index":1036,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:16",{"_index":1029,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:31",{"_index":1039,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:46",{"_index":1042,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:70",{"_index":1031,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["users.service.ts:95",{"_index":1045,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["using",{"_index":1405,"title":{},"body":{"index.html":{}}}],["ux",{"_index":141,"title":{},"body":{"components/AboutComponent.html":{}}}],["value",{"_index":65,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/ConfigService.html":{},"injectables/DpCategoriesService.html":{},"injectables/DpImagesService.html":{},"injectables/DpOrderCompositionsService.html":{},"injectables/DpOrdersService.html":{},"injectables/DpProductAttributesService.html":{},"injectables/DpSizesService.html":{},"injectables/DpUserProjsService.html":{},"injectables/DpUsersService.html":{},"injectables/ProductsService.html":{},"injectables/ShopCartService.html":{},"injectables/UserAchievementsService.html":{}}}],["var",{"_index":157,"title":{},"body":{"components/AboutComponent.html":{}}}],["variables.css",{"_index":251,"title":{},"body":{"components/AboutComponent.html":{}}}],["vasya",{"_index":1071,"title":{},"body":{"interfaces/IDpOrder.html":{},"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{},"interfaces/IUserHasAchievement.html":{}}}],["vasya@example.com",{"_index":1105,"title":{},"body":{"interfaces/IDpUser.html":{},"interfaces/IDpUserProj.html":{}}}],["version",{"_index":1406,"title":{},"body":{"index.html":{},"properties.html":{}}}],["vertical",{"_index":184,"title":{},"body":{"components/AboutComponent.html":{}}}],["viewproduct",{"_index":680,"title":{},"body":{"injectables/ConfigService.html":{}}}],["viewproductfailed",{"_index":635,"title":{},"body":{"injectables/ConfigService.html":{}}}],["viewproductsuccess",{"_index":588,"title":{},"body":{"injectables/ConfigService.html":{}}}],["visit",{"_index":1473,"title":{},"body":{"index.html":{}}}],["void",{"_index":61,"title":{},"body":{"components/AboutComponent.html":{},"injectables/AchievementsService.html":{},"injectables/AuthProjService.html":{},"injectables/AuthService.html":{},"interfaces/CartItem.html":{},"injectables/UserAchievementsService.html":{}}}],["webpack",{"_index":128,"title":{},"body":{"components/AboutComponent.html":{}}}],["website",{"_index":1070,"title":{},"body":{"interfaces/IDpOrder.html":{}}}],["weight",{"_index":203,"title":{},"body":{"components/AboutComponent.html":{}}}],["weight('bold",{"_index":205,"title":{},"body":{"components/AboutComponent.html":{}}}],["whenever",{"_index":1420,"title":{},"body":{"index.html":{}}}],["width",{"_index":145,"title":{},"body":{"components/AboutComponent.html":{}}}],["window.location.origin}/api/achievements",{"_index":320,"title":{},"body":{"injectables/AchievementsService.html":{}}}],["window.location.origin}/api/auth",{"_index":429,"title":{},"body":{"injectables/AuthService.html":{}}}],["window.location.origin}/api/authproj",{"_index":375,"title":{},"body":{"injectables/AuthProjService.html":{}}}],["window.location.origin}/api/dpcategories",{"_index":769,"title":{},"body":{"injectables/DpCategoriesService.html":{}}}],["window.location.origin}/api/dpimages",{"_index":830,"title":{},"body":{"injectables/DpImagesService.html":{}}}],["window.location.origin}/api/dpordercompositions",{"_index":877,"title":{},"body":{"injectables/DpOrderCompositionsService.html":{}}}],["window.location.origin}/api/dporders",{"_index":915,"title":{},"body":{"injectables/DpOrdersService.html":{}}}],["window.location.origin}/api/dpproductattributes",{"_index":956,"title":{},"body":{"injectables/DpProductAttributesService.html":{}}}],["window.location.origin}/api/dpsizes",{"_index":989,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["window.location.origin}/api/dpuserprojs",{"_index":1021,"title":{},"body":{"injectables/DpUserProjsService.html":{}}}],["window.location.origin}/api/dpusers",{"_index":1047,"title":{},"body":{"injectables/DpUsersService.html":{}}}],["window.location.origin}/api/products",{"_index":1152,"title":{},"body":{"injectables/ProductsService.html":{}}}],["window.location.origin}/api/shopcart",{"_index":1195,"title":{},"body":{"injectables/ShopCartService.html":{}}}],["window.open(url",{"_index":819,"title":{},"body":{"injectables/DpImagesService.html":{},"injectables/ShopCartService.html":{}}}],["wrap",{"_index":226,"title":{},"body":{"components/AboutComponent.html":{}}}],["xl",{"_index":971,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["xxl",{"_index":987,"title":{},"body":{"injectables/DpSizesService.html":{}}}],["zone.js",{"_index":1399,"title":{},"body":{"dependencies.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutComponent.html":{"url":"components/AboutComponent.html","title":"component - AboutComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AboutComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/data/page/about/about.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n\n            \n                imports\n                \n                            CommonModule\n                            TuiButton\n                            TuiTitle\n                            TuiAccordion\n                            TuiAccordionItem\n                            RouterLink\n                            CommonModule\n                            TuiLink\n                            TuiIcon\n                            TuiButton\n                            ThemeToggleComponent\n                            BackButtonComponent\n                            TuiAvatar\n                            AsyncPipe\n                            TuiIconPipe\n                \n            \n\n            \n                styleUrls\n                ./about.component.css,../../../styles/root.css\n            \n\n\n\n            \n                templateUrl\n                ./about.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                alertService\n                            \n                            \n                                    Private\n                                    Readonly\n                                configService\n                            \n                            \n                                    Private\n                                    Readonly\n                                subscriptions\n                            \n                            \n                                    Private\n                                    Readonly\n                                userAchievementsService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                navigateTo\n                            \n                            \n                                navigateToHome\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router)\n                    \n                \n                        \n                            \n                                Defined in src/app/data/page/about/about.component.ts:42\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        navigateTo\n                        \n                    \n                \n            \n            \n                \nnavigateTo(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        navigateToHome\n                        \n                    \n                \n            \n            \n                \nnavigateToHome()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:58\n                        \n                    \n\n\n            \n                \n                        Переходит на главную страницу\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/data/page/about/about.component.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        alertService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(TuiAlertService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        configService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(ConfigService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Subscription()\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userAchievementsService\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(UserAchievementsService)\n                    \n                \n                    \n                        \n                                Defined in src/app/data/page/about/about.component.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, ChangeDetectionStrategy, inject, OnInit, OnDestroy, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { AsyncPipe, CommonModule } from '@angular/common';\nimport { TuiButton, TuiTitle, TuiAlertService, TuiIcon, TuiIconPipe, TuiLink } from '@taiga-ui/core';\nimport { TuiAccordion, TuiAccordionItem, TuiAvatar } from '@taiga-ui/kit';\nimport { Subscription } from 'rxjs';\nimport { Router, RouterLink } from '@angular/router';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\nimport { BackButtonComponent } from '../../components/back-button/back-button.component';\nimport { ThemeToggleComponent } from '../../components/theme-toggle/theme-toggle.component';\nimport { AuthService } from '../../../services/auth.service';\n\n\n@Component({\n  selector: 'app-about',\n imports: [\n    CommonModule,\n    TuiButton,\n    TuiTitle,\n    TuiAccordion,\n    TuiAccordionItem,\n    RouterLink,\n     CommonModule,\n    TuiLink,\n    TuiIcon,\n    TuiButton,\n    ThemeToggleComponent,\n    BackButtonComponent,\n    TuiAvatar,\n    AsyncPipe,\n    TuiIconPipe,\n  ],\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css', '../../../styles/root.css'],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AboutComponent {\nprivate readonly userAchievementsService = inject(UserAchievementsService);\n  private readonly configService = inject(ConfigService);\n  private readonly alertService = inject(TuiAlertService);\n  private readonly subscriptions = new Subscription();\n \n  constructor(\n    private router: Router,\n  ) {}\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n navigateTo(path: string): void {\n    this.router.navigate([path]);\n  }\n  /**\n   * Переходит на главную страницу\n   */\n  navigateToHome(): void {\n    this.navigateTo('/');\n  }\n}\n    \n\n    \n        \n\n  \n    Этот интерактивный образовательный тренажер разработан для обучения разработчиков ПО, которые тестируют\n    веб-приложения. Он имитирует реальный интернет-магазин, позволяя практиковаться в разработке\n    фронтенда (Angular, Taiga UI) и взаимодействии с бэкендом (ASP.NET Core, MSSQL). Тренажер\n    включает тест-кейсы с 50% имитацией сбоев сервера для обучения обработке ошибок.\n  \n  \n    Документирование: Все сервисы и интерфейсы снабжены подробными JSDoc-комментариями с примерами\n    использования (см. example в сервисах). Это облегчает понимание структуры данных и работы с API.\n  \n  \n    Тестирование API: Для автоматизации проверки работы API можно использовать Selenium. Например, вы\n    можете реализовать тесты, которые выполняют те же действия, что и в example у сервисов: добавление\n    товара в корзину, оформление заказа, регистрацию пользователя и т.д. Selenium позволяет эмулировать действия\n    пользователя в браузере и проверять корректность работы фронтенда и взаимодействия с сервером.\n  \n\n\n\n  \n    \n      \n      Возможности тренажера\n    \n    \n      \n        \n          Каталог товаров: Просматривайте товары, переходите к детальной информации о продукте.\n        \n        \n          Корзина: Добавляйте товары, изменяйте количество, удаляйте позиции и оформляйте заказ.\n        \n        \n          Авторизация и регистрация: Практикуйтесь в реализации входа и создания учетной записи.\n        \n        \n          Система тест-кейсов: Выполняйте действия (вход, покупка, смена темы и т.д.) с 50% имитацией\n          сбоев сервера для обучения обработке ошибок.\n        \n        \n          Темы интерфейса: Переключайтесь между светлой и тёмной темой.\n        \n        \n          Управление контентом: Создавайте и редактируйте продукты, категории и изображения через\n          диалоговые окна.\n        \n        \n          Адаптивный дизайн: Тренажер оптимизирован для десктопов, планшетов и мобильных устройств.\n        \n      \n    \n  \n\n  \n    \n      \n      Технологии\n    \n    \n      \n        \n          Фронтенд: Angular 19, TypeScript, Taiga UI, RxJS, Angular Reactive Forms, CSS.\n        \n        \n          Бэкенд: ASP.NET Core 8, RESTful API, MSSQL, контроллеры.\n        \n        \n          Интеграция: HTTP-запросы через HttpClient, прокси для API, JWT-авторизация.\n        \n        \n          Инструменты: Angular CLI, Webpack, ESLint, Prettier.\n        \n      \n    \n  \n\n  \n    \n      \n      Архитектура\n    \n    \n      \n        Тренажер использует простую и понятную архитектуру, подходящую для образовательных целей:\n      \n      \n        \n          Фронтенд: Модульная структура с standalone-компонентами, сервисы для бизнес-логики, RxJS для\n          управления состоянием.\n        \n        \n          Бэкенд: ASP.NET Core контроллеры, прямое взаимодействие с MSSQL через Entity Framework Core.\n        \n        \n          Взаимодействие: REST API с обработкой HTTP-статусов (200, 401, 404, 500), централизованная\n          обработка ошибок.\n        \n        \n          Оптимизация: ChangeDetectionStrategy.OnPush, ленивая загрузка модулей, мемоизация.\n        \n      \n    \n  \n\n  \n    \n      \n      Особенности\n    \n    \n      \n        \n          Имитация сбоев: 50% вероятность серверных ошибок в тест-кейсах для обучения устойчивости\n          приложений.\n        \n        \n          Уведомления: TuiAlertService для информирования об успехах и ошибках.\n        \n        \n          Доступность: ARIA-атрибуты, управление фокусом через TuiAutoFocus.\n        \n        \n          UX: Плавные анимации, интуитивные диалоги, кастомизированные Taiga UI компоненты.\n        \n        \n          Обучение: Тренажер разработан для практики разработки, тестирования и отладки веб-приложений.\n        \n      \n    \n  \n\n\n\n  Перейти в каталог\n  На главную\n  \n\n    \n\n    \n                \n                    ./about.component.css\n                \n                @import '../../../styles/variables.css';\n\n.about-page {\n  max-width: 90%; /* Относительная ширина для гибкости */\n  width: min(50rem, 90vw); /* Ограничение ширины ≈ 800px при базовом 1rem = 16px */\n  margin: 1rem auto; /* tui.spacing(4) ≈ 16px → 1rem */\n  padding: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\n  background: var(--tui-base-01);\n  border-radius: 0.5rem; /* tui.border-radius('l') ≈ 8px → 0.5rem */\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow); /* 4px → 0.25rem, 16px → 1rem */\n  box-sizing: border-box;\n}\n\n@media (max-width: 47.9375rem) { /* tui.breakpoint('sm') ≈ 767px → 47.9375rem */\n  .about-page {\n    margin: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n    padding: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n  }\n}\n\n.title-icon {\n  margin-left: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  color: var(--tui-primary);\n  vertical-align: middle; /* Четкое выравнивание с заголовком */\n}\n\n.about-section {\n  margin-bottom: 1rem; /* tui.spacing(4) ≈ 16px → 1rem */\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\n  line-height: 1.5;\n}\n\n.accordion-header {\n  display: flex;\n  align-items: center;\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  font-weight: 700; /* tui.font-weight('bold') */\n  font-size: 1.125rem; /* tui.font-size('l') ≈ 18px → 1.125rem */\n}\n\n.feature-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.feature-list li {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.25rem; /* tui.spacing(1) ≈ 4px → 0.25rem */\n  margin-bottom: 0.5rem; /* tui.spacing(2) ≈ 8px → 0.5rem */\n  font-size: 1rem; /* tui.font-size('m') ≈ 16px → 1rem */\n}\n\n.feature-list li::before {\n  content: '•';\n  color: var(--tui-primary);\n  font-size: 1.5rem;\n  line-height: 1;\n  margin-top: 0.125rem; /* Смещение для выравнивания с текстом */\n}\n\n.actions {\n    display: flex;\n    flex-direction: row;\n    gap: 1.5rem; /* увеличенный отступ между элементами */\n    justify-content: center;\n    align-items: center;\n    margin-top: 2rem; /* увеличенный отступ сверху от аккордеона */\n    margin-bottom: 1rem;\n    flex-wrap: wrap;\n    padding: 1rem 0 0 0;\n    border-top: 1px solid var(--tui-base-03, #e5e5e5); /* лёгкая линия для отделения */\n}\n\n.actions button,\n.actions tui-avatar,\n.actions .user-avatar {\n    margin: 0;\n}\n\n.user-avatar {\n    margin-left: 1.5rem;\n    margin-right: 0.5rem;\n    cursor: pointer;\n    box-shadow: 0 2px 8px var(--tui-shadow, rgba(0,0,0,0.08));\n    transition: box-shadow 0.2s, transform 0.2s;\n}\n.user-avatar:hover {\n    box-shadow: 0 4px 16px var(--tui-shadow, rgba(0,0,0,0.16));\n    transform: scale(1.05);\n}\n\n@media (max-width: 47.9375rem) {\n    .actions {\n        flex-direction: column;\n        gap: 1rem;\n        align-items: center;\n        margin-top: 2rem;\n        padding-top: 0.5rem;\n    }\n    .user-avatar {\n        margin: 0.5rem 0 0 0;\n    }\n}\n\n/* Замените их на [data-theme=\"dark\"] */\n[data-theme=\"dark\"] .about-page {\n  background: var(--tui-base-02); /* Используйте правильную переменную для фона */\n  box-shadow: 0 0.25rem 1rem var(--tui-shadow);\n}\n\n[data-theme=\"dark\"] .about-section,\n[data-theme=\"dark\"] .feature-list li {\n  color: var(--text-color-dark); /* Светлый цвет текста */\n}\n\n\n                \n                    ../../../styles/root.css\n                \n                @import 'variables.css';\n@import 'buttons.css';\n@import 'cards.css';\n@import 'navigation.css';\n@import 'header.css';\n@import 'carousel.css';\n@import 'icons.css';\n@import 'layout.css';\n@import 'tables.css';\n@import 'typography.css';\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      Этот интерактивный образовательный тренажер разработан для обучения разработчиков ПО, которые тестируют    веб-приложения. Он имитирует реальный интернет-магазин, позволяя практиковаться в разработке    фронтенда (Angular, Taiga UI) и взаимодействии с бэкендом (ASP.NET Core, MSSQL). Тренажер    включает тест-кейсы с 50% имитацией сбоев сервера для обучения обработке ошибок.        Документирование: Все сервисы и интерфейсы снабжены подробными JSDoc-комментариями с примерами    использования (см. example в сервисах). Это облегчает понимание структуры данных и работы с API.        Тестирование API: Для автоматизации проверки работы API можно использовать Selenium. Например, вы    можете реализовать тесты, которые выполняют те же действия, что и в example у сервисов: добавление    товара в корзину, оформление заказа, регистрацию пользователя и т.д. Selenium позволяет эмулировать действия    пользователя в браузере и проверять корректность работы фронтенда и взаимодействия с сервером.                    Возможности тренажера                                Каталог товаров: Просматривайте товары, переходите к детальной информации о продукте.                          Корзина: Добавляйте товары, изменяйте количество, удаляйте позиции и оформляйте заказ.                          Авторизация и регистрация: Практикуйтесь в реализации входа и создания учетной записи.                          Система тест-кейсов: Выполняйте действия (вход, покупка, смена темы и т.д.) с 50% имитацией          сбоев сервера для обучения обработке ошибок.                          Темы интерфейса: Переключайтесь между светлой и тёмной темой.                          Управление контентом: Создавайте и редактируйте продукты, категории и изображения через          диалоговые окна.                          Адаптивный дизайн: Тренажер оптимизирован для десктопов, планшетов и мобильных устройств.                                      Технологии                                Фронтенд: Angular 19, TypeScript, Taiga UI, RxJS, Angular Reactive Forms, CSS.                          Бэкенд: ASP.NET Core 8, RESTful API, MSSQL, контроллеры.                          Интеграция: HTTP-запросы через HttpClient, прокси для API, JWT-авторизация.                          Инструменты: Angular CLI, Webpack, ESLint, Prettier.                                      Архитектура                      Тренажер использует простую и понятную архитектуру, подходящую для образовательных целей:                              Фронтенд: Модульная структура с standalone-компонентами, сервисы для бизнес-логики, RxJS для          управления состоянием.                          Бэкенд: ASP.NET Core контроллеры, прямое взаимодействие с MSSQL через Entity Framework Core.                          Взаимодействие: REST API с обработкой HTTP-статусов (200, 401, 404, 500), централизованная          обработка ошибок.                          Оптимизация: ChangeDetectionStrategy.OnPush, ленивая загрузка модулей, мемоизация.                                      Особенности                                Имитация сбоев: 50% вероятность серверных ошибок в тест-кейсах для обучения устойчивости          приложений.                          Уведомления: TuiAlertService для информирования об успехах и ошибках.                          Доступность: ARIA-атрибуты, управление фокусом через TuiAutoFocus.                          UX: Плавные анимации, интуитивные диалоги, кастомизированные Taiga UI компоненты.                          Обучение: Тренажер разработан для практики разработки, тестирования и отладки веб-приложений.                      Перейти в каталог  На главную  '\n    var COMPONENTS = [{'name': 'AboutComponent', 'selector': 'app-about'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AboutComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AchievementsService.html":{"url":"injectables/AchievementsService.html","title":"injectable - AchievementsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AchievementsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/achievements.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с тест-кейсами (Achievements).\nПозволяет получать, создавать, обновлять и удалять тест-кейсы через API.\nExample :// Получить все тест-кейсы (GET):\nGET /api/Achievements// Получить тест-кейс по id (GET):\nGET /api/Achievements/1\n// Создать тест-кейс (POST):\nPOST /api/Achievements\nBody:\n{\n  \"achievementId\": 0,\n  \"title\": \"Новое достижение\",\n  \"textAchievement\": \"Описание достижения\"\n}\n// Обновить тест-кейс (PUT):\nPUT /api/Achievements/1\nBody:\n{\n  \"achievementId\": 1,\n  \"title\": \"Обновлённое достижение\",\n  \"textAchievement\": \"Новое описание\"\n}\n// Удалить тест-кейс (DELETE):\nDELETE /api/Achievements/1\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createAchievement\n                            \n                            \n                                deleteAchievement\n                            \n                            \n                                getAchievementById\n                            \n                            \n                                getAllAchievements\n                            \n                            \n                                unlockAchievement\n                            \n                            \n                                updateAchievement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/achievements.service.ts:44\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createAchievement\n                        \n                    \n                \n            \n            \n                \ncreateAchievement(achievement: IAchievement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Создаёт новый тест-кейс.\nExample :// POST /api/Achievements\n// Body:\n// {\n//   \"achievementId\": 0,\n//   \"title\": \"Новый тест-кейс\",\n//   \"textAchievement\": \"Описание тест-кейса\"\n// }\nthis.achievementsService.createAchievement({\n  achievementId: 0,\n  title: 'Новый тест-кейс',\n  textAchievement: 'Описание тест-кейса'\n}).subscribe(newAch => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                achievement\n                                            \n                                                            IAchievement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный тест-кейс.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteAchievement\n                        \n                    \n                \n            \n            \n                \ndeleteAchievement(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Удаляет тест-кейс по идентификатору.\nExample :// DELETE /api/Achievements/1\nthis.achievementsService.deleteAchievement(1).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAchievementById\n                        \n                    \n                \n            \n            \n                \ngetAchievementById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Получает тест-кейс по его идентификатору.\nExample :// GET /api/Achievements/1\nthis.achievementsService.getAchievementById(1).subscribe(ach => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Тест-кейс.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllAchievements\n                        \n                    \n                \n            \n            \n                \ngetAllAchievements()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Получает список всех тест-кейсов.\nExample :// GET /api/Achievements\nthis.achievementsService.getAllAchievements().subscribe(list => console.log(list));\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список тест-кейсов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlockAchievement\n                        \n                    \n                \n            \n            \n                \nunlockAchievement(achievementTitle: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Разблокирует тест-кейс по названию.\nExample :this.achievementsService.unlockAchievement('First Login');\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                achievementTitle\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Название тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateAchievement\n                        \n                    \n                \n            \n            \n                \nupdateAchievement(id: number, achievement: IAchievement)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/achievements.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Обновляет существующее тест-кейс.\nExample :// PUT /api/Achievements/1\n// Body:\n// {\n//   \"achievementId\": 1,\n//   \"title\": \"Обновлённый тест-кейс\",\n//   \"textAchievement\": \"Новое описание\"\n// }\nthis.achievementsService.updateAchievement(1, {\n  achievementId: 1,\n  title: 'Обновлённый тест-кейс',\n  textAchievement: 'Новое описание'\n}).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                        \n                                                achievement\n                                            \n                                                            IAchievement\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Achievements`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/achievements.service.ts:44\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { IAchievement } from '../interface/IAchievement';\n\n/**\n * Сервис для работы с тест-кейсами (Achievements).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять тест-кейсы через API.\n *\n * @example\n * // Получить все тест-кейсы (GET):\n * GET /api/Achievements\n *\n * // Получить тест-кейс по id (GET):\n * GET /api/Achievements/1\n *\n * // Создать тест-кейс (POST):\n * POST /api/Achievements\n * Body:\n * {\n *   \"achievementId\": 0,\n *   \"title\": \"Новое достижение\",\n *   \"textAchievement\": \"Описание достижения\"\n * }\n *\n * // Обновить тест-кейс (PUT):\n * PUT /api/Achievements/1\n * Body:\n * {\n *   \"achievementId\": 1,\n *   \"title\": \"Обновлённое достижение\",\n *   \"textAchievement\": \"Новое описание\"\n * }\n *\n * // Удалить тест-кейс (DELETE):\n * DELETE /api/Achievements/1\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AchievementsService {\n  private baseUrl = `${window.location.origin}/api/Achievements`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех тест-кейсов.\n   *\n   * @returns {Observable} Список тест-кейсов.\n   * @example\n   * // GET /api/Achievements\n   * this.achievementsService.getAllAchievements().subscribe(list => console.log(list));\n   */\n  getAllAchievements(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает тест-кейс по его идентификатору.\n   *\n   * @param {number} id Идентификатор тест-кейса.\n   * @returns {Observable} Тест-кейс.\n   * @example\n   * // GET /api/Achievements/1\n   * this.achievementsService.getAchievementById(1).subscribe(ach => ...);\n   */\n  getAchievementById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый тест-кейс.\n   *\n   * @param {IAchievement} achievement Объект тест-кейса.\n   * @returns {Observable} Созданный тест-кейс.\n   * @example\n   * // POST /api/Achievements\n   * // Body:\n   * // {\n   * //   \"achievementId\": 0,\n   * //   \"title\": \"Новый тест-кейс\",\n   * //   \"textAchievement\": \"Описание тест-кейса\"\n   * // }\n   * this.achievementsService.createAchievement({\n   *   achievementId: 0,\n   *   title: 'Новый тест-кейс',\n   *   textAchievement: 'Описание тест-кейса'\n   * }).subscribe(newAch => ...);\n   */\n  createAchievement(achievement: IAchievement): Observable {\n    return this.http.post(this.baseUrl, achievement);\n  }\n\n  /**\n   * Обновляет существующее тест-кейс.\n   *\n   * @param {number} id Идентификатор тест-кейса.\n   * @param {IAchievement} achievement Обновлённый объект тест-кейса.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/Achievements/1\n   * // Body:\n   * // {\n   * //   \"achievementId\": 1,\n   * //   \"title\": \"Обновлённый тест-кейс\",\n   * //   \"textAchievement\": \"Новое описание\"\n   * // }\n   * this.achievementsService.updateAchievement(1, {\n   *   achievementId: 1,\n   *   title: 'Обновлённый тест-кейс',\n   *   textAchievement: 'Новое описание'\n   * }).subscribe(() => ...);\n   */\n  updateAchievement(id: number, achievement: IAchievement): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, achievement);\n  }\n\n  /**\n   * Удаляет тест-кейс по идентификатору.\n   *\n   * @param {number} id Идентификатор тест-кейса.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/Achievements/1\n   * this.achievementsService.deleteAchievement(1).subscribe(() => ...);\n   */\n  deleteAchievement(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Разблокирует тест-кейс по названию.\n   *\n   * @param {string} achievementTitle Название тест-кейса.\n   * @example\n   * this.achievementsService.unlockAchievement('First Login');\n   */\n  unlockAchievement(achievementTitle: string): void {\n    console.log(`test-case unlocked: ${achievementTitle}`);\n    // Здесь вы можете добавить логику для обновления состояния тест-кейса на сервере или локально\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthProjService.html":{"url":"injectables/AuthProjService.html","title":"injectable - AuthProjService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthProjService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth-proj.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для авторизации и регистрации пользователей проекта.\nПозволяет выполнять вход, регистрацию, выход и отслеживать статус авторизации пользователя.\nРаботает с backend-контроллером по адресу /api/AuthProj.\nExample :// Вход пользователя (POST):\n// URL: /api/AuthProj/login\n// Body:\n// {\n//   \"login\": \"user\",\n//   \"password\": \"pass\"\n// }\nthis.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});// Регистрация пользователя (POST):\n// URL: /api/AuthProj/register\n// Body:\n// {\n//   \"login\": \"newuser\",\n//   \"password\": \"newpass\"\n// }\nthis.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                    Public\n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                isAuthenticatedSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkAuthStatus\n                            \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                register\n                            \n                            \n                                setAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth-proj.service.ts:47\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkAuthStatus\n                        \n                    \n                \n            \n            \n                \ncheckAuthStatus()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Проверяет статус авторизации пользователя по наличию токена.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(userProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя.\nExample :// POST /api/AuthProj/login\n// Body:\n// {\n//   \"login\": \"user\",\n//   \"password\": \"pass\"\n// }\nthis.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя (логин и пароль).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном и ID пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Выполняет выход пользователя, очищая локальное хранилище.\nExample :this.authProjService.logout();\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(userProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\nExample :// POST /api/AuthProj/register\n// Body:\n// {\n//   \"login\": \"newuser\",\n//   \"password\": \"newpass\"\n// }\nthis.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя (логин и пароль).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном и ID пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAuthenticated\n                        \n                    \n                \n            \n            \n                \nsetAuthenticated(isAuthenticated: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth-proj.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Устанавливает статус авторизации пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isAuthenticated\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый статус авторизации.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/AuthProj`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.isAuthenticatedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:47\n                        \n                    \n\n            \n                \n                    Observable для отслеживания статуса авторизации пользователя.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isAuthenticatedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth-proj.service.ts:42\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { IDpUserProj } from '../interface/IDpUserProj';\n\n/**\n * Сервис для авторизации и регистрации пользователей проекта.\n *\n * @remarks\n * Позволяет выполнять вход, регистрацию, выход и отслеживать статус авторизации пользователя.\n * Работает с backend-контроллером по адресу `/api/AuthProj`.\n *\n * @example\n * // Вход пользователя (POST):\n * // URL: /api/AuthProj/login\n * // Body:\n * // {\n * //   \"login\": \"user\",\n * //   \"password\": \"pass\"\n * // }\n * this.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n *\n * // Регистрация пользователя (POST):\n * // URL: /api/AuthProj/register\n * // Body:\n * // {\n * //   \"login\": \"newuser\",\n * //   \"password\": \"newpass\"\n * // }\n * this.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthProjService {\n  private baseUrl = `${window.location.origin}/api/AuthProj`;\n  private isAuthenticatedSubject = new BehaviorSubject(false);\n\n  /**\n   * Observable для отслеживания статуса авторизации пользователя.\n   */\n  public isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.checkAuthStatus();\n  }\n\n  /**\n   * Выполняет вход пользователя.\n   *\n   * @param {IDpUserProj} userProj Данные пользователя (логин и пароль).\n   * @returns {Observable} Ответ с токеном и ID пользователя.\n   * @example\n   * // POST /api/AuthProj/login\n   * // Body:\n   * // {\n   * //   \"login\": \"user\",\n   * //   \"password\": \"pass\"\n   * // }\n   * this.authProjService.login({ login: 'user', password: 'pass' }).subscribe(res => {\n   *   // res: { token: string, userProjId: number }\n   * });\n   */\n  login(userProj: IDpUserProj): Observable {\n    const payload = {\n      login: userProj.login,\n      password: userProj.password,\n    };\n    return this.http.post(`${this.baseUrl}/login`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('projToken', response.token);\n          localStorage.setItem('userProjId', response.userProjId.toString());\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {IDpUserProj} userProj Данные пользователя (логин и пароль).\n   * @returns {Observable} Ответ с токеном и ID пользователя.\n   * @example\n   * // POST /api/AuthProj/register\n   * // Body:\n   * // {\n   * //   \"login\": \"newuser\",\n   * //   \"password\": \"newpass\"\n   * // }\n   * this.authProjService.register({ login: 'newuser', password: 'newpass' }).subscribe(res => {\n   *   // res: { token: string, userProjId: number }\n   * });\n   */\n  register(userProj: IDpUserProj): Observable {\n    const payload = {\n      login: userProj.login,\n      password: userProj.password\n    };\n    return this.http.post(`${this.baseUrl}/register`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('projToken', response.token);\n          localStorage.setItem('userProjId', response.userProjId.toString());\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Устанавливает статус авторизации пользователя.\n   *\n   * @param {boolean} isAuthenticated Новый статус авторизации.\n   */\n  setAuthenticated(isAuthenticated: boolean): void {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n\n  /**\n   * Проверяет статус авторизации пользователя по наличию токена.\n   */\n  checkAuthStatus(): void {\n    const token = localStorage.getItem('projToken');\n    this.setAuthenticated(!!token);\n  }\n\n  /**\n   * Выполняет выход пользователя, очищая локальное хранилище.\n   *\n   * @example\n   * this.authProjService.logout();\n   */\n  logout(): void {\n    localStorage.removeItem('projToken');\n    localStorage.removeItem('token');\n    localStorage.removeItem('userProjId');\n    this.setAuthenticated(false);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для авторизации и регистрации пользователей.\nПозволяет выполнять регистрацию, вход, выход и отслеживать статус авторизации пользователя.\nРаботает с backend-контроллером по адресу /api/Auth.\nExample :// Регистрация пользователя (POST):\n// URL: /api/Auth/register\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.register({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { message: \"User registered successfully.\" }\n});// Вход пользователя (POST):\n// URL: /api/Auth/login\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.login({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { token: string, userProjId: number }\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                            \n                                isAuthenticated$\n                            \n                            \n                                    Private\n                                isAuthenticatedSubject\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                register\n                            \n                            \n                                setAuthenticated\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/auth.service.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(user: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Выполняет вход пользователя.\nExample :// POST /api/Auth/login\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.login({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { token: string, userProjId: number, achievementId: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном, ID пользователя и достижением.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Выполняет выход пользователя, очищая локальное хранилище.\nExample :this.authService.logout();\n\n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(user: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Регистрирует нового пользователя.\nExample :// POST /api/Auth/register\n// Body:\n// {\n//   \"username\": \"user\",\n//   \"password\": \"pass\",\n//   \"phoneNumber\": \"79990001122\"\n// }\nthis.authService.register({\n  dpUsername: 'user',\n  dpPassword: 'pass',\n  dpPhoneNumber: '79990001122'\n}).subscribe(res => {\n  // res: { message: \"User registered successfully.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Ответ с токеном, ID пользователя и достижением.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAuthenticated\n                        \n                    \n                \n            \n            \n                \nsetAuthenticated(isAuthenticated: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/auth.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Устанавливает статус авторизации пользователя.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isAuthenticated\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Новый статус авторизации.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Auth`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isAuthenticated$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.isAuthenticatedSubject.asObservable()\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:57\n                        \n                    \n\n            \n                \n                    Observable для отслеживания статуса авторизации пользователя.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        isAuthenticatedSubject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/services/auth.service.ts:52\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { IDpUser } from '../interface/IDpUser';\n\n/**\n * Сервис для авторизации и регистрации пользователей.\n *\n * @remarks\n * Позволяет выполнять регистрацию, вход, выход и отслеживать статус авторизации пользователя.\n * Работает с backend-контроллером по адресу `/api/Auth`.\n *\n * @example\n * // Регистрация пользователя (POST):\n * // URL: /api/Auth/register\n * // Body:\n * // {\n * //   \"username\": \"user\",\n * //   \"password\": \"pass\",\n * //   \"phoneNumber\": \"79990001122\"\n * // }\n * this.authService.register({\n *   dpUsername: 'user',\n *   dpPassword: 'pass',\n *   dpPhoneNumber: '79990001122'\n * }).subscribe(res => {\n *   // res: { message: \"User registered successfully.\" }\n * });\n *\n * // Вход пользователя (POST):\n * // URL: /api/Auth/login\n * // Body:\n * // {\n * //   \"username\": \"user\",\n * //   \"password\": \"pass\",\n * //   \"phoneNumber\": \"79990001122\"\n * // }\n * this.authService.login({\n *   dpUsername: 'user',\n *   dpPassword: 'pass',\n *   dpPhoneNumber: '79990001122'\n * }).subscribe(res => {\n *   // res: { token: string, userProjId: number }\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private baseUrl = `${window.location.origin}/api/Auth`;\n  private isAuthenticatedSubject = new BehaviorSubject(false);\n\n  /**\n   * Observable для отслеживания статуса авторизации пользователя.\n   */\n  isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Устанавливает статус авторизации пользователя.\n   *\n   * @param {boolean} isAuthenticated Новый статус авторизации.\n   */\n  setAuthenticated(isAuthenticated: boolean): void {\n    this.isAuthenticatedSubject.next(isAuthenticated);\n  }\n\n  /**\n   * Регистрирует нового пользователя.\n   *\n   * @param {IDpUser} user Данные пользователя.\n   * @returns {Observable} Ответ с токеном, ID пользователя и достижением.\n   * @example\n   * // POST /api/Auth/register\n   * // Body:\n   * // {\n   * //   \"username\": \"user\",\n   * //   \"password\": \"pass\",\n   * //   \"phoneNumber\": \"79990001122\"\n   * // }\n   * this.authService.register({\n   *   dpUsername: 'user',\n   *   dpPassword: 'pass',\n   *   dpPhoneNumber: '79990001122'\n   * }).subscribe(res => {\n   *   // res: { message: \"User registered successfully.\" }\n   * });\n   */\n  register(user: IDpUser): Observable {\n    const payload = {\n      username: user.dpUsername,\n      password: user.dpPassword,\n      phoneNumber: user.dpPhoneNumber || '0000000000'\n    };\n    return this.http.post(`${this.baseUrl}/register`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n /**\n   * Выполняет вход пользователя.\n   *\n   * @param {IDpUser} user Данные пользователя.\n   * @returns {Observable} Ответ с токеном, ID пользователя и достижением.\n   * @example\n   * // POST /api/Auth/login\n   * // Body:\n   * // {\n   * //   \"username\": \"user\",\n   * //   \"password\": \"pass\",\n   * //   \"phoneNumber\": \"79990001122\"\n   * // }\n   * this.authService.login({\n   *   dpUsername: 'user',\n   *   dpPassword: 'pass',\n   *   dpPhoneNumber: '79990001122'\n   * }).subscribe(res => {\n   *   // res: { token: string, userProjId: number, achievementId: number }\n   * });\n   */\n  login(user: IDpUser): Observable {\n    const payload = {\n      username: user.dpUsername,\n      password: user.dpPassword,\n      phoneNumber: user.dpPhoneNumber || '0000000000'\n    };\n    return this.http.post(`${this.baseUrl}/login`, payload).pipe(\n      tap(response => {\n        if (response.token) {\n          localStorage.setItem('token', response.token);\n          this.setAuthenticated(true);\n        }\n      })\n    );\n  }\n\n  /**\n   * Выполняет выход пользователя, очищая локальное хранилище.\n   *\n   * @example\n   * this.authService.logout();\n   */\n  logout(): void {\n    localStorage.removeItem('token');\n    this.setAuthenticated(false);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CartItem.html":{"url":"interfaces/CartItem.html","title":"interface - CartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/data/page/page-cart/page-cart.component.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ICartItem\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:     TuiDay\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     TuiDay\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AsyncPipe, CommonModule, CurrencyPipe, NgForOf, NgIf } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, CUSTOM_ELEMENTS_SCHEMA, inject, Inject, OnInit } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { TuiButton, TuiAppearance, TuiAlertService, TuiScrollbar, TuiIcon } from '@taiga-ui/core';\nimport { TuiTable, TuiComparator } from '@taiga-ui/addon-table';\nimport { TuiDay, tuiDefaultSort } from '@taiga-ui/cdk';\nimport { ICartItem } from '../../../interface/ICartItem';\nimport { ICartViewModel } from '../../../interface/ICartViewModel';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IUpdateCartRequest } from '../../../interface/IUpdateCartRequest';\nimport { ShopCartRepositoryService } from '../../../repositories/shop-cart-repository.service';\nimport { UserAchievementsRepositoryService } from '../../../repositories/user-achievements-repository.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { UserAchievementsService } from '../../../services/user-achievements.service';\n\ninterface CartItem extends ICartItem {\n  readonly date: TuiDay;\n}\n\n/**\n * @ignore\n */\n@Component({\n  selector: 'app-page-cart',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    CurrencyPipe,\n    FormsModule,\n    NgForOf,\n    NgIf,\n    TuiButton,\n    TuiTable,\n    CommonModule,\n    TuiScrollbar,\n    TuiIcon\n  ],\n  templateUrl: './page-cart.component.html',\n  styleUrls: ['./page-cart.component.css', '../../../styles/root.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class PageCartComponent implements OnInit {\n  protected readonly options = { updateOn: 'blur' } as const;\n  protected cartItems: CartItem[] = [];\n  protected readonly columns = ['productTitle', 'price', 'quantity', 'totalPrice', 'actions'] as const;\n  protected isLoading = false;\n  private readonly userAchievementsService = inject(UserAchievementsService);\n  protected readonly totalSorter: TuiComparator = (a, b) =>\n    tuiDefaultSort(a.price * a.quantity, b.price * b.quantity);\n\n  constructor(\n    private cartService: ShopCartRepositoryService,\n    private cdr: ChangeDetectorRef,\n    public router: Router,\n    private userAchievementsRepository: UserAchievementsRepositoryService,\n    private configService: ConfigService,\n    @Inject(TuiAlertService) private readonly alertService: TuiAlertService\n  ) { }\n\n  ngOnInit(): void {\n    this.loadCartItems();\n  }\n\n  private loadCartItems(): void {\n    this.cartService.getCart().subscribe({\n      next: (cartViewModel: ICartViewModel) => {\n        console.log(cartViewModel);\n        this.cartItems = cartViewModel.cartItems.map(item => ({\n          ...item,\n          date: TuiDay.currentLocal(),\n        }));\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        console.error('Ошибка при загрузке корзины:', error);\n        this.alertService.open('Не удалось загрузить корзину. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected trackByIndex(index: number): number {\n    return index;\n  }\n\n  protected getTotal({ price, quantity }: CartItem): number {\n    return price * quantity;\n  }\n\n  protected getTotalAmount(): number {\n    return this.cartItems.reduce((sum, item) => sum + this.getTotal(item), 0);\n  }\n\n  increaseQuantity(item: CartItem): void {\n    const newQuantity = item.quantity + 1;\n    this.updateCartItemQuantity(item, newQuantity);\n  }\n\n  decreaseQuantity(item: CartItem): void {\n    if (item.quantity > 1) {\n      const newQuantity = item.quantity - 1;\n      this.updateCartItemQuantity(item, newQuantity);\n    }\n  }\n\n  removeFromCart(item: CartItem): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Тест-кейс: ошибка удаления товара из корзины!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось удалить товар (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.removeFromCart({ productId: item.productId, sizeId: item.sizeId }).subscribe({\n      next: () => {\n        this.cartItems = this.cartItems.filter(cartItem =>\n          !(cartItem.productId === item.productId && cartItem.sizeId === item.sizeId)\n        );\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartSuccess, 'Товар успешно удалён из корзины!')\n          .subscribe();\n        this.alertService.open('Товар удалён из корзины', { appearance: 'success' }).subscribe();\n      },\n      error: (error) => {\n        console.error('Ошибка при удалении товара из корзины:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.removeFromCartFailed, 'Ошибка удаления товара из корзины!')\n          .subscribe();\n        this.alertService.open('Не удалось удалить товар. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  checkout(): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n\n    if (this.cartItems.length === 0) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutEmptyCart, 'Тест-кейс: Попытка оформления пустой корзины!')\n        .subscribe();\n      this.alertService.open('Корзина пуста, добавьте товары перед оформлением', { appearance: 'error' }).subscribe();\n      return;\n    }\n\n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Тест-кейс: ошибка оформления заказа!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось оформить заказ (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    this.isLoading = true;\n    this.cartService.checkout().subscribe({\n      next: (response) => {\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutSuccess, 'Заказ успешно оформлен!')\n          .subscribe();\n        this.alertService.open('Заказ успешно оформлен!', { appearance: 'success' }).subscribe();\n        this.cartService.clearCart();\n        this.cartItems = [];\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.router.navigate(['/order-confirmation'], { state: { orderId: response.orderId } });\n      },\n      error: (error) => {\n        console.error('Ошибка при оформлении заказа:', error);\n        this.isLoading = false;\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.checkoutFailed, 'Ошибка оформления заказа!')\n          .subscribe();\n        this.alertService.open('Не удалось оформить заказ. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n      }\n    });\n  }\n\n  private updateCartItemQuantity(item: CartItem, newQuantity: number): void {\n    const userProjId = parseInt(localStorage.getItem('userProjId') || '0', 10);\n    \n    // Если включён режим \"всегда ошибка\" — только негативный тест-кейс\n    if (this.userAchievementsService.getAlwaysFailMode()) {\n      this.userAchievementsRepository\n        .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Тест-кейс: ошибка обновления количества товара!')\n        .subscribe();\n      this.alertService.open('Тест-кейс: не удалось обновить количество (режим всегда ошибка включён)', { appearance: 'error' }).subscribe();\n      return;\n    }\n    \n    const request: IUpdateCartRequest = {\n      productId: item.productId,\n      quantity: newQuantity,\n      sizeId: item.sizeId\n    };\n\n    this.cartItems = this.cartItems.map(cartItem =>\n      cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n        ? { ...cartItem, quantity: newQuantity }\n        : cartItem\n    );\n    this.cdr.markForCheck();\n\n    this.cartService.updateCart(request).subscribe({\n      next: (response) => {\n        if (response.success) {\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantitySuccess, 'Количество товара успешно обновлено!')\n            .subscribe();\n          this.alertService.open('Количество товара успешно обновлено', { appearance: 'success' }).subscribe();\n        } else {\n          this.cartItems = this.cartItems.map(cartItem =>\n            cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n              ? { ...cartItem, quantity: item.quantity }\n              : cartItem\n          );\n          this.cdr.markForCheck();\n          this.userAchievementsRepository\n            .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n            .subscribe();\n          this.alertService.open('Не удалось обновить количество. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        }\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      },\n      error: (error) => {\n        this.cartItems = this.cartItems.map(cartItem =>\n          cartItem.productId === item.productId && cartItem.sizeId === item.sizeId\n            ? { ...cartItem, quantity: item.quantity }\n            : cartItem\n        );\n        this.cdr.markForCheck();\n        this.userAchievementsRepository\n          .handleAchievement(userProjId, this.configService.achievementIds.updateCartQuantityFailed, 'Ошибка обновления количества товара!')\n          .subscribe();\n        this.alertService.open('Ошибка при обновлении количества. Попробуйте ещё раз!', { appearance: 'error' }).subscribe();\n        this.isLoading = false;\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  protected onValueChange(\n    value: CartItem[K],\n    key: K,\n    current: CartItem\n  ): void {\n    const updated = { ...current, [key]: value };\n    this.cartItems = this.cartItems.map((item) => (item === current ? updated : item));\n    this.cdr.markForCheck();\n  }\n\n  protected onSortChange(event: any): void {\n    // Логика сортировки, если нужна\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для хранения глобальных констант и конфигураций приложения.\nСодержит идентификаторы достижений, API endpoints и коды HTTP-статусов, используемые во всём приложении.\nExample :const id = this.configService.achievementIds.loginSuccess;\nconst url = this.configService.apiEndpoints.login;\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                achievementIds\n                            \n                            \n                                    Readonly\n                                apiEndpoints\n                            \n                            \n                                    Readonly\n                                httpStatusCodes\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        achievementIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    loginSuccess: 1,             // Успешный вход\n    registerSuccess: 2,          // Успешная регистрация\n    addToCartSuccess: 3,         // Добавление в корзину\n    checkoutSuccess: 4,          // Оформление заказа\n    viewProductSuccess: 5,       // Просмотр продукта\n    createProductSuccess: 6,     // Создание продукта\n    updateProfileSuccess: 7,     // Обновление профиля\n    addImageSuccess: 8,          // Добавление изображения\n    addCategorySuccess: 9,       // Добавление категории\n    switchToLightThemeSuccess: 10, // Светлая тема\n    switchToDarkThemeSuccess: 11, // Тёмная тема\n    removeFromCartSuccess: 12,   // Удаление из корзины\n    updateCartQuantitySuccess: 13, // Обновление количества\n    loadProductsSuccess: 14,     // Загрузка продуктов\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\n    navigateToProductSuccess: 16, // Навигация к продукту\n    toggleThemeSuccess: 17,      // Переключение темы\n    resetThemeSuccess: 18,       // Сброс темы\n    openProductDialogSuccess: 19, // Открытие диалога продукта\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\n    logoutProjSuccess: 22,       // Выход из системы\n    updateCategorySuccess: 23,   // Обновление категории\n    updateImageSuccess: 24,      // Обновление изображения\n    updateProductSuccess: 25,    // Обновление продукта\n    // Отрицательные тест-кейсы\n    loginFailed: 26,             // Ошибка входа\n    registerFailed: 27,          // Ошибка регистрации\n    addToCartFailed: 28,         // Ошибка добавления в корзину\n    checkoutFailed: 29,          // Ошибка оформления заказа\n    viewProductFailed: 30,       // Ошибка просмотра продукта\n    createProductFailed: 31,     // Ошибка создания продукта\n    updateProfileFailed: 32,     // Ошибка обновления профиля\n    addImageFailed: 33,          // Ошибка добавления изображения\n    addCategoryFailed: 34,       // Ошибка добавления категории\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\n    failedToLoad: 37,            // Ошибка загрузки\n    buttonNotWorking: 38,        // Ошибка кнопки\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\n    logoutProjFailed: 44,        // Ошибка выхода\n    updateCategoryFailed: 45,    // Ошибка обновления категории\n    updateImageFailed: 46,       // Ошибка обновления изображения\n    updateProductFailed: 47,     // Ошибка обновления продукта\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:23\n                        \n                    \n\n            \n                \n                    Идентификаторы достижений (успешные и неуспешные сценарии).\nExample :this.configService.achievementIds.addToCartSuccess\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        apiEndpoints\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    login: '/api/login',\n    register: '/api/register',\n    addToCart: '/api/cart/add',\n    checkout: '/api/checkout',\n    viewProduct: '/api/products',\n    createProduct: '/api/products/create',\n    updateProfile: '/api/profile/update',\n    addImage: '/api/products/add-image',\n    addCategory: '/api/categories/add',\n    switchTheme: '/api/settings/switch-theme',\n    removeFromCart: '/api/cart/remove',\n    updateCartQuantity: '/api/cart/update',\n    loadProducts: '/api/products/all',\n    loadProductInfo: '/api/products/info',\n    toggleTheme: '/api/settings/toggle-theme',\n    resetTheme: '/api/settings/reset-theme',\n    logoutProj: '/api/auth/logout-proj'\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:81\n                        \n                    \n\n            \n                \n                    Пути к API endpoint'ам.\nExample :this.configService.apiEndpoints.login\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        httpStatusCodes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    // 2xx: Успешные\n    success: 200,          // Успешный запрос\n    created: 201,          // Ресурс создан\n    noContent: 204,        // Успешно, но нет содержимого\n\n    // 3xx: Перенаправления\n    movedPermanently: 301, // Ресурс перемещён навсегда\n    found: 302,            // Ресурс временно перемещён\n\n    // 4xx: Ошибки клиента\n    badRequest: 400,       // Неверный запрос\n    unauthorized: 401,     // Неавторизован\n    forbidden: 403,        // Доступ запрещён\n    notFound: 404,         // Ресурс не найден\n    conflict: 409,         // Конфликт (например, дубликат)\n\n    // 5xx: Ошибки сервера\n    serverError: 500,      // Внутренняя ошибка сервера\n    serviceUnavailable: 503 // Сервис недоступен\n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/services/config.service.ts:107\n                        \n                    \n\n            \n                \n                    Коды HTTP-статусов для обработки ответов сервера.\nExample :if (response.status === this.configService.httpStatusCodes.success) { ... }\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\n\n/**\n * Сервис для хранения глобальных констант и конфигураций приложения.\n *\n * @remarks\n * Содержит идентификаторы достижений, API endpoints и коды HTTP-статусов, используемые во всём приложении.\n *\n * @example\n * const id = this.configService.achievementIds.loginSuccess;\n * const url = this.configService.apiEndpoints.login;\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfigService {\n  /**\n   * Идентификаторы достижений (успешные и неуспешные сценарии).\n   *\n   * @example\n   * this.configService.achievementIds.addToCartSuccess\n   */\n  readonly achievementIds = {\n    loginSuccess: 1,             // Успешный вход\n    registerSuccess: 2,          // Успешная регистрация\n    addToCartSuccess: 3,         // Добавление в корзину\n    checkoutSuccess: 4,          // Оформление заказа\n    viewProductSuccess: 5,       // Просмотр продукта\n    createProductSuccess: 6,     // Создание продукта\n    updateProfileSuccess: 7,     // Обновление профиля\n    addImageSuccess: 8,          // Добавление изображения\n    addCategorySuccess: 9,       // Добавление категории\n    switchToLightThemeSuccess: 10, // Светлая тема\n    switchToDarkThemeSuccess: 11, // Тёмная тема\n    removeFromCartSuccess: 12,   // Удаление из корзины\n    updateCartQuantitySuccess: 13, // Обновление количества\n    loadProductsSuccess: 14,     // Загрузка продуктов\n    loadProductInfoSuccess: 15,  // Загрузка информации о продукте\n    navigateToProductSuccess: 16, // Навигация к продукту\n    toggleThemeSuccess: 17,      // Переключение темы\n    resetThemeSuccess: 18,       // Сброс темы\n    openProductDialogSuccess: 19, // Открытие диалога продукта\n    openCategoryDialogSuccess: 20, // Открытие диалога категории\n    openImageDialogSuccess: 21,  // Открытие диалога изображения\n    logoutProjSuccess: 22,       // Выход из системы\n    updateCategorySuccess: 23,   // Обновление категории\n    updateImageSuccess: 24,      // Обновление изображения\n    updateProductSuccess: 25,    // Обновление продукта\n    // Отрицательные тест-кейсы\n    loginFailed: 26,             // Ошибка входа\n    registerFailed: 27,          // Ошибка регистрации\n    addToCartFailed: 28,         // Ошибка добавления в корзину\n    checkoutFailed: 29,          // Ошибка оформления заказа\n    viewProductFailed: 30,       // Ошибка просмотра продукта\n    createProductFailed: 31,     // Ошибка создания продукта\n    updateProfileFailed: 32,     // Ошибка обновления профиля\n    addImageFailed: 33,          // Ошибка добавления изображения\n    addCategoryFailed: 34,       // Ошибка добавления категории\n    switchToLightThemeFailed: 35, // Ошибка светлой темы\n    switchToDarkThemeFailed: 36, // Ошибка тёмной темы\n    failedToLoad: 37,            // Ошибка загрузки\n    buttonNotWorking: 38,        // Ошибка кнопки\n    removeFromCartFailed: 39,    // Ошибка удаления из корзины\n    updateCartQuantityFailed: 40, // Ошибка обновления количества\n    loadProductsFailed: 41,      // Ошибка загрузки продуктов\n    loadProductInfoFailed: 42,   // Ошибка загрузки информации о продукте\n    navigateToProductFailed: 43, // Ошибка навигации к продукту\n    logoutProjFailed: 44,        // Ошибка выхода\n    updateCategoryFailed: 45,    // Ошибка обновления категории\n    updateImageFailed: 46,       // Ошибка обновления изображения\n    updateProductFailed: 47,     // Ошибка обновления продукта\n    checkoutEmptyCart: 48,       // Пустая корзина (переназначено)\n  };\n\n  /**\n   * Пути к API endpoint'ам.\n   *\n   * @example\n   * this.configService.apiEndpoints.login\n   */\n  readonly apiEndpoints = {\n    login: '/api/login',\n    register: '/api/register',\n    addToCart: '/api/cart/add',\n    checkout: '/api/checkout',\n    viewProduct: '/api/products',\n    createProduct: '/api/products/create',\n    updateProfile: '/api/profile/update',\n    addImage: '/api/products/add-image',\n    addCategory: '/api/categories/add',\n    switchTheme: '/api/settings/switch-theme',\n    removeFromCart: '/api/cart/remove',\n    updateCartQuantity: '/api/cart/update',\n    loadProducts: '/api/products/all',\n    loadProductInfo: '/api/products/info',\n    toggleTheme: '/api/settings/toggle-theme',\n    resetTheme: '/api/settings/reset-theme',\n    logoutProj: '/api/auth/logout-proj'\n  };\n\n  /**\n   * Коды HTTP-статусов для обработки ответов сервера.\n   *\n   * @example\n   * if (response.status === this.configService.httpStatusCodes.success) { ... }\n   */\n  readonly httpStatusCodes = {\n    // 2xx: Успешные\n    success: 200,          // Успешный запрос\n    created: 201,          // Ресурс создан\n    noContent: 204,        // Успешно, но нет содержимого\n\n    // 3xx: Перенаправления\n    movedPermanently: 301, // Ресурс перемещён навсегда\n    found: 302,            // Ресурс временно перемещён\n\n    // 4xx: Ошибки клиента\n    badRequest: 400,       // Неверный запрос\n    unauthorized: 401,     // Неавторизован\n    forbidden: 403,        // Доступ запрещён\n    notFound: 404,         // Ресурс не найден\n    conflict: 409,         // Конфликт (например, дубликат)\n\n    // 5xx: Ошибки сервера\n    serverError: 500,      // Внутренняя ошибка сервера\n    serviceUnavailable: 503 // Сервис недоступен\n  };\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpCategoriesService.html":{"url":"injectables/DpCategoriesService.html","title":"injectable - DpCategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpCategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-categories.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с категориями товаров.\nПозволяет получать, создавать, обновлять и удалять категории товаров через API.\nExample :// Получить все категории (GET):\n// URL: /api/DpCategories\nthis.dpCategoriesService.getAllDpCategories().subscribe(categories => console.log(categories));// Получить категорию по id (GET):\n// URL: /api/DpCategories/1\nthis.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n// Создать категорию (POST):\n// URL: /api/DpCategories\n// Body:\n// {\n//   \"dpCategoryId\": 0,\n//   \"dpCategoryTitle\": \"Одежда\",\n//   \"dpCategoryDescription\": \"Вся одежда\"\n// }\nthis.dpCategoriesService.createDpCategory({\n  dpCategoryId: 0,\n  dpCategoryTitle: 'Одежда',\n  dpCategoryDescription: 'Вся одежда'\n}).subscribe(newCategory => ...);\n// Обновить категорию (PUT):\n// URL: /api/DpCategories/1\n// Body:\n// {\n//   \"dpCategoryId\": 1,\n//   \"dpCategoryTitle\": \"Обновлённая категория\",\n//   \"dpCategoryDescription\": \"Новое описание\"\n// }\nthis.dpCategoriesService.updateDpCategory(1, {\n  dpCategoryId: 1,\n  dpCategoryTitle: 'Обновлённая категория',\n  dpCategoryDescription: 'Новое описание'\n}).subscribe(() => ...);\n// Удалить категорию (DELETE):\n// URL: /api/DpCategories/1\nthis.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpCategory\n                            \n                            \n                                deleteDpCategory\n                            \n                            \n                                getAllDpCategories\n                            \n                            \n                                getDpCategoryById\n                            \n                            \n                                updateDpCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-categories.service.ts:57\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpCategory\n                        \n                    \n                \n            \n            \n                \ncreateDpCategory(dpCategory: IDpCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Создаёт новую категорию.\nExample :// POST /api/DpCategories\n// Body:\n// {\n//   \"dpCategoryId\": 0,\n//   \"dpCategoryTitle\": \"Одежда\",\n//   \"dpCategoryDescription\": \"Вся одежда\"\n// }\nthis.dpCategoriesService.createDpCategory({\n  dpCategoryId: 0,\n  dpCategoryTitle: 'Одежда',\n  dpCategoryDescription: 'Вся одежда'\n}).subscribe(newCategory => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpCategory\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданная категория.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpCategory\n                        \n                    \n                \n            \n            \n                \ndeleteDpCategory(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Удаляет категорию по идентификатору.\nExample :// DELETE /api/DpCategories/1\nthis.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpCategories\n                        \n                    \n                \n            \n            \n                \ngetAllDpCategories()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Получает список всех категорий.\nExample :// GET /api/DpCategories\nthis.dpCategoriesService.getAllDpCategories().subscribe(categories => ...);\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список категорий.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpCategoryById\n                        \n                    \n                \n            \n            \n                \ngetDpCategoryById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Получает категорию по её идентификатору.\nExample :// GET /api/DpCategories/1\nthis.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Категория.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpCategory\n                        \n                    \n                \n            \n            \n                \nupdateDpCategory(id: number, dpCategory: IDpCategory)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-categories.service.ts:129\n                        \n                    \n\n\n            \n                \n                        Обновляет существующую категорию.\nExample :// PUT /api/DpCategories/1\n// Body:\n// {\n//   \"dpCategoryId\": 1,\n//   \"dpCategoryTitle\": \"Обновлённая категория\",\n//   \"dpCategoryDescription\": \"Новое описание\"\n// }\nthis.dpCategoriesService.updateDpCategory(1, {\n  dpCategoryId: 1,\n  dpCategoryTitle: 'Обновлённая категория',\n  dpCategoryDescription: 'Новое описание'\n}).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор категории.\n\n                                            \n                                        \n                                        \n                                                dpCategory\n                                            \n                                                            IDpCategory\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённая категория.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpCategories`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-categories.service.ts:57\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpCategory } from '../interface/IDpCategory';\n\n/**\n * Сервис для работы с категориями товаров.\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять категории товаров через API.\n *\n * @example\n * // Получить все категории (GET):\n * // URL: /api/DpCategories\n * this.dpCategoriesService.getAllDpCategories().subscribe(categories => console.log(categories));\n *\n * // Получить категорию по id (GET):\n * // URL: /api/DpCategories/1\n * this.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n *\n * // Создать категорию (POST):\n * // URL: /api/DpCategories\n * // Body:\n * // {\n * //   \"dpCategoryId\": 0,\n * //   \"dpCategoryTitle\": \"Одежда\",\n * //   \"dpCategoryDescription\": \"Вся одежда\"\n * // }\n * this.dpCategoriesService.createDpCategory({\n *   dpCategoryId: 0,\n *   dpCategoryTitle: 'Одежда',\n *   dpCategoryDescription: 'Вся одежда'\n * }).subscribe(newCategory => ...);\n *\n * // Обновить категорию (PUT):\n * // URL: /api/DpCategories/1\n * // Body:\n * // {\n * //   \"dpCategoryId\": 1,\n * //   \"dpCategoryTitle\": \"Обновлённая категория\",\n * //   \"dpCategoryDescription\": \"Новое описание\"\n * // }\n * this.dpCategoriesService.updateDpCategory(1, {\n *   dpCategoryId: 1,\n *   dpCategoryTitle: 'Обновлённая категория',\n *   dpCategoryDescription: 'Новое описание'\n * }).subscribe(() => ...);\n *\n * // Удалить категорию (DELETE):\n * // URL: /api/DpCategories/1\n * this.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpCategoriesService {\n  private baseUrl = `${window.location.origin}/api/DpCategories`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех категорий.\n   *\n   * @returns {Observable} Список категорий.\n   * @example\n   * // GET /api/DpCategories\n   * this.dpCategoriesService.getAllDpCategories().subscribe(categories => ...);\n   */\n  getAllDpCategories(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает категорию по её идентификатору.\n   *\n   * @param {number} id Идентификатор категории.\n   * @returns {Observable} Категория.\n   * @example\n   * // GET /api/DpCategories/1\n   * this.dpCategoriesService.getDpCategoryById(1).subscribe(category => ...);\n   */\n  getDpCategoryById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новую категорию.\n   *\n   * @param {IDpCategory} dpCategory Объект категории.\n   * @returns {Observable} Созданная категория.\n   * @example\n   * // POST /api/DpCategories\n   * // Body:\n   * // {\n   * //   \"dpCategoryId\": 0,\n   * //   \"dpCategoryTitle\": \"Одежда\",\n   * //   \"dpCategoryDescription\": \"Вся одежда\"\n   * // }\n   * this.dpCategoriesService.createDpCategory({\n   *   dpCategoryId: 0,\n   *   dpCategoryTitle: 'Одежда',\n   *   dpCategoryDescription: 'Вся одежда'\n   * }).subscribe(newCategory => ...);\n   */\n  createDpCategory(dpCategory: IDpCategory): Observable {\n    return this.http.post(this.baseUrl, dpCategory);\n  }\n\n  /**\n   * Обновляет существующую категорию.\n   *\n   * @param {number} id Идентификатор категории.\n   * @param {IDpCategory} dpCategory Обновлённая категория.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpCategories/1\n   * // Body:\n   * // {\n   * //   \"dpCategoryId\": 1,\n   * //   \"dpCategoryTitle\": \"Обновлённая категория\",\n   * //   \"dpCategoryDescription\": \"Новое описание\"\n   * // }\n   * this.dpCategoriesService.updateDpCategory(1, {\n   *   dpCategoryId: 1,\n   *   dpCategoryTitle: 'Обновлённая категория',\n   *   dpCategoryDescription: 'Новое описание'\n   * }).subscribe(() => ...);\n   */\n  updateDpCategory(id: number, dpCategory: IDpCategory): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpCategory);\n  }\n\n  /**\n   * Удаляет категорию по идентификатору.\n   *\n   * @param {number} id Идентификатор категории.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpCategories/1\n   * this.dpCategoriesService.deleteDpCategory(1).subscribe(() => ...);\n   */\n  deleteDpCategory(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpImagesService.html":{"url":"injectables/DpImagesService.html","title":"injectable - DpImagesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpImagesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-images.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с изображениями товаров.\nПозволяет получать, создавать, обновлять и удалять изображения, а также получать бинарные данные изображения.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpImage\n                            \n                            \n                                deleteDpImage\n                            \n                            \n                                getAllDpImages\n                            \n                            \n                                getDpImageById\n                            \n                            \n                                getDpImageData\n                            \n                            \n                                getDpImagesByProductId\n                            \n                            \n                                updateDpImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-images.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpImage\n                        \n                    \n                \n            \n            \n                \ncreateDpImage(request: ICreateDpImageRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Создаёт новое изображение для товара.\nExample :// POST /api/DpImages (multipart/form-data)\n// FormData:\n// DpProductId: 5\n// DpImageTitle: \"Фото товара\"\n// File: (binary image file)\nconst file = ...; // File из input[type=\"file\"]\nconst formData = new FormData();\nformData.append('DpProductId', '5');\nformData.append('DpImageTitle', 'Фото товара');\nformData.append('File', file);\nthis.http.post('/api/DpImages', formData).subscribe(image => {\n  // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n});// Или через сервис:\nthis.dpImagesService.createDpImage({\n  dpProductId: 5,\n  dpImageTitle: 'Фото товара',\n  file\n}).subscribe(image => console.log(image));\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            ICreateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для создания изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданное изображение.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpImage\n                        \n                    \n                \n            \n            \n                \ndeleteDpImage(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Удаляет изображение по идентификатору.\nExample :this.dpImagesService.deleteDpImage(10).subscribe(() => console.log('Удалено'));\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpImages\n                        \n                    \n                \n            \n            \n                \ngetAllDpImages()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Получает список всех изображений.\nExample :// GET /api/DpImages\nthis.dpImagesService.getAllDpImages().subscribe(images => {\n  // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n  console.log(images);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список всех изображений.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImageById\n                        \n                    \n                \n            \n            \n                \ngetDpImageById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Получает изображение по его идентификатору.\nExample :// GET /api/DpImages/10\nthis.dpImagesService.getDpImageById(10).subscribe(image => {\n  // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Объект изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImageData\n                        \n                    \n                \n            \n            \n                \ngetDpImageData(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Получает бинарные данные изображения (Blob) по идентификатору.\nExample :// GET /api/DpImages/10/image\nthis.dpImagesService.getDpImageData(10).subscribe(blob => {\n  const url = URL.createObjectURL(blob);\n  window.open(url);\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Бинарные данные изображения.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpImagesByProductId\n                        \n                    \n                \n            \n            \n                \ngetDpImagesByProductId(productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Получает изображения по идентификатору товара.\nExample :// GET /api/DpImages/ByProduct/5\nthis.dpImagesService.getDpImagesByProductId(5).subscribe(images => {\n  // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список изображений для товара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpImage\n                        \n                    \n                \n            \n            \n                \nupdateDpImage(id: number, request: IUpdateDpImageRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-images.service.ts:140\n                        \n                    \n\n\n            \n                \n                        Обновляет существующее изображение.\nExample :// PUT /api/DpImages/10 (multipart/form-data)\n// FormData:\n// DpProductId: 5\n// DpImageTitle: \"Новое название\"\n// File: (binary image file, опционально)\nconst file = ...; // Новый файл или undefined\nconst formData = new FormData();\nformData.append('DpProductId', '5');\nformData.append('DpImageTitle', 'Новое название');\nif (file) formData.append('File', file);\nthis.http.put('/api/DpImages/10', formData).subscribe(() => {\n  console.log('Изображение обновлено');\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор изображения.\n\n                                            \n                                        \n                                        \n                                                request\n                                            \n                                                            IUpdateDpImageRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для обновления изображения.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpImages`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-images.service.ts:18\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpImage } from '../interface/IDpImage';\nimport { ICreateDpImageRequest } from '../interface/ICreateDpImageRequest';\nimport { IUpdateDpImageRequest } from '../interface/IUpdateDpImageRequest';\n\n/**\n * Сервис для работы с изображениями товаров.\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять изображения, а также получать бинарные данные изображения.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpImagesService {\n  private baseUrl = `${window.location.origin}/api/DpImages`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех изображений.\n   *\n   * @returns {Observable} Список всех изображений.\n   * @example\n   * // GET /api/DpImages\n   * this.dpImagesService.getAllDpImages().subscribe(images => {\n   *   // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n   *   console.log(images);\n   * });\n   */\n  getAllDpImages(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает изображения по идентификатору товара.\n   *\n   * @param {number} productId Идентификатор товара.\n   * @returns {Observable} Список изображений для товара.\n   * @example\n   * // GET /api/DpImages/ByProduct/5\n   * this.dpImagesService.getDpImagesByProductId(5).subscribe(images => {\n   *   // images: [{ DpImagesId, DpProductId, DpImageTitle, ImagesData }]\n   * });\n   */\n  getDpImagesByProductId(productId: number): Observable {\n    return this.http.get(`${this.baseUrl}/ByProduct/${productId}`);\n  }\n\n  /**\n   * Получает изображение по его идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Объект изображения.\n   * @example\n   * // GET /api/DpImages/10\n   * this.dpImagesService.getDpImageById(10).subscribe(image => {\n   *   // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n   * });\n   */\n  getDpImageById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Получает бинарные данные изображения (Blob) по идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Бинарные данные изображения.\n   * @example\n   * // GET /api/DpImages/10/image\n   * this.dpImagesService.getDpImageData(10).subscribe(blob => {\n   *   const url = URL.createObjectURL(blob);\n   *   window.open(url);\n   * });\n   */\n  getDpImageData(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}/image`, { responseType: 'blob' });\n  }\n\n  /**\n   * Создаёт новое изображение для товара.\n   *\n   * @param {ICreateDpImageRequest} request Данные для создания изображения.\n   * @returns {Observable} Созданное изображение.\n   * @example\n   * // POST /api/DpImages (multipart/form-data)\n   * // FormData:\n   * // DpProductId: 5\n   * // DpImageTitle: \"Фото товара\"\n   * // File: (binary image file)\n   * const file = ...; // File из input[type=\"file\"]\n   * const formData = new FormData();\n   * formData.append('DpProductId', '5');\n   * formData.append('DpImageTitle', 'Фото товара');\n   * formData.append('File', file);\n   * this.http.post('/api/DpImages', formData).subscribe(image => {\n   *   // image: { DpImagesId, DpProductId, DpImageTitle, ImagesData }\n   * });\n   *\n   * // Или через сервис:\n   * this.dpImagesService.createDpImage({\n   *   dpProductId: 5,\n   *   dpImageTitle: 'Фото товара',\n   *   file\n   * }).subscribe(image => console.log(image));\n   */\n  createDpImage(request: ICreateDpImageRequest): Observable {\n    const formData = new FormData();\n    formData.append('DpProductId', request.dpProductId.toString());\n    formData.append('DpImageTitle', request.dpImageTitle);\n    formData.append('File', request.file);\n\n    return this.http.post(this.baseUrl, formData);\n  }\n\n  /**\n   * Обновляет существующее изображение.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @param {IUpdateDpImageRequest} request Данные для обновления изображения.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpImages/10 (multipart/form-data)\n   * // FormData:\n   * // DpProductId: 5\n   * // DpImageTitle: \"Новое название\"\n   * // File: (binary image file, опционально)\n   * const file = ...; // Новый файл или undefined\n   * const formData = new FormData();\n   * formData.append('DpProductId', '5');\n   * formData.append('DpImageTitle', 'Новое название');\n   * if (file) formData.append('File', file);\n   * this.http.put('/api/DpImages/10', formData).subscribe(() => {\n   *   console.log('Изображение обновлено');\n   * });\n   */\n  updateDpImage(id: number, request: IUpdateDpImageRequest): Observable {\n    const formData = new FormData();\n    formData.append('DpProductId', request.dpProductId.toString());\n    formData.append('DpImageTitle', request.dpImageTitle);\n    if (request.file) {\n      formData.append('File', request.file);\n    }\n\n    return this.http.put(`${this.baseUrl}/${id}`, formData);\n  }\n\n  /**\n   * Удаляет изображение по идентификатору.\n   *\n   * @param {number} id Идентификатор изображения.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * this.dpImagesService.deleteDpImage(10).subscribe(() => console.log('Удалено'));\n   */\n  deleteDpImage(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpOrderCompositionsService.html":{"url":"injectables/DpOrderCompositionsService.html","title":"injectable - DpOrderCompositionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpOrderCompositionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-order-compositions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с составами заказов (Order Compositions).\nПозволяет получать, создавать, обновлять и удалять составы заказов через API.\nExample :// Получить все составы заказов (GET):\n// URL: /api/DpOrderCompositions\nthis.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => console.log(compositions));// Получить состав заказа по id (GET):\n// URL: /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n  // composition: { dpOrderId, dpProductId, quantity, dpAttributes, dpOrder }\n});\n// Создать состав заказа (POST):\n// URL: /api/DpOrderCompositions\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 3,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.createDpOrderComposition({\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 3,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(newComp => {\n  // newComp: { dpOrderId, dpProductId, quantity, ... }\n});\n// Обновить состав заказа (PUT):\n// URL: /api/DpOrderCompositions/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 5,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.updateDpOrderComposition(1, {\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 5,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(() => {\n  // Состав заказа обновлён\n});\n// Удалить состав заказа (DELETE):\n// URL: /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n  // Состав заказа удалён\n});\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpOrderComposition\n                            \n                            \n                                deleteDpOrderComposition\n                            \n                            \n                                getAllDpOrderCompositions\n                            \n                            \n                                getDpOrderCompositionById\n                            \n                            \n                                updateDpOrderComposition\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-order-compositions.service.ts:73\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpOrderComposition\n                        \n                    \n                \n            \n            \n                \ncreateDpOrderComposition(dpOrderComposition: IDpOrderComposition)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:131\n                        \n                    \n\n\n            \n                \n                        Создаёт новый состав заказа.\nExample :// POST /api/DpOrderCompositions\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 3,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.createDpOrderComposition({\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 3,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(newComp => {\n  // newComp: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpOrderComposition\n                                            \n                                                            IDpOrderComposition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный состав заказа.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpOrderComposition\n                        \n                    \n                \n            \n            \n                \ndeleteDpOrderComposition(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Удаляет состав заказа по идентификатору.\nExample :// DELETE /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n  // Состав заказа удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpOrderCompositions\n                        \n                    \n                \n            \n            \n                \ngetAllDpOrderCompositions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Получает список всех составов заказов.\nExample :// GET /api/DpOrderCompositions\nthis.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => {\n  // compositions: [{ ... }]\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список составов заказов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpOrderCompositionById\n                        \n                    \n                \n            \n            \n                \ngetDpOrderCompositionById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Получает состав заказа по его идентификатору.\nExample :// GET /api/DpOrderCompositions/1\nthis.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n  // composition: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Состав заказа.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpOrderComposition\n                        \n                    \n                \n            \n            \n                \nupdateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-order-compositions.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий состав заказа.\nExample :// PUT /api/DpOrderCompositions/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpProductId\": 2,\n//   \"quantity\": 5,\n//   \"dpAttributes\": [],\n//   \"dpOrder\": null\n// }\nthis.dpOrderCompositionsService.updateDpOrderComposition(1, {\n  dpOrderId: 1,\n  dpProductId: 2,\n  quantity: 5,\n  dpAttributes: [],\n  dpOrder: null\n}).subscribe(() => {\n  // Состав заказа обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор состава заказа.\n\n                                            \n                                        \n                                        \n                                                dpOrderComposition\n                                            \n                                                            IDpOrderComposition\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект состава заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpOrderCompositions`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-order-compositions.service.ts:73\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpOrderComposition } from '../interface/IDpOrderComposition';\n\n/**\n * Сервис для работы с составами заказов (Order Compositions).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять составы заказов через API.\n *\n * @example\n * // Получить все составы заказов (GET):\n * // URL: /api/DpOrderCompositions\n * this.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => console.log(compositions));\n *\n * // Получить состав заказа по id (GET):\n * // URL: /api/DpOrderCompositions/1\n * this.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n *   // composition: { dpOrderId, dpProductId, quantity, dpAttributes, dpOrder }\n * });\n *\n * // Создать состав заказа (POST):\n * // URL: /api/DpOrderCompositions\n * // Body:\n * // {\n * //   \"dpOrderId\": 1,\n * //   \"dpProductId\": 2,\n * //   \"quantity\": 3,\n * //   \"dpAttributes\": [],\n * //   \"dpOrder\": null\n * // }\n * this.dpOrderCompositionsService.createDpOrderComposition({\n *   dpOrderId: 1,\n *   dpProductId: 2,\n *   quantity: 3,\n *   dpAttributes: [],\n *   dpOrder: null\n * }).subscribe(newComp => {\n *   // newComp: { dpOrderId, dpProductId, quantity, ... }\n * });\n *\n * // Обновить состав заказа (PUT):\n * // URL: /api/DpOrderCompositions/1\n * // Body:\n * // {\n * //   \"dpOrderId\": 1,\n * //   \"dpProductId\": 2,\n * //   \"quantity\": 5,\n * //   \"dpAttributes\": [],\n * //   \"dpOrder\": null\n * // }\n * this.dpOrderCompositionsService.updateDpOrderComposition(1, {\n *   dpOrderId: 1,\n *   dpProductId: 2,\n *   quantity: 5,\n *   dpAttributes: [],\n *   dpOrder: null\n * }).subscribe(() => {\n *   // Состав заказа обновлён\n * });\n *\n * // Удалить состав заказа (DELETE):\n * // URL: /api/DpOrderCompositions/1\n * this.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n *   // Состав заказа удалён\n * });\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpOrderCompositionsService {\n  private baseUrl = `${window.location.origin}/api/DpOrderCompositions`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех составов заказов.\n   *\n   * @returns {Observable} Список составов заказов.\n   * @example\n   * // GET /api/DpOrderCompositions\n   * this.dpOrderCompositionsService.getAllDpOrderCompositions().subscribe(compositions => {\n   *   // compositions: [{ ... }]\n   * });\n   */\n  getAllDpOrderCompositions(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает состав заказа по его идентификатору.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @returns {Observable} Состав заказа.\n   * @example\n   * // GET /api/DpOrderCompositions/1\n   * this.dpOrderCompositionsService.getDpOrderCompositionById(1).subscribe(composition => {\n   *   // composition: { ... }\n   * });\n   */\n  getDpOrderCompositionById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый состав заказа.\n   *\n   * @param {IDpOrderComposition} dpOrderComposition Объект состава заказа.\n   * @returns {Observable} Созданный состав заказа.\n   * @example\n   * // POST /api/DpOrderCompositions\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpProductId\": 2,\n   * //   \"quantity\": 3,\n   * //   \"dpAttributes\": [],\n   * //   \"dpOrder\": null\n   * // }\n   * this.dpOrderCompositionsService.createDpOrderComposition({\n   *   dpOrderId: 1,\n   *   dpProductId: 2,\n   *   quantity: 3,\n   *   dpAttributes: [],\n   *   dpOrder: null\n   * }).subscribe(newComp => {\n   *   // newComp: { ... }\n   * });\n   */\n  createDpOrderComposition(dpOrderComposition: IDpOrderComposition): Observable {\n    return this.http.post(this.baseUrl, dpOrderComposition);\n  }\n\n  /**\n   * Обновляет существующий состав заказа.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @param {IDpOrderComposition} dpOrderComposition Обновлённый объект состава заказа.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpOrderCompositions/1\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpProductId\": 2,\n   * //   \"quantity\": 5,\n   * //   \"dpAttributes\": [],\n   * //   \"dpOrder\": null\n   * // }\n   * this.dpOrderCompositionsService.updateDpOrderComposition(1, {\n   *   dpOrderId: 1,\n   *   dpProductId: 2,\n   *   quantity: 5,\n   *   dpAttributes: [],\n   *   dpOrder: null\n   * }).subscribe(() => {\n   *   // Состав заказа обновлён\n   * });\n   */\n  updateDpOrderComposition(id: number, dpOrderComposition: IDpOrderComposition): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpOrderComposition);\n  }\n\n  /**\n   * Удаляет состав заказа по идентификатору.\n   *\n   * @param {number} id Идентификатор состава заказа.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpOrderCompositions/1\n   * this.dpOrderCompositionsService.deleteDpOrderComposition(1).subscribe(() => {\n   *   // Состав заказа удалён\n   * });\n   */\n  deleteDpOrderComposition(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpOrdersService.html":{"url":"injectables/DpOrdersService.html","title":"injectable - DpOrdersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpOrdersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-orders.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с заказами (Orders).\nПозволяет получать, создавать, обновлять и удалять заказы через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpOrder\n                            \n                            \n                                deleteDpOrder\n                            \n                            \n                                getAllDpOrders\n                            \n                            \n                                getDpOrderById\n                            \n                            \n                                updateDpOrder\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-orders.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpOrder\n                        \n                    \n                \n            \n            \n                \ncreateDpOrder(dpOrder: IDpOrder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Создаёт новый заказ.\nExample :// POST /api/DpOrders\n// Body:\n// {\n//   \"dpOrderId\": 0,\n//   \"dpUserId\": 1,\n//   \"orderDate\": \"2025-06-22T12:00:00\",\n//   \"orderStatus\": \"Новый\"\n// }\nthis.dpOrdersService.createDpOrder({\n  dpOrderId: 0,\n  dpUserId: 1,\n  orderDate: new Date().toISOString(),\n  orderStatus: 'Новый'\n}).subscribe(newOrder => {\n  // newOrder: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpOrder\n                                            \n                                                            IDpOrder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный заказ.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpOrder\n                        \n                    \n                \n            \n            \n                \ndeleteDpOrder(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:116\n                        \n                    \n\n\n            \n                \n                        Удаляет заказ по идентификатору.\nExample :// DELETE /api/DpOrders/1\nthis.dpOrdersService.deleteDpOrder(1).subscribe(() => {\n  // Заказ удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpOrders\n                        \n                    \n                \n            \n            \n                \ngetAllDpOrders()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех заказов.\nExample :// GET /api/DpOrders\nthis.dpOrdersService.getAllDpOrders().subscribe(orders => {\n  // orders: [{ dpOrderId, dpUserId, orderDate, orderStatus, ... }]\n  console.log(orders);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список заказов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpOrderById\n                        \n                    \n                \n            \n            \n                \ngetDpOrderById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает заказ по его идентификатору.\nExample :// GET /api/DpOrders/1\nthis.dpOrdersService.getDpOrderById(1).subscribe(order => {\n  // order: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Заказ.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpOrder\n                        \n                    \n                \n            \n            \n                \nupdateDpOrder(id: number, dpOrder: IDpOrder)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-orders.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий заказ.\nExample :// PUT /api/DpOrders/1\n// Body:\n// {\n//   \"dpOrderId\": 1,\n//   \"dpUserId\": 1,\n//   \"orderDate\": \"2025-06-22T12:00:00\",\n//   \"orderStatus\": \"Обновлён\"\n// }\nthis.dpOrdersService.updateDpOrder(1, {\n  dpOrderId: 1,\n  dpUserId: 1,\n  orderDate: new Date().toISOString(),\n  orderStatus: 'Обновлён'\n}).subscribe(() => {\n  // Заказ обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                        \n                                                dpOrder\n                                            \n                                                            IDpOrder\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpOrders`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-orders.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpOrder } from '../interface/IDpOrder';\n\n/**\n * Сервис для работы с заказами (Orders).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять заказы через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpOrdersService {\n  private baseUrl = `${window.location.origin}/api/DpOrders`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех заказов.\n   *\n   * @returns {Observable} Список заказов.\n   * @example\n   * // GET /api/DpOrders\n   * this.dpOrdersService.getAllDpOrders().subscribe(orders => {\n   *   // orders: [{ dpOrderId, dpUserId, orderDate, orderStatus, ... }]\n   *   console.log(orders);\n   * });\n   */\n  getAllDpOrders(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает заказ по его идентификатору.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @returns {Observable} Заказ.\n   * @example\n   * // GET /api/DpOrders/1\n   * this.dpOrdersService.getDpOrderById(1).subscribe(order => {\n   *   // order: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n   * });\n   */\n  getDpOrderById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый заказ.\n   *\n   * @param {IDpOrder} dpOrder Объект заказа.\n   * @returns {Observable} Созданный заказ.\n   * @example\n   * // POST /api/DpOrders\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 0,\n   * //   \"dpUserId\": 1,\n   * //   \"orderDate\": \"2025-06-22T12:00:00\",\n   * //   \"orderStatus\": \"Новый\"\n   * // }\n   * this.dpOrdersService.createDpOrder({\n   *   dpOrderId: 0,\n   *   dpUserId: 1,\n   *   orderDate: new Date().toISOString(),\n   *   orderStatus: 'Новый'\n   * }).subscribe(newOrder => {\n   *   // newOrder: { dpOrderId, dpUserId, orderDate, orderStatus, ... }\n   * });\n   */\n  createDpOrder(dpOrder: IDpOrder): Observable {\n    return this.http.post(this.baseUrl, dpOrder);\n  }\n\n  /**\n   * Обновляет существующий заказ.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @param {IDpOrder} dpOrder Обновлённый объект заказа.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpOrders/1\n   * // Body:\n   * // {\n   * //   \"dpOrderId\": 1,\n   * //   \"dpUserId\": 1,\n   * //   \"orderDate\": \"2025-06-22T12:00:00\",\n   * //   \"orderStatus\": \"Обновлён\"\n   * // }\n   * this.dpOrdersService.updateDpOrder(1, {\n   *   dpOrderId: 1,\n   *   dpUserId: 1,\n   *   orderDate: new Date().toISOString(),\n   *   orderStatus: 'Обновлён'\n   * }).subscribe(() => {\n   *   // Заказ обновлён\n   * });\n   */\n  updateDpOrder(id: number, dpOrder: IDpOrder): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpOrder);\n  }\n\n  /**\n   * Удаляет заказ по идентификатору.\n   *\n   * @param {number} id Идентификатор заказа.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpOrders/1\n   * this.dpOrdersService.deleteDpOrder(1).subscribe(() => {\n   *   // Заказ удалён\n   * });\n   */\n  deleteDpOrder(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpProductAttributesService.html":{"url":"injectables/DpProductAttributesService.html","title":"injectable - DpProductAttributesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpProductAttributesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-product-attributes.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с атрибутами товаров (Product Attributes).\nПозволяет получать, создавать, обновлять и удалять атрибуты товаров через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpProductAttribute\n                            \n                            \n                                deleteDpProductAttribute\n                            \n                            \n                                getAllDpProductAttributes\n                            \n                            \n                                getDpProductAttributeById\n                            \n                            \n                                updateDpProductAttribute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-product-attributes.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpProductAttribute\n                        \n                    \n                \n            \n            \n                \ncreateDpProductAttribute(dpProductAttribute: IDpProductAttribute)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Создаёт новый атрибут товара.\nExample :// POST /api/DpProductAttributes\n// Body:\n// {\n//   \"dpAttributesId\": 0,\n//   \"dpProductId\": 1,\n//   \"dpSize\": \"M\",\n//   \"dpColor\": \"Red\",\n//   ...другие поля...\n// }\nthis.dpProductAttributesService.createDpProductAttribute({\n  dpAttributesId: 0,\n  dpProductId: 1,\n  dpSize: 'M',\n  dpColor: 'Red'\n}).subscribe(attr => {\n  // attr: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpProductAttribute\n                                            \n                                                            IDpProductAttribute\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный атрибут.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpProductAttribute\n                        \n                    \n                \n            \n            \n                \ndeleteDpProductAttribute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Удаляет атрибут товара по идентификатору.\nExample :// DELETE /api/DpProductAttributes/1\nthis.dpProductAttributesService.deleteDpProductAttribute(1).subscribe(() => {\n  // Атрибут удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpProductAttributes\n                        \n                    \n                \n            \n            \n                \ngetAllDpProductAttributes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех атрибутов товаров.\nExample :// GET /api/DpProductAttributes\nthis.dpProductAttributesService.getAllDpProductAttributes().subscribe(attrs => {\n  // attrs: [{ dpAttributesId, dpProductId, dpSize, ... }]\n  console.log(attrs);\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список атрибутов товаров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpProductAttributeById\n                        \n                    \n                \n            \n            \n                \ngetDpProductAttributeById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает атрибут товара по его идентификатору.\nExample :// GET /api/DpProductAttributes/1\nthis.dpProductAttributesService.getDpProductAttributeById(1).subscribe(attr => {\n  // attr: { dpAttributesId, dpProductId, dpSize, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Атрибут товара.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpProductAttribute\n                        \n                    \n                \n            \n            \n                \nupdateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-product-attributes.service.ts:103\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий атрибут товара.\nExample :// PUT /api/DpProductAttributes/1\n// Body:\n// {\n//   \"dpAttributesId\": 1,\n//   \"dpProductId\": 1,\n//   \"dpSize\": \"L\",\n//   \"dpColor\": \"Blue\",\n//   ...другие поля...\n// }\nthis.dpProductAttributesService.updateDpProductAttribute(1, {\n  dpAttributesId: 1,\n  dpProductId: 1,\n  dpSize: 'L',\n  dpColor: 'Blue'\n}).subscribe(() => {\n  // Атрибут обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор атрибута.\n\n                                            \n                                        \n                                        \n                                                dpProductAttribute\n                                            \n                                                            IDpProductAttribute\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект атрибута.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpProductAttributes`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-product-attributes.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpProductAttribute } from '../interface/IDpProductAttribute';\n\n/**\n * Сервис для работы с атрибутами товаров (Product Attributes).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять атрибуты товаров через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpProductAttributesService {\n  private baseUrl = `${window.location.origin}/api/DpProductAttributes`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех атрибутов товаров.\n   *\n   * @returns {Observable} Список атрибутов товаров.\n   * @example\n   * // GET /api/DpProductAttributes\n   * this.dpProductAttributesService.getAllDpProductAttributes().subscribe(attrs => {\n   *   // attrs: [{ dpAttributesId, dpProductId, dpSize, ... }]\n   *   console.log(attrs);\n   * });\n   */\n  getAllDpProductAttributes(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает атрибут товара по его идентификатору.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @returns {Observable} Атрибут товара.\n   * @example\n   * // GET /api/DpProductAttributes/1\n   * this.dpProductAttributesService.getDpProductAttributeById(1).subscribe(attr => {\n   *   // attr: { dpAttributesId, dpProductId, dpSize, ... }\n   * });\n   */\n  getDpProductAttributeById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый атрибут товара.\n   *\n   * @param {IDpProductAttribute} dpProductAttribute Объект атрибута.\n   * @returns {Observable} Созданный атрибут.\n   * @example\n   * // POST /api/DpProductAttributes\n   * // Body:\n   * // {\n   * //   \"dpAttributesId\": 0,\n   * //   \"dpProductId\": 1,\n   * //   \"dpSize\": \"M\",\n   * //   \"dpColor\": \"Red\",\n   * //   ...другие поля...\n   * // }\n   * this.dpProductAttributesService.createDpProductAttribute({\n   *   dpAttributesId: 0,\n   *   dpProductId: 1,\n   *   dpSize: 'M',\n   *   dpColor: 'Red'\n   * }).subscribe(attr => {\n   *   // attr: { ... }\n   * });\n   */\n  createDpProductAttribute(dpProductAttribute: IDpProductAttribute): Observable {\n    return this.http.post(this.baseUrl, dpProductAttribute);\n  }\n\n  /**\n   * Обновляет существующий атрибут товара.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @param {IDpProductAttribute} dpProductAttribute Обновлённый объект атрибута.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpProductAttributes/1\n   * // Body:\n   * // {\n   * //   \"dpAttributesId\": 1,\n   * //   \"dpProductId\": 1,\n   * //   \"dpSize\": \"L\",\n   * //   \"dpColor\": \"Blue\",\n   * //   ...другие поля...\n   * // }\n   * this.dpProductAttributesService.updateDpProductAttribute(1, {\n   *   dpAttributesId: 1,\n   *   dpProductId: 1,\n   *   dpSize: 'L',\n   *   dpColor: 'Blue'\n   * }).subscribe(() => {\n   *   // Атрибут обновлён\n   * });\n   */\n  updateDpProductAttribute(id: number, dpProductAttribute: IDpProductAttribute): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpProductAttribute);\n  }\n\n  /**\n   * Удаляет атрибут товара по идентификатору.\n   *\n   * @param {number} id Идентификатор атрибута.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpProductAttributes/1\n   * this.dpProductAttributesService.deleteDpProductAttribute(1).subscribe(() => {\n   *   // Атрибут удалён\n   * });\n   */\n  deleteDpProductAttribute(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpSizesService.html":{"url":"injectables/DpSizesService.html","title":"injectable - DpSizesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpSizesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-sizes.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с размерами товаров (Sizes).\nПозволяет получать, создавать, обновлять и удалять размеры товаров через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpSize\n                            \n                            \n                                deleteDpSize\n                            \n                            \n                                getAllDpSizes\n                            \n                            \n                                getDpSizeById\n                            \n                            \n                                updateDpSize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-sizes.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpSize\n                        \n                    \n                \n            \n            \n                \ncreateDpSize(dpSize: IDpSize)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Создаёт новый размер.\nExample :// POST /api/DpSizes\n// Body:\n// {\n//   \"sizeId\": 0,\n//   \"size\": \"XL\"\n// }\nthis.dpSizesService.createDpSize({\n  sizeId: 0,\n  size: 'XL'\n}).subscribe(newSize => {\n  // newSize: { sizeId, size }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpSize\n                                            \n                                                            IDpSize\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный размер.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpSize\n                        \n                    \n                \n            \n            \n                \ndeleteDpSize(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:108\n                        \n                    \n\n\n            \n                \n                        Удаляет размер по идентификатору.\nExample :// DELETE /api/DpSizes/1\nthis.dpSizesService.deleteDpSize(1).subscribe(() => {\n  // Размер удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpSizes\n                        \n                    \n                \n            \n            \n                \ngetAllDpSizes()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех размеров.\nExample :// GET /api/DpSizes\nthis.dpSizesService.getAllDpSizes().subscribe(sizes => {\n  // sizes: [{ sizeId, size, ... }]\n  console.log(sizes);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список размеров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpSizeById\n                        \n                    \n                \n            \n            \n                \ngetDpSizeById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает размер по его идентификатору.\nExample :// GET /api/DpSizes/1\nthis.dpSizesService.getDpSizeById(1).subscribe(size => {\n  // size: { sizeId, size, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Размер.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpSize\n                        \n                    \n                \n            \n            \n                \nupdateDpSize(id: number, dpSize: IDpSize)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-sizes.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий размер.\nExample :// PUT /api/DpSizes/1\n// Body:\n// {\n//   \"sizeId\": 1,\n//   \"size\": \"XXL\"\n// }\nthis.dpSizesService.updateDpSize(1, {\n  sizeId: 1,\n  size: 'XXL'\n}).subscribe(() => {\n  // Размер обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                        \n                                                dpSize\n                                            \n                                                            IDpSize\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpSizes`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-sizes.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpSize } from '../interface/IDpSize';\n\n/**\n * Сервис для работы с размерами товаров (Sizes).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять размеры товаров через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpSizesService {\n  private baseUrl = `${window.location.origin}/api/DpSizes`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех размеров.\n   *\n   * @returns {Observable} Список размеров.\n   * @example\n   * // GET /api/DpSizes\n   * this.dpSizesService.getAllDpSizes().subscribe(sizes => {\n   *   // sizes: [{ sizeId, size, ... }]\n   *   console.log(sizes);\n   * });\n   */\n  getAllDpSizes(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает размер по его идентификатору.\n   *\n   * @param {number} id Идентификатор размера.\n   * @returns {Observable} Размер.\n   * @example\n   * // GET /api/DpSizes/1\n   * this.dpSizesService.getDpSizeById(1).subscribe(size => {\n   *   // size: { sizeId, size, ... }\n   * });\n   */\n  getDpSizeById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый размер.\n   *\n   * @param {IDpSize} dpSize Объект размера.\n   * @returns {Observable} Созданный размер.\n   * @example\n   * // POST /api/DpSizes\n   * // Body:\n   * // {\n   * //   \"sizeId\": 0,\n   * //   \"size\": \"XL\"\n   * // }\n   * this.dpSizesService.createDpSize({\n   *   sizeId: 0,\n   *   size: 'XL'\n   * }).subscribe(newSize => {\n   *   // newSize: { sizeId, size }\n   * });\n   */\ncreateDpSize(dpSize: IDpSize): Observable {\n    return this.http.post(this.baseUrl, dpSize);\n  }\n\n  /**\n   * Обновляет существующий размер.\n   *\n   * @param {number} id Идентификатор размера.\n   * @param {IDpSize} dpSize Обновлённый объект размера.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpSizes/1\n   * // Body:\n   * // {\n   * //   \"sizeId\": 1,\n   * //   \"size\": \"XXL\"\n   * // }\n   * this.dpSizesService.updateDpSize(1, {\n   *   sizeId: 1,\n   *   size: 'XXL'\n   * }).subscribe(() => {\n   *   // Размер обновлён\n   * });\n   */\n  updateDpSize(id: number, dpSize: IDpSize): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpSize);\n  }\n\n  /**\n   * Удаляет размер по идентификатору.\n   *\n   * @param {number} id Идентификатор размера.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpSizes/1\n   * this.dpSizesService.deleteDpSize(1).subscribe(() => {\n   *   // Размер удалён\n   * });\n   */\n  deleteDpSize(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpUserProjsService.html":{"url":"injectables/DpUserProjsService.html","title":"injectable - DpUserProjsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpUserProjsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-user-projs.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с пользователями проектов (UserProjs).\nПозволяет получать, создавать, обновлять и удалять пользователей проектов через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpUserProj\n                            \n                            \n                                deleteDpUserProj\n                            \n                            \n                                getAllDpUserProjs\n                            \n                            \n                                getDpUserProjById\n                            \n                            \n                                updateDpUserProj\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-user-projs.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpUserProj\n                        \n                    \n                \n            \n            \n                \ncreateDpUserProj(dpUserProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Создаёт нового пользователя проекта.\nExample :// POST /api/DpUserProjs\n// Body:\n// {\n//   \"dpUserProjId\": 0,\n//   \"userName\": \"Иван\",\n//   ...другие поля...\n// }\nthis.dpUserProjsService.createDpUserProj({\n  dpUserProjId: 0,\n  userName: 'Иван'\n}).subscribe(newUser => {\n  // newUser: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpUserProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Созданный пользователь проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpUserProj\n                        \n                    \n                \n            \n            \n                \ndeleteDpUserProj(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Удаляет пользователя проекта по идентификатору.\nExample :// DELETE /api/DpUserProjs/1\nthis.dpUserProjsService.deleteDpUserProj(1).subscribe(() => {\n  // Пользователь удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpUserProjs\n                        \n                    \n                \n            \n            \n                \ngetAllDpUserProjs()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех пользователей проектов.\nExample :// GET /api/DpUserProjs\nthis.dpUserProjsService.getAllDpUserProjs().subscribe(users => {\n  // users: [{ dpUserProjId, userName, ... }]\n  console.log(users);\n});\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Список пользователей проектов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpUserProjById\n                        \n                    \n                \n            \n            \n                \ngetDpUserProjById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает пользователя проекта по его идентификатору.\nExample :// GET /api/DpUserProjs/1\nthis.dpUserProjsService.getDpUserProjById(1).subscribe(user => {\n  // user: { dpUserProjId, userName, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Пользователь проекта.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpUserProj\n                        \n                    \n                \n            \n            \n                \nupdateDpUserProj(id: number, dpUserProj: IDpUserProj)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-user-projs.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Обновляет существующего пользователя проекта.\nExample :// PUT /api/DpUserProjs/1\n// Body:\n// {\n//   \"dpUserProjId\": 1,\n//   \"userName\": \"Пётр\",\n//   ...другие поля...\n// }\nthis.dpUserProjsService.updateDpUserProj(1, {\n  dpUserProjId: 1,\n  userName: 'Пётр'\n}).subscribe(() => {\n  // Пользователь обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                        \n                                                dpUserProj\n                                            \n                                                            IDpUserProj\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект пользователя проекта.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpUserProjs`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-user-projs.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpUserProj } from '../interface/IDpUserProj';\n\n/**\n * Сервис для работы с пользователями проектов (UserProjs).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять пользователей проектов через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpUserProjsService {\n  private baseUrl = `${window.location.origin}/api/DpUserProjs`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех пользователей проектов.\n   *\n   * @returns {Observable} Список пользователей проектов.\n   * @example\n   * // GET /api/DpUserProjs\n   * this.dpUserProjsService.getAllDpUserProjs().subscribe(users => {\n   *   // users: [{ dpUserProjId, userName, ... }]\n   *   console.log(users);\n   * });\n   */\n  getAllDpUserProjs(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает пользователя проекта по его идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @returns {Observable} Пользователь проекта.\n   * @example\n   * // GET /api/DpUserProjs/1\n   * this.dpUserProjsService.getDpUserProjById(1).subscribe(user => {\n   *   // user: { dpUserProjId, userName, ... }\n   * });\n   */\n  getDpUserProjById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт нового пользователя проекта.\n   *\n   * @param {IDpUserProj} dpUserProj Объект пользователя проекта.\n   * @returns {Observable} Созданный пользователь проекта.\n   * @example\n   * // POST /api/DpUserProjs\n   * // Body:\n   * // {\n   * //   \"dpUserProjId\": 0,\n   * //   \"userName\": \"Иван\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUserProjsService.createDpUserProj({\n   *   dpUserProjId: 0,\n   *   userName: 'Иван'\n   * }).subscribe(newUser => {\n   *   // newUser: { ... }\n   * });\n   */\n  createDpUserProj(dpUserProj: IDpUserProj): Observable {\n    return this.http.post(this.baseUrl, dpUserProj);\n  }\n\n  /**\n   * Обновляет существующего пользователя проекта.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @param {IDpUserProj} dpUserProj Обновлённый объект пользователя проекта.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpUserProjs/1\n   * // Body:\n   * // {\n   * //   \"dpUserProjId\": 1,\n   * //   \"userName\": \"Пётр\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUserProjsService.updateDpUserProj(1, {\n   *   dpUserProjId: 1,\n   *   userName: 'Пётр'\n   * }).subscribe(() => {\n   *   // Пользователь обновлён\n   * });\n   */\n  updateDpUserProj(id: number, dpUserProj: IDpUserProj): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpUserProj);\n  }\n\n  /**\n   * Удаляет пользователя проекта по идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя проекта.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpUserProjs/1\n   * this.dpUserProjsService.deleteDpUserProj(1).subscribe(() => {\n   *   // Пользователь удалён\n   * });\n   */\n  deleteDpUserProj(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DpUsersService.html":{"url":"injectables/DpUsersService.html","title":"injectable - DpUsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DpUsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с пользователями (Users).\nПозволяет получать, создавать, обновлять и удалять пользователей через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createDpUser\n                            \n                            \n                                deleteDpUser\n                            \n                            \n                                getAllDpUsers\n                            \n                            \n                                getDpUserById\n                            \n                            \n                                updateDpUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createDpUser\n                        \n                    \n                \n            \n            \n                \ncreateDpUser(dpUser: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Создаёт нового пользователя.\nExample :// POST /api/DpUsers\n// Body:\n// {\n//   \"dpUserId\": 0,\n//   \"userName\": \"Иван\",\n//   ...другие поля...\n// }\nthis.dpUsersService.createDpUser({\n  dpUserId: 0,\n  userName: 'Иван'\n}).subscribe(newUser => {\n  // newUser: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                dpUser\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный пользователь.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteDpUser\n                        \n                    \n                \n            \n            \n                \ndeleteDpUser(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Удаляет пользователя по идентификатору.\nExample :// DELETE /api/DpUsers/1\nthis.dpUsersService.deleteDpUser(1).subscribe(() => {\n  // Пользователь удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllDpUsers\n                        \n                    \n                \n            \n            \n                \ngetAllDpUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Получает список всех пользователей.\nExample :// GET /api/DpUsers\nthis.dpUsersService.getAllDpUsers().subscribe(users => {\n  // users: [{ dpUserId, userName, ... }]\n  console.log(users);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список пользователей.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDpUserById\n                        \n                    \n                \n            \n            \n                \ngetDpUserById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Получает пользователя по его идентификатору.\nExample :// GET /api/DpUsers/1\nthis.dpUsersService.getDpUserById(1).subscribe(user => {\n  // user: { dpUserId, userName, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Пользователь.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateDpUser\n                        \n                    \n                \n            \n            \n                \nupdateDpUser(id: number, dpUser: IDpUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-users.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Обновляет существующего пользователя.\nExample :// PUT /api/DpUsers/1\n// Body:\n// {\n//   \"dpUserId\": 1,\n//   \"userName\": \"Пётр\",\n//   ...другие поля...\n// }\nthis.dpUsersService.updateDpUser(1, {\n  dpUserId: 1,\n  userName: 'Пётр'\n}).subscribe(() => {\n  // Пользователь обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                dpUser\n                                            \n                                                            IDpUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/DpUsers`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-users.service.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpUser } from '../interface/IDpUser';\n\n/**\n * Сервис для работы с пользователями (Users).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять и удалять пользователей через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class DpUsersService {\n  private baseUrl = `${window.location.origin}/api/DpUsers`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех пользователей.\n   *\n   * @returns {Observable} Список пользователей.\n   * @example\n   * // GET /api/DpUsers\n   * this.dpUsersService.getAllDpUsers().subscribe(users => {\n   *   // users: [{ dpUserId, userName, ... }]\n   *   console.log(users);\n   * });\n   */\n  getAllDpUsers(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает пользователя по его идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @returns {Observable} Пользователь.\n   * @example\n   * // GET /api/DpUsers/1\n   * this.dpUsersService.getDpUserById(1).subscribe(user => {\n   *   // user: { dpUserId, userName, ... }\n   * });\n   */\n  getDpUserById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт нового пользователя.\n   *\n   * @param {IDpUser} dpUser Объект пользователя.\n   * @returns {Observable} Созданный пользователь.\n   * @example\n   * // POST /api/DpUsers\n   * // Body:\n   * // {\n   * //   \"dpUserId\": 0,\n   * //   \"userName\": \"Иван\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUsersService.createDpUser({\n   *   dpUserId: 0,\n   *   userName: 'Иван'\n   * }).subscribe(newUser => {\n   *   // newUser: { ... }\n   * });\n   */\n  createDpUser(dpUser: IDpUser): Observable {\n    return this.http.post(this.baseUrl, dpUser);\n  }\n\n  /**\n   * Обновляет существующего пользователя.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @param {IDpUser} dpUser Обновлённый объект пользователя.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/DpUsers/1\n   * // Body:\n   * // {\n   * //   \"dpUserId\": 1,\n   * //   \"userName\": \"Пётр\",\n   * //   ...другие поля...\n   * // }\n   * this.dpUsersService.updateDpUser(1, {\n   *   dpUserId: 1,\n   *   userName: 'Пётр'\n   * }).subscribe(() => {\n   *   // Пользователь обновлён\n   * });\n   */\n  updateDpUser(id: number, dpUser: IDpUser): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, dpUser);\n  }\n\n  /**\n   * Удаляет пользователя по идентификатору.\n   *\n   * @param {number} id Идентификатор пользователя.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/DpUsers/1\n   * this.dpUsersService.deleteDpUser(1).subscribe(() => {\n   *   // Пользователь удалён\n   * });\n   */\n  deleteDpUser(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAchievement.html":{"url":"interfaces/IAchievement.html","title":"interface - IAchievement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAchievement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IAchievement.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для объекта достижения (Achievement).\nExample :const achievement: IAchievement = {\n  achievementId: 1,\n  title: 'Первый вход',\n  textAchievement: 'Выполните первый вход в систему',\n  dpUserProjs: [{ dpUserProjId: 1, ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            achievementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpUserProjs\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            textAchievement\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievementId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjs:     IDpUserProj[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpUserProj[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        textAchievement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        textAchievement:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpUserProj } from \"./IDpUserProj\";\n\n/**\n * Интерфейс для объекта достижения (Achievement).\n *\n * @property {number} achievementId - Уникальный идентификатор достижения.\n * @property {string} title - Название достижения.\n * @property {string} [textAchievement] - Описание или дополнительный текст достижения (опционально).\n * @property {IDpUserProj[]} [dpUserProjs] - Список пользователей, связанных с этим достижением (опционально).\n *\n * @example\n * const achievement: IAchievement = {\n *   achievementId: 1,\n *   title: 'Первый вход',\n *   textAchievement: 'Выполните первый вход в систему',\n *   dpUserProjs: [{ dpUserProjId: 1, ... }]\n * };\n */\nexport interface IAchievement {\n    achievementId: number;\n    title: string;\n    textAchievement?: string;\n    dpUserProjs?: IDpUserProj[];\n}\n\n\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAddToCartRequest.html":{"url":"interfaces/IAddToCartRequest.html","title":"interface - IAddToCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAddToCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IAddToCartRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Запрос на добавление товара в корзину.\nExample :const req: IAddToCartRequest = { productId: 5, quantity: 2, sizeId: 1 };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IAddToCartRequest {\n    productId: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICartItem.html":{"url":"interfaces/ICartItem.html","title":"interface - ICartItem","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICartItem\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICartItem.ts\n        \n\n\n            \n                Description\n            \n            \n                Элемент корзины.\nExample :const item: ICartItem = { productId: 1, productTitle: 'Кроссовки', price: 1000, quantity: 2, sizeId: 3 };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            price\n                                        \n                                \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            productTitle\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICartItem {\n    productId: number;\n    productTitle: string;\n    price: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICartViewModel.html":{"url":"interfaces/ICartViewModel.html","title":"interface - ICartViewModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICartViewModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICartViewModel.ts\n        \n\n\n            \n                Description\n            \n            \n                Модель представления корзины.\nExample :const cart: ICartViewModel = { cartItems: [...], products: [...] };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cartItems\n                                        \n                                \n                                \n                                        \n                                            products\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cartItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cartItems:     ICartItem[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ICartItem[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        products\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        products:         IDpProduct[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProduct } from \"./IDpProduct\";\nimport { ICartItem } from \"./ICartItem\";\n\n/**\n * Модель представления корзины.\n *\n * @property {ICartItem[]} cartItems - Список товаров в корзине.\n * @property {IDpProduct[]} products - Список товаров.\n *\n * @example\n * const cart: ICartViewModel = { cartItems: [...], products: [...] };\n */\nexport interface ICartViewModel {\n    cartItems: ICartItem[];\n    products: IDpProduct[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICreateDpImageRequest.html":{"url":"interfaces/ICreateDpImageRequest.html","title":"interface - ICreateDpImageRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICreateDpImageRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/ICreateDpImageRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Запрос на создание изображения товара.\nExample :const req: ICreateDpImageRequest = { dpProductId: 1, dpImageTitle: 'Фото', file };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                        \n                                            file\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     File\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     File\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ICreateDpImageRequest {\n    dpProductId: number;\n    dpImageTitle: string;\n    file: File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpCategory.html":{"url":"interfaces/IDpCategory.html","title":"interface - IDpCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpCategory.ts\n        \n\n\n            \n                Description\n            \n            \n                Категория товара.\nExample :const cat: IDpCategory = { dpCategoryId: 1, dpCategoryTitle: 'Обувь', sizeId: 2, size: {...} };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpCategoryId\n                                        \n                                \n                                \n                                        \n                                            dpCategoryTitle\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProducts\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProducts\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProducts:         IDpProduct[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         IDpSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpSize\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpSize } from \"./IDpSize\";\nimport { IDpProduct } from \"./IDpProduct\";\n\n/**\n * Категория товара.\n *\n * @property {number} dpCategoryId - Идентификатор категории.\n * @property {string} dpCategoryTitle - Название категории.\n * @property {number} sizeId - Идентификатор размера.\n * @property {IDpSize} size - Размер.\n * @property {IDpProduct[]} [dpProducts] - Товары в категории (опционально).\n *\n * @example\n * const cat: IDpCategory = { dpCategoryId: 1, dpCategoryTitle: 'Обувь', sizeId: 2, size: {...} };\n */\nexport interface IDpCategory {\n    dpCategoryId: number;\n    dpCategoryTitle: string;\n    sizeId: number;\n    size: IDpSize;\n    dpProducts?: IDpProduct[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpImage.html":{"url":"interfaces/IDpImage.html","title":"interface - IDpImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpImage.ts\n        \n\n\n            \n                Description\n            \n            \n                Изображение товара.\nExample :const img: IDpImage = { dpImagesId: 1, dpProductId: 2, dpImageTitle: 'Фото', dpProduct: {...} };\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImagesId\n                                        \n                                \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProduct\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            imagesData\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImagesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImagesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProduct\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProduct:         IDpProduct\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        imagesData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        imagesData:     Uint8Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Uint8Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProduct } from \"./IDpProduct\";\n\n/**\n * Изображение товара.\n *\n * @property {number} dpImagesId - Идентификатор изображения.\n * @property {number} dpProductId - Идентификатор товара.\n * @property {string} dpImageTitle - Название изображения.\n * @property {Uint8Array} [imagesData] - Данные изображения (опционально).\n * @property {IDpProduct} dpProduct - Товар.\n *\n * @example\n * const img: IDpImage = { dpImagesId: 1, dpProductId: 2, dpImageTitle: 'Фото', dpProduct: {...} };\n */\nexport interface IDpImage {\n    dpImagesId: number;\n    dpProductId: number;\n    dpImageTitle: string;\n    imagesData?: Uint8Array;\n    dpProduct: IDpProduct;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrder.html":{"url":"interfaces/IDpOrder.html","title":"interface - IDpOrder","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrder\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrder.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для заказа (Order).\nExample :const order: IDpOrder = {\n  dpOrderId: 1,\n  dpUserId: 2,\n  dpDateTimeOrder: new Date(),\n  dpTypeOrder: 'website',\n  dpUser: { dpUserId: 2, dpUsername: 'vasya', ... }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpDateTimeOrder\n                                        \n                                \n                                \n                                        \n                                            dpOrderId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpTypeOrder\n                                        \n                                \n                                \n                                        \n                                            dpUser\n                                        \n                                \n                                \n                                        \n                                            dpUserId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpDateTimeOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDateTimeOrder:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpTypeOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpTypeOrder:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUser:         IDpUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpUser } from \"./IDpUser\";\n\n/**\n * Интерфейс для заказа (Order).\n *\n * @property {number} dpOrderId - Уникальный идентификатор заказа.\n * @property {number} dpUserId - Идентификатор пользователя, оформившего заказ.\n * @property {Date} dpDateTimeOrder - Дата и время оформления заказа.\n * @property {string} [dpTypeOrder] - Тип заказа (опционально).\n * @property {IDpUser} dpUser - Объект пользователя, связанный с заказом.\n *\n * @example\n * const order: IDpOrder = {\n *   dpOrderId: 1,\n *   dpUserId: 2,\n *   dpDateTimeOrder: new Date(),\n *   dpTypeOrder: 'website',\n *   dpUser: { dpUserId: 2, dpUsername: 'vasya', ... }\n * };\n */\nexport interface IDpOrder {\n    dpOrderId: number;\n    dpUserId: number;\n    dpDateTimeOrder: Date;\n    dpTypeOrder?: string;\n    dpUser: IDpUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrderComposition.html":{"url":"interfaces/IDpOrderComposition.html","title":"interface - IDpOrderComposition","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrderComposition\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrderComposition.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для состава заказа (Order Composition).\nExample :const orderComp: IDpOrderComposition = {\n  dpOrderId: 1,\n  dpAttributesId: 2,\n  dpQuantity: 3,\n  dpCost: 1500,\n  dpAttributes: { dpAttributesId: 2, dpProductId: 1, ... },\n  dpOrder: { dpOrderId: 1, dpUserId: 2, ... }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpAttributes\n                                        \n                                \n                                \n                                        \n                                            dpAttributesId\n                                        \n                                \n                                \n                                        \n                                            dpCost\n                                        \n                                \n                                \n                                        \n                                            dpOrder\n                                        \n                                \n                                \n                                        \n                                            dpOrderId\n                                        \n                                \n                                \n                                        \n                                            dpQuantity\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributes:         IDpProductAttribute\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProductAttribute\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCost\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCost:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrder\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrder:         IDpOrder\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpOrder\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrderId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrderId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpQuantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpQuantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProductAttribute } from \"./IDpProductAttribute\";\nimport { IDpOrder } from \"./IDpOrder\";\n\n/**\n * Интерфейс для состава заказа (Order Composition).\n *\n * @property {number} dpOrderId - Идентификатор заказа.\n * @property {number} dpAttributesId - Идентификатор атрибута товара.\n * @property {number} dpQuantity - Количество товара в заказе.\n * @property {number} dpCost - Стоимость одной единицы товара.\n * @property {IDpProductAttribute} dpAttributes - Объект атрибута товара.\n * @property {IDpOrder} dpOrder - Объект заказа.\n *\n * @example\n * const orderComp: IDpOrderComposition = {\n *   dpOrderId: 1,\n *   dpAttributesId: 2,\n *   dpQuantity: 3,\n *   dpCost: 1500,\n *   dpAttributes: { dpAttributesId: 2, dpProductId: 1, ... },\n *   dpOrder: { dpOrderId: 1, dpUserId: 2, ... }\n * };\n */\nexport interface IDpOrderComposition {\n    dpOrderId: number;\n    dpAttributesId: number;\n    dpQuantity: number;\n    dpCost: number;\n    dpAttributes: IDpProductAttribute;\n    dpOrder: IDpOrder;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpOrderDetail.html":{"url":"interfaces/IDpOrderDetail.html","title":"interface - IDpOrderDetail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpOrderDetail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpOrderDetail.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для детализации заказа (Order Detail).\nExample :const detail: IDpOrderDetail = {\n  productTitle: 'Кроссовки',\n  quantity: 2,\n  sizeId: 3,\n  sizeName: '42',\n  unitPrice: 1500,\n  totalPrice: 3000\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            productTitle\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                                \n                                        \n                                            sizeName\n                                        \n                                \n                                \n                                        \n                                            totalPrice\n                                        \n                                \n                                \n                                        \n                                            unitPrice\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unitPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unitPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IDpOrderDetail {\n    productTitle?: string;\n    quantity: number;\n    sizeId?: number;\n    sizeName: string;\n    unitPrice: number;\n    totalPrice: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpProduct.html":{"url":"interfaces/IDpProduct.html","title":"interface - IDpProduct","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpProduct\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpProduct.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для товара (Product).\nExample :const product: IDpProduct = {\n  dpProductId: 1,\n  dpPrice: 1500,\n  dpTitle: 'Кроссовки',\n  dpPurchasePrice: 1000,\n  dpDiscountPercent: 10,\n  dpDescription: 'Удобные кроссовки для бега',\n  dpCategoryId: 2,\n  dpCategory: { dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... },\n  dpImages: [{ dpImagesId: 1, dpProductId: 1, dpImageTitle: 'Фото', ... }],\n  dpProductAttributes: [{ dpAttributesId: 1, dpProductId: 1, dpCount: 5, ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpCategory\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpCategoryId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpDescription\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpDiscountPercent\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpImages\n                                        \n                                \n                                \n                                        \n                                            dpPrice\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProductAttributes\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                        \n                                            dpPurchasePrice\n                                        \n                                \n                                \n                                        \n                                            dpTitle\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategory\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategory:         IDpCategory\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpCategory\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategoryId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategoryId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpDescription\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDescription:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpDiscountPercent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpDiscountPercent:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpImages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImages:         IDpImage[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpImage[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductAttributes:     IDpProductAttribute[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpProductAttribute[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPurchasePrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPurchasePrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpProductAttribute } from \"./IDpProductAttribute\";\nimport { IDpCategory } from \"./IDpCategory\";\nimport { IDpImage } from \"./IDpImage\";\n\n/**\n * Интерфейс для товара (Product).\n *\n * @property {number} dpProductId - Уникальный идентификатор товара.\n * @property {number} dpPrice - Цена товара.\n * @property {string} dpTitle - Название товара.\n * @property {number} [dpDiscountPercent] - Процент скидки (опционально).\n * @property {string} [dpDescription] - Описание товара (опционально).\n * @property {number} [dpCategoryId] - Идентификатор категории (опционально).\n * @property {number} dpPurchasePrice - Закупочная цена товара.\n * @property {IDpCategory} [dpCategory] - Категория товара (опционально).\n * @property {IDpImage[]} [dpImages] - Массив изображений товара (опционально).\n * @property {IDpProductAttribute[]} [dpProductAttributes] - Массив атрибутов товара (опционально).\n *\n * @example\n * const product: IDpProduct = {\n *   dpProductId: 1,\n *   dpPrice: 1500,\n *   dpTitle: 'Кроссовки',\n *   dpPurchasePrice: 1000,\n *   dpDiscountPercent: 10,\n *   dpDescription: 'Удобные кроссовки для бега',\n *   dpCategoryId: 2,\n *   dpCategory: { dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... },\n *   dpImages: [{ dpImagesId: 1, dpProductId: 1, dpImageTitle: 'Фото', ... }],\n *   dpProductAttributes: [{ dpAttributesId: 1, dpProductId: 1, dpCount: 5, ... }]\n * };\n */\nexport interface IDpProduct {\n    dpProductId: number;\n    dpPrice: number;\n    dpTitle: string;\n    dpDiscountPercent?: number;\n    dpDescription?: string;\n    dpCategoryId?: number;\n    dpPurchasePrice: number;\n    dpCategory?: IDpCategory;\n    dpImages?: IDpImage[];\n    dpProductAttributes?: IDpProductAttribute[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpProductAttribute.html":{"url":"interfaces/IDpProductAttribute.html","title":"interface - IDpProductAttribute","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpProductAttribute\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpProductAttribute.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для атрибута товара (Product Attribute).\nExample :const attr: IDpProductAttribute = {\n  dpAttributesId: 1,\n  dpProductId: 2,\n  dpCount: 10,\n  dpSize: 3,\n  dpProduct: { dpProductId: 2, dpPrice: 1500, ... },\n  dpSizeNavigation: { sizeId: 3, size: '42' }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpAttributesId\n                                        \n                                \n                                \n                                        \n                                            dpCount\n                                        \n                                \n                                \n                                        \n                                            dpProduct\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpSize\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpSizeNavigation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpAttributesId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpAttributesId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProduct\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProduct:         IDpProduct\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpProduct\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpSize\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpSizeNavigation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpSizeNavigation:         IDpSize\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpSize\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpSize } from \"./IDpSize\";\nimport { IDpProduct } from \"./IDpProduct\";\n\n/**\n * Интерфейс для атрибута товара (Product Attribute).\n *\n * @property {number} dpAttributesId - Уникальный идентификатор атрибута.\n * @property {number} dpProductId - Идентификатор товара.\n * @property {number} dpCount - Количество товара с этим атрибутом.\n * @property {number} [dpSize] - Идентификатор размера (опционально).\n * @property {IDpProduct} dpProduct - Объект товара.\n * @property {IDpSize} [dpSizeNavigation] - Объект размера (опционально).\n *\n * @example\n * const attr: IDpProductAttribute = {\n *   dpAttributesId: 1,\n *   dpProductId: 2,\n *   dpCount: 10,\n *   dpSize: 3,\n *   dpProduct: { dpProductId: 2, dpPrice: 1500, ... },\n *   dpSizeNavigation: { sizeId: 3, size: '42' }\n * };\n */\nexport interface IDpProductAttribute {\n    dpAttributesId: number;\n    dpProductId: number;\n    dpCount: number;\n    dpSize?: number;\n    dpProduct: IDpProduct;\n    dpSizeNavigation?: IDpSize;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpSize.html":{"url":"interfaces/IDpSize.html","title":"interface - IDpSize","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpSize\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpSize.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для размера товара (Size).\nExample :const size: IDpSize = {\n  sizeId: 1,\n  size: '42',\n  dpProductAttributes: [{ dpAttributesId: 1, ... }],\n  dpCategories: [{ dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpCategories\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpProductAttributes\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpCategories\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpCategories:         IDpCategory[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpCategory[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductAttributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductAttributes:     IDpProductAttribute[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     IDpProductAttribute[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpCategory } from \"./IDpCategory\";\nimport { IDpProductAttribute } from \"./IDpProductAttribute\";\n\n/**\n * Интерфейс для размера товара (Size).\n *\n * @property {number} sizeId - Уникальный идентификатор размера.\n * @property {string} size - Название или обозначение размера (например, \"42\", \"M\").\n * @property {IDpProductAttribute[]} [dpProductAttributes] - Список атрибутов товаров с этим размером (опционально).\n * @property {IDpCategory[]} [dpCategories] - Список категорий, связанных с этим размером (опционально).\n *\n * @example\n * const size: IDpSize = {\n *   sizeId: 1,\n *   size: '42',\n *   dpProductAttributes: [{ dpAttributesId: 1, ... }],\n *   dpCategories: [{ dpCategoryId: 2, dpCategoryTitle: 'Обувь', ... }]\n * };\n */\nexport interface IDpSize {\n    sizeId: number;\n    size: string;\n    dpProductAttributes?: IDpProductAttribute[];\n    dpCategories?: IDpCategory[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpUser.html":{"url":"interfaces/IDpUser.html","title":"interface - IDpUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpUser.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для пользователя (User).\nExample :const user: IDpUser = {\n  dpUserId: 1,\n  dpUsername: 'vasya',\n  dpPassword: '123456',\n  dpRegistrationDate: new Date(),\n```html\n  dpFullName: 'Василий Иванов',\n  dpPhoneNumber: '+79991234567',\n  dpOrders: [{ dpOrderId: 1, dpUserId: 1, ... }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            dpEmail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpFullName\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpOrders\n                                        \n                                \n                                \n                                        \n                                            dpPassword\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpPhoneNumber\n                                        \n                                \n                                \n                                        \n                                            dpRegistrationDate\n                                        \n                                \n                                \n                                        \n                                            dpUserId\n                                        \n                                \n                                \n                                        \n                                            dpUsername\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpEmail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpEmail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpFullName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpFullName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpOrders\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpOrders:         IDpOrder[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpOrder[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPassword\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPassword:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpPhoneNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpPhoneNumber:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpRegistrationDate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpRegistrationDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUsername\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUsername:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IDpOrder } from \"./IDpOrder\";\n\n/**\n * Интерфейс для пользователя (User).\n *\n * @property {number} dpUserId - Уникальный идентификатор пользователя.\n * @property {string} dpUsername - Имя пользователя (логин).\n * @property {string} dpPassword - Пароль пользователя.\n * @property {string} [dpEmail] - Email пользователя (опционально).\n * @property {string} [dpFullName] - Полное имя пользователя (опционально).\n * @property {Date} dpRegistrationDate - Дата регистрации пользователя.\n * @property {string} [dpPhoneNumber] - Телефон пользователя (опционально).\n * @property {IDpOrder[]} [dpOrders] - Список заказов пользователя (опционально).\n *\n * @example\n * const user: IDpUser = {\n *   dpUserId: 1,\n *   dpUsername: 'vasya',\n *   dpPassword: '123456',\n *   dpRegistrationDate: new Date(),\n *   dpEmail: 'vasya@example.com',\n *   dpFullName: 'Василий Иванов',\n *   dpPhoneNumber: '+79991234567',\n *   dpOrders: [{ dpOrderId: 1, dpUserId: 1, ... }]\n * };\n */\nexport interface IDpUser {\n    dpUserId: number;\n    dpUsername: string;\n    dpPassword: string;\n    dpEmail?: string;\n    dpFullName?: string;\n    dpRegistrationDate: Date;\n    dpPhoneNumber?: string;\n    dpOrders?: IDpOrder[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IDpUserProj.html":{"url":"interfaces/IDpUserProj.html","title":"interface - IDpUserProj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IDpUserProj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IDpUserProj.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс для пользователя проекта (User Project).\nExample :const userProj: IDpUserProj = {\n  dpUserProjId: 1,\n  login: 'vasya',\n  password: 'qwerty',\n```html\n  achievements: [{ achievementId: 1, title: 'Первый вход' }]\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            achievements\n                                        \n                                \n                                \n                                        \n                                            dpUserProjId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            login\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievements\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievements:         IAchievement[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAchievement[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        login\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        login:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IAchievement } from \"./IAchievement\";\n\n/**\n * Интерфейс для пользователя проекта (User Project).\n *\n * @property {number} dpUserProjId - Уникальный идентификатор пользователя проекта.\n * @property {string} [email] - Email пользователя (опционально).\n * @property {string} password - Пароль пользователя.\n * @property {string} login - Логин пользователя.\n * @property {IAchievement[]} [achievements] - Список достижений пользователя (опционально).\n *\n * @example\n * const userProj: IDpUserProj = {\n *   dpUserProjId: 1,\n *   login: 'vasya',\n *   password: 'qwerty',\n *   email: 'vasya@example.com',\n *   achievements: [{ achievementId: 1, title: 'Первый вход' }]\n * };\n */\nexport interface IDpUserProj {\n    dpUserProjId: number;\n    email?: string;\n    password: string;\n    login: string;\n    achievements?: IAchievement[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IRemoveFromCartRequest.html":{"url":"interfaces/IRemoveFromCartRequest.html","title":"interface - IRemoveFromCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IRemoveFromCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IRemoveFromCartRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс запроса на удаление товара из корзины.\nExample :const req: IRemoveFromCartRequest = {\n  productId: 5,\n  sizeId: 2\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IRemoveFromCartRequest {\n    productId: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUpdateCartRequest.html":{"url":"interfaces/IUpdateCartRequest.html","title":"interface - IUpdateCartRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateCartRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUpdateCartRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс запроса на обновление количества товара в корзине.\nExample :const req: IUpdateCartRequest = {\n  productId: 3,\n  quantity: 5,\n  sizeId: 1\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            productId\n                                        \n                                \n                                \n                                        \n                                            quantity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sizeId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        productId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        quantity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        quantity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sizeId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sizeId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUpdateCartRequest {\n    productId: number;\n    quantity: number;\n    sizeId?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUpdateDpImageRequest.html":{"url":"interfaces/IUpdateDpImageRequest.html","title":"interface - IUpdateDpImageRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUpdateDpImageRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUpdateDpImageRequest.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс запроса на обновление изображения товара.\nExample :const req: IUpdateDpImageRequest = {\n  dpProductId: 1,\n  dpImageTitle: 'Новое фото',\n  file: selectedFile\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            dpImageTitle\n                                        \n                                \n                                \n                                        \n                                            dpProductId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            file\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        dpImageTitle\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpImageTitle:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpProductId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpProductId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:     File\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     File\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IUpdateDpImageRequest {\n    dpProductId: number;\n    dpImageTitle: string;\n    file?: File;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserHasAchievement.html":{"url":"interfaces/IUserHasAchievement.html","title":"interface - IUserHasAchievement","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserHasAchievement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/interface/IUserHasAchievement.ts\n        \n\n\n            \n                Description\n            \n            \n                Интерфейс связи пользователя проекта с достижением (UserHasAchievement).\nExample :const userAchievement: IUserHasAchievement = {\n  dpUserProjId: 1,\n  achievementId: 2,\n  isObtained: true,\n  dpUserProj: { dpUserProjId: 1, login: 'vasya', password: '123', ... },\n  achievement: { achievementId: 2, title: 'Первый вход', ... }\n};\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            achievement\n                                        \n                                \n                                \n                                        \n                                            achievementId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            dpUserProj\n                                        \n                                \n                                \n                                        \n                                            dpUserProjId\n                                        \n                                \n                                \n                                        \n                                            isObtained\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        achievement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievement:         IAchievement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IAchievement\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        achievementId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        achievementId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProj\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProj:         IDpUserProj\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IDpUserProj\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dpUserProjId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dpUserProjId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isObtained\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isObtained:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IAchievement } from './IAchievement';\nimport { IDpUserProj } from \"./IDpUserProj\";\n\n/**\n * Интерфейс связи пользователя проекта с достижением (UserHasAchievement).\n *\n * @property {number} dpUserProjId - Внешний ключ на пользователя проекта (IDpUserProj).\n * @property {number} achievementId - Внешний ключ на достижение (IAchievement).\n * @property {boolean} isObtained - Флаг, указывающий, получено ли достижение.\n * @property {IDpUserProj} [dpUserProj] - Навигационное свойство к пользователю проекта (опционально).\n * @property {IAchievement} [achievement] - Навигационное свойство к достижению (опционально).\n *\n * @example\n * const userAchievement: IUserHasAchievement = {\n *   dpUserProjId: 1,\n *   achievementId: 2,\n *   isObtained: true,\n *   dpUserProj: { dpUserProjId: 1, login: 'vasya', password: '123', ... },\n *   achievement: { achievementId: 2, title: 'Первый вход', ... }\n * };\n */\nexport interface IUserHasAchievement {\n  dpUserProjId: number; // Внешний ключ на IDpUserProj\n  achievementId: number; // Внешний ключ на IAchievement\n  isObtained: boolean; // Флаг, указывающий, получено ли достижение\n  dpUserProj?: IDpUserProj; // Навигационное свойство к IDpUserProj\n  achievement?: IAchievement; // Навигационное свойство к IAchievement\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsService.html":{"url":"injectables/ProductsService.html","title":"injectable - ProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-products.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с товарами (Products).\nПозволяет получать, создавать, обновлять, удалять товары, а также добавлять товары в корзину через API.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToCart\n                            \n                            \n                                createProduct\n                            \n                            \n                                deleteProduct\n                            \n                            \n                                getAllProducts\n                            \n                            \n                                getProductById\n                            \n                            \n                                updateProduct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-products.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToCart\n                        \n                    \n                \n            \n            \n                \naddToCart(request: IAddToCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Добавляет товар в корзину.\nExample :// POST /api/Products/AddToCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 2,\n//   \"sizeId\": 3\n// }\nthis.productsService.addToCart({\n  productId: 1,\n  quantity: 2,\n  sizeId: 3\n}).subscribe(res => {\n  // res: { success: true, message: \"Product added to cart.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IAddToCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для добавления в корзину.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат операции.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createProduct\n                        \n                    \n                \n            \n            \n                \ncreateProduct(product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Создаёт новый товар.\nExample :// POST /api/Products\n// Body:\n// {\n//   \"dpProductId\": 0,\n//   \"dpProductTitle\": \"Кроссовки\",\n//   \"dpCategoryId\": 2,\n//   \"dpProductDescription\": \"Описание товара\",\n//   ...другие поля...\n// }\nthis.productsService.createProduct({\n  dpProductId: 0,\n  dpProductTitle: 'Кроссовки',\n  dpCategoryId: 2,\n  dpProductDescription: 'Описание товара'\n}).subscribe(newProduct => {\n  // newProduct: { ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Объект товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный товар.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteProduct\n                        \n                    \n                \n            \n            \n                \ndeleteProduct(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Удаляет товар по идентификатору.\nExample :// DELETE /api/Products/1\nthis.productsService.deleteProduct(1).subscribe(() => {\n  // Товар удалён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Получает список всех товаров.\nExample :// GET /api/Products\nthis.productsService.getAllProducts().subscribe(products => {\n  // products: [{ dpProductId, dpProductTitle, ... }]\n  console.log(products);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Список товаров.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getProductById\n                        \n                    \n                \n            \n            \n                \ngetProductById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Получает товар по его идентификатору.\nExample :// GET /api/Products/1\nthis.productsService.getProductById(1).subscribe(product => {\n  // product: { dpProductId, dpProductTitle, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Товар.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateProduct\n                        \n                    \n                \n            \n            \n                \nupdateProduct(id: number, product: IDpProduct)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-products.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Обновляет существующий товар.\nExample :// PUT /api/Products/1\n// Body:\n// {\n//   \"dpProductId\": 1,\n//   \"dpProductTitle\": \"Обновлённый товар\",\n//   \"dpCategoryId\": 2,\n//   ...другие поля...\n// }\nthis.productsService.updateProduct(1, {\n  dpProductId: 1,\n  dpProductTitle: 'Обновлённый товар',\n  dpCategoryId: 2\n}).subscribe(() => {\n  // Товар обновлён\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                        \n                                                product\n                                            \n                                                            IDpProduct\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Обновлённый объект товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/Products`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-products.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { IDpProduct } from '../interface/IDpProduct';\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\n\n/**\n * Сервис для работы с товарами (Products).\n *\n * @remarks\n * Позволяет получать, создавать, обновлять, удалять товары, а также добавлять товары в корзину через API.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  private baseUrl = `${window.location.origin}/api/Products`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает список всех товаров.\n   *\n   * @returns {Observable} Список товаров.\n   * @example\n   * // GET /api/Products\n   * this.productsService.getAllProducts().subscribe(products => {\n   *   // products: [{ dpProductId, dpProductTitle, ... }]\n   *   console.log(products);\n   * });\n   */\n  getAllProducts(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получает товар по его идентификатору.\n   *\n   * @param {number} id Идентификатор товара.\n   * @returns {Observable} Товар.\n   * @example\n   * // GET /api/Products/1\n   * this.productsService.getProductById(1).subscribe(product => {\n   *   // product: { dpProductId, dpProductTitle, ... }\n   * });\n   */\n  getProductById(id: number): Observable {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Создаёт новый товар.\n   *\n   * @param {IDpProduct} product Объект товара.\n   * @returns {Observable} Созданный товар.\n   * @example\n   * // POST /api/Products\n   * // Body:\n   * // {\n   * //   \"dpProductId\": 0,\n   * //   \"dpProductTitle\": \"Кроссовки\",\n   * //   \"dpCategoryId\": 2,\n   * //   \"dpProductDescription\": \"Описание товара\",\n   * //   ...другие поля...\n   * // }\n   * this.productsService.createProduct({\n   *   dpProductId: 0,\n   *   dpProductTitle: 'Кроссовки',\n   *   dpCategoryId: 2,\n   *   dpProductDescription: 'Описание товара'\n   * }).subscribe(newProduct => {\n   *   // newProduct: { ... }\n   * });\n   */\n  createProduct(product: IDpProduct): Observable {\n    return this.http.post(this.baseUrl, product);\n  }\n\n  /**\n   * Обновляет существующий товар.\n   *\n   * @param {number} id Идентификатор товара.\n   * @param {IDpProduct} product Обновлённый объект товара.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // PUT /api/Products/1\n   * // Body:\n   * // {\n   * //   \"dpProductId\": 1,\n   * //   \"dpProductTitle\": \"Обновлённый товар\",\n   * //   \"dpCategoryId\": 2,\n   * //   ...другие поля...\n   * // }\n   * this.productsService.updateProduct(1, {\n   *   dpProductId: 1,\n   *   dpProductTitle: 'Обновлённый товар',\n   *   dpCategoryId: 2\n   * }).subscribe(() => {\n   *   // Товар обновлён\n   * });\n   */\n  updateProduct(id: number, product: IDpProduct): Observable {\n    return this.http.put(`${this.baseUrl}/${id}`, product);\n  }\n\n  /**\n   * Удаляет товар по идентификатору.\n   *\n   * @param {number} id Идентификатор товара.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * // DELETE /api/Products/1\n   * this.productsService.deleteProduct(1).subscribe(() => {\n   *   // Товар удалён\n   * });\n   */\n  deleteProduct(id: number): Observable {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n\n  /**\n   * Добавляет товар в корзину.\n   *\n   * @param {IAddToCartRequest} request Данные для добавления в корзину.\n   * @returns {Observable} Результат операции.\n   * @example\n   * // POST /api/Products/AddToCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 2,\n   * //   \"sizeId\": 3\n   * // }\n   * this.productsService.addToCart({\n   *   productId: 1,\n   *   quantity: 2,\n   *   sizeId: 3\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Product added to cart.\" }\n   * });\n   */\n  addToCart(request: IAddToCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/AddToCart`, request);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShopCartService.html":{"url":"injectables/ShopCartService.html","title":"injectable - ShopCartService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShopCartService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/dp-shop-cart.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с корзиной покупок (Shop Cart).\nПозволяет получать содержимое корзины, добавлять и удалять товары, обновлять корзину, оформлять заказ и экспортировать заказ в Excel.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addToCart\n                            \n                            \n                                checkout\n                            \n                            \n                                exportToExcel\n                            \n                            \n                                getCart\n                            \n                            \n                                getCartQuantity\n                            \n                            \n                                removeFromCart\n                            \n                            \n                                updateCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/dp-shop-cart.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addToCart\n                        \n                    \n                \n            \n            \n                \naddToCart(request: IAddToCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Добавляет товар в корзину.\nExample :// POST /api/ShopCart/AddToCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 2,\n//   \"sizeId\": 2\n// }\nthis.shopCartService.addToCart({\n  productId: 1,\n  quantity: 2,\n  sizeId: 2\n}).subscribe(res => {\n  // res: { success: true, message: \"Product added to cart.\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IAddToCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для добавления товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат добавления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        checkout\n                        \n                    \n                \n            \n            \n                \ncheckout(cart: any[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Оформляет заказ по содержимому корзины.\nExample :// POST /api/ShopCart/Checkout\n// Body:\n// [\n//   { \"productId\": 1, \"quantity\": 2, \"sizeId\": 2 },\n//   { \"productId\": 3, \"quantity\": 1, \"sizeId\": 1 }\n// ]\nthis.shopCartService.checkout([\n  { productId: 1, quantity: 2, sizeId: 2 },\n  { productId: 3, quantity: 1, sizeId: 1 }\n]).subscribe(order => {\n  // order: { orderId: number, orderDetails: [...] }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cart\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Массив товаров для оформления заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Информация о заказе.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exportToExcel\n                        \n                    \n                \n            \n            \n                \nexportToExcel(orderId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:151\n                        \n                    \n\n\n            \n                \n                        Экспортирует заказ в Excel.\nExample :this.shopCartService.exportToExcel(123).subscribe(blob => {\n  const url = URL.createObjectURL(blob);\n  window.open(url);\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                orderId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор заказа.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Файл Excel.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCart\n                        \n                    \n                \n            \n            \n                \ngetCart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Получает текущее содержимое корзины.\nExample :// GET /api/ShopCart\nthis.shopCartService.getCart().subscribe(cart => {\n  // cart: { cartItems: [...], products: [...] }\n  console.log(cart);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Модель корзины.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCartQuantity\n                        \n                    \n                \n            \n            \n                \ngetCartQuantity(productId: number, sizeId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Получает текущее количество товара определённого размера в корзине.\nExample :// GET /api/ShopCart/quantity?productId=1&sizeId=2\nthis.shopCartService.getCartQuantity(1, 2).subscribe(q => {\n  // q: { currentQuantity: number }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор товара.\n\n                                            \n                                        \n                                        \n                                                sizeId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор размера.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Текущее количество.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeFromCart\n                        \n                    \n                \n            \n            \n                \nremoveFromCart(request: IRemoveFromCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Удаляет товар из корзины.\nExample :this.shopCartService.removeFromCart({ productId: 1, sizeId: 2 }).subscribe(() => ...);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IRemoveFromCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для удаления товара.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат удаления.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateCart\n                        \n                    \n                \n            \n            \n                \nupdateCart(request: IUpdateCartRequest)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/dp-shop-cart.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Обновляет содержимое корзины.\nExample :// POST /api/ShopCart/UpdateCart\n// Body:\n// {\n//   \"productId\": 1,\n//   \"quantity\": 3,\n//   \"sizeId\": 2\n// }\nthis.shopCartService.updateCart({\n  productId: 1,\n  quantity: 3,\n  sizeId: 2\n}).subscribe(res => {\n  // res: { success: true, message: \"Cart updated!\" }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            IUpdateCartRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Данные для обновления корзины.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обновления.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `${window.location.origin}/api/ShopCart`\n                    \n                \n                    \n                        \n                                Defined in src/app/services/dp-shop-cart.service.ts:20\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ICartViewModel } from '../interface/ICartViewModel';\nimport { IAddToCartRequest } from '../interface/IAddToCartRequest';\nimport { IUpdateCartRequest } from '../interface/IUpdateCartRequest';\nimport { IDpOrderDetail } from '../interface/IDpOrderDetail';\nimport { IRemoveFromCartRequest } from '../interface/IRemoveFromCartRequest';\n\n/**\n * Сервис для работы с корзиной покупок (Shop Cart).\n *\n * @remarks\n * Позволяет получать содержимое корзины, добавлять и удалять товары, обновлять корзину, оформлять заказ и экспортировать заказ в Excel.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopCartService {\n  private baseUrl = `${window.location.origin}/api/ShopCart`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Получает текущее содержимое корзины.\n   *\n   * @returns {Observable} Модель корзины.\n   * @example\n   * // GET /api/ShopCart\n   * this.shopCartService.getCart().subscribe(cart => {\n   *   // cart: { cartItems: [...], products: [...] }\n   *   console.log(cart);\n   * });\n   */\n  getCart(): Observable {\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Обновляет содержимое корзины.\n   *\n   * @param {IUpdateCartRequest} request Данные для обновления корзины.\n   * @returns {Observable} Результат обновления.\n   * @example\n   * // POST /api/ShopCart/UpdateCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 3,\n   * //   \"sizeId\": 2\n   * // }\n   * this.shopCartService.updateCart({\n   *   productId: 1,\n   *   quantity: 3,\n   *   sizeId: 2\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Cart updated!\" }\n   * });\n   */\n  updateCart(request: IUpdateCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/UpdateCart`, request);\n  }\n\n  /**\n   * Добавляет товар в корзину.\n   *\n   * @param {IAddToCartRequest} request Данные для добавления товара.\n   * @returns {Observable} Результат добавления.\n   * @example\n   * // POST /api/ShopCart/AddToCart\n   * // Body:\n   * // {\n   * //   \"productId\": 1,\n   * //   \"quantity\": 2,\n   * //   \"sizeId\": 2\n   * // }\n   * this.shopCartService.addToCart({\n   *   productId: 1,\n   *   quantity: 2,\n   *   sizeId: 2\n   * }).subscribe(res => {\n   *   // res: { success: true, message: \"Product added to cart.\" }\n   * });\n   */\n  addToCart(request: IAddToCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/AddToCart`, request);\n  }\n\n  /**\n   * Получает текущее количество товара определённого размера в корзине.\n   *\n   * @param {number} productId Идентификатор товара.\n   * @param {number} sizeId Идентификатор размера.\n   * @returns {Observable} Текущее количество.\n   * @example\n   * // GET /api/ShopCart/quantity?productId=1&sizeId=2\n   * this.shopCartService.getCartQuantity(1, 2).subscribe(q => {\n   *   // q: { currentQuantity: number }\n   * });\n   */\n  getCartQuantity(productId: number, sizeId: number): Observable {\n    return this.http.get(`${this.baseUrl}/quantity?productId=${productId}&sizeId=${sizeId}`);\n  }\n\n  /**\n   * Оформляет заказ по содержимому корзины.\n   *\n   * @param {any[]} cart Массив товаров для оформления заказа.\n   * @returns {Observable} Информация о заказе.\n   * @example\n   * // POST /api/ShopCart/Checkout\n   * // Body:\n   * // [\n   * //   { \"productId\": 1, \"quantity\": 2, \"sizeId\": 2 },\n   * //   { \"productId\": 3, \"quantity\": 1, \"sizeId\": 1 }\n   * // ]\n   * this.shopCartService.checkout([\n   *   { productId: 1, quantity: 2, sizeId: 2 },\n   *   { productId: 3, quantity: 1, sizeId: 1 }\n   * ]).subscribe(order => {\n   *   // order: { orderId: number, orderDetails: [...] }\n   * });\n   */\n  checkout(cart: any[]): Observable {\n    return this.http.post(`${this.baseUrl}/Checkout`, cart);\n  }\n\n  /**\n   * Удаляет товар из корзины.\n   *\n   * @param {IRemoveFromCartRequest} request Данные для удаления товара.\n   * @returns {Observable} Результат удаления.\n   * @example\n   * this.shopCartService.removeFromCart({ productId: 1, sizeId: 2 }).subscribe(() => ...);\n   */\n  removeFromCart(request: IRemoveFromCartRequest): Observable {\n    return this.http.post(`${this.baseUrl}/RemoveFromCart`, request);\n  }\n\n  /**\n   * Экспортирует заказ в Excel.\n   *\n   * @param {number} orderId Идентификатор заказа.\n   * @returns {Observable} Файл Excel.\n   * @example\n   * this.shopCartService.exportToExcel(123).subscribe(blob => {\n   *   const url = URL.createObjectURL(blob);\n   *   window.open(url);\n   * });\n   */\n  exportToExcel(orderId: number): Observable {\n    return this.http.post(`${this.baseUrl}/export?orderId=${orderId}`, {}, { responseType: 'blob' });\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserAchievementsService.html":{"url":"injectables/UserAchievementsService.html","title":"injectable - UserAchievementsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserAchievementsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/services/user-achievements.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Сервис для работы с тест-кейсами пользователя.\nПозволяет получать, создавать, разблокировать тест-кейсы, а также имитировать ошибки тест-кейсов для тестирования UI и логики.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                ALWAYS_FAIL_KEY\n                            \n                            \n                                    Private\n                                    Readonly\n                                baseUrl\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                checkUserAchievementExists\n                            \n                            \n                                createUserAchievement\n                            \n                            \n                                getAllUserAchievements\n                            \n                            \n                                getAlwaysFailMode\n                            \n                            \n                                getCompletedAchievementsByUsername\n                            \n                            \n                                    Private\n                                getFailedAchievementId\n                            \n                            \n                                getUserAchievement\n                            \n                            \n                                handleAchievement\n                            \n                            \n                                setAlwaysFailMode\n                            \n                            \n                                    Private\n                                simulateServerFailure\n                            \n                            \n                                unlockUserAchievement\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(http: HttpClient, configService: ConfigService, alertService: TuiAlertService)\n                    \n                \n                        \n                            \n                                Defined in src/app/services/user-achievements.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        alertService\n                                                  \n                                                        \n                                                                    TuiAlertService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        checkUserAchievementExists\n                        \n                    \n                \n            \n            \n                \ncheckUserAchievementExists(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Проверка существования тест-кейса у пользователя.\nExample :// GET /api/UserAchievements/Exists/1/14\nthis.userAchievementsService.checkUserAchievementExists(1, 14).subscribe(exists => {\n  // exists: true/false\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                true, если тест-кейс уже есть.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUserAchievement\n                        \n                    \n                \n            \n            \n                \ncreateUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Создание тест-кейса для пользователя.\nExample :// POST /api/UserAchievements/Create/1/14\nthis.userAchievementsService.createUserAchievement(1, 14).subscribe(ach => {\n  // ach: { dpUserProjId, achievementId, isObtained, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Созданный тест-кейс.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllUserAchievements\n                        \n                    \n                \n            \n            \n                \ngetAllUserAchievements()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Получение всех тест-кейсов пользователя.\nExample :// GET /api/UserAchievements\nthis.userAchievementsService.getAllUserAchievements().subscribe(list => {\n  // list: [{ dpUserProjId, achievementId, isObtained, ... }]\n  console.log(list);\n});\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Массив тест-кейсов пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAlwaysFailMode\n                        \n                    \n                \n            \n            \n                \ngetAlwaysFailMode()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Проверяет, включён ли режим имитации ошибок тест-кейсов.\nExample :if (this.userAchievementsService.getAlwaysFailMode()) { ... }\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true, если режим включён.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCompletedAchievementsByUsername\n                        \n                    \n                \n            \n            \n                \ngetCompletedAchievementsByUsername(username: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Получение завершённых тест-кейсов по имени пользователя.\nExample :// GET /api/UserAchievements/Completed/vasya\nthis.userAchievementsService.getCompletedAchievementsByUsername('vasya').subscribe(list => {\n  // list: [{ achievementId, title, ... }]\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Имя пользователя.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Массив завершённых тест-кейсов.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getFailedAchievementId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFailedAchievementId(successAchievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:288\n                        \n                    \n\n\n            \n                \n                        Получение ID отрицательного тест-кейса на основе положительного.\nExample :const failedId = this.userAchievementsService.getFailedAchievementId(14);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                successAchievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID успешного тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                ID соответствующего отрицательного тест-кейса.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserAchievement\n                        \n                    \n                \n            \n            \n                \ngetUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:80\n                        \n                    \n\n\n            \n                \n                        Получение конкретного тест-кейса пользователя.\nExample :// GET /api/UserAchievements/1/14\nthis.userAchievementsService.getUserAchievement(1, 14).subscribe(ach => {\n  // ach: { dpUserProjId, achievementId, isObtained, ... }\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Тест-кейс пользователя.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleAchievement\n                        \n                    \n                \n            \n            \n                \nhandleAchievement(userProjId: number, achievementId: number, successMessage: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Универсальный метод для обработки тест-кейса (создание, разблокировка, имитация ошибки).\nExample :this.userAchievementsService.handleAchievement(1, 14, 'Каталог успешно загружен!').subscribe();\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя проекта.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                        \n                                                successMessage\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Сообщение для успешного уведомления.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат обработки.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setAlwaysFailMode\n                        \n                    \n                \n            \n            \n                \nsetAlwaysFailMode(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Включает или выключает режим имитации ошибок тест-кейсов.\nExample :this.userAchievementsService.setAlwaysFailMode(true);\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    true — всегда имитировать ошибку, false — обычный режим.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        simulateServerFailure\n                        \n                    \n                \n            \n            \n                \n                        \n                    simulateServerFailure()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        unlockUserAchievement\n                        \n                    \n                \n            \n            \n                \nunlockUserAchievement(userProjId: number, achievementId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/services/user-achievements.service.ts:117\n                        \n                    \n\n\n            \n                \n                        Разблокировка тест-кейса для пользователя.\nExample :// PUT /api/UserAchievements/Unlock/1/14\nthis.userAchievementsService.unlockUserAchievement(1, 14).subscribe(() => {\n  // Тест-кейс разблокирован\n});\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userProjId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор пользователя.\n\n                                            \n                                        \n                                        \n                                                achievementId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Идентификатор тест-кейса.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Результат разблокировки.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        ALWAYS_FAIL_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'alwaysFailMode'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/user-achievements.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        baseUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '/api/UserAchievements'\n                    \n                \n                    \n                        \n                                Defined in src/app/services/user-achievements.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, Observable, of, switchMap, tap, throwError } from 'rxjs';\nimport { IAchievement } from '../interface/IAchievement';\nimport { IUserHasAchievement } from '../interface/IUserHasAchievement';\nimport { ConfigService } from './config.service';\nimport { TuiAlertService } from '@taiga-ui/core';\n\n/**\n * Сервис для работы с тест-кейсами пользователя.\n *\n * @remarks\n * Позволяет получать, создавать, разблокировать тест-кейсы, а также имитировать ошибки тест-кейсов для тестирования UI и логики.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAchievementsService {\n  private readonly baseUrl = '/api/UserAchievements'; // Прокси для API\n  private static readonly ALWAYS_FAIL_KEY = 'alwaysFailMode';\n\n  constructor(\n    private readonly http: HttpClient,\n    private readonly configService: ConfigService,\n    private readonly alertService: TuiAlertService\n  ) { }\n\n  /**\n   * Включает или выключает режим имитации ошибок тест-кейсов.\n   * @param {boolean} value true — всегда имитировать ошибку, false — обычный режим.\n   * @example\n   * this.userAchievementsService.setAlwaysFailMode(true);\n   */\n  setAlwaysFailMode(value: boolean) {\n    localStorage.setItem(UserAchievementsService.ALWAYS_FAIL_KEY, value ? '1' : '0');\n  }\n\n  /**\n   * Проверяет, включён ли режим имитации ошибок тест-кейсов.\n   * @returns {boolean} true, если режим включён.\n   * @example\n   * if (this.userAchievementsService.getAlwaysFailMode()) { ... }\n   */\n  getAlwaysFailMode(): boolean {\n    return localStorage.getItem(UserAchievementsService.ALWAYS_FAIL_KEY) === '1';\n  }\n\n  private simulateServerFailure(): boolean {\n    return this.getAlwaysFailMode();\n  }\n\n  /**\n   * Получение всех тест-кейсов пользователя.\n   * @returns {Observable} Массив тест-кейсов пользователя.\n   * @example\n   * // GET /api/UserAchievements\n   * this.userAchievementsService.getAllUserAchievements().subscribe(list => {\n   *   // list: [{ dpUserProjId, achievementId, isObtained, ... }]\n   *   console.log(list);\n   * });\n   */\n  getAllUserAchievements(): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(this.baseUrl);\n  }\n\n  /**\n   * Получение конкретного тест-кейса пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Тест-кейс пользователя.\n   * @example\n   * // GET /api/UserAchievements/1/14\n   * this.userAchievementsService.getUserAchievement(1, 14).subscribe(ach => {\n   *   // ach: { dpUserProjId, achievementId, isObtained, ... }\n   * });\n   */\n  getUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(`${this.baseUrl}/${userProjId}/${achievementId}`);\n  }\n\n  /**\n   * Создание тест-кейса для пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Созданный тест-кейс.\n   * @example\n   * // POST /api/UserAchievements/Create/1/14\n   * this.userAchievementsService.createUserAchievement(1, 14).subscribe(ach => {\n   *   // ach: { dpUserProjId, achievementId, isObtained, ... }\n   * });\n   */\n  createUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .post(`${this.baseUrl}/Create/${userProjId}/${achievementId}`, {});\n  }\n\n  /**\n   * Разблокировка тест-кейса для пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} Результат разблокировки.\n   * @example\n   * // PUT /api/UserAchievements/Unlock/1/14\n   * this.userAchievementsService.unlockUserAchievement(1, 14).subscribe(() => {\n   *   // Тест-кейс разблокирован\n   * });\n   */\n  unlockUserAchievement(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .put(`${this.baseUrl}/Unlock/${userProjId}/${achievementId}`, {});\n  }\n\n  /**\n   * Получение завершённых тест-кейсов по имени пользователя.\n   * @param {string} username Имя пользователя.\n   * @returns {Observable} Массив завершённых тест-кейсов.\n   * @example\n   * // GET /api/UserAchievements/Completed/vasya\n   * this.userAchievementsService.getCompletedAchievementsByUsername('vasya').subscribe(list => {\n   *   // list: [{ achievementId, title, ... }]\n   * });\n   */\n  getCompletedAchievementsByUsername(username: string): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http\n      .get(`${this.baseUrl}/Completed/${username}`);\n  }\n\n  /**\n   * Проверка существования тест-кейса у пользователя.\n   * @param {number} userProjId Идентификатор пользователя.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @returns {Observable} true, если тест-кейс уже есть.\n   * @example\n   * // GET /api/UserAchievements/Exists/1/14\n   * this.userAchievementsService.checkUserAchievementExists(1, 14).subscribe(exists => {\n   *   // exists: true/false\n   * });\n   */\n  checkUserAchievementExists(userProjId: number, achievementId: number): Observable {\n    if (this.simulateServerFailure()) {\n      return throwError(() => new Error('Имитация сбоя сервера'));\n    }\n    return this.http.get(`${this.baseUrl}/Exists/${userProjId}/${achievementId}`).pipe(\n      catchError(error => {\n        if (error.status === this.configService.httpStatusCodes.notFound) {\n          console.warn(`Тест-кейс ${achievementId} или пользователь ${userProjId} не найдены`);\n          return of(false);\n        }\n        console.error('Ошибка при проверке тест-кейса:', error);\n        return of(false);\n      })\n    );\n  }\n\n  /**\n   * Универсальный метод для обработки тест-кейса (создание, разблокировка, имитация ошибки).\n   * @param {number} userProjId Идентификатор пользователя проекта.\n   * @param {number} achievementId Идентификатор тест-кейса.\n   * @param {string} successMessage Сообщение для успешного уведомления.\n   * @returns {Observable} Результат обработки.\n   * @example\n   * this.userAchievementsService.handleAchievement(1, 14, 'Каталог успешно загружен!').subscribe();\n   */\n  handleAchievement(\n    userProjId: number,\n    achievementId: number,\n    successMessage: string\n  ): Observable {\n    if (userProjId  {\n          if (result === null) {\n            // Тест-кейс уже существует\n            // this.alertService\n            //   .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\n            //   .subscribe();\n            return of(void 0);\n          }\n          return this.unlockUserAchievement(userProjId, failedAchievementId);\n        }),\n        tap(() => {\n          this.alertService\n            .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\n              appearance: 'error'\n            })\n            .subscribe();\n        }),\n        catchError(error => {\n          console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, error);\n          return of(void 0);\n        })\n      );\n    }\n\n    // Нормальная обработка тест-кейса\n    return this.checkUserAchievementExists(userProjId, achievementId).pipe(\n      switchMap(exists => {\n        if (exists) {\n          console.log(`Тест-кейс ${achievementId} уже выполнен для userProjId ${userProjId}`);\n          // this.alertService\n          //   .open('Тест-кейс уже выполнен!', { appearance: 'info' })\n          //   .subscribe();\n          return of(void 0); // Ничего не делаем, если тест-кейс уже есть\n        }\n        return this.createUserAchievement(userProjId, achievementId).pipe(\n          switchMap(result => {\n            if (result === null) {\n              // Тест-кейс уже существует\n              this.alertService\n                .open('Тест-кейс успешно выполнен!', { appearance: 'success' })\n                .subscribe();\n              return of(void 0);\n            }\n            return this.unlockUserAchievement(userProjId, achievementId);\n          }),\n          tap(() => {\n            this.alertService.open(successMessage, { appearance: 'success' }).subscribe();\n          })\n        );\n      }),\n      catchError(error => {\n        console.error(`Ошибка при обработке тест-кейса ${achievementId} для userProjId ${userProjId}:`, error);\n        const failedAchievementId = this.getFailedAchievementId(achievementId);\n        // Регистрируем отрицательный тест-кейс при ошибке\n        return this.createUserAchievement(userProjId, failedAchievementId).pipe(\n          switchMap(result => {\n            if (result === null) {\n              // Ошибочный тест-кейс уже существует\n              // this.alertService\n              //   .open('Тест-кейс ошибки уже выполнен!', { appearance: 'info' })\n              //   .subscribe();\n              return of(void 0);\n            }\n            return this.unlockUserAchievement(userProjId, failedAchievementId);\n          }),\n          tap(() => {\n            this.alertService\n              .open(`Тест-кейс ошибки: ${successMessage.replace('выполнен', 'ошибка')}`, {\n                appearance: 'error'\n              })\n              .subscribe();\n          }),\n          catchError(err => {\n            console.error(`Ошибка при регистрации отрицательного тест-кейса ${failedAchievementId}:`, err);\n            return of(void 0);\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * Получение ID отрицательного тест-кейса на основе положительного.\n   * @param {number} successAchievementId ID успешного тест-кейса.\n   * @returns {number} ID соответствующего отрицательного тест-кейса.\n   * @example\n   * const failedId = this.userAchievementsService.getFailedAchievementId(14);\n   */\n  private getFailedAchievementId(successAchievementId: number): number {\n    const successToFailedMap: { [key: number]: number } = {\n      [this.configService.achievementIds.loginSuccess]: this.configService.achievementIds.loginFailed,\n      [this.configService.achievementIds.registerSuccess]: this.configService.achievementIds.registerFailed,\n      [this.configService.achievementIds.addToCartSuccess]: this.configService.achievementIds.addToCartFailed,\n      [this.configService.achievementIds.checkoutSuccess]: this.configService.achievementIds.checkoutFailed,\n      [this.configService.achievementIds.viewProductSuccess]: this.configService.achievementIds.viewProductFailed,\n      [this.configService.achievementIds.createProductSuccess]: this.configService.achievementIds.createProductFailed,\n      [this.configService.achievementIds.updateProfileSuccess]: this.configService.achievementIds.updateProfileFailed,\n      [this.configService.achievementIds.addImageSuccess]: this.configService.achievementIds.addImageFailed,\n      [this.configService.achievementIds.addCategorySuccess]: this.configService.achievementIds.addCategoryFailed,\n      [this.configService.achievementIds.switchToLightThemeSuccess]:\n        this.configService.achievementIds.switchToLightThemeFailed,\n      [this.configService.achievementIds.switchToDarkThemeSuccess]:\n        this.configService.achievementIds.switchToDarkThemeFailed,\n      [this.configService.achievementIds.removeFromCartSuccess]:\n        this.configService.achievementIds.removeFromCartFailed,\n      [this.configService.achievementIds.updateCartQuantitySuccess]:\n        this.configService.achievementIds.updateCartQuantityFailed,\n      [this.configService.achievementIds.loadProductsSuccess]: this.configService.achievementIds.loadProductsFailed,\n      [this.configService.achievementIds.loadProductInfoSuccess]:\n        this.configService.achievementIds.loadProductInfoFailed,\n      [this.configService.achievementIds.navigateToProductSuccess]:\n        this.configService.achievementIds.navigateToProductFailed,\n      [this.configService.achievementIds.toggleThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.resetThemeSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openProductDialogSuccess]:\n        this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openCategoryDialogSuccess]:\n        this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.openImageDialogSuccess]: this.configService.achievementIds.buttonNotWorking,\n      [this.configService.achievementIds.logoutProjSuccess]: this.configService.achievementIds.logoutProjFailed,\n      [this.configService.achievementIds.updateCategorySuccess]:\n        this.configService.achievementIds.updateCategoryFailed,\n      [this.configService.achievementIds.updateImageSuccess]: this.configService.achievementIds.updateImageFailed,\n      [this.configService.achievementIds.updateProductSuccess]: this.configService.achievementIds.updateProductFailed,\n    };\n\n    return successToFailedMap[successAchievementId] || this.configService.achievementIds.buttonNotWorking;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/data/page/about/about.component.ts\n            \n            component\n            AboutComponent\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/data/page/page-cart/page-cart.component.ts\n            \n            interface\n            CartItem\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/interface/IAchievement.ts\n            \n            interface\n            IAchievement\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/interface/IAddToCartRequest.ts\n            \n            interface\n            IAddToCartRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/ICartItem.ts\n            \n            interface\n            ICartItem\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/ICartViewModel.ts\n            \n            interface\n            ICartViewModel\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/interface/ICreateDpImageRequest.ts\n            \n            interface\n            ICreateDpImageRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/IDpCategory.ts\n            \n            interface\n            IDpCategory\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpImage.ts\n            \n            interface\n            IDpImage\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrder.ts\n            \n            interface\n            IDpOrder\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrderComposition.ts\n            \n            interface\n            IDpOrderComposition\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpOrderDetail.ts\n            \n            interface\n            IDpOrderDetail\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpProduct.ts\n            \n            interface\n            IDpProduct\n            \n                9 %\n                (1/11)\n            \n        \n        \n            \n                \n                src/app/interface/IDpProductAttribute.ts\n            \n            interface\n            IDpProductAttribute\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/interface/IDpSize.ts\n            \n            interface\n            IDpSize\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/interface/IDpUser.ts\n            \n            interface\n            IDpUser\n            \n                11 %\n                (1/9)\n            \n        \n        \n            \n                \n                src/app/interface/IDpUserProj.ts\n            \n            interface\n            IDpUserProj\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/interface/IRemoveFromCartRequest.ts\n            \n            interface\n            IRemoveFromCartRequest\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/interface/IUpdateCartRequest.ts\n            \n            interface\n            IUpdateCartRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/IUpdateDpImageRequest.ts\n            \n            interface\n            IUpdateDpImageRequest\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/interface/IUserHasAchievement.ts\n            \n            interface\n            IUserHasAchievement\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/services/achievements.service.ts\n            \n            injectable\n            AchievementsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/app/services/auth-proj.service.ts\n            \n            injectable\n            AuthProjService\n            \n                70 %\n                (7/10)\n            \n        \n        \n            \n                \n                src/app/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                66 %\n                (6/9)\n            \n        \n        \n            \n                \n                src/app/services/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/services/dp-categories.service.ts\n            \n            injectable\n            DpCategoriesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-images.service.ts\n            \n            injectable\n            DpImagesService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/services/dp-order-compositions.service.ts\n            \n            injectable\n            DpOrderCompositionsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-orders.service.ts\n            \n            injectable\n            DpOrdersService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-product-attributes.service.ts\n            \n            injectable\n            DpProductAttributesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-products.service.ts\n            \n            injectable\n            ProductsService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/app/services/dp-shop-cart.service.ts\n            \n            injectable\n            ShopCartService\n            \n                80 %\n                (8/10)\n            \n        \n        \n            \n                \n                src/app/services/dp-sizes.service.ts\n            \n            injectable\n            DpSizesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-user-projs.service.ts\n            \n            injectable\n            DpUserProjsService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/dp-users.service.ts\n            \n            injectable\n            DpUsersService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/app/services/user-achievements.service.ts\n            \n            injectable\n            UserAchievementsService\n            \n                73 %\n                (11/15)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/cdk : ^19.2.10\n        \n            @angular/common : ^19.2.0\n        \n            @angular/compiler : ^19.2.0\n        \n            @angular/core : ^19.2.0\n        \n            @angular/forms : ^19.2.0\n        \n            @angular/material : ^19.2.10\n        \n            @angular/platform-browser : ^19.2.0\n        \n            @angular/platform-browser-dynamic : ^19.2.0\n        \n            @angular/router : ^19.2.0\n        \n            @fortawesome/fontawesome-free : ^6.7.2\n        \n            @taiga-ui/addon-commerce : ^4.35.0\n        \n            @taiga-ui/addon-table : ^4.36.0\n        \n            @taiga-ui/cdk : ^4.34.0\n        \n            @taiga-ui/core : ^4.36.0\n        \n            @taiga-ui/event-plugins : ^4.0.2\n        \n            @taiga-ui/icons : ^4.34.0\n        \n            @taiga-ui/icons-fontawesome : ^4.37.0\n        \n            @taiga-ui/kit : ^4.34.0\n        \n            @taiga-ui/layout : ^4.35.0\n        \n            @taiga-ui/legacy : ^4.35.0\n        \n            ngx-cookie-service : ^19.1.2\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.3.0\n        \n            zone.js : ~0.15.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nSota6SiFront\nThis project was generated using Angular CLI version 19.2.8.\nDevelopment server\nTo start a local development server, run:\nExample :ng serveOnce the server is running, open your browser and navigate to http://localhost:4200/. The application will automatically reload whenever you modify any of the source files.\nCode scaffolding\nAngular CLI includes powerful code scaffolding tools. To generate a new component, run:\nExample :ng generate component component-nameFor a complete list of available schematics (such as components, directives, or pipes), run:\nExample :ng generate --helpBuilding\nTo build the project run:\nExample :ng buildThis will compile your project and store the build artifacts in the dist/ directory. By default, the production build optimizes your application for performance and speed.\nRunning unit tests\nTo execute unit tests with the Karma test runner, use the following command:\nExample :ng testRunning end-to-end tests\nFor end-to-end (e2e) testing, run:\nExample :ng e2eAngular CLI does not come with an end-to-end testing framework by default. You can choose one that suits your needs.\nAdditional Resources\nFor more information on using the Angular CLI, including detailed command references, visit the Angular CLI Overview and Command Reference page.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
